package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Caisse;
import couche_jpa.Centrebilletage;
import couche_jpa.Departement;
import couche_jpa.Examen;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Mopratiquee;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_jpa.Statistique;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 *
 * @author famille chijou
 */
public class VueEtatMatiereDoeuvrePratiqueTIetE extends javax.swing.JFrame {

    /**
     * Creates new form VueEtatMatiereDoeuvre
     */
    public VueEtatMatiereDoeuvrePratiqueTIetE() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jRadioButtonSerieE = new javax.swing.JRadioButton();
        jRadioButtonSerieTI = new javax.swing.JRadioButton();
        jPanelChoixExamen = new javax.swing.JPanel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixExamen = new javax.swing.JButton();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelExamen = new javax.swing.JLabel();
        jPanelGestionEtat = new javax.swing.JPanel();
        jButtonCreerEtats = new javax.swing.JButton();
        jButtonMettreAjourEtats = new javax.swing.JButton();
        jButtonVisualiserEtats = new javax.swing.JButton();
        jButtonSupprimerEtats = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jPanelChoixCentre = new javax.swing.JPanel();
        jLabelRegion = new javax.swing.JLabel();
        jComboBoxRegion = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixSouscentre = new javax.swing.JButton();
        jLabelDepartement = new javax.swing.JLabel();
        jComboBoxDepartement = new javax.swing.JComboBox<>();
        jLabelNomCentre = new javax.swing.JLabel();
        jComboBoxSouscentreprat = new javax.swing.JComboBox<>();
        jLabelArrondissement = new javax.swing.JLabel();
        jComboBoxSouscentre = new javax.swing.JComboBox<>();
        jPanelCout = new javax.swing.JPanel();
        jLabelCoutamortissement = new javax.swing.JLabel();
        jTextFieldCoutamortissement = new javax.swing.JTextField();
        jButtonCreerCout = new javax.swing.JButton();
        jButtonListerCout = new javax.swing.JButton();
        jLabelForfaitcentre = new javax.swing.JLabel();
        jLabelCoutposte = new javax.swing.JLabel();
        jTextFieldCoutposte = new javax.swing.JTextField();
        jButtonAnnulerCout = new javax.swing.JButton();
        jTextFieldForfaitcentre = new javax.swing.JTextField();
        jLabelCoutcandidat = new javax.swing.JLabel();
        jTextFieldCoutcandidat = new javax.swing.JTextField();
        jButtonSupprimerCout = new javax.swing.JButton();
        jTextFieldNbpostes = new javax.swing.JTextField();
        jLabelNbpostes = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT DOTATION MATIERE D'OEUVRE PRATIQUE SERIES E et TI");

        jRadioButtonSerieE.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jRadioButtonSerieE.setText("série E (PROB OU BACC)");
        jRadioButtonSerieE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonSerieEActionPerformed(evt);
            }
        });

        jRadioButtonSerieTI.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jRadioButtonSerieTI.setText("Série TI (PROB) ");
        jRadioButtonSerieTI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonSerieTIActionPerformed(evt);
            }
        });

        jPanelChoixExamen.setBackground(new java.awt.Color(102, 255, 153));
        jPanelChoixExamen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un groupe d'examens et une session", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixExamen.setText("Annuler");
        jButtonAnnulerChoixExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixExamenActionPerformed(evt);
            }
        });

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxNiveau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNiveauActionPerformed(evt);
            }
        });

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        javax.swing.GroupLayout jPanelChoixExamenLayout = new javax.swing.GroupLayout(jPanelChoixExamen);
        jPanelChoixExamen.setLayout(jPanelChoixExamenLayout);
        jPanelChoixExamenLayout.setHorizontalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(0, 10, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabelSession)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(jButtonAnnulerChoixExamen)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixExamenLayout.setVerticalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 42, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        jPanelGestionEtat.setBackground(new java.awt.Color(0, 255, 255));
        jPanelGestionEtat.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer l'état", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 102, 255))); // NOI18N

        jButtonCreerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEtats.setText("Créer");
        jButtonCreerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEtatsActionPerformed(evt);
            }
        });

        jButtonMettreAjourEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjourEtats.setText("Mettre à jour");
        jButtonMettreAjourEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourEtatsActionPerformed(evt);
            }
        });

        jButtonVisualiserEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserEtats.setText("Visualiser");
        jButtonVisualiserEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserEtatsActionPerformed(evt);
            }
        });

        jButtonSupprimerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEtats.setText("Supprimer");
        jButtonSupprimerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEtatsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelGestionEtatLayout = new javax.swing.GroupLayout(jPanelGestionEtat);
        jPanelGestionEtat.setLayout(jPanelGestionEtatLayout);
        jPanelGestionEtatLayout.setHorizontalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jButtonCreerEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonMettreAjourEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiserEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerEtats)
                .addContainerGap(57, Short.MAX_VALUE))
        );
        jPanelGestionEtatLayout.setVerticalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonMettreAjourEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCreerEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonSupprimerEtats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVisualiserEtats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jPanelChoixCentre.setBackground(new java.awt.Color(153, 255, 255));
        jPanelChoixCentre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un sous-centre d'examen et un sous-centre de pratique de la série E", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jLabelRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegion.setText("Région :");

        jComboBoxRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixSouscentre.setText("Annuler");
        jButtonAnnulerChoixSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixSouscentreActionPerformed(evt);
            }
        });

        jLabelDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartement.setText("Département :");

        jComboBoxDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementActionPerformed(evt);
            }
        });

        jLabelNomCentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNomCentre.setText("Sous-centre de pratique :");

        jComboBoxSouscentreprat.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSouscentreprat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSouscentrepratActionPerformed(evt);
            }
        });

        jLabelArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissement.setText("Sous-centre d'examen :");

        jComboBoxSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSouscentreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixCentreLayout = new javax.swing.GroupLayout(jPanelChoixCentre);
        jPanelChoixCentre.setLayout(jPanelChoixCentreLayout);
        jPanelChoixCentreLayout.setHorizontalGroup(
            jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelRegion)
                    .addComponent(jLabelDepartement)
                    .addComponent(jLabelNomCentre)
                    .addComponent(jLabelArrondissement))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBoxSouscentreprat, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxSouscentre, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                        .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                        .addComponent(jButtonAnnulerChoixSouscentre)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanelChoixCentreLayout.setVerticalGroup(
            jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jButtonAnnulerChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSouscentreprat, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNomCentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelCout.setBackground(new java.awt.Color(255, 204, 204));
        jPanelCout.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Paramètres de calcul par candidat de la série E", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabelCoutamortissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelCoutamortissement.setText("Coût amortissement :");

        jTextFieldCoutamortissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonCreerCout.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerCout.setText("Créer");
        jButtonCreerCout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerCoutActionPerformed(evt);
            }
        });

        jButtonListerCout.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonListerCout.setText("Lister");
        jButtonListerCout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerCoutActionPerformed(evt);
            }
        });

        jLabelForfaitcentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelForfaitcentre.setText("Forfait centre :");

        jLabelCoutposte.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelCoutposte.setText("Coût par poste :");

        jTextFieldCoutposte.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonAnnulerCout.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerCout.setText("Annuler");
        jButtonAnnulerCout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerCoutActionPerformed(evt);
            }
        });

        jTextFieldForfaitcentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelCoutcandidat.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelCoutcandidat.setText("Coût par candidat :");

        jTextFieldCoutcandidat.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonSupprimerCout.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerCout.setText("Supprimer");
        jButtonSupprimerCout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerCoutActionPerformed(evt);
            }
        });

        jTextFieldNbpostes.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelNbpostes.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbpostes.setText("Nbre de postes :");

        javax.swing.GroupLayout jPanelCoutLayout = new javax.swing.GroupLayout(jPanelCout);
        jPanelCout.setLayout(jPanelCoutLayout);
        jPanelCoutLayout.setHorizontalGroup(
            jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCoutLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonCreerCout)
                .addGap(18, 18, 18)
                .addComponent(jButtonListerCout)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerCout)
                .addGap(18, 18, 18)
                .addComponent(jButtonAnnulerCout)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanelCoutLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabelCoutcandidat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCoutcandidat, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(jLabelCoutposte)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCoutposte, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(jLabelNbpostes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldNbpostes, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jLabelForfaitcentre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldForfaitcentre, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(jLabelCoutamortissement)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCoutamortissement, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 13, Short.MAX_VALUE))
        );
        jPanelCoutLayout.setVerticalGroup(
            jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCoutLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldCoutcandidat, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldForfaitcentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelForfaitcentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelCoutamortissement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldCoutamortissement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelCoutcandidat, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelCoutposte, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldCoutposte, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelNbpostes, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldNbpostes, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonListerCout, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSupprimerCout, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCreerCout, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerCout, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(402, 402, 402)
                        .addComponent(jRadioButtonSerieE)
                        .addGap(128, 128, 128)
                        .addComponent(jRadioButtonSerieTI))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(345, 345, 345)
                        .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(jButtonFermer))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanelChoixCentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jPanelCout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonSerieE)
                    .addComponent(jRadioButtonSerieTI))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelChoixCentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelCout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButtonSerieEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonSerieEActionPerformed
        jPanelChoixCentre.setEnabled(true);
        jComboBoxRegion.setEnabled(true);
        jComboBoxDepartement.setEnabled(true);
        jComboBoxSouscentre.setEnabled(true);
        jComboBoxSouscentreprat.setEnabled(true);
        jButtonAnnulerChoixSouscentre.setEnabled(true);
        jPanelCout.setEnabled(true);
        jTextFieldCoutcandidat.setEnabled(true);
        jTextFieldCoutposte.setEnabled(true);
        jTextFieldCoutamortissement.setEnabled(true);
        jTextFieldNbpostes.setEnabled(true);
        jTextFieldForfaitcentre.setEnabled(true);
        jButtonCreerCout.setEnabled(true);
        jButtonListerCout.setEnabled(true);
        jButtonSupprimerCout.setEnabled(true);
        jButtonAnnulerCout.setEnabled(true);
    }//GEN-LAST:event_jRadioButtonSerieEActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonAnnulerChoixExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixExamenActionPerformed
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        jComboBoxSession.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixExamenActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jButtonCreerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEtatsActionPerformed
        infoSaisies();
        if (jRadioButtonSerieTI.isSelected()) {
            Map<Souscentre, Integer> souscentreEffectifTIMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats de la série TI            
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION POUR PREPARATION DE LA MATIÈRE D'OEUVRE DE PRATIQUE TI AU PROB/ESG");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (!caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états de dotation de matière d'oeuvre TI existent déjà pour ce groupe d'examens !");
                } else {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(groupedexamensEnstring)) {
                            examenSelected = e;
                            break;
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    //remplissage de souscentreEffectifTIMap
                    List<Statistique> lesStats = metier.findAllStatistiquesTID1ExamenDans1Session(examenSelected.getSigle(), anneeSelected);
                    for (Statistique s : lesStats) {
                        souscentreEffectifTIMap.put(s.getSouscentre(), s.getNombre());
                    }

                    boolean testSicreer = false;
                    if (!souscentreEffectifTIMap.isEmpty()) {
                        try {
                            for (Souscentre souscentre : souscentreEffectifTIMap.keySet()) {
                                determinerCoutTI(souscentre, souscentreEffectifTIMap);
                                metier.creerCaisse(new Caisse(totalTI, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                testSicreer = true;
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testSicreer) {
                            JOptionPane.showMessageDialog(this, "Etats de dotation de matière d'oeuvre TI créés avec succès pour ce groupe d'examens !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun candidat de la série TI au probatoire ESG trouvé dans la base de données !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
            }
        }

        if (jRadioButtonSerieE.isSelected()) {
            Map<Souscentre, Mopratiquee> souscentreMopratiqueeMap = new HashMap<>();//contient chaque sous-centre et son Mopratiquee
            Map<Souscentre, Integer> souscentreEffectifEMap = new HashMap<>();//contient chaque sous-centre et son effectif de candidat E
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION POUR PREPARATION DE LA MATIÈRE D'OEUVRE DE PRATIQUE 1");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (!caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états de dotation de matière d'oeuvre pratique E existent déjà pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    for (Examen e : examensSelected) {
                        List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                        for (Statistique s : lesStats) {
                            if (s.getOption().getSigle().equals("E")) {
                                souscentreEffectifEMap.put(s.getSouscentre(), s.getNombre());
                            }
                        }
                    }

                    lesMopratiquee = metier.findAllMopratiqueeD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);

                    if (lesMopratiquee.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Aucune donnée de matière d'oeuvre pratique E trouvée dans la base des données !");
                    } else {
                        //remplissage de souscentre souscentreMopratiqueeMap
                        for (Souscentre souscentre : souscentreEffectifEMap.keySet()) {//on ne gère pas les éléments de souscentreMopratiqueeMap dont le sous-centre n'a pas de statistique 
                            for (Mopratiquee mopratiquee : lesMopratiquee) {
                                if (mopratiquee.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                    souscentreMopratiqueeMap.put(souscentre, mopratiquee);
                                }
                            }
                        }
                        boolean testsicreer = false;
                        try {
                            for (Souscentre souscentre : souscentreMopratiqueeMap.keySet()) {
                                determinerCoutSerieE(souscentre, souscentreMopratiqueeMap, souscentreEffectifEMap);
                                int totalArrondi = (int) Math.ceil((double) totalSerieE / (double) 1000) * 1000;
                                metier.creerCaisse(new Caisse(totalArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                testsicreer = true;
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testsicreer) {
                            JOptionPane.showMessageDialog(this, "Etats de dotation de matière d'oeuvre pratique E créés avec succès pour ce groupe d'examens !");
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
            }
            examensSelected.clear();//on vide
            souscentreMopratiqueeMap.clear();
            souscentreEffectifEMap.clear();
        }
    }//GEN-LAST:event_jButtonCreerEtatsActionPerformed

    private void jButtonMettreAjourEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourEtatsActionPerformed
        infoSaisies();
        if (jRadioButtonSerieTI.isSelected()) {
            Map<Souscentre, Integer> souscentreEffectifTIMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats de la série TI 
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de dotation de matière d'oeuvre TI pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION POUR PREPARATION DE LA MATIÈRE D'OEUVRE DE PRATIQUE TI AU PROB/ESG");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état de dotation de matière d'oeuvre TI n'existe pour ce groupe d'examens !");
                    } else {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(groupedexamensEnstring)) {
                                examenSelected = e;
                                break;
                            }
                        }
                        //on conserve quelques info de ces anciennes caisses
                        Groupe groupe = caisses.get(0).getGroupe();
                        sessionSelected = caisses.get(0).getSession();
                        //on supprime toutes les anciennes caisses du groupe d'examens ainsi que les intervsec
                        for (Caisse c : caisses) {
                            metier.supprimerCaisse(c);
                        }

                        //remplissage de souscentreEffectifTIMap
                        List<Statistique> lesStats = metier.findAllStatistiquesTID1ExamenDans1Session(examenSelected.getSigle(), anneeSelected);
                        for (Statistique s : lesStats) {
                            souscentreEffectifTIMap.put(s.getSouscentre(), s.getNombre());
                        }

                        if (!souscentreEffectifTIMap.isEmpty()) {
                            boolean testSimodifier = false;
                            try {
                                for (Souscentre souscentre : souscentreEffectifTIMap.keySet()) {
                                    determinerCoutTI(souscentre, souscentreEffectifTIMap);
                                    metier.creerCaisse(new Caisse(totalTI, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                    testSimodifier = true;
                                }
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                            if (testSimodifier) {
                                JOptionPane.showMessageDialog(this, "Etats de dotation de matière d'oeuvre TI modifiés avec succès pour ce groupe d'examens !");
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Aucun candidat de la série TI au probatoire ESG trouvé dans la base de données !");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
                }
            }
        }

        if (jRadioButtonSerieE.isSelected()) {
            Map<Souscentre, Mopratiquee> souscentreMopratiqueeMap = new HashMap<>();//contient chaque sous-centre et son Mopratiquee
            Map<Souscentre, Integer> souscentreEffectifEMap = new HashMap<>();//contient chaque sous-centre et son effectif de candidats de la série E
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de dotation de matière d'oeuvre pratique E pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION POUR PREPARATION DE LA MATIÈRE D'OEUVRE DE PRATIQUE 1");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état de dotation de matière d'oeuvre pratique E n'existe pour ce groupe d'examens !");
                    } else {
                        //on conserve quelques info de ces anciennes caisses
                        Groupe groupe = caisses.get(0).getGroupe();
                        sessionSelected = caisses.get(0).getSession();
                        //on supprime toutes les anciennes caisses du groupe d'examens
                        for (Caisse c : caisses) {
                            metier.supprimerCaisse(c);
                        }
                        //on va les recréer
                        String separateur = ", ";
                        examensList = groupedexamensEnstring.split(separateur);
                        for (int i = 0; i < examensList.length; i++) {
                            for (Examen e : examens) {
                                if (e.getSigle().equals(examensList[i])) {
                                    examensSelected.add(e);
                                    break;
                                }
                            }
                        }
                        for (Examen e : examensSelected) {
                            List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                            for (Statistique s : lesStats) {
                                if (s.getOption().getSigle().equals("E")) {
                                    souscentreEffectifEMap.put(s.getSouscentre(), s.getNombre());
                                }
                            }
                        }

                        lesMopratiquee = metier.findAllMopratiqueeD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);

                        if (lesMopratiquee.isEmpty()) {
                            JOptionPane.showMessageDialog(this, "Aucune donnée de matière d'oeuvre pratique E trouvée dans la base des données !");
                        } else {
                            //remplissage de souscentre souscentreMopratiqueeMap
                            for (Souscentre souscentre : souscentreEffectifEMap.keySet()) {//on ne gère pas les éléments de souscentreMopratiqueeMap dont le sous-centre n'a pas de statistique 
                                for (Mopratiquee mopratiquee : lesMopratiquee) {
                                    if (mopratiquee.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                        souscentreMopratiqueeMap.put(souscentre, mopratiquee);
                                    }
                                }
                            }
                            boolean testsicreer = false;
                            try {
                                for (Souscentre souscentre : souscentreMopratiqueeMap.keySet()) {
                                    determinerCoutSerieE(souscentre, souscentreMopratiqueeMap, souscentreEffectifEMap);
                                    int totalArrondi = (int) Math.ceil((double) totalSerieE / (double) 1000) * 1000;
                                    metier.creerCaisse(new Caisse(totalArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                    testsicreer = true;
                                }
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                            if (testsicreer) {
                                JOptionPane.showMessageDialog(this, "Etats de dotation de matière d'oeuvre pratique E mis à jour avec succès pour ce groupe d'examens !");
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
                }
                examensSelected.clear();//on vide
                souscentreMopratiqueeMap.clear();
                souscentreEffectifEMap.clear();
            }
        }
    }//GEN-LAST:event_jButtonMettreAjourEtatsActionPerformed

    private void jButtonVisualiserEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserEtatsActionPerformed
        infoSaisies();
        if (jRadioButtonSerieTI.isSelected()) {
            Map<Souscentre, Integer> souscentreEffectifTIMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats de la série TI 
            Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
            ArrayList<String> typesBruts = new ArrayList<>();
            ArrayList<String> typesAconsiderer = new ArrayList<>();
            ArrayList<String> niveauxAconsiderer = new ArrayList<>();
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION POUR PREPARATION DE LA MATIÈRE D'OEUVRE DE PRATIQUE TI AU PROB/ESG");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);

                boolean continuer = false;
                for (Caisse c : caisses) {
                    if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                        continuer = true;
                        break;
                    }
                }
                if (!continuer) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états de dotation de matière d'oeuvre TI n'ont pas encore été créés pour ce groupe d'examens !");
                } else {

                    for (Examen e : examens) {
                        if (e.getSigle().equals(groupedexamensEnstring)) {
                            examenSelected = e;
                            break;
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    //recherche des types des examens à utiliser
                    typesBruts.add("ESG");

                    //types A considerer 
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("TOUT");

                    //recherche des niveaux des examens à utiliser                   
                    niveauxAconsiderer.add(niveauSelected);
                    niveauxAconsiderer.add("TOUT");

                    //recherche des centres de billetage
                    for (String niveau : niveauxAconsiderer) {
                        for (String type : typesAconsiderer) {
                            List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                            for (Centrebilletage centrebilletage : desCentrebilletages) {
                                ArrayList<Souscentre> souscentresList = new ArrayList<>();
                                if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                    List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                    for (Secteurcouv sect : secteurs) {
                                        if (!souscentresList.contains(sect.getSouscentre())) {
                                            souscentresList.add(sect.getSouscentre());
                                        }
                                    }
                                    centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                                }
                            }
                        }
                    }

                    //remplissage de souscentreEffectifTIMap
                    List<Statistique> lesStats = metier.findAllStatistiquesTID1ExamenDans1Session(examenSelected.getSigle(), anneeSelected);
                    for (Statistique s : lesStats) {
                        souscentreEffectifTIMap.put(s.getSouscentre(), s.getNombre());
                    }

                    if (!souscentreEffectifTIMap.isEmpty()) {
                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            for (Region region : regions) {
                                for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                    if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                        int num = 1;
                                        int totalMontant = 0;
                                        ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                        for (int i = 0; i < souscentresList.size(); i++) {
                                            Souscentre souscentre = souscentresList.get(i);
                                            if (souscentreEffectifTIMap.containsKey(souscentre)) {
                                                determinerCoutTI(souscentre, souscentreEffectifTIMap);

                                                Map<String, Object> row = new HashMap<>();
                                                row.put("examen", groupedexamensEnstring + " série TI");
                                                row.put("session", anneeSelected);                                              
                                                row.put("region", region.getNomreg());
                                                row.put("reference", "");
                                                row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                row.put("num", num++);
                                                row.put("souscentre", souscentre.getNomsouscent());
                                                row.put("effectif", effectif);
                                                row.put("nbclef", nbclef);
                                                row.put("nbencre", nbencre);
                                                row.put("nbrame", nbrame);
                                                row.put("baspage", "OBC/AR/"+centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                row.put("total", totalTI);
                                                totalMontant += totalTI;
                                                row.put("totalAvanceEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                datasource.add(row);
                                            }
                                        }
                                    }
                                }
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatMatiereDoeuvreTIReport.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun candidat de la série TI au probatoire ESG trouvé dans la base de données !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
            }
        }

        if (jRadioButtonSerieE.isSelected()) {
            Map<Souscentre, Mopratiquee> souscentreMopratiqueeMap = new HashMap<>();//contient chaque sous-centre et son Mopratiquee
            Map<Souscentre, Integer> souscentreEffectifEMap = new HashMap<>();//contient chaque sous-centre et son effectif de candidats E
            Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
            ArrayList<String> typesBruts = new ArrayList<>();
            ArrayList<String> typesAconsiderer = new ArrayList<>();
            ArrayList<String> niveauxAconsiderer = new ArrayList<>();
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION POUR PREPARATION DE LA MATIÈRE D'OEUVRE DE PRATIQUE 1");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);

                boolean poursuivre = false;
                for (Caisse c : caisses) {
                    if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                        poursuivre = true;
                        break;
                    }
                }
                if (!poursuivre) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états de dotation de matière d'oeuvre pratique E n'ont pas encore été créés pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }
                    for (Examen e : examensSelected) {
                        List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                        for (Statistique s : lesStats) {
                            if (s.getOption().getSigle().equals("E")) {
                                souscentreEffectifEMap.put(s.getSouscentre(), s.getNombre());
                            }
                        }
                    }

                    lesMopratiquee = metier.findAllMopratiqueeD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);

                    //recherche des types des examens à utiliser
                    for (Examen examen : examensSelected) {
                        System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                        if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                            typesBruts.add("ESG");
                        }
                        if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                            typesBruts.add("ESTP");
                        }
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 2) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    //recherche des niveaux des examens à utiliser
                    if (!niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add(niveauSelected);
                        niveauxAconsiderer.add("TOUT");
                    }
                    if (niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add("PROB");
                        niveauxAconsiderer.add("BACC");
                        niveauxAconsiderer.add("TOUT");
                    }

                    //recherche des centres de billetage
                    for (String niveau : niveauxAconsiderer) {
                        for (String type : typesAconsiderer) {
                            List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                            for (Centrebilletage centrebilletage : desCentrebilletages) {
                                ArrayList<Souscentre> souscentresList = new ArrayList<>();
                                if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                    List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                    for (Secteurcouv sect : secteurs) {
                                        if (!souscentresList.contains(sect.getSouscentre())) {
                                            souscentresList.add(sect.getSouscentre());
                                        }
                                    }
                                    centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                                }
                            }
                        }
                    }

                    if (lesMopratiquee.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Aucune donnée de matière d'oeuvre pratique E trouvée dans la base des données !");
                    } else {
                        //remplissage de souscentre souscentreMopratiqueeMap
                        for (Souscentre souscentre : souscentreEffectifEMap.keySet()) {//on ne gère pas les éléments de souscentreMopratiqueeMap dont le sous-centre n'a pas de statistique 
                            for (Mopratiquee mopratiquee : lesMopratiquee) {
                                if (mopratiquee.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                    souscentreMopratiqueeMap.put(souscentre, mopratiquee);
                                }
                            }
                        }

                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            for (Region region : regions) {
                                for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                    int totalMontant = 0;
                                    if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                        ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                        int num = 1;
                                        for (int i = 0; i < souscentresList.size(); i++) {
                                            Souscentre souscentre = souscentresList.get(i);
                                            if (souscentreMopratiqueeMap.containsKey(souscentre)) {
                                                
                                                determinerCoutSerieE(souscentre, souscentreMopratiqueeMap, souscentreEffectifEMap);

                                                Map<String, Object> row = new HashMap<>();
                                                row.put("examen", groupedexamensEnstring + " série E");
                                                row.put("session", anneeSelected);
                                                row.put("region", region.getNomreg());
                                                row.put("reference", "");
                                                row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                row.put("num", num++);
                                                row.put("souscentre", souscentre.getNomsouscent());
                                                row.put("souscentreprat", souscentreMopratiqueeMap.get(souscentre).getSouscentreprat().getNomsouscent());
                                                row.put("effectif", effectif);
                                                row.put("dotation", matoeuvre);
                                                row.put("amortis", amortis);
                                                row.put("forfait", forfait);
                                                row.put("baspage", "OBC/AR/"+centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                int totalArrondi = (int) Math.ceil((double) totalSerieE / (double) 1000) * 1000;
                                                row.put("total", totalArrondi);
                                                totalMontant += totalArrondi;//jasperreport prendra la dernière valeur de totalMontant
                                                row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                datasource.add(row);

                                            }
                                        }
                                    }
                                }
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatMatiereDoeuvrePratiqueSerieEReport.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }

                        examensSelected.clear();//on vide
                        centrebilletageSouscentresMap.clear();
                        souscentreEffectifEMap.clear();
                        souscentreMopratiqueeMap.clear();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
            }
        }
    }//GEN-LAST:event_jButtonVisualiserEtatsActionPerformed

    private void jButtonSupprimerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEtatsActionPerformed
        infoSaisies();
        if (jRadioButtonSerieTI.isSelected()) {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de dotation de matière d'oeuvre TI  pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION POUR PREPARATION DE LA MATIÈRE D'OEUVRE DE PRATIQUE TI AU PROB/ESG");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état de dotation de matière d'oeuvre TI n'existe pour ce groupe d'examens !");
                    } else {
                        try {
                            for (Caisse caisse : caisses) {
                                metier.supprimerCaisse(caisse);
                            }
                            JOptionPane.showMessageDialog(this, "Etats de dotation de matière d'oeuvre TI supprimés avec succès pour ce groupe d'examens !");
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    }
                }
            }
        }

        if (jRadioButtonSerieE.isSelected()) {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de dotation de matière d'oeuvre pratique E pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION POUR PREPARATION DE LA MATIÈRE D'OEUVRE DE PRATIQUE 1");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état de dotation de matière d'oeuvre pratique E n'existe pour ce groupe d'examens !");
                    } else {
                        boolean testsisupprimer = false;
                        try {
                            for (Caisse caisse : caisses) {
                                metier.supprimerCaisse(caisse);
                            }
                            testsisupprimer = true;
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testsisupprimer) {
                            JOptionPane.showMessageDialog(this, "Etats de dotation de matière d'oeuvre pratique E supprimés avec succès pour ce groupe d'examens !");
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerEtatsActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jComboBoxNiveauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNiveauActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (jRadioButtonSerieTI.isSelected() && niveauSelected.equals("BACC")) {
            JOptionPane.showMessageDialog(this, "Veuillez recommencer svp. Il n'y a pas de matière d'oeuvre au BACC série TI !");
            jComboBoxNiveau.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jComboBoxNiveauActionPerformed

    private void jComboBoxRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionActionPerformed
        remplirDepartementCombobox();
    }//GEN-LAST:event_jComboBoxRegionActionPerformed

    private void jButtonAnnulerChoixSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixSouscentreActionPerformed
        jComboBoxRegion.setSelectedIndex(0);
        jComboBoxDepartement.setSelectedIndex(0);
        jComboBoxSouscentre.setSelectedIndex(0);
        jComboBoxSouscentreprat.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixSouscentreActionPerformed

    private void jComboBoxDepartementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementActionPerformed
        remplirSouscentrepratsCombobox();
        remplirSouscentresCombobox();
    }//GEN-LAST:event_jComboBoxDepartementActionPerformed

    private void jComboBoxSouscentrepratActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSouscentrepratActionPerformed
        //
    }//GEN-LAST:event_jComboBoxSouscentrepratActionPerformed

    private void jComboBoxSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSouscentreActionPerformed
        //remplirSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxSouscentreActionPerformed

    private void jButtonCreerCoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerCoutActionPerformed
        infoSaisies();
        if (jRadioButtonSerieE.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nomSouscentrepratSelected.equals("---") || coutcandidatString.equals("") || coutposteString.equals("") || forfaitString.equals("") || coutamortString.equals("")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre d'examen, un sous-centre de pratique, donner le coût par candidat, le coût par poste, le forfait par sous-centre et le coût d'amortissement !");
            } else {
                validerCoutcandidat(coutcandidatString);
                validerCoutposte(coutposteString);
                validerNbpostes(nbpostesString);
                validerForfait(forfaitString);
                validerCoutamort(coutamortString);
                if (!continuerCoutcandidat || !continuerCoutposte || !continuerNbpostes || !continuerForfait || !continuerCoutamort) {
                    JOptionPane.showMessageDialog(this, "Recommencez svp. Au moins un des nombres saisis est incorrect !");
                } else {
                    Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                    anneeSelected = Integer.parseInt(anneeString);
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }
                    for (Souscentre souscentre : souscentres) {
                        if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                            souscentreSelected = souscentre;
                            break;
                        }
                    }

                    for (Souscentre souscentre : souscentres) {
                        if (souscentre.getNomsouscent().equals(nomSouscentrepratSelected)) {
                            souscentrepratSelected = souscentre;
                            break;
                        }
                    }

                    try {
                        metier.creerMopratiquee(new Mopratiquee(souscentreSelected, souscentrepratSelected, groupe, sessionSelected, coutcandidatSaisi, coutposteSaisi, nbpostesSaisi, forfaitSaisi, coutamortSaisi));
                        JOptionPane.showMessageDialog(this, "Coûts par candidat, par poste, forfait sous-centre et coût d'amortissement enregistrés avec succès !");
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de d'enregistrer les coûts par candidat, par poste, coût d'amortissement et le forfait du sous-centre [" + nomSouscentreSelected + "]" + "\n raison:" + ex.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonCreerCoutActionPerformed

    private void jButtonListerCoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerCoutActionPerformed
        infoSaisies();
        if (jRadioButtonSerieE.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens et une session !");
            } else {
                anneeSelected = Integer.parseInt(anneeString);
                lesMopratiquee = metier.findAllMopratiqueeD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);

                if (!lesMopratiquee.isEmpty()) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                        for (Region region : regions) {
                            int i = 1;
                            for (Mopratiquee mopratiquee : lesMopratiquee) {
                                if (mopratiquee.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                                    Map<String, Object> row = new HashMap<>();
                                    row.put("session", anneeSelected);
                                    row.put("examen", groupedexamensEnstring + " série E");
                                    row.put("region", region.getNomreg());
                                    row.put("num", i++);
                                    row.put("souscentre", mopratiquee.getSouscentre().getNomsouscent());
                                    row.put("souscentreprat", mopratiquee.getSouscentreprat().getNomsouscent());
                                    row.put("coutcandidat", mopratiquee.getCoutcand());
                                    row.put("coutposte", mopratiquee.getCoutposte());
                                    row.put("nbpostes", mopratiquee.getNbpostes());
                                    row.put("forfait", mopratiquee.getForfait());
                                    row.put("coutamort", mopratiquee.getCoutamort());
                                    datasource.add(row);
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeCoutsMopratiqueSerieEReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Aucun coût par candidat, par poste, forfait sous-centre et coût d'amortissement trouvés dans la base de données !");
                }
            }
        }
    }//GEN-LAST:event_jButtonListerCoutActionPerformed

    private void jButtonAnnulerCoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerCoutActionPerformed
        jTextFieldCoutamortissement.setText("");
        jTextFieldCoutposte.setText("");
        jTextFieldForfaitcentre.setText("");
        jTextFieldNbpostes.setText("");
        jTextFieldCoutcandidat.setText("");
    }//GEN-LAST:event_jButtonAnnulerCoutActionPerformed

    private void jButtonSupprimerCoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerCoutActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nomSouscentrepratSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre et un sous-centre de pratique !");
        } else {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les coûts par candidat, par poste, forfait centre et coût d'amortissement du sous-centre [" + nomSouscentreSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                anneeSelected = Integer.parseInt(anneeString);
                try {
                    Mopratiquee mopratiquee = metier.findMopratiqueeD1SouscentreD1SouscentrepratD1GroupedexamensD1Session(nomSouscentreSelected, nomSouscentrepratSelected, anneeSelected, niveauSelected, typeSelected);
                    metier.supprimerMopratiquee(mopratiquee);
                    JOptionPane.showMessageDialog(this, "Coûts par candidat, par poste, forfait centre et coût d'amortissement supprimés avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer les Coûts par candidat, par poste, forfait centre et coût d'amortissement pour le centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerCoutActionPerformed

    private void jRadioButtonSerieTIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonSerieTIActionPerformed
        jPanelChoixCentre.setEnabled(false);
        jComboBoxRegion.setEnabled(false);
        jComboBoxDepartement.setEnabled(false);
        jComboBoxSouscentre.setEnabled(false);
        jComboBoxSouscentreprat.setEnabled(false);
        jButtonAnnulerChoixSouscentre.setEnabled(false);
        jPanelCout.setEnabled(false);
        jTextFieldCoutcandidat.setEnabled(false);
        jTextFieldCoutposte.setEnabled(false);
        jTextFieldCoutamortissement.setEnabled(false);
        jTextFieldNbpostes.setEnabled(false);
        jTextFieldForfaitcentre.setEnabled(false);
        jButtonCreerCout.setEnabled(false);
        jButtonListerCout.setEnabled(false);
        jButtonSupprimerCout.setEnabled(false);
        jButtonAnnulerCout.setEnabled(false);
    }//GEN-LAST:event_jRadioButtonSerieTIActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatMatiereDoeuvrePratiqueTIetE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatMatiereDoeuvrePratiqueTIetE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatMatiereDoeuvrePratiqueTIetE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatMatiereDoeuvrePratiqueTIetE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatMatiereDoeuvrePratiqueTIetE().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonAnnulerChoixExamen;
    private javax.swing.JButton jButtonAnnulerChoixSouscentre;
    private javax.swing.JButton jButtonAnnulerCout;
    private javax.swing.JButton jButtonCreerCout;
    private javax.swing.JButton jButtonCreerEtats;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonListerCout;
    private javax.swing.JButton jButtonMettreAjourEtats;
    private javax.swing.JButton jButtonSupprimerCout;
    private javax.swing.JButton jButtonSupprimerEtats;
    private javax.swing.JButton jButtonVisualiserEtats;
    private javax.swing.JComboBox<String> jComboBoxDepartement;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxRegion;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxSouscentre;
    private javax.swing.JComboBox<String> jComboBoxSouscentreprat;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelArrondissement;
    private javax.swing.JLabel jLabelCoutamortissement;
    private javax.swing.JLabel jLabelCoutcandidat;
    private javax.swing.JLabel jLabelCoutposte;
    private javax.swing.JLabel jLabelDepartement;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelForfaitcentre;
    private javax.swing.JLabel jLabelNbpostes;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelNomCentre;
    private javax.swing.JLabel jLabelRegion;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanelChoixCentre;
    private javax.swing.JPanel jPanelChoixExamen;
    private javax.swing.JPanel jPanelCout;
    private javax.swing.JPanel jPanelGestionEtat;
    private javax.swing.JRadioButton jRadioButtonSerieE;
    private javax.swing.JRadioButton jRadioButtonSerieTI;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldCoutamortissement;
    private javax.swing.JTextField jTextFieldCoutcandidat;
    private javax.swing.JTextField jTextFieldCoutposte;
    private javax.swing.JTextField jTextFieldForfaitcentre;
    private javax.swing.JTextField jTextFieldNbpostes;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Examen> examens = null;
    private List<Examen> examensSelected = new ArrayList<Examen>();
    private List<Region> regions = null;
    private String nomRegionSelected = "";
    private List<Departement> departements = null;
    private String[] sessionsCombo = null;
    private String[] regionsCombo = null;
    private String[] departementsCombo = null;
    private String[] examensList = null;
    private String nomSouscentrepratSelected = "";
    private List<Souscentre> souscentres = null;
    private Souscentre souscentreSelected = null;
    private Souscentre souscentrepratSelected = null;
    private String[] souscentresCombo = null;
    private String[] souscentrepratsCombo = null;
    private String nomDepartementSelected = "";
    private Examen examenSelected = null;
    private String nomSouscentreSelected = "";
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private int cout = 0;
    private String phase = "ECRIT";
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private List<Caisse> caisses = null;
    private List<Mopratiquee> lesMopratiquee = null;
    private int effectif = 0, nbclef = 0, nbencre = 0, nbrame = 0, totalTI = 0, pxclef = 3500, pxencre = 30000, pxrame = 3000, totalSerieE = 0, matoeuvre = 0, amortis = 0, forfait = 0;
    private boolean continuerCoutcandidat = false;
    private boolean continuerCoutposte = false;
    private boolean continuerNbpostes = false;
    private boolean continuerForfait = false;
    private boolean continuerCoutamort = false;
    private int coutcandidatSaisi = 0;
    private String coutcandidatString = "";
    private int coutposteSaisi = 0;
    private String coutposteString = "";
    private int nbpostesSaisi = 0;
    private String nbpostesString = "";
    private int forfaitSaisi = 0;
    private String forfaitString = "";
    private int coutamortSaisi = 0;
    private String coutamortString = "";

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        examens = metier.findAllExamens();
        regions = metier.findAllRegions();
        departements = metier.findAllDepartements();
        souscentres = metier.findAllSouscentres();

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int i = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[i++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));
        
        //on remplit la combobox des régions
        regionsCombo = new String[regions.size() + 1];
        regionsCombo[0] = "---";
        int j= 1;
        for (Region region : regions) {
            regionsCombo[j++] =region.getNomreg();
        }
        jComboBoxRegion.setModel(new DefaultComboBoxModel(regionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "GEN"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        buttonGroup1.add(jRadioButtonSerieE);
        buttonGroup1.add(jRadioButtonSerieTI);

        jPanelChoixCentre.setEnabled(false);
        jComboBoxRegion.setEnabled(false);
        jComboBoxDepartement.setEnabled(false);
        jComboBoxSouscentre.setEnabled(false);
        jComboBoxSouscentreprat.setEnabled(false);
        jButtonAnnulerChoixSouscentre.setEnabled(false);
        jPanelCout.setEnabled(false);
        jTextFieldCoutcandidat.setEnabled(false);
        jTextFieldCoutposte.setEnabled(false);
        jTextFieldCoutamortissement.setEnabled(false);
        jTextFieldNbpostes.setEnabled(false);
        jTextFieldForfaitcentre.setEnabled(false);
        jButtonCreerCout.setEnabled(false);
        jButtonListerCout.setEnabled(false);
        jButtonSupprimerCout.setEnabled(false);
        jButtonAnnulerCout.setEnabled(false);
    }

    private void infoSaisies() {
        anneeString = (String) jComboBoxSession.getSelectedItem();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();       
        nomSouscentrepratSelected = (String) jComboBoxSouscentreprat.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();        
        coutcandidatString = (String) jTextFieldCoutcandidat.getText();
        coutposteString = (String) jTextFieldCoutposte.getText();
        nbpostesString = (String) jTextFieldNbpostes.getText();
        forfaitString = (String) jTextFieldForfaitcentre.getText();
        coutamortString = (String) jTextFieldCoutamortissement.getText();
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    private void determinerCoutTI(Souscentre souscentre, Map<Souscentre, Integer> souscentreEffectifTIMap) {
        nbclef = 0;
        nbencre = 0;
        nbrame = 0;
        totalTI = 0;
        effectif = souscentreEffectifTIMap.get(souscentre);
        if (effectif > 0 && effectif <= 200) {
            nbclef = 1;
        }
        if (effectif > 200 && effectif <= 400) {
            nbclef = 2;
        }
        if (effectif > 400 && effectif <= 600) {
            nbclef = 3;
        }

        if (effectif > 0 && effectif <= 300) {
            nbencre = 1;
        }
        if (effectif > 300 && effectif <= 600) {
            nbencre = 2;
        }

        if (effectif > 0 && effectif <= 125) {
            nbrame = 1;//soit 4 papiers par candidat
        }
        if (effectif > 125 && effectif <= 250) {
            nbrame = 2;
        }
        if (effectif > 250 && effectif <= 375) {
            nbrame = 3;
        }
        if (effectif > 375 && effectif <= 500) {
            nbrame = 4;
        }
        if (effectif > 500 && effectif <= 625) {
            nbrame = 5;
        }

        totalTI = nbclef * pxclef + nbencre * pxencre + nbrame * pxrame;
    }

    private void determinerCoutSerieE(Souscentre souscentre, Map<Souscentre, Mopratiquee> souscentreMopratiqueeMap, Map<Souscentre, Integer> souscentreEffectifEMap) {
        effectif = souscentreEffectifEMap.get(souscentre);
        Mopratiquee mopratiquee = souscentreMopratiqueeMap.get(souscentre);
        matoeuvre = effectif * mopratiquee.getCoutcand() + mopratiquee.getNbpostes() * mopratiquee.getCoutposte();
        forfait = mopratiquee.getForfait();
        amortis = effectif * mopratiquee.getCoutamort();
        totalSerieE = matoeuvre + amortis + forfait;
    }

    private void remplirDepartementCombobox() {
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        departements = metier.findAllDepartementsD1Region(nomRegionSelected);
        //on remplit la combobox des départements
        departementsCombo = new String[departements.size() + 1];
        departementsCombo[0] = "---";
        int i = 1;
        for (Departement departement : departements) {
            departementsCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartement.setModel(new DefaultComboBoxModel(departementsCombo));
    }

    private void remplirSouscentrepratsCombobox() {
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        souscentres = metier.findAllSouscentresD1Departement(nomDepartementSelected);
        //on remplit la combobox des sous-centres
        souscentrepratsCombo = new String[souscentres.size() + 1];
        souscentrepratsCombo[0] = "---";
        int i = 1;
        for (Souscentre souscentre : souscentres) {
            souscentrepratsCombo[i++] = souscentre.getNomsouscent();
        }
        jComboBoxSouscentre.setModel(new DefaultComboBoxModel(souscentrepratsCombo));
    }

    private void remplirSouscentresCombobox() {
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        souscentres = metier.findAllSouscentresD1Departement(nomDepartementSelected);
        //on remplit la combobox des sous-centres
        souscentresCombo = new String[souscentres.size() + 1];
        souscentresCombo[0] = "---";
        int i = 1;
        for (Souscentre souscentre : souscentres) {
            souscentresCombo[i++] = souscentre.getNomsouscent();
        }
        jComboBoxSouscentreprat.setModel(new DefaultComboBoxModel(souscentresCombo));
    }

    private void validerCoutcandidat(String nbreString) {
        try {
            coutcandidatSaisi = Integer.parseInt(nbreString);
            continuerCoutcandidat = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le coût par candidat doit être fourni et contenir uniquement des chiffres entiers!");
            continuerCoutcandidat = false;
        }
    }

    private void validerCoutposte(String nbreString) {
        try {
            coutposteSaisi = Integer.parseInt(nbreString);
            continuerCoutposte = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le coût par poste doit être fourni et contenir uniquement des chiffres entiers!");
            continuerCoutposte = false;
        }
    }

    private void validerNbpostes(String nbreString) {
        try {
            nbpostesSaisi = Integer.parseInt(nbreString);
            continuerNbpostes = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de postes doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbpostes = false;
        }
    }

    private void validerForfait(String nbreString) {
        try {
            forfaitSaisi = Integer.parseInt(nbreString);
            continuerForfait = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le forfait par sous-centre doit être fourni et contenir uniquement des chiffres entiers!");
            continuerForfait = false;
        }
    }

    private void validerCoutamort(String nbreString) {
        try {
            coutamortSaisi = Integer.parseInt(nbreString);
            continuerCoutamort = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le coût d'amortissement doit être fourni et contenir uniquement des chiffres entiers!");
            continuerCoutamort = false;
        }
    }

}
