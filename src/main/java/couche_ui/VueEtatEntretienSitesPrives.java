package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Arrondissement;
import couche_jpa.Caisse;
import couche_jpa.Centrebilletage;
import couche_jpa.Departement;
import couche_jpa.Examen;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Inscritsprives;
import couche_jpa.Matiere;
import couche_jpa.Nature;
import couche_jpa.Option;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueEtatEntretienSitesPrives extends javax.swing.JFrame {

    public VueEtatEntretienSitesPrives() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButtonFermer = new javax.swing.JButton();
        jPanelChoixExamen = new javax.swing.JPanel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixExamen = new javax.swing.JButton();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelExamen = new javax.swing.JLabel();
        jPanelChoixSouscentre = new javax.swing.JPanel();
        jComboBoxDepartementSouscentre = new javax.swing.JComboBox<>();
        jLabelDepartementSouscentre = new javax.swing.JLabel();
        jLabelSouscentre = new javax.swing.JLabel();
        jComboBoxArrondissementSouscentre = new javax.swing.JComboBox<>();
        jComboBoxSouscentre = new javax.swing.JComboBox<>();
        jLabelArrondissementSouscentre = new javax.swing.JLabel();
        jComboBoxRegionSouscentre = new javax.swing.JComboBox<>();
        jLabelRegionSouscentre = new javax.swing.JLabel();
        jButtonAnnulerEffectif = new javax.swing.JButton();
        jLabelEffectif = new javax.swing.JLabel();
        jTextFieldEffectif = new javax.swing.JTextField();
        jButtonCreerEffectif = new javax.swing.JButton();
        jButtonSupprimerEffectif = new javax.swing.JButton();
        jButtonLister = new javax.swing.JButton();
        jPanelGestionEtat = new javax.swing.JPanel();
        jButtonCreerEtats = new javax.swing.JButton();
        jButtonMettreAjourEtats = new javax.swing.JButton();
        jButtonVisualiserEtats = new javax.swing.JButton();
        jButtonSupprimerEtats = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT D'APUI AUX INSCRIPTIONS ET A L'ENTRETIEN DES SITES PRIVES ");

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jPanelChoixExamen.setBackground(new java.awt.Color(102, 255, 153));
        jPanelChoixExamen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un groupe d'examens et une session", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixExamen.setText("Annuler");
        jButtonAnnulerChoixExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixExamenActionPerformed(evt);
            }
        });

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        javax.swing.GroupLayout jPanelChoixExamenLayout = new javax.swing.GroupLayout(jPanelChoixExamen);
        jPanelChoixExamen.setLayout(jPanelChoixExamenLayout);
        jPanelChoixExamenLayout.setHorizontalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelNiveauExamen)
                    .addComponent(jLabelSession))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addComponent(jLabelType)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 54, Short.MAX_VALUE)
                        .addComponent(jLabelExamen))
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
        jPanelChoixExamenLayout.setVerticalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelChoixSouscentre.setBackground(new java.awt.Color(204, 255, 0));
        jPanelChoixSouscentre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enregistrer le nombre de candidats inscrits par chaque sous-centre privé", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jComboBoxDepartementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartementSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementSouscentreActionPerformed(evt);
            }
        });

        jLabelDepartementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartementSouscentre.setText("Département :");

        jLabelSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSouscentre.setText("Sous-centre :");

        jComboBoxArrondissementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissementSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementSouscentreActionPerformed(evt);
            }
        });

        jComboBoxSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSouscentre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSouscentreActionPerformed(evt);
            }
        });

        jLabelArrondissementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissementSouscentre.setText("Arrondissement :");

        jComboBoxRegionSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegionSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionSouscentreActionPerformed(evt);
            }
        });

        jLabelRegionSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegionSouscentre.setText("Région :");

        jButtonAnnulerEffectif.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerEffectif.setText("Annuler");
        jButtonAnnulerEffectif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerEffectifActionPerformed(evt);
            }
        });

        jLabelEffectif.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelEffectif.setText("Nbre d'inscrits :");

        jTextFieldEffectif.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonCreerEffectif.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEffectif.setText("Créer");
        jButtonCreerEffectif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEffectifActionPerformed(evt);
            }
        });

        jButtonSupprimerEffectif.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEffectif.setText("Supprimer");
        jButtonSupprimerEffectif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEffectifActionPerformed(evt);
            }
        });

        jButtonLister.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonLister.setText("Lister");
        jButtonLister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixSouscentreLayout = new javax.swing.GroupLayout(jPanelChoixSouscentre);
        jPanelChoixSouscentre.setLayout(jPanelChoixSouscentreLayout);
        jPanelChoixSouscentreLayout.setHorizontalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelEffectif)
                    .addComponent(jLabelDepartementSouscentre)
                    .addComponent(jLabelArrondissementSouscentre)
                    .addComponent(jLabelSouscentre)
                    .addComponent(jLabelRegionSouscentre))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jComboBoxDepartementSouscentre, 0, 458, Short.MAX_VALUE)
                                .addComponent(jComboBoxRegionSouscentre, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(152, 152, 152))
                    .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldEffectif, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addComponent(jButtonCreerEffectif)
                .addGap(18, 18, 18)
                .addComponent(jButtonLister)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerEffectif)
                .addGap(18, 18, 18)
                .addComponent(jButtonAnnulerEffectif, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanelChoixSouscentreLayout.setVerticalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxRegionSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRegionSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBoxDepartementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDepartementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelEffectif, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldEffectif, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCreerEffectif, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSupprimerEffectif, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonLister, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerEffectif, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelGestionEtat.setBackground(new java.awt.Color(0, 255, 255));
        jPanelGestionEtat.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer l'état", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 102, 255))); // NOI18N

        jButtonCreerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEtats.setText("Créer");
        jButtonCreerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEtatsActionPerformed(evt);
            }
        });

        jButtonMettreAjourEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjourEtats.setText("Mettre à jour");
        jButtonMettreAjourEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourEtatsActionPerformed(evt);
            }
        });

        jButtonVisualiserEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserEtats.setText("Visualiser");
        jButtonVisualiserEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserEtatsActionPerformed(evt);
            }
        });

        jButtonSupprimerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEtats.setText("Supprimer");
        jButtonSupprimerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEtatsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelGestionEtatLayout = new javax.swing.GroupLayout(jPanelGestionEtat);
        jPanelGestionEtat.setLayout(jPanelGestionEtatLayout);
        jPanelGestionEtatLayout.setHorizontalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jButtonCreerEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonMettreAjourEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiserEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerEtats)
                .addContainerGap(44, Short.MAX_VALUE))
        );
        jPanelGestionEtatLayout.setVerticalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonVisualiserEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonCreerEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonMettreAjourEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonSupprimerEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(223, 223, 223)
                        .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 736, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButtonFermer)
                                .addGap(223, 223, 223))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel1)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 119, Short.MAX_VALUE)
                        .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVisualiserEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserEtatsActionPerformed
        infoSaisies();
        if (typeSelected.equals("GEN")) {
            Map<Souscentre, ArrayList<Character>> souscentrePhasesProbMap = new HashMap<>();//contient les sous-centres de probatoire ESG chacun avec le tableau de ses activités
            Map<Souscentre, ArrayList<Character>> souscentrePhasesBacMap = new HashMap<>();//contient les sous-centres de baccalauréat ESG chacun avec le tableau de ses activités
            List<Souscentre> souscentreAvecInscritsprivesList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des Inscritsprives
            Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
            ArrayList<String> typesBruts = new ArrayList<>();
            ArrayList<String> typesAconsiderer = new ArrayList<>();
            ArrayList<String> niveauxAconsiderer = new ArrayList<>();
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("APPUI A L'ENTRETIEN DES SITES PRIVES");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                boolean continuer = false;
                for (Caisse c : caisses) {
                    if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {    
                        continuer = true;
                        break;
                    }
                }
                if (!continuer) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états d'appui aux inscriptions et à l'entretien des sites privés n'ont pas encore été créés pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    //recherche des types des examens à utiliser
                    for (Examen examen : examensSelected) {
                        System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                        if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                            typesBruts.add("ESG");
                        }
                        if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                            typesBruts.add("ESTP");
                        }
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 2) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    //recherche des niveaux des examens à utiliser
                    if (!niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add(niveauSelected);
                        niveauxAconsiderer.add("TOUT");
                    }
                    if (niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add("PROB");
                        niveauxAconsiderer.add("BACC");
                        niveauxAconsiderer.add("TOUT");
                    }
                    //recherche des centres de billetage
                    for (String niveau : niveauxAconsiderer) {
                        for (String type : typesAconsiderer) {
                            List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                            for (Centrebilletage centrebilletage : desCentrebilletages) {
                                ArrayList<Souscentre> souscentresList = new ArrayList<>();
                                if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                    List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                    for (Secteurcouv sect : secteurs) {
                                        if (!souscentresList.contains(sect.getSouscentre())) {
                                            souscentresList.add(sect.getSouscentre());
                                        }
                                    }
                                    centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                                }
                            }
                        }
                    }
                    tousInscritsprives = metier.findAllInscritsprivesD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!tousInscritsprives.isEmpty()) {
                        //sous-centres ayant des Inscritsprives
                        for (Inscritsprives inscritsprives : tousInscritsprives) {
                            if (!souscentreAvecInscritsprivesList.contains(inscritsprives.getSouscentre())) {
                                souscentreAvecInscritsprivesList.add(inscritsprives.getSouscentre());
                            }
                        }

                        for (Examen e : examensSelected) {
                            List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                            for (int j = 0; j < souscentreAvecInscritsprivesList.size(); j++) {
                                ArrayList<Character> phasesList = new ArrayList<>();
                                Souscentre s = souscentreAvecInscritsprivesList.get(j);
                                for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                    if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                        if (!phasesList.contains(n.getActivite().getInitiale()) && !n.getActivite().getInitiale().equals('T')) {
                                            phasesList.add(n.getActivite().getInitiale());
                                        }
                                        //pas de break ici car on doit parcourir tous lesNats
                                    }
                                }
                                if (!souscentrePhasesProbMap.containsKey(s) && e.getNiveau().equals("PROB")) {
                                    souscentrePhasesProbMap.put(s, phasesList);
                                }
                                if (!souscentrePhasesBacMap.containsKey(s) && e.getNiveau().equals("BACC")) {
                                    souscentrePhasesBacMap.put(s, phasesList);
                                }
                            }
                        }
                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            for (Region region : regions) {
                                for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                    if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                        int totalMontant = 0;
                                        ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                        int num = 1;
                                        for (int i = 0; i < souscentresList.size(); i++) {
                                            Souscentre souscentre = souscentresList.get(i);
                                            if (souscentreAvecInscritsprivesList.contains(souscentre)) {
                                                Inscritsprives SonInscritsprives = new Inscritsprives();
                                                for (Inscritsprives inscritsprives : tousInscritsprives) {
                                                    if (inscritsprives.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                                        SonInscritsprives = inscritsprives;
                                                        break;
                                                    }
                                                }
                                                if (!souscentrePhasesProbMap.get(souscentre).isEmpty() || !souscentrePhasesBacMap.get(souscentre).isEmpty()) {
                                                    determinerCoutESG(SonInscritsprives, souscentrePhasesProbMap, souscentrePhasesBacMap);

                                                    Map<String, Object> row = new HashMap<>();
                                                    row.put("examen", groupedexamensEnstring);
                                                    row.put("session", anneeSelected);
                                                    row.put("region", region.getNomreg());
                                                    row.put("reference", "obcbudget-v.3");
                                                    row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                    row.put("num", num++);
                                                    row.put("souscentre", souscentre.getNomsouscent());
                                                    String phasesProbEnchaine = "";
                                                    if (!souscentrePhasesProbMap.get(souscentre).isEmpty()) {
                                                        for (char c : souscentrePhasesProbMap.get(souscentre)) {
                                                            if(c!='T') phasesProbEnchaine += c;
                                                        }
                                                    }
                                                    row.put("natureProb", phasesProbEnchaine);
                                                    String phasesBacEnchaine = "";
                                                    if (!souscentrePhasesBacMap.get(souscentre).isEmpty()) {
                                                        for (char c : souscentrePhasesBacMap.get(souscentre)) {
                                                            if(c!='T') phasesBacEnchaine += c;
                                                        }
                                                    }
                                                    row.put("natureBac", phasesBacEnchaine);
                                                    row.put("entretien", entretien);
                                                    row.put("effectif", effectif);
                                                    row.put("inscription", inscription);
                                                    row.put("baspage", "OBC/AR/"+centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                    int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                    row.put("total", montantArrondi);
                                                    totalMontant += montantArrondi;//jasperreport prendra la dernière valeur de cout
                                                    row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                    datasource.add(row);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatEntretienSitesPrivesESGReport.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun inscrit de centre d'inscription privé trouvé dans la base de données !");
                    }

                    souscentreAvecInscritsprivesList.clear();
                    examensSelected.clear();
                    souscentrePhasesProbMap.clear();
                    souscentrePhasesBacMap.clear();
                }//fin else continuer
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
            }
        }
        if (typeSelected.equals("TOUT ESTP")) {
            Map<Souscentre, ArrayList<Character>> souscentrePhasesProbIndMap = new HashMap<>();//contient les sous-centres de probatoire Ind chacun avec le tableau de ses activités
            Map<Souscentre, ArrayList<Character>> souscentrePhasesBacIndMap = new HashMap<>();//contient les sous-centres de baccalauréat Ind chacun avec le tableau de ses activités
            Map<Souscentre, ArrayList<Character>> souscentrePhasesProbComMap = new HashMap<>();//contient les sous-centres de probatoire Com chacun avec le tableau de ses activités
            Map<Souscentre, ArrayList<Character>> souscentrePhasesBacComMap = new HashMap<>();//contient les sous-centres de baccalauréat Com chacun avec le tableau de ses activités
            List<Souscentre> souscentreAvecInscritsprivesList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des Inscritsprives
            Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
            ArrayList<String> typesBruts = new ArrayList<>();
            ArrayList<String> typesAconsiderer = new ArrayList<>();
            ArrayList<String> niveauxAconsiderer = new ArrayList<>();
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("APPUI A L'ENTRETIEN DES SITES PRIVES");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                boolean continuer = false;
                for (Caisse c : caisses) {
                    if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                        continuer = true;
                        break;
                    }
                }
                if (!continuer) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états d'appui aux inscriptions et à l'entretien des sites privés n'ont pas encore été créés pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    //recherche des types des examens à utiliser
                    for (Examen examen : examensSelected) {
                        System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                        if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                            typesBruts.add("ESG");
                        }
                        if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                            typesBruts.add("ESTP");
                        }
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 2) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    //recherche des niveaux des examens à utiliser
                    if (!niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add(niveauSelected);
                        niveauxAconsiderer.add("TOUT");
                    }
                    if (niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add("PROB");
                        niveauxAconsiderer.add("BACC");
                        niveauxAconsiderer.add("TOUT");
                    }
                    //recherche des centres de billetage
                    for (String niveau : niveauxAconsiderer) {
                        for (String type : typesAconsiderer) {
                            List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                            for (Centrebilletage centrebilletage : desCentrebilletages) {
                                ArrayList<Souscentre> souscentresList = new ArrayList<>();
                                if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                    List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                    for (Secteurcouv sect : secteurs) {
                                        if (!souscentresList.contains(sect.getSouscentre())) {
                                            souscentresList.add(sect.getSouscentre());
                                        }
                                    }
                                    centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                                }
                            }
                        }
                    }
                    tousInscritsprives = metier.findAllInscritsprivesD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!tousInscritsprives.isEmpty()) {
                        //sous-centres ayant des Inscritsprives
                        for (Inscritsprives inscritsprives : tousInscritsprives) {
                            if (!souscentreAvecInscritsprivesList.contains(inscritsprives.getSouscentre())) {
                                souscentreAvecInscritsprivesList.add(inscritsprives.getSouscentre());                          
                            }
                        }

                        for (Examen e : examensSelected) {
                            List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                            for (int j = 0; j < souscentreAvecInscritsprivesList.size(); j++) {
                                ArrayList<Character> phasesList = new ArrayList<>();
                                Souscentre s = souscentreAvecInscritsprivesList.get(j);
                                for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                    if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                        if (!phasesList.contains(n.getActivite().getInitiale()) && !n.getActivite().getInitiale().equals('T')) {
                                            phasesList.add(n.getActivite().getInitiale());
                                        }
                                        //pas de break ici car on doit parcourir tous lesNats
                                    }
                                }
                                if (!souscentrePhasesProbIndMap.containsKey(s) && e.getNiveau().equals("PROB") && (e.getType().equals("IND") || e.getType().equals("IND PROF"))) {
                                    if (phasesList != null) {
                                        souscentrePhasesProbIndMap.put(s, phasesList);                                       
                                    }
                                }
                                if (souscentrePhasesProbIndMap.containsKey(s) && e.getNiveau().equals("PROB") && (e.getType().equals("IND") || e.getType().equals("IND PROF"))) {
                                    if (phasesList != null) {
                                        ArrayList<Character> phasesListInit = souscentrePhasesProbIndMap.get(s);
                                        for (int k = 0; k < phasesList.size(); k++) {
                                            if (!phasesListInit.contains(phasesList.get(k))) {
                                                phasesListInit.add(phasesList.get(k));
                                            }
                                        }
                                        souscentrePhasesProbIndMap.put(s, phasesListInit);                                       
                                    }
                                }
                                if (!souscentrePhasesBacIndMap.containsKey(s) && e.getNiveau().equals("BACC") && (e.getType().equals("IND") || e.getType().equals("IND PROF"))) {
                                    if (phasesList != null) {
                                        souscentrePhasesBacIndMap.put(s, phasesList);
                                    }
                                }
                                if (souscentrePhasesBacIndMap.containsKey(s) && e.getNiveau().equals("BACC") && (e.getType().equals("IND") || e.getType().equals("IND PROF"))) {
                                    if (phasesList != null) {
                                        ArrayList<Character> phasesListInit = souscentrePhasesBacIndMap.get(s);
                                        for (int k = 0; k < phasesList.size(); k++) {
                                            if (!phasesListInit.contains(phasesList.get(k))) {
                                                phasesListInit.add(phasesList.get(k));
                                            }
                                        }
                                        souscentrePhasesBacIndMap.put(s, phasesListInit);
                                    }
                                }
                                if (!souscentrePhasesProbComMap.containsKey(s) && e.getNiveau().equals("PROB") && (e.getType().equals("STT") || e.getType().equals("STT PROF"))) {
                                    if (phasesList != null) {
                                        souscentrePhasesProbComMap.put(s, phasesList);
                                    }
                                }
                                if (souscentrePhasesProbComMap.containsKey(s) && e.getNiveau().equals("PROB") && (e.getType().equals("STT") || e.getType().equals("STT PROF"))) {
                                    if (phasesList != null) {
                                        ArrayList<Character> phasesListInit = souscentrePhasesProbComMap.get(s);
                                        for (int k = 0; k < phasesList.size(); k++) {
                                            if (!phasesListInit.contains(phasesList.get(k))) {
                                                phasesListInit.add(phasesList.get(k));
                                            }
                                        }
                                        souscentrePhasesProbComMap.put(s, phasesListInit);
                                    }
                                }
                                if (!souscentrePhasesBacComMap.containsKey(s) && e.getNiveau().equals("BACC") && (e.getType().equals("STT") || e.getType().equals("STT PROF"))) {
                                    if (phasesList != null) {
                                        souscentrePhasesBacComMap.put(s, phasesList);
                                    }
                                }
                                if (souscentrePhasesBacComMap.containsKey(s) && e.getNiveau().equals("BACC") && (e.getType().equals("STT") || e.getType().equals("STT PROF"))) {
                                    if (phasesList != null) {
                                        ArrayList<Character> phasesListInit = souscentrePhasesBacComMap.get(s);
                                        for (int k = 0; k < phasesList.size(); k++) {
                                            if (!phasesListInit.contains(phasesList.get(k))) {
                                                phasesListInit.add(phasesList.get(k));
                                            }
                                        }
                                        souscentrePhasesBacComMap.put(s, phasesListInit);
                                    }
                                }
                            }
                        }
                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            for (Region region : regions) {
                                for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                    if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                        int totalMontant = 0;
                                        ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                        int num = 1;
                                        for (int i = 0; i < souscentresList.size(); i++) {
                                            Souscentre souscentre = souscentresList.get(i);
                                            if (souscentreAvecInscritsprivesList.contains(souscentre)) {
                                                Inscritsprives SonInscritsprives = new Inscritsprives();
                                                for (Inscritsprives inscritsprives : tousInscritsprives) {
                                                    if (inscritsprives.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                                        SonInscritsprives = inscritsprives;
                                                        break;
                                                    }
                                                }
                                                determinerCoutESTP(SonInscritsprives, souscentrePhasesProbIndMap, souscentrePhasesBacIndMap, souscentrePhasesProbComMap, souscentrePhasesBacComMap);

                                                Map<String, Object> row = new HashMap<>();
                                                row.put("examen", groupedexamensEnstring);
                                                row.put("session", anneeSelected);
                                                row.put("region", region.getNomreg());
                                                row.put("reference", "obcbudget-v.3");
                                                row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                row.put("num", num++);
                                                row.put("souscentre", souscentre.getNomsouscent());
                                                String phasesProbindEnchaine = "";
                                                if (!souscentrePhasesProbIndMap.get(souscentre).isEmpty()) {
                                                    for (char c : souscentrePhasesProbIndMap.get(souscentre)) {
                                                        if(c!='T') phasesProbindEnchaine += c;
                                                    }
                                                }
                                                row.put("natureProbind", phasesProbindEnchaine);
                                                String phasesBacindEnchaine = "";
                                                if (!souscentrePhasesBacIndMap.get(souscentre).isEmpty()) {
                                                    for (char c : souscentrePhasesBacIndMap.get(souscentre)) {
                                                        if(c!='T') phasesBacindEnchaine += c;
                                                    }
                                                }
                                                row.put("natureBacind", phasesBacindEnchaine);
                                                String phasesProbcomEnchaine = "";
                                                if (!souscentrePhasesProbComMap.get(souscentre).isEmpty()) {
                                                    for (char c : souscentrePhasesProbComMap.get(souscentre)) {
                                                        if(c!='T') phasesProbcomEnchaine += c;
                                                    }
                                                }
                                                row.put("natureProbcom", phasesProbcomEnchaine);
                                                String phasesBaccomEnchaine = "";
                                                if (!souscentrePhasesBacComMap.get(souscentre).isEmpty()) {
                                                    for (char c : souscentrePhasesBacComMap.get(souscentre)) {
                                                        if(c!='T') phasesBaccomEnchaine += c;
                                                    }
                                                }
                                                row.put("natureBaccom", phasesBaccomEnchaine);
                                                row.put("entretien", entretien);
                                                row.put("effectif", effectif);
                                                row.put("inscription", inscription);
                                                row.put("amortis", amortis);
                                                row.put("baspage", "OBC/AR/"+centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                row.put("total", montantArrondi);
                                                totalMontant += montantArrondi;//jasperreport prendra la dernière valeur de cout
                                                row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                datasource.add(row);
                                            }
                                        }
                                    }
                                }
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatEntretienSitesPrivesESTPReport.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun inscrit de centre d'inscription privé trouvé dans la base de données !");
                    }

                    souscentreAvecInscritsprivesList.clear();
                    examensSelected.clear();
                    souscentrePhasesProbIndMap.clear();
                    souscentrePhasesBacIndMap.clear();
                    souscentrePhasesProbComMap.clear();
                    souscentrePhasesBacComMap.clear();
                }//fin else continuer
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
            }
        }
    }//GEN-LAST:event_jButtonVisualiserEtatsActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonCreerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEtatsActionPerformed
        infoSaisies();
        if (typeSelected.equals("GEN")) {
            Map<Souscentre, ArrayList<Character>> souscentrePhasesProbMap = new HashMap<>();//contient les sous-centres de probatoire ESG chacun avec le tableau de ses activités
            Map<Souscentre, ArrayList<Character>> souscentrePhasesBacMap = new HashMap<>();//contient les sous-centres de baccalauréat ESG chacun avec le tableau de ses activités
            List<Souscentre> souscentreAvecInscritsprivesList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des Inscritsprives
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("APPUI A L'ENTRETIEN DES SITES PRIVES");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (!caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états d'appui aux inscriptions et à l'entretien des sites privés existent déjà pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    tousInscritsprives = metier.findAllInscritsprivesD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!tousInscritsprives.isEmpty()) {
                        //sous-centres ayant des Inscritsprives
                        for (Inscritsprives inscritsprives : tousInscritsprives) {
                            if (!souscentreAvecInscritsprivesList.contains(inscritsprives.getSouscentre())) {
                                souscentreAvecInscritsprivesList.add(inscritsprives.getSouscentre());
                            }
                        }

                        for (Examen e : examensSelected) {
                            List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                            for (int j = 0; j < souscentreAvecInscritsprivesList.size(); j++) {
                                ArrayList<Character> phasesList = new ArrayList<>();
                                Souscentre s = souscentreAvecInscritsprivesList.get(j);
                                for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                    if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                        if (!phasesList.contains(n.getActivite().getInitiale()) && !n.getActivite().getInitiale().equals('T')) {
                                            phasesList.add(n.getActivite().getInitiale());
                                        }
                                        //pas de break ici car on doit parcourir tous lesNats
                                    }
                                }
                                if (!souscentrePhasesProbMap.containsKey(s) && e.getNiveau().equals("PROB")) {
                                    souscentrePhasesProbMap.put(s, phasesList);
                                }
                                if (!souscentrePhasesBacMap.containsKey(s) && e.getNiveau().equals("BACC")) {
                                    souscentrePhasesBacMap.put(s, phasesList);
                                }
                            }
                        }

                        boolean testSicreer = false;
                        try {
                            for (Souscentre souscentre : souscentreAvecInscritsprivesList) {

                                Inscritsprives sonInscritsprives = new Inscritsprives();
                                for (Inscritsprives inscritsprives : tousInscritsprives) {
                                    if (inscritsprives.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                        sonInscritsprives = inscritsprives;
                                        break;
                                    }
                                }

                                if (!souscentrePhasesProbMap.get(souscentre).isEmpty() || !souscentrePhasesBacMap.get(souscentre).isEmpty()) {
                                    determinerCoutESG(sonInscritsprives, souscentrePhasesProbMap, souscentrePhasesBacMap);
                                    int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;

                                    metier.creerCaisse(new Caisse(montantArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                    testSicreer = true;
                                }
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testSicreer) {
                            JOptionPane.showMessageDialog(this, "Etats d'appui aux inscriptions et à l'entretien des sites privés créés avec succès pour ce groupe d'examens !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun inscrit de centre d'inscription privé trouvé dans la base de données !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
            }

            souscentreAvecInscritsprivesList.clear();
            souscentrePhasesProbMap.clear();
            souscentrePhasesBacMap.clear();
        }
        if (typeSelected.equals("TOUT ESTP")) {
            Map<Souscentre, ArrayList<Character>> souscentrePhasesProbIndMap = new HashMap<>();//contient les sous-centres de probatoire Ind chacun avec le tableau de ses activités
            Map<Souscentre, ArrayList<Character>> souscentrePhasesBacIndMap = new HashMap<>();//contient les sous-centres de baccalauréat Ind chacun avec le tableau de ses activités
            Map<Souscentre, ArrayList<Character>> souscentrePhasesProbComMap = new HashMap<>();//contient les sous-centres de probatoire Com chacun avec le tableau de ses activités
            Map<Souscentre, ArrayList<Character>> souscentrePhasesBacComMap = new HashMap<>();//contient les sous-centres de baccalauréat Com chacun avec le tableau de ses activités
            List<Souscentre> souscentreAvecInscritsprivesList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des Inscritsprives
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("APPUI A L'ENTRETIEN DES SITES PRIVES");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (!caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états d'appui aux inscriptions et à l'entretien des sites privés existent déjà pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    tousInscritsprives = metier.findAllInscritsprivesD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!tousInscritsprives.isEmpty()) {
                        //sous-centres ayant des Inscritsprives
                        for (Inscritsprives inscritsprives : tousInscritsprives) {
                            if (!souscentreAvecInscritsprivesList.contains(inscritsprives.getSouscentre())) {
                                souscentreAvecInscritsprivesList.add(inscritsprives.getSouscentre());
                            }
                        }

                        for (Examen e : examensSelected) {
                            List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                            for (int j = 0; j < souscentreAvecInscritsprivesList.size(); j++) {
                                ArrayList<Character> phasesList = new ArrayList<>();
                                Souscentre s = souscentreAvecInscritsprivesList.get(j);
                                for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                    if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                        if (!phasesList.contains(n.getActivite().getInitiale()) && !n.getActivite().getInitiale().equals('T')) {
                                            phasesList.add(n.getActivite().getInitiale());
                                        }
                                        //pas de break ici car on doit parcourir tous lesNats
                                    }
                                }
                                if (!souscentrePhasesProbIndMap.containsKey(s) && e.getNiveau().equals("PROB") && (e.getType().equals("IND") || e.getType().equals("IND PROF"))) {
                                    if (phasesList != null) {
                                        souscentrePhasesProbIndMap.put(s, phasesList);
                                    }
                                }
                                if (souscentrePhasesProbIndMap.containsKey(s) && e.getNiveau().equals("PROB") && (e.getType().equals("IND") || e.getType().equals("IND PROF"))) {
                                    if (phasesList != null) {
                                        ArrayList<Character> phasesListInit = souscentrePhasesProbIndMap.get(s);
                                        for (int k = 0; k < phasesList.size(); k++) {
                                            if (!phasesListInit.contains(phasesList.get(k))) {
                                                phasesListInit.add(phasesList.get(k));
                                            }
                                        }
                                        souscentrePhasesProbIndMap.put(s, phasesListInit);
                                    }
                                }
                                if (!souscentrePhasesBacIndMap.containsKey(s) && e.getNiveau().equals("BACC") && (e.getType().equals("IND") || e.getType().equals("IND PROF"))) {
                                    if (phasesList != null) {
                                        souscentrePhasesBacIndMap.put(s, phasesList);
                                    }
                                }
                                if (souscentrePhasesBacIndMap.containsKey(s) && e.getNiveau().equals("BACC") && (e.getType().equals("IND") || e.getType().equals("IND PROF"))) {
                                    if (phasesList != null) {
                                        ArrayList<Character> phasesListInit = souscentrePhasesBacIndMap.get(s);
                                        for (int k = 0; k < phasesList.size(); k++) {
                                            if (!phasesListInit.contains(phasesList.get(k))) {
                                                phasesListInit.add(phasesList.get(k));
                                            }
                                        }
                                        souscentrePhasesBacIndMap.put(s, phasesListInit);
                                    }
                                }
                                if (!souscentrePhasesProbComMap.containsKey(s) && e.getNiveau().equals("PROB") && (e.getType().equals("STT") || e.getType().equals("STT PROF"))) {
                                    if (phasesList != null) {
                                        souscentrePhasesProbComMap.put(s, phasesList);
                                    }
                                }
                                if (souscentrePhasesProbComMap.containsKey(s) && e.getNiveau().equals("PROB") && (e.getType().equals("STT") || e.getType().equals("STT PROF"))) {
                                    if (phasesList != null) {
                                        ArrayList<Character> phasesListInit = souscentrePhasesProbComMap.get(s);
                                        for (int k = 0; k < phasesList.size(); k++) {
                                            if (!phasesListInit.contains(phasesList.get(k))) {
                                                phasesListInit.add(phasesList.get(k));
                                            }
                                        }
                                        souscentrePhasesProbComMap.put(s, phasesListInit);
                                    }
                                }
                                if (!souscentrePhasesBacComMap.containsKey(s) && e.getNiveau().equals("BACC") && (e.getType().equals("STT") || e.getType().equals("STT PROF"))) {
                                    if (phasesList != null) {
                                        souscentrePhasesBacComMap.put(s, phasesList);
                                    }
                                }
                                if (souscentrePhasesBacComMap.containsKey(s) && e.getNiveau().equals("BACC") && (e.getType().equals("STT") || e.getType().equals("STT PROF"))) {
                                    if (phasesList != null) {
                                        ArrayList<Character> phasesListInit = souscentrePhasesBacComMap.get(s);
                                        for (int k = 0; k < phasesList.size(); k++) {
                                            if (!phasesListInit.contains(phasesList.get(k))) {
                                                phasesListInit.add(phasesList.get(k));
                                            }
                                        }
                                        souscentrePhasesBacComMap.put(s, phasesListInit);
                                    }
                                }
                            }
                        }

                        boolean testSicreer = false;
                        try {
                            for (Souscentre souscentre : souscentreAvecInscritsprivesList) {
                                Inscritsprives sonInscritsprives = new Inscritsprives();
                                for (Inscritsprives inscritsprives : tousInscritsprives) {
                                    if (inscritsprives.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                        sonInscritsprives = inscritsprives;
                                        break;
                                    }
                                }

                                determinerCoutESTP(sonInscritsprives, souscentrePhasesProbIndMap, souscentrePhasesBacIndMap, souscentrePhasesProbComMap, souscentrePhasesBacComMap);
                                int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;

                                metier.creerCaisse(new Caisse(montantArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                testSicreer = true;
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testSicreer) {
                            JOptionPane.showMessageDialog(this, "Etats d'appui aux inscriptions et à l'entretien des sites privés créés avec succès pour ce groupe d'examens !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun inscrit de centre d'inscription privé trouvé dans la base de données !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
            }

            souscentreAvecInscritsprivesList.clear();
            souscentrePhasesProbIndMap.clear();
            souscentrePhasesBacIndMap.clear();
            souscentrePhasesProbComMap.clear();
            souscentrePhasesBacComMap.clear();
        }
    }//GEN-LAST:event_jButtonCreerEtatsActionPerformed

    private void jButtonMettreAjourEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourEtatsActionPerformed
        infoSaisies();
        if (typeSelected.equals("GEN")) {
            Map<Souscentre, ArrayList<Character>> souscentrePhasesProbMap = new HashMap<>();//contient les sous-centres de probatoire ESG chacun avec le tableau de ses activités
            Map<Souscentre, ArrayList<Character>> souscentrePhasesBacMap = new HashMap<>();//contient les sous-centres de baccalauréat ESG chacun avec le tableau de ses activités
            List<Souscentre> souscentreAvecInscritsprivesList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des Inscritsprives
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états d'appui aux inscriptions et à l'entretien des sites privés pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("APPUI A L'ENTRETIEN DES SITES PRIVES");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état d'appui aux inscriptions et à l'entretien des sites privés n'existe pour ce groupe d'examens !");
                    } else {
                        //on conserve quelques info de ces anciennes caisses
                        Groupe groupe = caisses.get(0).getGroupe();
                        sessionSelected = caisses.get(0).getSession();
                        //on supprime toutes les anciennes caisses du groupe d'examens ainsi que les intervsec
                        for (Caisse c : caisses) {
                            metier.supprimerCaisse(c);
                        }
                        //on va les recréer

                        tousInscritsprives = metier.findAllInscritsprivesD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                        if (!tousInscritsprives.isEmpty()) {
                            //sous-centres ayant des Inscritsprives
                            for (Inscritsprives inscritsprives : tousInscritsprives) {
                                if (!souscentreAvecInscritsprivesList.contains(inscritsprives.getSouscentre())) {
                                    souscentreAvecInscritsprivesList.add(inscritsprives.getSouscentre());
                                }
                            }

                            for (Examen e : examensSelected) {
                                List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                                for (int j = 0; j < souscentreAvecInscritsprivesList.size(); j++) {
                                    ArrayList<Character> phasesList = new ArrayList<>();
                                    Souscentre s = souscentreAvecInscritsprivesList.get(j);
                                    for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                        if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                            if (!phasesList.contains(n.getActivite().getInitiale()) && !n.getActivite().getInitiale().equals('T')) {
                                                phasesList.add(n.getActivite().getInitiale());
                                            }
                                            //pas de break ici car on doit parcourir tous lesNats
                                        }
                                    }
                                    if (!souscentrePhasesProbMap.containsKey(s) && e.getNiveau().equals("PROB")) {
                                        souscentrePhasesProbMap.put(s, phasesList);
                                    }
                                    if (!souscentrePhasesBacMap.containsKey(s) && e.getNiveau().equals("BACC")) {
                                        souscentrePhasesBacMap.put(s, phasesList);
                                    }
                                }
                            }

                            boolean testSimodifier = false;
                            try {
                                for (Souscentre souscentre : souscentreAvecInscritsprivesList) {

                                    Inscritsprives sonInscritsprives = new Inscritsprives();
                                    for (Inscritsprives inscritsprives : tousInscritsprives) {
                                        if (inscritsprives.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                            sonInscritsprives = inscritsprives;
                                            break;
                                        }
                                    }
                                    if (souscentrePhasesProbMap.containsKey(souscentre) || souscentrePhasesBacMap.containsKey(souscentre)) {
                                        determinerCoutESG(sonInscritsprives, souscentrePhasesProbMap, souscentrePhasesBacMap);                                       
                                        int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                        metier.creerCaisse(new Caisse(montantArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                        testSimodifier = true;
                                    }
                                }
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                            if (testSimodifier) {
                                JOptionPane.showMessageDialog(this, "Etats d'appui aux inscriptions et à l'entretien des sites privés mis à jour avec succès pour ce groupe d'examens !");
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Aucun inscrit de centre d'inscription privé trouvé dans la base de données !");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
                }
                souscentreAvecInscritsprivesList.clear();
                souscentrePhasesProbMap.clear();
                souscentrePhasesBacMap.clear();
            }//fin if result
        }

        if (typeSelected.equals("TOUT ESTP")) {
            Map<Souscentre, ArrayList<Character>> souscentrePhasesProbIndMap = new HashMap<>();//contient les sous-centres de probatoire Ind chacun avec le tableau de ses activités
            Map<Souscentre, ArrayList<Character>> souscentrePhasesBacIndMap = new HashMap<>();//contient les sous-centres de baccalauréat Ind chacun avec le tableau de ses activités
            Map<Souscentre, ArrayList<Character>> souscentrePhasesProbComMap = new HashMap<>();//contient les sous-centres de probatoire Com chacun avec le tableau de ses activités
            Map<Souscentre, ArrayList<Character>> souscentrePhasesBacComMap = new HashMap<>();//contient les sous-centres de baccalauréat Com chacun avec le tableau de ses activités
            List<Souscentre> souscentreAvecInscritsprivesList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des Inscritsprives
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états d'appui aux inscriptions et à l'entretien des sites privés pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("APPUI A L'ENTRETIEN DES SITES PRIVES");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    //intervsecs = metier.findAllIntervsecsD1GroupedexamensD1SessionD1ActiviteD1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION");
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état d'appui aux inscriptions et à l'entretien des sites privés n'existe pour ce groupe d'examens !");
                    } else {
                        //on conserve quelques info de ces anciennes caisses
                        Groupe groupe = caisses.get(0).getGroupe();
                        sessionSelected = caisses.get(0).getSession();
                        //on supprime toutes les anciennes caisses du groupe d'examens ainsi que les intervsec
                        for (Caisse c : caisses) {
                            metier.supprimerCaisse(c);
                        }
                        //on va les recréer

                        tousInscritsprives = metier.findAllInscritsprivesD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                        if (!tousInscritsprives.isEmpty()) {
                            //sous-centres ayant des Inscritsprives
                            for (Inscritsprives inscritsprives : tousInscritsprives) {
                                if (!souscentreAvecInscritsprivesList.contains(inscritsprives.getSouscentre())) {
                                    souscentreAvecInscritsprivesList.add(inscritsprives.getSouscentre());
                                }
                            }

                            for (Examen e : examensSelected) {
                                List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                                for (int j = 0; j < souscentreAvecInscritsprivesList.size(); j++) {
                                    ArrayList<Character> phasesList = new ArrayList<>();
                                    Souscentre s = souscentreAvecInscritsprivesList.get(j);
                                    for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                        if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                            if (!phasesList.contains(n.getActivite().getInitiale()) && !n.getActivite().getInitiale().equals('T')) {
                                                phasesList.add(n.getActivite().getInitiale());
                                            }
                                            //pas de break ici car on doit parcourir tous lesNats
                                        }
                                    }
                                    if (!souscentrePhasesProbIndMap.containsKey(s) && e.getNiveau().equals("PROB") && (e.getType().equals("IND") || e.getType().equals("IND PROF"))) {
                                        if (phasesList != null) {
                                            souscentrePhasesProbIndMap.put(s, phasesList);
                                        }
                                    }
                                    if (souscentrePhasesProbIndMap.containsKey(s) && e.getNiveau().equals("PROB") && (e.getType().equals("IND") || e.getType().equals("IND PROF"))) {
                                        if (phasesList != null) {
                                            ArrayList<Character> phasesListInit = souscentrePhasesProbIndMap.get(s);
                                            for (int k = 0; k < phasesList.size(); k++) {
                                                if (!phasesListInit.contains(phasesList.get(k))) {
                                                    phasesListInit.add(phasesList.get(k));
                                                }
                                            }
                                            souscentrePhasesProbIndMap.put(s, phasesListInit);
                                        }
                                    }
                                    if (!souscentrePhasesBacIndMap.containsKey(s) && e.getNiveau().equals("BACC") && (e.getType().equals("IND") || e.getType().equals("IND PROF"))) {
                                        if (phasesList != null) {
                                            souscentrePhasesBacIndMap.put(s, phasesList);
                                        }
                                    }
                                    if (souscentrePhasesBacIndMap.containsKey(s) && e.getNiveau().equals("BACC") && (e.getType().equals("IND") || e.getType().equals("IND PROF"))) {
                                        if (phasesList != null) {
                                            ArrayList<Character> phasesListInit = souscentrePhasesBacIndMap.get(s);
                                            for (int k = 0; k < phasesList.size(); k++) {
                                                if (!phasesListInit.contains(phasesList.get(k))) {
                                                    phasesListInit.add(phasesList.get(k));
                                                }
                                            }
                                            souscentrePhasesBacIndMap.put(s, phasesListInit);
                                        }
                                    }
                                    if (!souscentrePhasesProbComMap.containsKey(s) && e.getNiveau().equals("PROB") && (e.getType().equals("STT") || e.getType().equals("STT PROF"))) {
                                        if (phasesList != null) {
                                            souscentrePhasesProbComMap.put(s, phasesList);
                                        }
                                    }
                                    if (souscentrePhasesProbComMap.containsKey(s) && e.getNiveau().equals("PROB") && (e.getType().equals("STT") || e.getType().equals("STT PROF"))) {
                                        if (phasesList != null) {
                                            ArrayList<Character> phasesListInit = souscentrePhasesProbComMap.get(s);
                                            for (int k = 0; k < phasesList.size(); k++) {
                                                if (!phasesListInit.contains(phasesList.get(k))) {
                                                    phasesListInit.add(phasesList.get(k));
                                                }
                                            }
                                            souscentrePhasesProbComMap.put(s, phasesListInit);
                                        }
                                    }
                                    if (!souscentrePhasesBacComMap.containsKey(s) && e.getNiveau().equals("BACC") && (e.getType().equals("STT") || e.getType().equals("STT PROF"))) {
                                        if (phasesList != null) {
                                            souscentrePhasesBacComMap.put(s, phasesList);
                                        }
                                    }
                                    if (souscentrePhasesBacComMap.containsKey(s) && e.getNiveau().equals("BACC") && (e.getType().equals("STT") || e.getType().equals("STT PROF"))) {
                                        if (phasesList != null) {
                                            ArrayList<Character> phasesListInit = souscentrePhasesBacComMap.get(s);
                                            for (int k = 0; k < phasesList.size(); k++) {
                                                if (!phasesListInit.contains(phasesList.get(k))) {
                                                    phasesListInit.add(phasesList.get(k));
                                                }
                                            }
                                            souscentrePhasesBacComMap.put(s, phasesListInit);
                                        }
                                    }
                                }
                            }

                            boolean testSimodifier = false;
                            try {
                                for (Souscentre souscentre : souscentreAvecInscritsprivesList) {
                                    Inscritsprives sonInscritsprives = new Inscritsprives();
                                    for (Inscritsprives inscritsprives : tousInscritsprives) {
                                        if (inscritsprives.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                            sonInscritsprives = inscritsprives;
                                            break;
                                        }
                                    }

                                    determinerCoutESTP(sonInscritsprives, souscentrePhasesProbIndMap, souscentrePhasesBacIndMap, souscentrePhasesProbComMap, souscentrePhasesBacComMap);
                                    int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                    metier.creerCaisse(new Caisse(montantArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                    testSimodifier = true;
                                }
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                            if (testSimodifier) {
                                JOptionPane.showMessageDialog(this, "Etats d'appui aux inscriptions et à l'entretien des sites privés créés avec succès pour ce groupe d'examens !");
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Aucun inscrit de centre d'inscription privé trouvé dans la base de données !");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
                }
                souscentreAvecInscritsprivesList.clear();
                souscentrePhasesProbIndMap.clear();
                souscentrePhasesBacIndMap.clear();
                souscentrePhasesProbComMap.clear();
                souscentrePhasesBacComMap.clear();
            }//fin if result
        }
    }//GEN-LAST:event_jButtonMettreAjourEtatsActionPerformed

    private void jButtonSupprimerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEtatsActionPerformed
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états d'appui aux inscriptions et à l'entretien des sites privés pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("APPUI A L'ENTRETIEN DES SITES PRIVES");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état d'appui aux inscriptions et à l'entretien des sites privés n'existe pour ce groupe d'examens !");
                } else {
                    try {
                        for (Caisse caisse : caisses) {
                            metier.supprimerCaisse(caisse);
                        }
                        JOptionPane.showMessageDialog(this, "Etats d'appui aux inscriptions et à l'entretien des sites privés supprimés avec succès pour ce groupe d'examens !");
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerEtatsActionPerformed

    private void jComboBoxDepartementSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementSouscentreActionPerformed
        remplirArrondissementSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxDepartementSouscentreActionPerformed

    private void jComboBoxArrondissementSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementSouscentreActionPerformed
        remplirSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementSouscentreActionPerformed

    private void jComboBoxSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSouscentreActionPerformed
        //jTextField1.setText();
    }//GEN-LAST:event_jComboBoxSouscentreActionPerformed

    private void jComboBoxRegionSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionSouscentreActionPerformed
        remplirDepartementSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxRegionSouscentreActionPerformed

    private void jButtonAnnulerChoixExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixExamenActionPerformed
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        jComboBoxSession.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixExamenActionPerformed

    private void jButtonAnnulerEffectifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerEffectifActionPerformed
        jComboBoxRegionSouscentre.setSelectedIndex(0);
        jComboBoxDepartementSouscentre.setSelectedIndex(0);
        jComboBoxArrondissementSouscentre.setSelectedIndex(0);
        jComboBoxSouscentre.setSelectedIndex(0);
        jTextFieldEffectif.setText("");
    }//GEN-LAST:event_jButtonAnnulerEffectifActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jButtonCreerEffectifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEffectifActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || effectifString.equals("")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre et donner l'effectif de candidats enregistrés !");
        } else {
            validerEffectif(effectifString);
            if (!continuerEffectif) {//l'effectif peut être nul si le sous-centre n'inscrit pas
                JOptionPane.showMessageDialog(this, "Recommencez svp. L'effectif de candidats fourni est incorrect !");
            } else {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                effectifSaisi = Integer.parseInt(effectifString);
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                for (Souscentre souscentre : souscentres) {
                    if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                        souscentreSelected = souscentre;
                        break;
                    }
                }

                try {
                    metier.creerInscritsprives(new Inscritsprives(souscentreSelected, groupe, sessionSelected, effectifSaisi));
                    JOptionPane.showMessageDialog(this, "Effectif créé avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de créer l'effectif souhaité au sous-centre privé " + nomSouscentreSelected + " \n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonCreerEffectifActionPerformed

    private void jButtonSupprimerEffectifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEffectifActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session et un sous-centre !");
        } else {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer l'effectif du sous-centre [" + nomSouscentreSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                anneeSelected = Integer.parseInt(anneeString);
                try {
                    Inscritsprives inscritsprives = metier.findInscritsprivesD1SouscentreD1GroupedexamensD1Session(nomSouscentreSelected, niveauSelected, typeSelected, anneeSelected);
                    metier.supprimerInscritsprives(inscritsprives);
                    JOptionPane.showMessageDialog(this, "Effectif supprimé avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer l'effectif des inscrits du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerEffectifActionPerformed

    private void jButtonListerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerActionPerformed
        infoSaisies();
        List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres contenant des inscrits privés
        if (groupedexamensEnstring.equals("") || anneeString.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens et une session !");
        } else {
            anneeSelected = Integer.parseInt(anneeString);
            tousInscritsprives = metier.findAllInscritsprivesD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
            if (!tousInscritsprives.isEmpty()) {
                for (Inscritsprives inscritsprives : tousInscritsprives) {
                    if (!souscentreList.contains(inscritsprives.getSouscentre())) {
                        souscentreList.add(inscritsprives.getSouscentre());
                    }
                }
                try {
                    List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                    for (Region region : regions) {
                        int i = 1;
                        for (Souscentre souscentre : souscentreList) {
                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                                Inscritsprives sonInscritsprives = new Inscritsprives();
                                for (Inscritsprives inscritsprives : tousInscritsprives) {
                                    if (inscritsprives.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                        sonInscritsprives = inscritsprives;
                                        break;
                                    }
                                }
                                Map<String, Object> row = new HashMap<>();
                                row.put("session", anneeSelected);
                                row.put("examen", groupedexamensEnstring);
                                row.put("region", region.getNomreg());
                                row.put("num", i++);
                                row.put("souscentre", souscentre.getNomsouscent());
                                row.put("nbInscrits", sonInscritsprives.getEffectif());
                                datasource.add(row);

                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeInscritsprivesReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Aucun effectif d'inscrits de sites privés trouvé dans la base des données !");
            }
        }
        tousInscritsprives.clear();
        souscentreList.clear();
    }//GEN-LAST:event_jButtonListerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatEntretienSitesPrives.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatEntretienSitesPrives.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatEntretienSitesPrives.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatEntretienSitesPrives.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatEntretienSitesPrives().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonAnnulerChoixExamen;
    private javax.swing.JButton jButtonAnnulerEffectif;
    private javax.swing.JButton jButtonCreerEffectif;
    private javax.swing.JButton jButtonCreerEtats;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonLister;
    private javax.swing.JButton jButtonMettreAjourEtats;
    private javax.swing.JButton jButtonSupprimerEffectif;
    private javax.swing.JButton jButtonSupprimerEtats;
    private javax.swing.JButton jButtonVisualiserEtats;
    private javax.swing.JComboBox<String> jComboBoxArrondissementSouscentre;
    private javax.swing.JComboBox<String> jComboBoxDepartementSouscentre;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxRegionSouscentre;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxSouscentre;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelArrondissementSouscentre;
    private javax.swing.JLabel jLabelDepartementSouscentre;
    private javax.swing.JLabel jLabelEffectif;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelRegionSouscentre;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelSouscentre;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanelChoixExamen;
    private javax.swing.JPanel jPanelChoixSouscentre;
    private javax.swing.JPanel jPanelGestionEtat;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldEffectif;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Region> regions = null;
    private List<Examen> examens = null;
    private List<Option> options = null;
    private List<Matiere> matieres = null;
    private Examen examenSelected = null;
    private String[] examensList = null;
    private List<Examen> examensSelected = new ArrayList<>();
    private List<Departement> departementsSouscentre = null;
    private List<Arrondissement> arrondissementsSouscentre = null;
    private List<Departement> departementsListe = null;
    private List<Arrondissement> arrondissementsListe = null;
    private List<Souscentre> souscentres = null;
    private Souscentre souscentreSelected = null;
    private String[] sessionsCombo = null;
    private String[] regionsSouscentreCombo = null;
    private String[] departementsSouscentreCombo = null;
    private String[] arrondissementsSouscentreCombo = null;
    private String[] souscentresCombo = null;
    private String referenceImputationSelected = "";
    private String nomRegionSouscentreSelected = "";
    private String nomDepartementSouscentreSelected = "";
    private String nomArrondissementSouscentreSelected = "";
    private String nomSouscentreSelected = "";
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private List<Caisse> caisses = null;
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private int total = 0,effectif= 0, entretien = 0, inscription = 0, amortis = 0, nbexams = 0;
    private List<Inscritsprives> tousInscritsprives = null;
    private String effectifString = "";
    private int effectifSaisi = 0;
    private boolean continuerEffectif = false;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        regions = metier.findAllRegions();
        souscentres = metier.findAllSouscentres();
        examens = metier.findAllExamens();
        options = metier.findAllOptions();
        matieres = metier.findAllMatieres();

        //on remplit la combobox des régions du sous-centre
        regionsSouscentreCombo = new String[regions.size() + 1];
        regionsSouscentreCombo[0] = "---";
        int i = 1;
        for (Region region : regions) {
            regionsSouscentreCombo[i++] = region.getNomreg();
        }
        jComboBoxRegionSouscentre.setModel(new DefaultComboBoxModel(regionsSouscentreCombo));

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int k = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[k++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types d'examen
        typesCombo = new String[]{"---", "GEN", "TOUT ESTP"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "TOUT"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        remplirDepartementSouscentreCombobox();
        remplirArrondissementSouscentreCombobox();
        remplirSouscentreCombobox();
    }

    private void infoSaisies() {
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        effectifString = jTextFieldEffectif.getText();
    }

    private void remplirDepartementSouscentreCombobox() {
        nomRegionSouscentreSelected = (String) jComboBoxRegionSouscentre.getSelectedItem();
        departementsSouscentre = metier.findAllDepartementsD1Region(nomRegionSouscentreSelected);
        //on remplit la combobox des départements du sous-centre
        departementsSouscentreCombo = new String[departementsSouscentre.size() + 1];
        departementsSouscentreCombo[0] = "---";
        int i = 1;
        for (Departement departement : departementsSouscentre) {
            departementsSouscentreCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartementSouscentre.setModel(new DefaultComboBoxModel(departementsSouscentreCombo));
    }

    private void remplirArrondissementSouscentreCombobox() {
        nomDepartementSouscentreSelected = (String) jComboBoxDepartementSouscentre.getSelectedItem();
        arrondissementsSouscentre = metier.findAllArrondissementsD1Departement(nomDepartementSouscentreSelected);
        //on remplit la combobox des arrondissements
        arrondissementsSouscentreCombo = new String[arrondissementsSouscentre.size() + 1];
        arrondissementsSouscentreCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissementsSouscentre) {
            arrondissementsSouscentreCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissementSouscentre.setModel(new DefaultComboBoxModel(arrondissementsSouscentreCombo));
    }

    private void remplirSouscentreCombobox() {
        nomArrondissementSouscentreSelected = (String) jComboBoxArrondissementSouscentre.getSelectedItem();
        souscentres = metier.findAllSouscentresPrivesD1Arrondissement(nomArrondissementSouscentreSelected);
        //on remplit la combobox des sous-centres
        souscentresCombo = new String[souscentres.size() + 1];
        souscentresCombo[0] = "---";
        int i = 1;
        for (Souscentre souscentre : souscentres) {
            souscentresCombo[i++] = souscentre.getNomsouscent();
        }
        jComboBoxSouscentre.setModel(new DefaultComboBoxModel(souscentresCombo));
    }

    private void determinerCoutESTP(Inscritsprives inscritsprives, Map<Souscentre, ArrayList<Character>> souscentrePhasesProbIndMap, Map<Souscentre, ArrayList<Character>> souscentrePhasesBacIndMap, Map<Souscentre, ArrayList<Character>> souscentrePhasesProbComMap, Map<Souscentre, ArrayList<Character>> souscentrePhasesBacComMap) {
        total = 0;
        inscription = 0;
        entretien = 0;
        amortis = 0;
        nbexams = 0;
        effectif= 0;
        effectif = inscritsprives.getEffectif();
        Souscentre souscentre = inscritsprives.getSouscentre();
        //détermination du nbexams
        ArrayList<Character> phasesList1 = souscentrePhasesProbIndMap.get(souscentre);
        ArrayList<Character> phasesList2 = souscentrePhasesBacIndMap.get(souscentre);
        ArrayList<Character> phasesList3 = souscentrePhasesProbComMap.get(souscentre);
        ArrayList<Character> phasesList4 = souscentrePhasesBacComMap.get(souscentre);
        if (!phasesList1.isEmpty() && !phasesList2.isEmpty() && !phasesList3.isEmpty() && !phasesList4.isEmpty()) {
            nbexams = 4;
        }
        if ((!phasesList1.isEmpty() && !phasesList2.isEmpty() && !phasesList3.isEmpty() && phasesList4.isEmpty()) || (!phasesList1.isEmpty() && !phasesList2.isEmpty() && phasesList3.isEmpty() && !phasesList4.isEmpty()) || (!phasesList1.isEmpty() && phasesList2.isEmpty() && !phasesList3.isEmpty() && !phasesList4.isEmpty()) || (phasesList1.isEmpty() && !phasesList2.isEmpty() && !phasesList3.isEmpty() && !phasesList4.isEmpty())) {
            nbexams = 3;
        }
        if ((!phasesList1.isEmpty() && !phasesList2.isEmpty() && phasesList3.isEmpty() && phasesList4.isEmpty()) || (phasesList1.isEmpty() && phasesList2.isEmpty() && !phasesList3.isEmpty() && !phasesList4.isEmpty()) || (!phasesList1.isEmpty() && phasesList2.isEmpty() && phasesList3.isEmpty() && !phasesList4.isEmpty()) || (phasesList1.isEmpty() && !phasesList2.isEmpty() && !phasesList3.isEmpty() && phasesList4.isEmpty()) || (phasesList1.isEmpty() && !phasesList2.isEmpty() && phasesList3.isEmpty() && !phasesList4.isEmpty()) || (!phasesList1.isEmpty() && phasesList2.isEmpty() && !phasesList3.isEmpty() && phasesList4.isEmpty())) {
            nbexams = 2;
        }
        if ((!phasesList1.isEmpty() && phasesList2.isEmpty() && phasesList3.isEmpty() && phasesList4.isEmpty()) || (phasesList1.isEmpty() && !phasesList2.isEmpty() && phasesList3.isEmpty() && phasesList4.isEmpty()) || (phasesList1.isEmpty() && phasesList2.isEmpty() && !phasesList3.isEmpty() && phasesList4.isEmpty()) || (phasesList1.isEmpty() && phasesList2.isEmpty() && phasesList3.isEmpty() && !phasesList4.isEmpty())) {
            nbexams = 1;
        }

        if (nbexams > 0) {
            entretien = 50000;
        }
        if (nbexams == 1) {
            amortis = 50000;
            if (effectif >= 1 && effectif <= 1000) {
                inscription = 100000;
            }
            if (effectif >= 1001 && effectif <= 2000) {
                inscription = 120000;
            }
            if (effectif >= 2001 && effectif <= 3000) {
                inscription = 140000;
            }
            if (effectif >= 3001 && effectif <= 4000) {
                inscription = 160000;
            }
            if (effectif >= 4001 && effectif <= 5000) {
                inscription = 180000;
            }
            if (effectif >= 5001 && effectif <= 6000) {
                inscription = 200000;
            }
            if (effectif > 6000) {
                inscription = 220000;
            }
        }
        if (nbexams == 2) {
            amortis = 100000;
            if (effectif >= 1 && effectif <= 1000) {
                inscription = 115000;
            }
            if (effectif >= 1001 && effectif <= 2000) {
                inscription = 135000;
            }
            if (effectif >= 2001 && effectif <= 3000) {
                inscription = 155000;
            }
            if (effectif >= 3001 && effectif <= 4000) {
                inscription = 175000;
            }
            if (effectif >= 4001 && effectif <= 5000) {
                inscription = 195000;
            }
            if (effectif >= 5001 && effectif <= 6000) {
                inscription = 215000;
            }
            if (effectif > 6000) {
                inscription = 235000;
            }
        }
        if (nbexams == 3) {
            amortis = 100000;
            if (effectif >= 1 && effectif <= 1000) {
                inscription = 130000;
            }
            if (effectif >= 1001 && effectif <= 2000) {
                inscription = 150000;
            }
            if (effectif >= 2001 && effectif <= 3000) {
                inscription = 170000;
            }
            if (effectif >= 3001 && effectif <= 4000) {
                inscription = 190000;
            }
            if (effectif >= 4001 && effectif <= 5000) {
                inscription = 210000;
            }
            if (effectif >= 5001 && effectif <= 6000) {
                inscription = 230000;
            }
            if (effectif > 6000) {
                inscription = 250000;
            }
        }
        if (nbexams == 4) {
            amortis = 100000;
            if (effectif >= 1 && effectif <= 1000) {
                inscription = 145000;
            }
            if (effectif >= 1001 && effectif <= 2000) {
                inscription = 165000;
            }
            if (effectif >= 2001 && effectif <= 3000) {
                inscription = 185000;
            }
            if (effectif >= 3001 && effectif <= 4000) {
                inscription = 205000;
            }
            if (effectif >= 4001 && effectif <= 5000) {
                inscription = 225000;
            }
            if (effectif >= 5001 && effectif <= 6000) {
                inscription = 245000;
            }
            if (effectif > 6000) {
                inscription = 265000;
            }
        }
        if (nbexams == 5) {
            amortis = 100000;
            if (effectif >= 1 && effectif <= 1000) {
                inscription = 160000;
            }
            if (effectif >= 1001 && effectif <= 2000) {
                inscription = 180000;
            }
            if (effectif >= 2001 && effectif <= 3000) {
                inscription = 200000;
            }
            if (effectif >= 3001 && effectif <= 4000) {
                inscription = 220000;
            }
            if (effectif >= 4001 && effectif <= 5000) {
                inscription = 240000;
            }
            if (effectif >= 5001 && effectif <= 6000) {
                inscription = 260000;
            }
            if (effectif > 6000) {
                inscription = 280000;
            }
        }

        total = entretien + amortis + inscription;
    }

    private void determinerCoutESG(Inscritsprives inscritsprives, Map<Souscentre, ArrayList<Character>> souscentrePhasesProbMap, Map<Souscentre, ArrayList<Character>> souscentrePhasesBacMap) {
        total = 0;
        inscription = 0;
        entretien = 0;
        amortis = 0;
        nbexams = 0;
        effectif= 0;
        effectif = inscritsprives.getEffectif();
        Souscentre souscentre = inscritsprives.getSouscentre();
        ArrayList<Character> phasesProbList = souscentrePhasesProbMap.get(souscentre);
        ArrayList<Character> phasesBacList = souscentrePhasesBacMap.get(souscentre);
        if (!phasesProbList.isEmpty() && !phasesBacList.isEmpty()) {
            nbexams = 2;
        }
        if ((phasesProbList.isEmpty() && !phasesBacList.isEmpty()) || (!phasesProbList.isEmpty() && phasesBacList.isEmpty())) {
            nbexams = 1;
        }
        if (nbexams == 1) {
            if ((phasesProbList.isEmpty() && phasesBacList.size() == 1) || (phasesProbList.size() == 1 && phasesBacList.isEmpty()) || (phasesProbList.isEmpty() && phasesBacList.size() == 2) || (phasesProbList.size() == 2 && phasesBacList.isEmpty())) {
                entretien = 50000;
            }
            if ((phasesProbList.isEmpty() && phasesBacList.size() == 3) || (phasesProbList.size() == 3 && phasesBacList.isEmpty())) {
                entretien = 80000;
            }

            if (effectif >= 1 && effectif <= 1000) {
                inscription = 100000;
            }
            if (effectif >= 1001 && effectif <= 2000) {
                inscription = 120000;
            }
            if (effectif >= 2001 && effectif <= 3000) {
                inscription = 140000;
            }
            if (effectif >= 3001 && effectif <= 4000) {
                inscription = 160000;
            }
            if (effectif >= 4001 && effectif <= 5000) {
                inscription = 180000;
            }
            if (effectif >= 5001 && effectif <= 6000) {
                inscription = 200000;
            }
            if (effectif > 6000) {
                inscription = 220000;
            }
        }
        if (nbexams == 2) {
            if ((phasesProbList.size() == 1 && phasesBacList.size() == 1) || (phasesProbList.size() == 2 && phasesBacList.size() == 1) || (phasesProbList.size() == 1 && phasesBacList.size() == 2) || (phasesProbList.size() == 2 && phasesBacList.size() == 2)) {
                entretien = 80000;
            }
            if ((phasesProbList.size() == 1 && phasesBacList.size() == 3) || (phasesProbList.size() == 3 && phasesBacList.size() == 1) || (phasesProbList.size() == 2 && phasesBacList.size() == 3) || (phasesProbList.size() == 3 && phasesBacList.size() == 2) || (phasesProbList.size() == 3 && phasesBacList.size() == 3)) {
                entretien = 100000;
            }

            if (effectif >= 1 && effectif <= 1000) {
                inscription = 115000;
            }
            if (effectif >= 1001 && effectif <= 2000) {
                inscription = 135000;
            }
            if (effectif >= 2001 && effectif <= 3000) {
                inscription = 155000;
            }
            if (effectif >= 3001 && effectif <= 4000) {
                inscription = 175000;
            }
            if (effectif >= 4001 && effectif <= 5000) {
                inscription = 195000;
            }
            if (effectif >= 5001 && effectif <= 6000) {
                inscription = 215000;
            }
            if (effectif > 6000) {
                inscription = 235000;
            }
        }

        total = entretien + inscription;
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    private void validerEffectif(String nbreString) {
        try {
            effectifSaisi = Integer.parseInt(nbreString);
            continuerEffectif = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "L'effectif doit être fourni et contenir uniquement des chiffres entiers!");
            continuerEffectif = false;
        }
    }
}
