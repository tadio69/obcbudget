package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Arrondissement;
import couche_jpa.Caisse;
import couche_jpa.Centrebilletage;
import couche_jpa.Departement;
import couche_jpa.Eltpratiquestt;
import couche_jpa.Eltpratiquesttsecret;
import couche_jpa.Examen;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Option;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Secretariat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_jpa.Specialisation;
import couche_jpa.Specialisationsec;
import couche_jpa.Statistique;
import couche_jpa.Statsecretariat;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 *
 * @author famille chijou
 */
public class VueEtatVacationPratiqueSTTetBPind extends javax.swing.JFrame {

    /**
     * Creates new form VueEtatMatiereDoeuvre
     */
    public VueEtatVacationPratiqueSTTetBPind() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jPanelGestionEtat = new javax.swing.JPanel();
        jButtonCreerEtats = new javax.swing.JButton();
        jButtonMettreAjourEtats = new javax.swing.JButton();
        jButtonVisualiserEtats = new javax.swing.JButton();
        jButtonSupprimerEtats = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jPanelChoixSouscentre = new javax.swing.JPanel();
        jLabelRegion = new javax.swing.JLabel();
        jComboBoxRegion = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixSouscentrepratique = new javax.swing.JButton();
        jLabelDepartement = new javax.swing.JLabel();
        jComboBoxDepartement = new javax.swing.JComboBox<>();
        jLabelNomCentre = new javax.swing.JLabel();
        jComboBoxSouscentre = new javax.swing.JComboBox<>();
        jLabelDepartement1 = new javax.swing.JLabel();
        jComboBoxArrondissement = new javax.swing.JComboBox<>();
        jLabelExamen1 = new javax.swing.JLabel();
        jComboBoxNumsec = new javax.swing.JComboBox<>();
        jTextFieldEtablissement = new javax.swing.JTextField();
        jPanelCout = new javax.swing.JPanel();
        jButtonCreerParametres = new javax.swing.JButton();
        jButtonListerParametres = new javax.swing.JButton();
        jButtonAnnulerParametres = new javax.swing.JButton();
        jLabelNbvacation = new javax.swing.JLabel();
        jTextFieldNbvacation = new javax.swing.JTextField();
        jButtonSupprimerParametres = new javax.swing.JButton();
        jTextFieldNbchefsal = new javax.swing.JTextField();
        jLabelNbchefsal = new javax.swing.JLabel();
        jLabelNbepreuves = new javax.swing.JLabel();
        jTextFieldNbepreuves = new javax.swing.JTextField();
        jLabelNbcorrecteurs = new javax.swing.JLabel();
        jTextFieldNbcorrecteurs = new javax.swing.JTextField();
        jLabelSpecialite = new javax.swing.JLabel();
        jComboBoxSpecialite = new javax.swing.JComboBox<>();
        jPanelChoixExamen = new javax.swing.JPanel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixExamen = new javax.swing.JButton();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();
        jLabelExamen = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT VACATION DE PRATIQUE STT ET BP INDUSTRIEL");

        jPanelGestionEtat.setBackground(new java.awt.Color(0, 255, 255));
        jPanelGestionEtat.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer l'état", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 102, 255))); // NOI18N

        jButtonCreerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEtats.setText("Créer");
        jButtonCreerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEtatsActionPerformed(evt);
            }
        });

        jButtonMettreAjourEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjourEtats.setText("Mettre à jour");
        jButtonMettreAjourEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourEtatsActionPerformed(evt);
            }
        });

        jButtonVisualiserEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserEtats.setText("Visualiser");
        jButtonVisualiserEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserEtatsActionPerformed(evt);
            }
        });

        jButtonSupprimerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEtats.setText("Supprimer");
        jButtonSupprimerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEtatsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelGestionEtatLayout = new javax.swing.GroupLayout(jPanelGestionEtat);
        jPanelGestionEtat.setLayout(jPanelGestionEtatLayout);
        jPanelGestionEtatLayout.setHorizontalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jButtonCreerEtats)
                .addGap(21, 21, 21)
                .addComponent(jButtonMettreAjourEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiserEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerEtats)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanelGestionEtatLayout.setVerticalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonMettreAjourEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCreerEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonSupprimerEtats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVisualiserEtats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jPanelChoixSouscentre.setBackground(new java.awt.Color(153, 255, 255));
        jPanelChoixSouscentre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un sous-centre pratique", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jLabelRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegion.setText("Région :");

        jComboBoxRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixSouscentrepratique.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixSouscentrepratique.setText("Annuler");
        jButtonAnnulerChoixSouscentrepratique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixSouscentrepratiqueActionPerformed(evt);
            }
        });

        jLabelDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartement.setText("Département :");

        jComboBoxDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementActionPerformed(evt);
            }
        });

        jLabelNomCentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNomCentre.setText("Sous-centre pratique:");

        jComboBoxSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSouscentreActionPerformed(evt);
            }
        });

        jLabelDepartement1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartement1.setText("Arrondissement :");

        jComboBoxArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementActionPerformed(evt);
            }
        });

        jLabelExamen1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen1.setText("Secrétariat N° :");

        jComboBoxNumsec.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxNumsec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNumsecActionPerformed(evt);
            }
        });

        jTextFieldEtablissement.setEditable(false);
        jTextFieldEtablissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldEtablissement.setEnabled(false);

        javax.swing.GroupLayout jPanelChoixSouscentreLayout = new javax.swing.GroupLayout(jPanelChoixSouscentre);
        jPanelChoixSouscentre.setLayout(jPanelChoixSouscentreLayout);
        jPanelChoixSouscentreLayout.setHorizontalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelNomCentre)
                    .addComponent(jLabelRegion)
                    .addComponent(jLabelDepartement)
                    .addComponent(jLabelDepartement1)
                    .addComponent(jLabelExamen1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addComponent(jComboBoxNumsec, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldEtablissement))
                    .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelChoixSouscentreLayout.createSequentialGroup()
                                    .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(46, 46, 46)
                                    .addComponent(jButtonAnnulerChoixSouscentrepratique))
                                .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 60, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelChoixSouscentreLayout.setVerticalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixSouscentrepratique, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDepartement1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNomCentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelExamen1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNumsec, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldEtablissement, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanelCout.setBackground(new java.awt.Color(255, 204, 204));
        jPanelCout.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Paramètres de calcul (NB: nombre de vacations par examinateur)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jButtonCreerParametres.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerParametres.setText("Créer");
        jButtonCreerParametres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerParametresActionPerformed(evt);
            }
        });

        jButtonListerParametres.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonListerParametres.setText("Lister");
        jButtonListerParametres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerParametresActionPerformed(evt);
            }
        });

        jButtonAnnulerParametres.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerParametres.setText("Annuler");
        jButtonAnnulerParametres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerParametresActionPerformed(evt);
            }
        });

        jLabelNbvacation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbvacation.setText("Nombre vacations :");

        jTextFieldNbvacation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonSupprimerParametres.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerParametres.setText("Supprimer");
        jButtonSupprimerParametres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerParametresActionPerformed(evt);
            }
        });

        jTextFieldNbchefsal.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelNbchefsal.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbchefsal.setText("Nombre chefs de salle/atelier :");

        jLabelNbepreuves.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbepreuves.setText("Nombre épreuves :");

        jTextFieldNbepreuves.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelNbcorrecteurs.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbcorrecteurs.setText("Nombre correcteurs/examinateurs :");

        jTextFieldNbcorrecteurs.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelSpecialite.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSpecialite.setText("Spécialité :");

        jComboBoxSpecialite.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanelCoutLayout = new javax.swing.GroupLayout(jPanelCout);
        jPanelCout.setLayout(jPanelCoutLayout);
        jPanelCoutLayout.setHorizontalGroup(
            jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCoutLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelSpecialite)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSpecialite, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelCoutLayout.createSequentialGroup()
                        .addComponent(jButtonCreerParametres)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonListerParametres)
                        .addGroup(jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelCoutLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jButtonSupprimerParametres)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonAnnulerParametres))
                            .addGroup(jPanelCoutLayout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(jLabelNbchefsal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldNbchefsal, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanelCoutLayout.createSequentialGroup()
                        .addGroup(jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelNbvacation)
                            .addComponent(jLabelNbepreuves))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelCoutLayout.createSequentialGroup()
                                .addComponent(jTextFieldNbepreuves, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jLabelNbcorrecteurs)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldNbcorrecteurs, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextFieldNbvacation, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 12, Short.MAX_VALUE))
        );
        jPanelCoutLayout.setVerticalGroup(
            jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCoutLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxSpecialite, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelSpecialite, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelNbvacation, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelNbchefsal, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldNbchefsal, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldNbvacation, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNbepreuves, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNbcorrecteurs, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNbcorrecteurs, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNbepreuves, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonListerParametres, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSupprimerParametres, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCreerParametres, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerParametres, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanelChoixExamen.setBackground(new java.awt.Color(102, 255, 153));
        jPanelChoixExamen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un groupe d'examens et une session", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixExamen.setText("Annuler");
        jButtonAnnulerChoixExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixExamenActionPerformed(evt);
            }
        });

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxNiveau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNiveauActionPerformed(evt);
            }
        });

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jTextArea.setColumns(20);
        jTextArea.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea.setRows(5);
        jTextArea.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea);

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        javax.swing.GroupLayout jPanelChoixExamenLayout = new javax.swing.GroupLayout(jPanelChoixExamen);
        jPanelChoixExamen.setLayout(jPanelChoixExamenLayout);
        jPanelChoixExamenLayout.setHorizontalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(0, 10, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabelSession)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(jButtonAnnulerChoixExamen)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixExamenLayout.setVerticalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jPanelCout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(273, 273, 273)
                                .addComponent(jButtonFermer))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addComponent(jLabel1)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelCout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(22, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCreerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEtatsActionPerformed
        infoSaisies();
        Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueMap = new HashMap<>();//contient chaque sous-centre et le tableau de ses statistiques
        Map<Souscentre, ArrayList<Eltpratiquestt>> souscentreEltpratiquesttMap = new HashMap<>();//contient chaque sous-centre et le tableau de ses Eltpratiquestt

        ArrayList<Souscentre> souscentresAeltpratiquesttList = new ArrayList<>();//liste des sous-centres ayant des Eltpratiquestt 
        Map<Souscentre, ArrayList<Eltpratiquesttsecret>> SouscentreEltpratiquesttsecretMap = new HashMap<>();//contient chaque secretariat et le tableau de ses Eltpratiquesttsecret        
        ArrayList<Souscentre> souscentresAeltpratiquesttsecretList = new ArrayList<>();//liste des sous-centres ayant des Eltpratiquesttsecret 
        ArrayList<Souscentre> souscentresList = new ArrayList<>();//liste des sous-centres ayant des Eltpratiquestt et des Eltpratiquesttsecret
        List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats
        Map<Souscentre, ArrayList<Secretariat>> souscentreSecretariatsMap = new HashMap<>();//contient les sous-centres chacun avec la liste de ses secretariats le cas échéant qui ont des Eltpratiquesttsecret
        Map<Secretariat, ArrayList<Statsecretariat>> secretariatStatsecretariatsMap = new HashMap<>();//contient l'ensemble des secrétariats d'un groupe d'examens avec chacun avec la liste de ses Statsecretariats
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION PRATIQUE 1");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
            if (!caisses.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de vacation pratique TI/ESG !");
            } else {
                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                //remplissage de souscentreStatistiqueMap
                for (Examen e : examensSelected) {
                    List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                    for (Statistique s : lesStats) {
                        ArrayList<Statistique> statList = new ArrayList<>();
                        if (souscentreStatistiqueMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueMap
                            statList = souscentreStatistiqueMap.get(s.getSouscentre());
                            statList.add(s);//on lui ajoute s
                            souscentreStatistiqueMap.put(s.getSouscentre(), statList);
                        } else {
                            statList.add(s);
                            souscentreStatistiqueMap.put(s.getSouscentre(), statList);
                        }
                    }
                }

                lesEltpratiquestt = metier.findAllEltpratiquesttD1GroupedexamensD1Session(niveauSelected, typeSelected, anneeSelected);
                lesEltpratiquesttsecret = metier.findAllEltpratiquesttsecretD1GroupedexamensD1Session(niveauSelected, typeSelected, anneeSelected);

                if (lesEltpratiquestt.isEmpty() && lesEltpratiquesttsecret.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Aucun paramètre de pratique 1 trouvée dans la base des données pour ce groupe d'examens !");
                } else {
                    //remplissage de souscentreEltpratiquesttMap
                    for (Souscentre souscentre : souscentreStatistiqueMap.keySet()) {//on ne gère pas les éléments de souscentreEltpratiquesttMap dont le sous-centre n'a pas de statistique 
                        ArrayList<Eltpratiquestt> eltpratiquesttD1souscentreList = new ArrayList<>();//liste des Eltpratiquestt du souscentre courant
                        for (Eltpratiquestt eltpratiquestt : lesEltpratiquestt) {
                            if (eltpratiquestt.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                eltpratiquesttD1souscentreList.add(eltpratiquestt);
                            }
                        }
                        if (!eltpratiquesttD1souscentreList.isEmpty()) {
                            souscentreEltpratiquesttMap.put(souscentre, eltpratiquesttD1souscentreList);
                        }
                    }

                    //remplissage souscentreAsecretariatsDemultipliesList
                    secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                    if (!secretariats.isEmpty()) {
                        for (Secretariat sec : secretariats) {
                            if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                                souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                            }
                        }
                    }

                    //remplissage secretariatStatsecretariatsMap
                    for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                        List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreEtSession(souscentre.getNomsouscent(), anneeSelected);
                        List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                        for (Secretariat sec : secretariatsList) {
                            ArrayList<Statsecretariat> statsList = new ArrayList<>();
                            for (Statsecretariat statsec : statsecretariatsList) {
                                if (statsec.getSecretariat().getNumsec() == sec.getNumsec()) {
                                    if (secretariatStatsecretariatsMap.containsKey(sec)) {//si le présent secretariat est dans secretariatStatsecretariatsMap
                                        statsList = secretariatStatsecretariatsMap.get(sec);
                                    }
                                    statsList.add(statsec);
                                    secretariatStatsecretariatsMap.put(sec, statsList);
                                }
                            }
                        }
                    }

                    for (Souscentre scentre : souscentres) {
                        for (Eltpratiquestt eltpratiquestt : lesEltpratiquestt) {
                            if (!souscentresAeltpratiquesttList.contains(scentre) && eltpratiquestt.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                souscentresAeltpratiquesttList.add(scentre);
                            }
                        }
                        for (Eltpratiquesttsecret eltpratiquesttsecret : lesEltpratiquesttsecret) {
                            if (!souscentresAeltpratiquesttsecretList.contains(scentre) && eltpratiquesttsecret.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                souscentresAeltpratiquesttsecretList.add(scentre);
                            }
                        }
                    }

                    //remplissage de souscentreEltpratiquesttsecretMap
                    if (!lesEltpratiquesttsecret.isEmpty()) {
                        for (Souscentre scentre : souscentresAeltpratiquesttsecretList) {
                            ArrayList<Eltpratiquesttsecret> eltpratiquesttsecretsList = new ArrayList<>();
                            for (Eltpratiquesttsecret eltpratiquesttsecret : lesEltpratiquesttsecret) {
                                if (eltpratiquesttsecret.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                    eltpratiquesttsecretsList.add(eltpratiquesttsecret);
                                }
                            }
                            SouscentreEltpratiquesttsecretMap.put(scentre, eltpratiquesttsecretsList);
                        }
                    }

                    //on met tous les sous-centres dans souscentresList
                    for (Souscentre scentre : souscentresAeltpratiquesttList) {
                        if (!souscentresList.contains(scentre)) {
                            souscentresList.add(scentre);
                        }
                    }

                    for (Souscentre scentre : souscentresAeltpratiquesttsecretList) {
                        if (!souscentresList.contains(scentre)) {
                            souscentresList.add(scentre);
                        }
                    }
                    //remplissage de souscentreSecretariatsMap: on ne considère que ceux qui ont des Eltpratiquesttsecret 
                    for (Souscentre souscentre : souscentreStatistiqueMap.keySet()) {
                        ArrayList<Secretariat> secretariatsList = new ArrayList<>();
                        for (Secretariat sec : secretariatStatsecretariatsMap.keySet()) {
                            for (Eltpratiquesttsecret eltpratiquesttsecret : SouscentreEltpratiquesttsecretMap.get(souscentre)) {
                                if (eltpratiquesttsecret.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation()) && eltpratiquesttsecret.getSecretariat().getNumsec() == sec.getNumsec()) {
                                    secretariatsList.add(sec);
                                    break;
                                }
                            }
                        }
                        if (!secretariatsList.isEmpty()) {
                            souscentreSecretariatsMap.put(souscentre, secretariatsList);
                        }
                    }

                }
                boolean testSicreer = false;
                if (!souscentreEltpratiquesttMap.isEmpty() || !SouscentreEltpratiquesttsecretMap.isEmpty()) {
                    try {
                        for (Souscentre souscentre : souscentresList) {
                            if (souscentreStatistiqueMap.containsKey(souscentre)) {
                                if (souscentreEltpratiquesttMap.containsKey(souscentre) || SouscentreEltpratiquesttsecretMap.containsKey(souscentre)) {
                                    int nbtours = 1;
                                    int net = 0;
                                    if (souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                        if (!souscentreSecretariatsMap.get(souscentre).isEmpty()) {
                                            nbtours = souscentreSecretariatsMap.get(souscentre).size();//il ne contient que ceux des secrétariats qui ont des Eltpratiquesttsecret
                                        }
                                    }
                                    for (int j = 0; j < nbtours; j++) {
                                        if (souscentreEltpratiquesttMap.containsKey(souscentre)) {
                                            for (Eltpratiquestt eltpratiquestt : souscentreEltpratiquesttMap.get(souscentre)) {
                                                if (typeSelected.equals("STT PROF")) {
                                                    determinerCoutD1EltpratiqueBPCOM(souscentre, souscentreStatistiqueMap, eltpratiquestt, niveauSelected);
                                                } else {
                                                    determinerCoutD1Eltpratiquestt(souscentre, souscentreStatistiqueMap, eltpratiquestt, niveauSelected);
                                                }
                                                int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                net += totalArrondi;
                                            }
                                        } else {
                                            Secretariat secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(j);//secrétariat courant ayant des Eltpratiquesttsecret                                                            

                                            //arrêt ici
                                            for (Eltpratiquesttsecret eltpratiquesttsecret : SouscentreEltpratiquesttsecretMap.get(souscentre)) {
                                                if (eltpratiquesttsecret.getSecretariat().getNumsec() == secretariatCourant.getNumsec() && eltpratiquesttsecret.getSecretariat().getEtablissement().getAbreviation().equals(secretariatCourant.getEtablissement().getAbreviation())) {
                                                    if (typeSelected.equals("STT PROF")) {
                                                        determinerCoutD1EltpratiqueBPCOMsecret(secretariatCourant, secretariatStatsecretariatsMap, eltpratiquesttsecret, niveauSelected);
                                                    } else {
                                                        determinerCoutD1Eltpratiquesttsecret(secretariatCourant, secretariatStatsecretariatsMap, eltpratiquesttsecret, niveauSelected);
                                                    }
                                                    int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                    net += totalArrondi;
                                                }
                                            }
                                        }
                                    }

                                    metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                    testSicreer = true;
                                }
                            }
                        }
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testSicreer) {
                        JOptionPane.showMessageDialog(this, "Etats de vacation pratique 1 créés avec succès pour ce groupe d'examens !");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Aucun paramètre de pratique 1 trouvée dans la base des données pour ce groupe d'examens !");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Les champs session et imputation sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonCreerEtatsActionPerformed

    private void jButtonMettreAjourEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourEtatsActionPerformed
        infoSaisies();
        Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueMap = new HashMap<>();//contient chaque sous-centre et le tableau de ses statistiques
        Map<Souscentre, ArrayList<Eltpratiquestt>> souscentreEltpratiquesttMap = new HashMap<>();//contient chaque sous-centre et le tableau de ses Eltpratiquestt

        ArrayList<Souscentre> souscentresAeltpratiquesttList = new ArrayList<>();//liste des sous-centres ayant des Eltpratiquestt 
        Map<Souscentre, ArrayList<Eltpratiquesttsecret>> SouscentreEltpratiquesttsecretMap = new HashMap<>();//contient chaque secretariat et le tableau de ses Eltpratiquesttsecret        
        ArrayList<Souscentre> souscentresAeltpratiquesttsecretList = new ArrayList<>();//liste des sous-centres ayant des Eltpratiquesttsecret 
        ArrayList<Souscentre> souscentresList = new ArrayList<>();//liste des sous-centres ayant des Eltpratiquestt et des Eltpratiquesttsecret
        List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats
        Map<Souscentre, ArrayList<Secretariat>> souscentreSecretariatsMap = new HashMap<>();//contient les sous-centres chacun avec la liste de ses secretariats le cas échéant qui ont des Eltpratiquesttsecret
        Map<Secretariat, ArrayList<Statsecretariat>> secretariatStatsecretariatsMap = new HashMap<>();//contient l'ensemble des secrétariats d'un groupe d'examens avec chacun avec la liste de ses Statsecretariats
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de vacation pratique 1 pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION PRATIQUE 1");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de vacation de pratique 1 n'existe encore pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    //on conserve quelques info de ces anciennes caisses
                    Groupe groupe = caisses.get(0).getGroupe();
                    sessionSelected = caisses.get(0).getSession();
                    //on supprime toutes les anciennes caisses du groupe d'examens
                    for (Caisse c : caisses) {
                        metier.supprimerCaisse(c);
                    }

                    //remplissage de souscentreStatistiqueMap
                    for (Examen e : examensSelected) {
                        List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                        for (Statistique s : lesStats) {
                            ArrayList<Statistique> statList = new ArrayList<>();
                            if (souscentreStatistiqueMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueMap
                                statList = souscentreStatistiqueMap.get(s.getSouscentre());
                                statList.add(s);//on lui ajoute s
                                souscentreStatistiqueMap.put(s.getSouscentre(), statList);
                            } else {
                                statList.add(s);
                                souscentreStatistiqueMap.put(s.getSouscentre(), statList);
                            }
                        }
                    }

                    lesEltpratiquestt = metier.findAllEltpratiquesttD1GroupedexamensD1Session(niveauSelected, typeSelected, anneeSelected);
                    lesEltpratiquesttsecret = metier.findAllEltpratiquesttsecretD1GroupedexamensD1Session(niveauSelected, typeSelected, anneeSelected);

                    if (lesEltpratiquestt.isEmpty() && lesEltpratiquesttsecret.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Aucun paramètre de pratique 1 trouvée dans la base des données pour ce groupe d'examens !");
                    } else {
                        //remplissage de souscentreEltpratiquesttMap
                        for (Souscentre souscentre : souscentreStatistiqueMap.keySet()) {//on ne gère pas les éléments de souscentreEltpratiquesttMap dont le sous-centre n'a pas de statistique 
                            ArrayList<Eltpratiquestt> eltpratiquesttD1souscentreList = new ArrayList<>();//liste des Eltpratiquestt du souscentre courant
                            for (Eltpratiquestt eltpratiquestt : lesEltpratiquestt) {
                                if (eltpratiquestt.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                    eltpratiquesttD1souscentreList.add(eltpratiquestt);
                                }
                            }
                            if (!eltpratiquesttD1souscentreList.isEmpty()) {
                                souscentreEltpratiquesttMap.put(souscentre, eltpratiquesttD1souscentreList);
                            }
                        }

                        //remplissage souscentreAsecretariatsDemultipliesList
                        secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                        if (!secretariats.isEmpty()) {
                            for (Secretariat sec : secretariats) {
                                if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                                    souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                                }
                            }
                        }

                        //remplissage secretariatStatsecretariatsMap
                        for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                            List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreEtSession(souscentre.getNomsouscent(), anneeSelected);
                            List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                            for (Secretariat sec : secretariatsList) {
                                ArrayList<Statsecretariat> statsList = new ArrayList<>();
                                for (Statsecretariat statsec : statsecretariatsList) {
                                    if (statsec.getSecretariat().getNumsec() == sec.getNumsec()) {
                                        if (secretariatStatsecretariatsMap.containsKey(sec)) {//si le présent secretariat est dans secretariatStatsecretariatsMap
                                            statsList = secretariatStatsecretariatsMap.get(sec);
                                        }
                                        statsList.add(statsec);
                                        secretariatStatsecretariatsMap.put(sec, statsList);
                                    }
                                }
                            }
                        }

                        for (Souscentre scentre : souscentres) {
                            for (Eltpratiquestt eltpratiquestt : lesEltpratiquestt) {
                                if (!souscentresAeltpratiquesttList.contains(scentre) && eltpratiquestt.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                    souscentresAeltpratiquesttList.add(scentre);
                                }
                            }
                            for (Eltpratiquesttsecret eltpratiquesttsecret : lesEltpratiquesttsecret) {
                                if (!souscentresAeltpratiquesttsecretList.contains(scentre) && eltpratiquesttsecret.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                    souscentresAeltpratiquesttsecretList.add(scentre);
                                }
                            }
                        }

                        //remplissage de souscentreEltpratiquesttsecretMap
                        if (!lesEltpratiquesttsecret.isEmpty()) {
                            for (Souscentre scentre : souscentresAeltpratiquesttsecretList) {
                                ArrayList<Eltpratiquesttsecret> eltpratiquesttsecretsList = new ArrayList<>();
                                for (Eltpratiquesttsecret eltpratiquesttsecret : lesEltpratiquesttsecret) {
                                    if (eltpratiquesttsecret.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                        eltpratiquesttsecretsList.add(eltpratiquesttsecret);
                                    }
                                }
                                SouscentreEltpratiquesttsecretMap.put(scentre, eltpratiquesttsecretsList);
                            }
                        }

                        //on met tous les sous-centres dans souscentresList
                        for (Souscentre scentre : souscentresAeltpratiquesttList) {
                            if (!souscentresList.contains(scentre)) {
                                souscentresList.add(scentre);
                            }
                        }

                        for (Souscentre scentre : souscentresAeltpratiquesttsecretList) {
                            if (!souscentresList.contains(scentre)) {
                                souscentresList.add(scentre);
                            }
                        }
                        //remplissage de souscentreSecretariatsMap: on ne considère que ceux qui ont des Eltpratiquesttsecret 
                        for (Souscentre souscentre : souscentreStatistiqueMap.keySet()) {
                            ArrayList<Secretariat> secretariatsList = new ArrayList<>();
                            for (Secretariat sec : secretariatStatsecretariatsMap.keySet()) {
                                for (Eltpratiquesttsecret eltpratiquesttsecret : SouscentreEltpratiquesttsecretMap.get(souscentre)) {
                                    if (eltpratiquesttsecret.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation()) && eltpratiquesttsecret.getSecretariat().getNumsec() == sec.getNumsec()) {
                                        secretariatsList.add(sec);
                                        break;
                                    }
                                }
                            }
                            if (!secretariatsList.isEmpty()) {
                                souscentreSecretariatsMap.put(souscentre, secretariatsList);
                            }
                        }
                    }

                    if (!souscentreEltpratiquesttMap.isEmpty() || !SouscentreEltpratiquesttsecretMap.isEmpty()) {
                        boolean testSimodifier = false;
                        try {
                            for (Souscentre souscentre : souscentresList) {
                                if (souscentreStatistiqueMap.containsKey(souscentre)) {
                                    if (souscentreEltpratiquesttMap.containsKey(souscentre) || SouscentreEltpratiquesttsecretMap.containsKey(souscentre)) {
                                        int nbtours = 1;
                                        int net = 0;
                                        if (souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                            if (!souscentreSecretariatsMap.get(souscentre).isEmpty()) {
                                                nbtours = souscentreSecretariatsMap.get(souscentre).size();//il ne contient que ceux des secrétariats qui ont des Eltpratiquesttsecret
                                            }
                                        }
                                        for (int j = 0; j < nbtours; j++) {
                                            if (souscentreEltpratiquesttMap.containsKey(souscentre)) {
                                                for (Eltpratiquestt eltpratiquestt : souscentreEltpratiquesttMap.get(souscentre)) {
                                                    if (typeSelected.equals("STT PROF")) {
                                                        determinerCoutD1EltpratiqueBPCOM(souscentre, souscentreStatistiqueMap, eltpratiquestt, niveauSelected);
                                                    } else {
                                                        determinerCoutD1Eltpratiquestt(souscentre, souscentreStatistiqueMap, eltpratiquestt, niveauSelected);
                                                    }
                                                    int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                    net += totalArrondi;
                                                }
                                            } else {
                                                Secretariat secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(j);//secrétariat courant ayant des Eltpratiquesttsecret                                                            

                                                //arrêt ici
                                                for (Eltpratiquesttsecret eltpratiquesttsecret : SouscentreEltpratiquesttsecretMap.get(souscentre)) {
                                                    if (eltpratiquesttsecret.getSecretariat().getNumsec() == secretariatCourant.getNumsec() && eltpratiquesttsecret.getSecretariat().getEtablissement().getAbreviation().equals(secretariatCourant.getEtablissement().getAbreviation())) {
                                                        if (typeSelected.equals("STT PROF")) {
                                                            determinerCoutD1EltpratiqueBPCOMsecret(secretariatCourant, secretariatStatsecretariatsMap, eltpratiquesttsecret, niveauSelected);
                                                        } else {
                                                            determinerCoutD1Eltpratiquesttsecret(secretariatCourant, secretariatStatsecretariatsMap, eltpratiquesttsecret, niveauSelected);
                                                        }
                                                        int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                        net += totalArrondi;
                                                    }
                                                }
                                            }
                                        }

                                        metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                        testSimodifier = true;
                                    }
                                }
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testSimodifier) {
                            JOptionPane.showMessageDialog(this, "Etats de vacations de pratique 1 modifiés avec succès !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun paramètre de pratique 1 trouvée dans la base des données pour ce groupe d'examens !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Les champs examen(s) et session sont obligatoires !");
            }
        }
    }//GEN-LAST:event_jButtonMettreAjourEtatsActionPerformed

    private void jButtonVisualiserEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserEtatsActionPerformed
        infoSaisies();
        Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueMap = new HashMap<>();//contient chaque sous-centre et le tableau de ses statistiques
        Map<Souscentre, ArrayList<Eltpratiquestt>> souscentreEltpratiquesttMap = new HashMap<>();//contient chaque sous-centre et le tableau de ses Eltpratiquestt

        ArrayList<Souscentre> souscentresAeltpratiquesttList = new ArrayList<>();//liste des sous-centres ayant des Eltpratiquestt 
        Map<Souscentre, ArrayList<Eltpratiquesttsecret>> SouscentreEltpratiquesttsecretMap = new HashMap<>();//contient chaque secretariat et le tableau de ses Eltpratiquesttsecret        
        ArrayList<Souscentre> souscentresAeltpratiquesttsecretList = new ArrayList<>();//liste des sous-centres ayant des Eltpratiquesttsecret 
        ArrayList<Souscentre> souscentresList = new ArrayList<>();//liste des sous-centres ayant des Eltpratiquestt et des Eltpratiquesttsecret
        List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats
        Map<Souscentre, ArrayList<Secretariat>> souscentreSecretariatsMap = new HashMap<>();//contient les sous-centres chacun avec la liste de ses secretariats le cas échéant qui ont des Eltpratiquesttsecret
        Map<Secretariat, ArrayList<Statsecretariat>> secretariatStatsecretariatsMap = new HashMap<>();//contient l'ensemble des secrétariats d'un groupe d'examens avec chacun avec la liste de ses Statsecretariats

        Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
        ArrayList<String> typesBruts = new ArrayList<>();
        ArrayList<String> typesAconsiderer = new ArrayList<>();
        ArrayList<String> niveauxAconsiderer = new ArrayList<>();
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION PRATIQUE 1");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);

            boolean continuer = false;
            for (Caisse c : caisses) {
                if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                    continuer = true;
                    break;
                }
            }
            if (!continuer) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de vacations de pratique 1 n'ont pas encore été créés pour ce groupe d'examens !");
            } else {

                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                //recherche des types des examens à utiliser
                for (Examen examen : examensSelected) {
                    System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                    if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                        typesBruts.add("ESG");
                    }
                    if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                        typesBruts.add("ESTP");
                    }
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 2) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                //recherche des niveaux des examens à utiliser
                if (!niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add(niveauSelected);
                    niveauxAconsiderer.add("TOUT");
                }
                if (niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add("PROB");
                    niveauxAconsiderer.add("BACC");
                    niveauxAconsiderer.add("TOUT");
                }

                //recherche des centres de billetage
                for (String niveau : niveauxAconsiderer) {
                    for (String type : typesAconsiderer) {
                        List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                        for (Centrebilletage centrebilletage : desCentrebilletages) {
                            ArrayList<Souscentre> souscentresRattachbillList = new ArrayList<>();
                            if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                for (Secteurcouv sect : secteurs) {
                                    if (!souscentresRattachbillList.contains(sect.getSouscentre())) {
                                        souscentresRattachbillList.add(sect.getSouscentre());
                                    }
                                }
                                centrebilletageSouscentresMap.put(centrebilletage, souscentresRattachbillList);
                            }
                        }
                    }
                }

                //remplissage de souscentreStatistiqueMap
                for (Examen e : examensSelected) {
                    List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                    for (Statistique s : lesStats) {
                        ArrayList<Statistique> statList = new ArrayList<>();
                        if (souscentreStatistiqueMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueMap
                            statList = souscentreStatistiqueMap.get(s.getSouscentre());
                            statList.add(s);//on lui ajoute s
                            souscentreStatistiqueMap.put(s.getSouscentre(), statList);
                        } else {
                            statList.add(s);
                            souscentreStatistiqueMap.put(s.getSouscentre(), statList);
                        }
                    }
                }

                lesEltpratiquestt = metier.findAllEltpratiquesttD1GroupedexamensD1Session(niveauSelected, typeSelected, anneeSelected);
                lesEltpratiquesttsecret = metier.findAllEltpratiquesttsecretD1GroupedexamensD1Session(niveauSelected, typeSelected, anneeSelected);

                if (lesEltpratiquestt.isEmpty() && lesEltpratiquesttsecret.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Aucun paramètre de pratique 1 trouvée dans la base des données pour ce groupe d'examens !");
                } else {
                    //remplissage de souscentreEltpratiquesttMap
                    for (Souscentre souscentre : souscentreStatistiqueMap.keySet()) {//on ne gère pas les éléments de souscentreEltpratiquesttMap dont le sous-centre n'a pas de statistique 
                        ArrayList<Eltpratiquestt> eltpratiquesttD1souscentreList = new ArrayList<>();//liste des Eltpratiquestt du souscentre courant
                        for (Eltpratiquestt eltpratiquestt : lesEltpratiquestt) {
                            if (eltpratiquestt.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                eltpratiquesttD1souscentreList.add(eltpratiquestt);
                            }
                        }
                        if (!eltpratiquesttD1souscentreList.isEmpty()) {
                            souscentreEltpratiquesttMap.put(souscentre, eltpratiquesttD1souscentreList);
                        }
                    }

                    //remplissage souscentreAsecretariatsDemultipliesList
                    secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                    if (!secretariats.isEmpty()) {
                        for (Secretariat sec : secretariats) {
                            if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                                souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                            }
                        }
                    }

                    //remplissage secretariatStatsecretariatsMap
                    for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                        List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreEtSession(souscentre.getNomsouscent(), anneeSelected);
                        List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                        for (Secretariat sec : secretariatsList) {
                            ArrayList<Statsecretariat> statsList = new ArrayList<>();
                            for (Statsecretariat statsec : statsecretariatsList) {
                                if (statsec.getSecretariat().getNumsec() == sec.getNumsec()) {
                                    if (secretariatStatsecretariatsMap.containsKey(sec)) {//si le présent secretariat est dans secretariatStatsecretariatsMap
                                        statsList = secretariatStatsecretariatsMap.get(sec);
                                    }
                                    statsList.add(statsec);
                                    secretariatStatsecretariatsMap.put(sec, statsList);
                                }
                            }
                        }
                    }

                    for (Souscentre scentre : souscentres) {
                        for (Eltpratiquestt eltpratiquestt : lesEltpratiquestt) {
                            if (!souscentresAeltpratiquesttList.contains(scentre) && eltpratiquestt.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                souscentresAeltpratiquesttList.add(scentre);
                            }
                        }
                        for (Eltpratiquesttsecret eltpratiquesttsecret : lesEltpratiquesttsecret) {
                            if (!souscentresAeltpratiquesttsecretList.contains(scentre) && eltpratiquesttsecret.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                souscentresAeltpratiquesttsecretList.add(scentre);
                            }
                        }
                    }

                    //remplissage de souscentreEltpratiquesttsecretMap
                    if (!lesEltpratiquesttsecret.isEmpty()) {
                        for (Souscentre scentre : souscentresAeltpratiquesttsecretList) {
                            ArrayList<Eltpratiquesttsecret> eltpratiquesttsecretsList = new ArrayList<>();
                            for (Eltpratiquesttsecret eltpratiquesttsecret : lesEltpratiquesttsecret) {
                                if (eltpratiquesttsecret.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                    eltpratiquesttsecretsList.add(eltpratiquesttsecret);
                                }
                            }
                            SouscentreEltpratiquesttsecretMap.put(scentre, eltpratiquesttsecretsList);
                        }
                    }

                    //on met tous les sous-centres dans souscentresList
                    for (Souscentre scentre : souscentresAeltpratiquesttList) {
                        if (!souscentresList.contains(scentre)) {
                            souscentresList.add(scentre);
                        }
                    }

                    for (Souscentre scentre : souscentresAeltpratiquesttsecretList) {
                        if (!souscentresList.contains(scentre)) {
                            souscentresList.add(scentre);
                        }
                    }
                    //remplissage de souscentreSecretariatsMap: on ne considère que ceux qui ont des Eltpratiquesttsecret 
                    for (Souscentre souscentre : souscentreStatistiqueMap.keySet()) {
                        ArrayList<Secretariat> secretariatsList = new ArrayList<>();
                        for (Secretariat sec : secretariatStatsecretariatsMap.keySet()) {
                            for (Eltpratiquesttsecret eltpratiquesttsecret : SouscentreEltpratiquesttsecretMap.get(souscentre)) {
                                if (eltpratiquesttsecret.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation()) && eltpratiquesttsecret.getSecretariat().getNumsec() == sec.getNumsec()) {
                                    secretariatsList.add(sec);
                                    break;
                                }
                            }
                        }
                        if (!secretariatsList.isEmpty()) {
                            souscentreSecretariatsMap.put(souscentre, secretariatsList);
                        }
                    }
                }

                if (!souscentreEltpratiquesttMap.isEmpty() || !SouscentreEltpratiquesttsecretMap.isEmpty()) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    int totalMontant = 0;
                                    ArrayList<Souscentre> souscentresRattachbillList = centrebilletageSouscentresMap.get(centrebilletage);
                                    for (int i = 0; i < souscentresRattachbillList.size(); i++) {
                                        Souscentre souscentre = souscentresRattachbillList.get(i);
                                        if (souscentresList.contains(souscentre) && souscentreStatistiqueMap.containsKey(souscentre)) {
                                            if (souscentreEltpratiquesttMap.containsKey(souscentre) || SouscentreEltpratiquesttsecretMap.containsKey(souscentre)) {
                                                int nbtours1 = 1;
                                                int net = 0;
                                                if (souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                                    if (!souscentreSecretariatsMap.get(souscentre).isEmpty()) {
                                                        nbtours1 = souscentreSecretariatsMap.get(souscentre).size();//il ne contient que ceux des secrétariats qui ont des Eltpratiquesttsecret
                                                    }
                                                }
                                                for (int j = 0; j < nbtours1; j++) {
                                                    int num = 1;
                                                    String souscentreAffiche = "";
                                                    String opt = "";
                                                    int effect = 0;
                                                    int nbex = 0;
                                                    int nbv = 0;
                                                    int coutv = 0;
                                                    int nbcop = 0;
                                                    int coutcop = 0;
                                                    int nbep = 0;
                                                    int nbchef = 0;
                                                    int indem = 0;
                                                    int suppl = 0;
                                                    int nbtours2 = 0;
                                                    if (souscentreEltpratiquesttMap.containsKey(souscentre)) {
                                                        nbtours2 = souscentreEltpratiquesttMap.size();
                                                    }
                                                    if (SouscentreEltpratiquesttsecretMap.containsKey(souscentre)) {
                                                        nbtours2 = SouscentreEltpratiquesttsecretMap.size();
                                                    }

                                                    for (int k = 0; k < nbtours2; k++) {
                                                        if (souscentreEltpratiquesttMap.containsKey(souscentre)) {
                                                            if (typeSelected.equals("STT PROF")) {
                                                                determinerCoutD1EltpratiqueBPCOM(souscentre, souscentreStatistiqueMap, souscentreEltpratiquesttMap.get(souscentre).get(k), niveauSelected);
                                                            } else {
                                                                determinerCoutD1Eltpratiquestt(souscentre, souscentreStatistiqueMap, souscentreEltpratiquesttMap.get(souscentre).get(k), niveauSelected);
                                                            }
                                                            souscentreAffiche = souscentre.getNomsouscent();
                                                            opt = souscentreEltpratiquesttMap.get(souscentre).get(k).getOption().getSigle();
                                                            effect = effectif;
                                                            nbex = nbexamin;
                                                            nbv = nbvac;
                                                            coutv = coutvac;
                                                            nbcop = nbcopies;
                                                            coutcop = coutcopies;
                                                            nbep = nbepreuves;
                                                            nbchef = nbchefsal;
                                                            indem = indemnite;
                                                            suppl = supplement;
                                                        }
                                                        if (SouscentreEltpratiquesttsecretMap.containsKey(souscentre)) {
                                                            Secretariat secretariatCourant = SouscentreEltpratiquesttsecretMap.get(souscentre).get(k).getSecretariat();
                                                            if (typeSelected.equals("STT PROF")) {
                                                                determinerCoutD1EltpratiqueBPCOMsecret(secretariatCourant, secretariatStatsecretariatsMap, SouscentreEltpratiquesttsecretMap.get(souscentre).get(k), niveauSelected);
                                                            } else {
                                                                determinerCoutD1Eltpratiquesttsecret(secretariatCourant, secretariatStatsecretariatsMap, SouscentreEltpratiquesttsecretMap.get(souscentre).get(k), niveauSelected);
                                                            }
                                                            if (secretariatCourant.getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                                                                souscentreAffiche = secretariatCourant.getEtablissement().getAbreviation() + " (Sec. " + secretariatCourant.getNumsec() + ")";
                                                            } else {
                                                                souscentreAffiche = secretariatCourant.getEtablissement().getAbreviation() + " (Sec. " + secretariatCourant.getNumsec() + " du sous-centre " + souscentre.getEtablissement().getAbreviation() + ")";
                                                            }

                                                            opt = souscentreEltpratiquesttMap.get(souscentre).get(k).getOption().getSigle();
                                                            effect = effectif;
                                                            nbex = nbexamin;
                                                            nbv = nbvac;
                                                            coutv = coutvac;
                                                            nbcop = nbcopies;
                                                            coutcop = coutcopies;
                                                            nbep = nbepreuves;
                                                            nbchef = nbchefsal;
                                                            indem = indemnite;
                                                            suppl = supplement;
                                                        }
                                                        Map<String, Object> row = new HashMap<>();
                                                        row.put("session", anneeSelected);
                                                        row.put("examen", groupedexamensEnstring);
                                                        row.put("num", num++);
                                                        row.put("region", region.getNomreg());
                                                        row.put("reference", "");
                                                        row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                        row.put("souscentre", souscentreAffiche);
                                                        row.put("option", opt);
                                                        row.put("effectif", effect);
                                                        row.put("nbexamin", nbex);
                                                        row.put("nbvac", nbv);
                                                        row.put("coutvac", coutv);
                                                        row.put("nbcopies", nbcop);
                                                        row.put("coutcopies", coutcop);
                                                        row.put("nbepreuves", nbep);
                                                        row.put("nbchefsal", nbchef);
                                                        row.put("indemnite", indem);
                                                        row.put("supplement", suppl);
                                                        row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                        int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                        row.put("total", totalArrondi);
                                                        totalMontant += totalArrondi;
                                                        row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                        datasource.add(row);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatVacationPratique1STTetBPindReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Aucun paramètre de pratique 1 trouvée dans la base des données pour ce groupe d'examens !");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonVisualiserEtatsActionPerformed

    private void jButtonSupprimerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEtatsActionPerformed
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de pratique 1 pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION PRATIQUE 1");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de vacation de pratique 1 n'existe pour ce groupe d'examen !");
                } else {
                    try {
                        for (Caisse caisse : caisses) {
                            metier.supprimerCaisse(caisse);
                        }
                        JOptionPane.showMessageDialog(this, "Etats de vacations de pratique 1 supprimés avec succès !");
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
            }
        }
    }//GEN-LAST:event_jButtonSupprimerEtatsActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jComboBoxRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionActionPerformed
        remplirDepartementCombobox();
    }//GEN-LAST:event_jComboBoxRegionActionPerformed

    private void jButtonAnnulerChoixSouscentrepratiqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixSouscentrepratiqueActionPerformed
        jComboBoxRegion.setSelectedIndex(0);
        jComboBoxDepartement.setSelectedIndex(0);
        jComboBoxArrondissement.setSelectedIndex(0);
        jComboBoxSouscentre.setSelectedIndex(0);
        jComboBoxSession.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixSouscentrepratiqueActionPerformed

    private void jComboBoxDepartementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementActionPerformed
        remplirArrondissementCombobox();
    }//GEN-LAST:event_jComboBoxDepartementActionPerformed

    private void jComboBoxSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSouscentreActionPerformed
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        trouverSouscentre = false;
        if (!nomSouscentreSelected.equals("---") && !anneeString.equals("---") && !niveauSelected.equals("---") && !typeSelected.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            jTextFieldEtablissement.setText("");
            ArrayList<Secretariat> secretariatsDuSouscentre = new ArrayList<>();
            for (Secretariat sec : secretariats) {
                if (sec.getSouscentre().getNomsouscent().equals(nomSouscentreSelected) && sec.getSession().getAnnee() == anneeSelected) {
                    trouverSouscentre = true;
                    secretariatsDuSouscentre.add(sec);
                }
            }
            if (trouverSouscentre && testExistenceD1StatsecA1souscentrePour1GroupedexamenEtsession(nomSouscentreSelected, niveauSelected, typeSelected, anneeSelected)) {
                ordonnerSecretariatsD1souscentre(secretariatsDuSouscentre);
                remplirNumeroSecretariatCombobox(secretariatsDuSouscentre);
            } else {
                numsecCombo = new String[0];
                jComboBoxNumsec.setModel(new DefaultComboBoxModel(numsecCombo));
                remplirSpecialiteCombobox();
            }
        }
    }//GEN-LAST:event_jComboBoxSouscentreActionPerformed

    private void jButtonCreerParametresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerParametresActionPerformed
        infoSaisies();
        if (sigleOptionSelected.equals("---") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nbvacString.equals("") || nbchefsalString.equals("") || nbepreuvesString.equals("") || nbcorrecteursString.equals("")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir une session, un sous-centre de pratique, donner le nombre de vacations, le nombre de chefs de salle/atelier, le nombre d'épreuves et celui des correcteurs/examinateurs !");
        } else {
            validerNbvacation(nbvacString);
            validerNbchefsal(nbchefsalString);
            validerNbepreuves(nbepreuvesString);
            validerNbcorrecteurs(nbcorrecteursString);
            if (!continuerNbvac || !continuerNbchefsal || !continuerNbcorrecteurs || !continuerNbepreuves) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Au moins un des nombres saisis est incorrect !");
            } else {
                List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                for (Souscentre souscentre : souscentres) {
                    if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                        souscentreSelected = souscentre;
                        break;
                    }
                }
                for (Option option : options) {
                    if (option.getSigle().equals(sigleOptionSelected)) {
                        optionSelected = option;
                        break;
                    }
                }
                //remplissage souscentreAsecretariatsDemultipliesList
                secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                if (!secretariats.isEmpty()) {
                    for (Secretariat sec : secretariats) {
                        if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                            souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                        }
                    }
                }

                if (souscentreAsecretariatsDemultipliesList.contains(souscentreSelected)) {//sous-centre à plusieurs secrétariats
                    if (numsecString.equals("---")) {
                        JOptionPane.showMessageDialog(this, "Veuillez sélectionner un numéro de secrétariat svp.");
                    } else {//l'affectation se fait dans secretariatSelected déterminé lors du clic sur numsecCombobox
                        try {
                            metier.creerEltpratiquesttsecret(new Eltpratiquesttsecret(secretariatSelected, groupe, optionSelected, nbchefsalSaisi, nbepreuvesSaisi, nbcorrecteursSaisi, nbvacSaisi));
                            JOptionPane.showMessageDialog(this, "Nombre de vacations, de chefs de salle/atelier, d'examinateurs/correcteurs et le nombre d'épreuves créés avec succès !");
                        } catch (ObcbudgetException ex) {
                            JOptionPane.showMessageDialog(this, "Impossible de créer les Nombre de vacations, de chefs de salle/atelier, d'examinateurs/correcteurs et le nombre d'épreuves au secretariat " + secretariatSelected.getNumsec() + " du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                        }
                    }
                } else {//sous-centre sans secretariats démultipliés
                    try {
                        metier.creerEltpratiquestt(new Eltpratiquestt(souscentreSelected, sessionSelected, optionSelected, groupe, nbvacSaisi, nbchefsalSaisi, nbcorrecteursSaisi, nbepreuvesSaisi));
                        JOptionPane.showMessageDialog(this, "Nombre de vacations, de chefs de salle/atelier, d'examinateurs/correcteurs et le nombre d'épreuves enregistrés avec succès !");
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de d'enregistrer le nombre de vacations, de chefs de salle/atelier, d'examinateurs/correcteurs et le nombre d'épreuves du sous-centre de pratique [" + nomSouscentreSelected + "]" + "\n raison:" + ex.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonCreerParametresActionPerformed

    private void jButtonListerParametresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerParametresActionPerformed
        infoSaisies();
        Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
        Map<Souscentre, ArrayList<Secretariat>> souscentreSecretariatsMap = new HashMap<>();//contient les sous-centres chacun avec la liste de ses secretariats le cas échéant
        Map<Secretariat, Integer> secretariatEffectifMap = new HashMap<>();//contient l'ensemble des secrétariats d'un groupe d'examens avec chacun avec son nombre de candidats
        Map<Souscentre, ArrayList<Eltpratiquestt>> souscentreEltpratiquesttMap = new HashMap<>();//contient chaque sous-centre et le tableau de ses Eltpratiquestt        
        ArrayList<Souscentre> souscentresAeltpratiquesttList = new ArrayList<>();//liste des sous-centres ayant des Eltpratiquestt 
        Map<Souscentre, ArrayList<Eltpratiquesttsecret>> SouscentreEltpratiquesttsecretMap = new HashMap<>();//contient chaque secretariat et le tableau de ses Eltpratiquesttsecret        
        ArrayList<Souscentre> souscentresAeltpratiquesttsecretList = new ArrayList<>();//liste des sous-centres ayant des Eltpratiquesttsecret 
        ArrayList<Souscentre> souscentresList = new ArrayList<>();//liste des sous-centres ayant des Eltpratiquestt et des Eltpratiquesttsecret
        List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats
        if (groupedexamensEnstring.equals("") || anneeString.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir une session et un groupe d'examens !");
        } else {
            anneeSelected = Integer.parseInt(anneeString);
            lesEltpratiquestt = metier.findAllEltpratiquesttD1GroupedexamensD1Session(niveauSelected, typeSelected, anneeSelected);
            lesEltpratiquesttsecret = metier.findAllEltpratiquesttsecretD1GroupedexamensD1Session(niveauSelected, typeSelected, anneeSelected);

            if (!lesEltpratiquestt.isEmpty() || !lesEltpratiquesttsecret.isEmpty()) {
                for (Eltpratiquestt eltpratiquestt : lesEltpratiquestt) {
                    if (!souscentresAeltpratiquesttList.contains(eltpratiquestt.getSouscentre())) {
                        souscentresAeltpratiquesttList.add(eltpratiquestt.getSouscentre());
                    }
                }
                //remplissage souscentreAsecretariatsDemultipliesList
                secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                if (!secretariats.isEmpty()) {
                    for (Secretariat sec : secretariats) {
                        if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                            souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                        }
                    }
                }

                for (Examen e : examensSelected) {
                    List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                    for (Statistique s : lesStats) {
                        if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                            int nbcand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                            souscentreEffectifMap.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                        } else {
                            souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                        }
                    }
                }

                //remplissage secretariatEffectifMap
                for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                    List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreEtSession(souscentre.getNomsouscent(), anneeSelected);
                    if (!secretariatsList.isEmpty()) {
                        for (Secretariat sec : secretariatsList) {
                            int stat = 0;
                            List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                            for (Statsecretariat statsec : statsecretariatsList) {
                                if (statsec.getSecretariat().getNumsec() == sec.getNumsec() && statsec.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                    stat += statsec.getNombre();
                                }
                            }
                            secretariatEffectifMap.put(sec, stat);
                        }
                    }
                }

                //remplissage de souscentreSecretariatsMap
                for (Souscentre souscentre : souscentreEffectifMap.keySet()) {
                    ArrayList<Secretariat> secretariatsList = new ArrayList<>();
                    for (Secretariat sec : secretariatEffectifMap.keySet()) {
                        if (sec.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                            if (!secretariatsList.contains(sec)) {
                                secretariatsList.add(sec);
                            }
                        }
                    }
                    if (!secretariatsList.isEmpty()) {
                        souscentreSecretariatsMap.put(souscentre, secretariatsList);
                    }
                }
                //remplissage de souscentreEltpratiquesttMap
                for (Souscentre souscentre : souscentresList) {
                    ArrayList<Eltpratiquestt> eltpratiquesttD1souscentreList = new ArrayList<>();//liste des Eltpratiquestt du souscentre courant
                    for (Eltpratiquestt eltpratiquestt : lesEltpratiquestt) {
                        if (eltpratiquestt.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                            eltpratiquesttD1souscentreList.add(eltpratiquestt);
                        }
                    }
                    if (!eltpratiquesttD1souscentreList.isEmpty()) {
                        souscentreEltpratiquesttMap.put(souscentre, eltpratiquesttD1souscentreList);
                    }
                }
                for (Souscentre scentre : souscentres) {
                    for (Eltpratiquestt eltpratiquestt : lesEltpratiquestt) {
                        if (!souscentresAeltpratiquesttList.contains(scentre) && eltpratiquestt.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                            souscentresAeltpratiquesttList.add(scentre);
                        }
                    }
                    for (Eltpratiquesttsecret eltpratiquesttsecret : lesEltpratiquesttsecret) {
                        if (!souscentresAeltpratiquesttsecretList.contains(scentre) && eltpratiquesttsecret.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                            souscentresAeltpratiquesttsecretList.add(scentre);
                        }
                    }
                }

                //remplissage de souscentreEltpratiquesttsecretMap
                if (!lesEltpratiquesttsecret.isEmpty()) {
                    for (Souscentre scentre : souscentresAeltpratiquesttsecretList) {
                        ArrayList<Eltpratiquesttsecret> eltpratiquesttsecretsList = new ArrayList<>();
                        for (Eltpratiquesttsecret eltpratiquesttsecret : lesEltpratiquesttsecret) {
                            if (eltpratiquesttsecret.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                eltpratiquesttsecretsList.add(eltpratiquesttsecret);
                            }
                        }
                        SouscentreEltpratiquesttsecretMap.put(scentre, eltpratiquesttsecretsList);
                    }
                }

                //on met tous les sous-centres dans souscentresList
                for (Souscentre scentre : souscentresAeltpratiquesttList) {
                    if (!souscentresList.contains(scentre)) {
                        souscentresList.add(scentre);
                    }
                }

                for (Souscentre scentre : souscentresAeltpratiquesttsecretList) {
                    if (!souscentresList.contains(scentre)) {
                        souscentresList.add(scentre);
                    }
                }

                try {
                    List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                    for (Region region : regions) {
                        for (Souscentre souscentre : souscentresList) {
                            int i = 1;
                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                                if (souscentresList.contains(souscentre)) {
                                    if (souscentreEltpratiquesttMap.containsKey(souscentre) || SouscentreEltpratiquesttsecretMap.containsKey(souscentre)) {
                                        int nbtours1 = 1;
                                        int net = 0;
                                        if (souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                            if (!souscentreSecretariatsMap.get(souscentre).isEmpty()) {
                                                nbtours1 = souscentreSecretariatsMap.get(souscentre).size();//il ne contient que ceux des secrétariats qui ont des Eltpratiquesttsecret
                                            }
                                        }
                                        for (int j = 0; j < nbtours1; j++) {
                                            int num = 1;
                                            String souscentreAffiche = "";
                                            String opt = "";
                                            int nbex = 0;
                                            int nbv = 0;
                                            int nbep = 0;
                                            int nbchef = 0;

                                            int nbtours2 = 0;
                                            if (souscentreEltpratiquesttMap.containsKey(souscentre)) {
                                                nbtours2 = souscentreEltpratiquesttMap.size();
                                            }
                                            if (SouscentreEltpratiquesttsecretMap.containsKey(souscentre)) {
                                                nbtours2 = SouscentreEltpratiquesttsecretMap.size();
                                            }

                                            for (int k = 0; k < nbtours2; k++) {
                                                if (souscentreEltpratiquesttMap.containsKey(souscentre)) {
                                                    souscentreAffiche = souscentre.getNomsouscent();
                                                    opt = souscentreEltpratiquesttMap.get(souscentre).get(k).getOption().getSigle();
                                                    nbex = souscentreEltpratiquesttMap.get(souscentre).get(k).getNbexamin();
                                                    nbv = souscentreEltpratiquesttMap.get(souscentre).get(k).getNbvac();
                                                    nbep = souscentreEltpratiquesttMap.get(souscentre).get(k).getNbepreuves();
                                                    nbchef = souscentreEltpratiquesttMap.get(souscentre).get(k).getNbchefsal();
                                                }
                                                if (SouscentreEltpratiquesttsecretMap.containsKey(souscentre)) {
                                                    Secretariat secretariatCourant = SouscentreEltpratiquesttsecretMap.get(souscentre).get(k).getSecretariat();
                                                    if (secretariatCourant.getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                                                        souscentreAffiche = secretariatCourant.getEtablissement().getAbreviation() + " (Sec. " + secretariatCourant.getNumsec() + ")";
                                                    } else {
                                                        souscentreAffiche = secretariatCourant.getEtablissement().getAbreviation() + " (Sec. " + secretariatCourant.getNumsec() + " du sous-centre " + souscentre.getEtablissement().getAbreviation() + ")";
                                                    }
                                                    
                                                    opt = SouscentreEltpratiquesttsecretMap.get(souscentre).get(k).getOption().getSigle();
                                                    nbex = SouscentreEltpratiquesttsecretMap.get(souscentre).get(k).getNbexamin();
                                                    nbv = SouscentreEltpratiquesttsecretMap.get(souscentre).get(k).getNbvac();
                                                    nbep = SouscentreEltpratiquesttsecretMap.get(souscentre).get(k).getNbepreuves();
                                                    nbchef = SouscentreEltpratiquesttsecretMap.get(souscentre).get(k).getNbchefsal();
                                                    System.out.println("-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
                                                    System.out.println("opt="+opt+" nbex ="+nbex+" nbv ="+nbv );
                                                }
                                                Map<String, Object> row = new HashMap<>();
                                                row.put("session", anneeSelected);
                                                row.put("examen", groupedexamensEnstring);
                                                row.put("region", region.getNomreg());
                                                row.put("num", i++);
                                                row.put("souscentre", souscentreAffiche);//eltpratiquestt.getSouscentre().getNomsouscent()
                                                row.put("option", opt);//eltpratiquestt.getOption().getSigle()
                                                row.put("nbvac", nbv);//eltpratiquestt.getNbvac()
                                                row.put("nbchefsal", nbchef);//eltpratiquestt.getNbchefsal()
                                                row.put("nbepreuves", nbep);//eltpratiquestt.getNbepreuves()
                                                row.put("nbexamin", nbex);//eltpratiquestt.getNbexamin()
                                                datasource.add(row);

                                            }
                                        }
                                    }
                                }

                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeParametresEltpratiquesttReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Aucun nombre de vacations, de chefs de salle/atelier, d'épreuves ou d'examinateurs/correcteurs trouvé dans la base de données !");
            }
        }
    }//GEN-LAST:event_jButtonListerParametresActionPerformed

    private void jButtonAnnulerParametresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerParametresActionPerformed
        jComboBoxSpecialite.setSelectedIndex(0);
        jTextFieldNbchefsal.setText("");
        jTextFieldNbvacation.setText("");
        jTextFieldNbepreuves.setText("");
        jTextFieldNbcorrecteurs.setText("");
    }//GEN-LAST:event_jButtonAnnulerParametresActionPerformed

    private void jButtonSupprimerParametresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerParametresActionPerformed
        infoSaisies();
        if (anneeString.equals("---") || nomSouscentreSelected.equals("---") || sigleOptionSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir une session, un sous-centre de pratique et une spécialité !");
        } else {
            List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats 
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les nombres de vacations, de chefs de salle/atelier, d'épreuves et d'examinateurs/correcteurs du sous-centre de pratique [" + nomSouscentreSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                anneeSelected = Integer.parseInt(anneeString);
                //remplissage souscentreAsecretariatsDemultipliesList
                secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                if (!secretariats.isEmpty()) {
                    for (Secretariat sec : secretariats) {
                        if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                            souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                        }
                    }
                }

                if (souscentreAsecretariatsDemultipliesList.contains(souscentreSelected)) {//sous-centre à plusieurs secrétariats
                    if (numsecString.equals("---")) {
                        JOptionPane.showMessageDialog(this, "Veuillez sélectionner un numéro de secrétariat svp.");
                    } else {//la suppression se fait dans un secretariat déterminé lors du clic sur numsecCombobox
                        try {
                            Eltpratiquesttsecret eltpratiquesttsecret = metier.findEltpratiquesttsecretD1SecretariatD1OptionD1Session(nomSouscentreSelected, secretariatSelected.getNumsec(), sigleOptionSelected, anneeSelected);
                            metier.supprimerEltpratiquesttsecret(eltpratiquesttsecret);
                            JOptionPane.showMessageDialog(this, "Nombres de vacations, de chefs de salle/atelier, d'épreuves et d'examinateurs/correcteurs supprimés avec succès !");
                        } catch (ObcbudgetException ex) {
                            JOptionPane.showMessageDialog(this, "Impossible de supprimer les Nombres de vacations, de chefs de salle/atelier, d'épreuves et d'examinateurs/correcteurs au secretariat " + secretariatSelected.getNumsec() + " du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                        }
                    }
                } else {//sous-centre sans secretariats démultipliés
                    try {
                        Eltpratiquestt eltpratiquestt = metier.findEltpratiquesttD1SouscentreD1OptionD1Session(nomSouscentreSelected, sigleOptionSelected, anneeSelected);
                        metier.supprimerEltpratiquestt(eltpratiquestt);
                        JOptionPane.showMessageDialog(this, "Nombres de vacations, de chefs de salle/atelier, d'épreuves et d'examinateurs/correcteurs supprimés avec succès !");
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de supprimer les nombres de vacations, de chefs de salle/atelier, d'épreuves et d'examinateurs/correcteurs au sous-centre de pratique [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerParametresActionPerformed

    private void jComboBoxArrondissementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementActionPerformed
        remplirSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonAnnulerChoixExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixExamenActionPerformed
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea.setText("");
        jComboBoxSession.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixExamenActionPerformed

    private void jComboBoxNiveauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNiveauActionPerformed
        //
    }//GEN-LAST:event_jComboBoxNiveauActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
        if (niveauSelected.equals("PROB") && typeSelected.equals("IND PROF")) {
            JOptionPane.showMessageDialog(this, "Désolé. Le BEP Industriel n'est pas pris en compte ici !");
            jComboBoxType.setSelectedIndex(0);
            jComboBoxNiveau.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jComboBoxNumsecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNumsecActionPerformed
        numsecString = (String) jComboBoxNumsec.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        if (!numsecString.equals("---") && !nomSouscentreSelected.equals("---") && !anneeString.equals("---")) {
            numsecSelected = Integer.parseInt(numsecString);
            anneeSelected = Integer.parseInt(anneeString);
            boolean trouversecret = false;
            for (Secretariat secret : secretariats) {
                if (secret.getSouscentre().getNomsouscent().equals(nomSouscentreSelected)) {
                    trouversecret = true;
                    break;
                }
            }
            if (trouversecret) {
                secretariatSelected = metier.findSecretariatD1SouscentreDeNumeroEtSessionDonnes(nomSouscentreSelected, numsecSelected, anneeSelected);
                jTextFieldEtablissement.setText(secretariatSelected.getEtablissement().getAbreviation());
                remplirSpecialiteSecretCombobox();
            }
        }
    }//GEN-LAST:event_jComboBoxNumsecActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatVacationPratiqueSTTetBPind.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatVacationPratiqueSTTetBPind.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatVacationPratiqueSTTetBPind.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatVacationPratiqueSTTetBPind.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatVacationPratiqueSTTetBPind().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonAnnulerChoixExamen;
    private javax.swing.JButton jButtonAnnulerChoixSouscentrepratique;
    private javax.swing.JButton jButtonAnnulerParametres;
    private javax.swing.JButton jButtonCreerEtats;
    private javax.swing.JButton jButtonCreerParametres;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonListerParametres;
    private javax.swing.JButton jButtonMettreAjourEtats;
    private javax.swing.JButton jButtonSupprimerEtats;
    private javax.swing.JButton jButtonSupprimerParametres;
    private javax.swing.JButton jButtonVisualiserEtats;
    private javax.swing.JComboBox<String> jComboBoxArrondissement;
    private javax.swing.JComboBox<String> jComboBoxDepartement;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxNumsec;
    private javax.swing.JComboBox<String> jComboBoxRegion;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxSouscentre;
    private javax.swing.JComboBox<String> jComboBoxSpecialite;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelDepartement;
    private javax.swing.JLabel jLabelDepartement1;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelExamen1;
    private javax.swing.JLabel jLabelNbchefsal;
    private javax.swing.JLabel jLabelNbcorrecteurs;
    private javax.swing.JLabel jLabelNbepreuves;
    private javax.swing.JLabel jLabelNbvacation;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelNomCentre;
    private javax.swing.JLabel jLabelRegion;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelSpecialite;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanelChoixExamen;
    private javax.swing.JPanel jPanelChoixSouscentre;
    private javax.swing.JPanel jPanelCout;
    private javax.swing.JPanel jPanelGestionEtat;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea;
    private javax.swing.JTextField jTextFieldEtablissement;
    private javax.swing.JTextField jTextFieldNbchefsal;
    private javax.swing.JTextField jTextFieldNbcorrecteurs;
    private javax.swing.JTextField jTextFieldNbepreuves;
    private javax.swing.JTextField jTextFieldNbvacation;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Examen> examens = null;
    private List<Examen> examensSelected = new ArrayList<Examen>();
    private String[] examensList = null;
    private List<Option> options = null;
    private List<Region> regions = null;
    private String nomRegionSelected = "";
    private List<Departement> departements = null;
    private List<Arrondissement> arrondissements = null;
    private String[] sessionsCombo = null;
    private String[] regionsCombo = null;
    private String[] departementsCombo = null;
    private String[] arrondissementsCombo = null;
    private String nomArrondissementSelected = "";
    private String nomSouscentreSelected = "";
    private List<Souscentre> souscentres = null;
    private Souscentre souscentreSelected = null;
    private String[] souscentresCombo = null;
    private String nomDepartementSelected = "";
    private String phase = "ECRIT";
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private List<Caisse> caisses = null;
    private int effectif = 0, nbchefsal = 0, nbvac = 0, total = 0, coutvac = 0, nbcopies = 0, coutcopies = 0, txindem = 0, indemnite = 0, supplement = 0, txvac = 1500, txcopie = 150, nbexamin = 0, nbepreuves = 0;
    private boolean continuerNbvac = false;
    private boolean continuerNbchefsal = false;
    private boolean continuerNbepreuves = false;
    private boolean continuerNbcorrecteurs = false;
    private int nbvacSaisi = 0;
    private int nbchefsalSaisi = 0;
    private int nbepreuvesSaisi = 0;
    private int nbcorrecteursSaisi = 0;
    private String nbvacString = "";
    private String nbchefsalString = "";
    private String nbepreuvesString = "";
    private String nbcorrecteursString = "";
    private List<Eltpratiquestt> lesEltpratiquestt = null;
    private List<Eltpratiquesttsecret> lesEltpratiquesttsecret = null;
    private String[] specialitesCombo = null;
    private List<Specialisation> specialites = null;
    private List<Specialisationsec> specialitesecret = null;
    private String sigleOptionSelected = "";
    private Option optionSelected = null;
    private int numsecSelected = 0;
    private String numsecString = "";
    private int numsec = 0;
    private boolean trouverSouscentre = false;
    private List<Secretariat> secretariats = null;
    private String[] numsecCombo = null;
    private Secretariat secretariatSelected = null;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        examens = metier.findAllExamens();
        regions = metier.findAllRegions();
        departements = metier.findAllDepartements();
        examens = metier.findAllExamens();
        options = metier.findAllOptions();
        secretariats = metier.findAllSecretariats();

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int i = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[i++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des régions
        regionsCombo = new String[regions.size() + 1];
        regionsCombo[0] = "---";
        int j = 1;
        for (Region region : regions) {
            regionsCombo[j++] = region.getNomreg();
        }
        jComboBoxRegion.setModel(new DefaultComboBoxModel(regionsCombo));

        //on remplit la combobox des types d'examen
        typesCombo = new String[]{"---", "IND PROF", "STT", "STT PROF",};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        remplirDepartementCombobox();
        remplirArrondissementCombobox();
        remplirSouscentreCombobox();
    }

    private void infoSaisies() {
        anneeString = (String) jComboBoxSession.getSelectedItem();
        groupedexamensEnstring = jTextArea.getText();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        sigleOptionSelected = (String) jComboBoxSpecialite.getSelectedItem();
        nbvacString = (String) jTextFieldNbvacation.getText();
        nbchefsalString = (String) jTextFieldNbchefsal.getText();
        nbepreuvesString = jTextFieldNbepreuves.getText();
        nbcorrecteursString = jTextFieldNbcorrecteurs.getText();
    }

    private void determinerCoutD1Eltpratiquestt(Souscentre souscentre, Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueMap, Eltpratiquestt eltpratiquestt, String niveau) {
        effectif = 0;
        nbchefsal = 0;
        nbvac = 0;
        nbexamin = 0;
        nbepreuves = 0;
        coutvac = 0;
        nbcopies = 0;
        coutcopies = 0;
        indemnite = 0;
        supplement = 0;
        total = 0;
        for (Statistique stat : souscentreStatistiqueMap.get(souscentre)) {
            if (eltpratiquestt.getOption().getSigle().equals(stat.getOption().getSigle())) {
                effectif = stat.getNombre();
                break;
            }
        }
        if (niveau.equals("BACC")) {
            txcopie = 200;//txcopie étant initialisé à 150
        }

        nbchefsal = eltpratiquestt.getNbchefsal();

        txindem = 15000;

        nbvac = eltpratiquestt.getNbvac();
        nbexamin = eltpratiquestt.getNbexamin();
        nbepreuves = eltpratiquestt.getNbepreuves();
        coutvac = nbexamin * nbvac * txvac;
        nbcopies = effectif * nbepreuves;
        coutcopies = nbcopies * txcopie;

        indemnite = nbchefsal * txindem;
        if (nbchefsal != 0) {
            supplement = nbcopies * 25;
        }

        total = coutvac + coutcopies + indemnite + supplement;
    }

    private void determinerCoutD1Eltpratiquesttsecret(Secretariat secretariat, Map<Secretariat, ArrayList<Statsecretariat>> secretariatStatsecretariatsMap, Eltpratiquesttsecret eltpratiquesttsecret, String niveau) {
        effectif = 0;
        nbchefsal = 0;
        nbvac = 0;
        nbexamin = 0;
        nbepreuves = 0;
        coutvac = 0;
        nbcopies = 0;
        coutcopies = 0;
        indemnite = 0;
        supplement = 0;
        total = 0;
        for (Statsecretariat stat : secretariatStatsecretariatsMap.get(secretariat)) {
            if (eltpratiquesttsecret.getOption().getSigle().equals(stat.getOption().getSigle())) {
                effectif = stat.getNombre();
                break;
            }
        }
        if (niveau.equals("BACC")) {
            txcopie = 200;//txcopie étant initialisé à 150
        }

        nbchefsal = eltpratiquesttsecret.getNbchefsal();

        txindem = 15000;

        nbvac = eltpratiquesttsecret.getNbvac();
        nbexamin = eltpratiquesttsecret.getNbexamin();
        nbepreuves = eltpratiquesttsecret.getNbepreuves();
        coutvac = nbexamin * nbvac * txvac;
        nbcopies = effectif * nbepreuves;
        coutcopies = nbcopies * txcopie;

        indemnite = nbchefsal * txindem;
        if (nbchefsal != 0) {
            supplement = nbcopies * 25;
        }

        total = coutvac + coutcopies + indemnite + supplement;
    }

    private void determinerCoutD1EltpratiqueBPCOM(Souscentre souscentre, Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueMap, Eltpratiquestt eltpratiquestt, String niveau) {
        effectif = 0;
        nbchefsal = 0;
        nbvac = 0;
        nbexamin = 0;
        nbepreuves = 0;
        coutvac = 0;
        nbcopies = 0;
        coutcopies = 0;
        indemnite = 0;
        supplement = 0;
        total = 0;
        for (Statistique stat : souscentreStatistiqueMap.get(souscentre)) {
            if (eltpratiquestt.getOption().getSigle().equals(stat.getOption().getSigle())) {
                effectif = stat.getNombre();
                break;
            }
        }
        if (niveau.equals("BACC")) {
            txcopie = 200;//txcopie étant initialisé à 150
        }
        nbchefsal = eltpratiquestt.getNbchefsal();
        nbvac = eltpratiquestt.getNbvac();
        nbexamin = eltpratiquestt.getNbexamin();
        nbepreuves = eltpratiquestt.getNbepreuves();
        coutvac = nbvac * 10000;
        nbcopies = effectif * nbepreuves;
        coutcopies = nbcopies * txcopie;

        txindem = 35000;

        indemnite = nbchefsal * txindem;

        total = coutvac + coutcopies + indemnite;
    }

    private void determinerCoutD1EltpratiqueBPCOMsecret(Secretariat secretariat, Map<Secretariat, ArrayList<Statsecretariat>> secretariatStatsecretariatsMap, Eltpratiquesttsecret eltpratiquesttsecret, String niveau) {
        effectif = 0;
        nbchefsal = 0;
        nbvac = 0;
        nbexamin = 0;
        nbepreuves = 0;
        coutvac = 0;
        nbcopies = 0;
        coutcopies = 0;
        indemnite = 0;
        supplement = 0;
        total = 0;
        for (Statsecretariat stat : secretariatStatsecretariatsMap.get(secretariat)) {
            if (eltpratiquesttsecret.getOption().getSigle().equals(stat.getOption().getSigle())) {
                effectif = stat.getNombre();
                break;
            }
        }
        if (niveau.equals("BACC")) {
            txcopie = 200;//txcopie étant initialisé à 150
        }
        nbchefsal = eltpratiquesttsecret.getNbchefsal();
        nbvac = eltpratiquesttsecret.getNbvac();
        nbexamin = eltpratiquesttsecret.getNbexamin();
        nbepreuves = eltpratiquesttsecret.getNbepreuves();
        coutvac = nbvac * 10000;
        nbcopies = effectif * nbepreuves;
        coutcopies = nbcopies * txcopie;

        txindem = 35000;

        indemnite = nbchefsal * txindem;

        total = coutvac + coutcopies + indemnite;
    }

    private void remplirDepartementCombobox() {
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        departements = metier.findAllDepartementsD1Region(nomRegionSelected);
        //on remplit la combobox des départements
        departementsCombo = new String[departements.size() + 1];
        departementsCombo[0] = "---";
        int i = 1;
        for (Departement departement : departements) {
            departementsCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartement.setModel(new DefaultComboBoxModel(departementsCombo));
    }

    private void remplirArrondissementCombobox() {
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        arrondissements = metier.findAllArrondissementsD1Departement(nomDepartementSelected);
        //on remplit la combobox des arrondissements
        arrondissementsCombo = new String[arrondissements.size() + 1];
        arrondissementsCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissements) {
            arrondissementsCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissement.setModel(new DefaultComboBoxModel(arrondissementsCombo));
    }

    private void remplirSouscentreCombobox() {
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        souscentres = metier.findAllSouscentresD1Arrondissement(nomArrondissementSelected);
        //on remplit la combobox des sous-centres de pratique
        souscentresCombo = new String[souscentres.size() + 1];
        souscentresCombo[0] = "---";
        int i = 1;
        for (Souscentre souscentre : souscentres) {
            souscentresCombo[i++] = souscentre.getNomsouscent();
        }
        jComboBoxSouscentre.setModel(new DefaultComboBoxModel(souscentresCombo));
    }

    private void validerNbvacation(String nbreString) {
        try {
            nbvacSaisi = Integer.parseInt(nbreString);
            continuerNbvac = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de vacations doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbvac = false;
        }
    }

    private void validerNbchefsal(String nbreString) {
        try {
            nbchefsalSaisi = Integer.parseInt(nbreString);
            continuerNbchefsal = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de chefs de salle/atelier doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbchefsal = false;
        }
    }

    private void validerNbepreuves(String nbreString) {
        try {
            nbepreuvesSaisi = Integer.parseInt(nbreString);
            continuerNbepreuves = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre d'épreuves doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbepreuves = false;
        }
    }

    private void validerNbcorrecteurs(String nbreString) {
        try {
            nbcorrecteursSaisi = Integer.parseInt(nbreString);
            continuerNbcorrecteurs = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de correcteurs/examinateurs doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbcorrecteurs = false;
        }
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea.setText(examensSelectedEnchaine);
            jTextArea.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    private void remplirSpecialiteCombobox() {
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        if (!anneeString.equals("---") && !nomSouscentreSelected.equals("---") && !niveauSelected.equals("---") && !typeSelected.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            specialites = metier.findAllSpecialisationsD1SouscentrePour1SessionD1NiveauEtType(anneeSelected, nomSouscentreSelected, niveauSelected, typeSelected);//ici il n'y a pas de vrai groupe d'examens
            if (specialites.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. ce sous-centre de pratique n'a aucune spécialité pour la session, niveau et type d'examen choisis !");
            } else {
                specialitesCombo = new String[specialites.size() + 1];
                specialitesCombo[0] = "---";
                int i = 1;
                for (Specialisation spec : specialites) {
                    specialitesCombo[i++] = spec.getOption().getSigle();
                }
                jComboBoxSpecialite.setModel(new DefaultComboBoxModel(specialitesCombo));
            }
        }
    }

    private void remplirSpecialiteSecretCombobox() {
        specialitesCombo = new String[0];
        jComboBoxSpecialite.setModel(new DefaultComboBoxModel(specialitesCombo));//vide jComboBoxSpecialite

        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        numsecString = (String) jComboBoxNumsec.getSelectedItem();
        if (!anneeString.equals("---") && !nomSouscentreSelected.equals("---") && !niveauSelected.equals("---") && !typeSelected.equals("---") && !numsecString.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            numsecSelected = Integer.parseInt(numsecString);
            specialitesecret = metier.findAllSpecialisationsecD1SecretariatD1GroupedexamenD1session(numsecSelected, anneeSelected, nomSouscentreSelected, niveauSelected, typeSelected);//ici il n'y a pas de vrai groupe d'examens
            if (specialitesecret.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. ce secrétariat n'a aucune spécialité pour la session, niveau et type d'examen choisis !");
            } else {
                specialitesCombo = new String[specialitesecret.size() + 1];
                specialitesCombo[0] = "---";
                int i = 1;
                for (Specialisationsec spec : specialitesecret) {
                    specialitesCombo[i++] = spec.getOption().getSigle();
                }
                jComboBoxSpecialite.setModel(new DefaultComboBoxModel(specialitesCombo));
            }
        }
    }

    private boolean testExistenceD1StatsecA1souscentrePour1GroupedexamenEtsession(String scentre, String niveau, String type, int annee) {//sert à vérifier si un souscentre a des secretaraiats dans un groupe d'examens donné
        List<Statsecretariat> lesStatsecs = metier.findAllStatsecretariat();
        boolean result = false;
        for (Statsecretariat stat : lesStatsecs) {
            if (stat.getSecretariat().getSouscentre().getNomsouscent().equals(scentre) && stat.getExamen().getNiveau().equals(niveau) && stat.getExamen().getType().equals(type) && stat.getSecretariat().getSession().getAnnee() == annee) {
                result = true;
                break;
            }
        }
        return result;
    }

    private void ordonnerSecretariatsD1souscentre(ArrayList<Secretariat> lesSecrets) {
        for (int i = 0; i < lesSecrets.size() - 1; i++) {
            for (int j = i + 1; j < lesSecrets.size(); j++) {
                if (lesSecrets.get(j).getNumsec() < lesSecrets.get(i).getNumsec()) {
                    //on échange les deux
                    Secretariat tampon = lesSecrets.get(i);
                    lesSecrets.set(i, lesSecrets.get(j));
                    lesSecrets.set(j, tampon);
                }
            }
        }
    }

    private void remplirNumeroSecretariatCombobox(ArrayList<Secretariat> sesSecrets) {
        //on remplit la combobox des numéros de secretariat
        numsecCombo = new String[sesSecrets.size() + 1];
        numsecCombo[0] = "---";
        int i = 1;
        for (Secretariat s : sesSecrets) {
            numsecCombo[i++] = "" + s.getNumsec();
        }
        jComboBoxNumsec.setModel(new DefaultComboBoxModel(numsecCombo));
    }
}
