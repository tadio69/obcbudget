package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Arrondissement;
import couche_jpa.Caisse;
import couche_jpa.Centrebilletage;
import couche_jpa.Departement;
import couche_jpa.Examen;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Matiere;
import couche_jpa.Nbcandlibresg;
import couche_jpa.Nbcandlibrestp;
import couche_jpa.Option;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueEtatIdentificateursCandidatsLibres extends javax.swing.JFrame {

    public VueEtatIdentificateursCandidatsLibres() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButtonFermer = new javax.swing.JButton();
        jPanelChoixExamen = new javax.swing.JPanel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixExamen = new javax.swing.JButton();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelExamen = new javax.swing.JLabel();
        jPanelEffectifsESG = new javax.swing.JPanel();
        jButtonAnnulerEffectifsESG = new javax.swing.JButton();
        jLabelEffectifProbESG = new javax.swing.JLabel();
        jTextFieldEffectifProbESG = new javax.swing.JTextField();
        jButtonCreerEffectifsESG = new javax.swing.JButton();
        jButtonSupprimerEffectifsESG = new javax.swing.JButton();
        jButtonListerEffectifsESG = new javax.swing.JButton();
        jLabelEffectifBacESG = new javax.swing.JLabel();
        jTextFieldEffectifBacESG = new javax.swing.JTextField();
        jPanelGestionEtat = new javax.swing.JPanel();
        jButtonCreerEtats = new javax.swing.JButton();
        jButtonMettreAjourEtats = new javax.swing.JButton();
        jButtonVisualiserEtats = new javax.swing.JButton();
        jButtonSupprimerEtats = new javax.swing.JButton();
        jPanelChoixSouscentre = new javax.swing.JPanel();
        jComboBoxDepartement = new javax.swing.JComboBox<>();
        jLabelDepartement = new javax.swing.JLabel();
        jLabelSouscentre = new javax.swing.JLabel();
        jComboBoxArrondissement = new javax.swing.JComboBox<>();
        jComboBoxSouscentre = new javax.swing.JComboBox<>();
        jLabelArrondissement = new javax.swing.JLabel();
        jComboBoxRegion = new javax.swing.JComboBox<>();
        jLabelRegion = new javax.swing.JLabel();
        jButtonAnnulerChoixSouscentre = new javax.swing.JButton();
        jCheckBoxIdentifie = new javax.swing.JCheckBox();
        jPanelEffectifsESTP = new javax.swing.JPanel();
        jButtonAnnulerEffectifsESTP = new javax.swing.JButton();
        jLabelEffectifESTI = new javax.swing.JLabel();
        jTextFieldEffectifESTI = new javax.swing.JTextField();
        jButtonCreerEffectifsESTP = new javax.swing.JButton();
        jButtonSupprimerEffectifsESTP = new javax.swing.JButton();
        jButtonListerEffectifsESTP = new javax.swing.JButton();
        jLabelEffectifProbSTT = new javax.swing.JLabel();
        jTextFieldEffectifProbSTT = new javax.swing.JTextField();
        jTextFieldEffectifBacSTT = new javax.swing.JTextField();
        jLabelEffectifBacSTT = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT PRISE EN CHARGE DES CADRES IDENTIFICATEURS DES CANDIDATS LIBRES");

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jPanelChoixExamen.setBackground(new java.awt.Color(102, 255, 153));
        jPanelChoixExamen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un groupe d'examens et une session", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixExamen.setText("Annuler");
        jButtonAnnulerChoixExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixExamenActionPerformed(evt);
            }
        });

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        javax.swing.GroupLayout jPanelChoixExamenLayout = new javax.swing.GroupLayout(jPanelChoixExamen);
        jPanelChoixExamen.setLayout(jPanelChoixExamenLayout);
        jPanelChoixExamenLayout.setHorizontalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelChoixExamenLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelSession)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86)
                .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
        );
        jPanelChoixExamenLayout.setVerticalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );

        jPanelEffectifsESG.setBackground(new java.awt.Color(204, 255, 0));
        jPanelEffectifsESG.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enregistrer les effectifs des candidats libres au PROB et au BAC ESG", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jButtonAnnulerEffectifsESG.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerEffectifsESG.setText("Annuler");
        jButtonAnnulerEffectifsESG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerEffectifsESGActionPerformed(evt);
            }
        });

        jLabelEffectifProbESG.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelEffectifProbESG.setText("Effectif PROB ESG :");

        jTextFieldEffectifProbESG.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonCreerEffectifsESG.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEffectifsESG.setText("Créer");
        jButtonCreerEffectifsESG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEffectifsESGActionPerformed(evt);
            }
        });

        jButtonSupprimerEffectifsESG.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEffectifsESG.setText("Supprimer");
        jButtonSupprimerEffectifsESG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEffectifsESGActionPerformed(evt);
            }
        });

        jButtonListerEffectifsESG.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonListerEffectifsESG.setText("Lister");
        jButtonListerEffectifsESG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerEffectifsESGActionPerformed(evt);
            }
        });

        jLabelEffectifBacESG.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelEffectifBacESG.setText("Effectif BAC ESG :");

        jTextFieldEffectifBacESG.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanelEffectifsESGLayout = new javax.swing.GroupLayout(jPanelEffectifsESG);
        jPanelEffectifsESG.setLayout(jPanelEffectifsESGLayout);
        jPanelEffectifsESGLayout.setHorizontalGroup(
            jPanelEffectifsESGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEffectifsESGLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanelEffectifsESGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelEffectifsESGLayout.createSequentialGroup()
                        .addComponent(jLabelEffectifProbESG)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldEffectifProbESG, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelEffectifsESGLayout.createSequentialGroup()
                        .addComponent(jButtonCreerEffectifsESG)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonListerEffectifsESG)))
                .addGap(18, 18, 18)
                .addGroup(jPanelEffectifsESGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelEffectifsESGLayout.createSequentialGroup()
                        .addComponent(jButtonSupprimerEffectifsESG)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnulerEffectifsESG, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelEffectifsESGLayout.createSequentialGroup()
                        .addComponent(jLabelEffectifBacESG)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldEffectifBacESG, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)))
                .addGap(0, 49, Short.MAX_VALUE))
        );
        jPanelEffectifsESGLayout.setVerticalGroup(
            jPanelEffectifsESGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEffectifsESGLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanelEffectifsESGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelEffectifsESGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelEffectifBacESG, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldEffectifBacESG, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelEffectifsESGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelEffectifProbESG, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldEffectifProbESG, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanelEffectifsESGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCreerEffectifsESG, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSupprimerEffectifsESG, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonListerEffectifsESG, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerEffectifsESG, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jPanelGestionEtat.setBackground(new java.awt.Color(0, 255, 255));
        jPanelGestionEtat.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer l'état", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 102, 255))); // NOI18N

        jButtonCreerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEtats.setText("Créer");
        jButtonCreerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEtatsActionPerformed(evt);
            }
        });

        jButtonMettreAjourEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjourEtats.setText("Mettre à jour");
        jButtonMettreAjourEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourEtatsActionPerformed(evt);
            }
        });

        jButtonVisualiserEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserEtats.setText("Visualiser");
        jButtonVisualiserEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserEtatsActionPerformed(evt);
            }
        });

        jButtonSupprimerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEtats.setText("Supprimer");
        jButtonSupprimerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEtatsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelGestionEtatLayout = new javax.swing.GroupLayout(jPanelGestionEtat);
        jPanelGestionEtat.setLayout(jPanelGestionEtatLayout);
        jPanelGestionEtatLayout.setHorizontalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jButtonCreerEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonMettreAjourEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiserEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerEtats)
                .addContainerGap(44, Short.MAX_VALUE))
        );
        jPanelGestionEtatLayout.setVerticalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonVisualiserEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonCreerEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonMettreAjourEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonSupprimerEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanelChoixSouscentre.setBackground(new java.awt.Color(255, 204, 51));
        jPanelChoixSouscentre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sélectionner un sous-centre", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jComboBoxDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementActionPerformed(evt);
            }
        });

        jLabelDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartement.setText("Département :");

        jLabelSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSouscentre.setText("Sous-centre :");

        jComboBoxArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementActionPerformed(evt);
            }
        });

        jComboBoxSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSouscentre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSouscentreActionPerformed(evt);
            }
        });

        jLabelArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissement.setText("Arrondissement :");

        jComboBoxRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionActionPerformed(evt);
            }
        });

        jLabelRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegion.setText("Région :");

        jButtonAnnulerChoixSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixSouscentre.setText("Annuler");
        jButtonAnnulerChoixSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixSouscentreActionPerformed(evt);
            }
        });

        jCheckBoxIdentifie.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jCheckBoxIdentifie.setForeground(new java.awt.Color(0, 0, 204));
        jCheckBoxIdentifie.setText("Identifie");

        javax.swing.GroupLayout jPanelChoixSouscentreLayout = new javax.swing.GroupLayout(jPanelChoixSouscentre);
        jPanelChoixSouscentre.setLayout(jPanelChoixSouscentreLayout);
        jPanelChoixSouscentreLayout.setHorizontalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelDepartement)
                    .addComponent(jLabelArrondissement)
                    .addComponent(jLabelSouscentre)
                    .addComponent(jLabelRegion))
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(152, 152, 152))
                    .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxRegion, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(446, 446, 446))))
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(282, 282, 282)
                .addComponent(jCheckBoxIdentifie)
                .addGap(57, 57, 57)
                .addComponent(jButtonAnnulerChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanelChoixSouscentreLayout.setVerticalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelRegion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxRegion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxIdentifie, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        jPanelEffectifsESTP.setBackground(new java.awt.Color(0, 204, 255));
        jPanelEffectifsESTP.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enregistrer les effectifs des candidats libres au PROB et au BAC TI et STT", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jButtonAnnulerEffectifsESTP.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerEffectifsESTP.setText("Annuler");
        jButtonAnnulerEffectifsESTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerEffectifsESTPActionPerformed(evt);
            }
        });

        jLabelEffectifESTI.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelEffectifESTI.setText("Effectif PROB IND + BAC IND :");

        jTextFieldEffectifESTI.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonCreerEffectifsESTP.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEffectifsESTP.setText("Créer");
        jButtonCreerEffectifsESTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEffectifsESTPActionPerformed(evt);
            }
        });

        jButtonSupprimerEffectifsESTP.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEffectifsESTP.setText("Supprimer");
        jButtonSupprimerEffectifsESTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEffectifsESTPActionPerformed(evt);
            }
        });

        jButtonListerEffectifsESTP.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonListerEffectifsESTP.setText("Lister");
        jButtonListerEffectifsESTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerEffectifsESTPActionPerformed(evt);
            }
        });

        jLabelEffectifProbSTT.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelEffectifProbSTT.setText("Effectif PROB STT + PROB BT STT :");

        jTextFieldEffectifProbSTT.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jTextFieldEffectifBacSTT.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelEffectifBacSTT.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelEffectifBacSTT.setText("Effectif BAC STT + BT STT :");

        javax.swing.GroupLayout jPanelEffectifsESTPLayout = new javax.swing.GroupLayout(jPanelEffectifsESTP);
        jPanelEffectifsESTP.setLayout(jPanelEffectifsESTPLayout);
        jPanelEffectifsESTPLayout.setHorizontalGroup(
            jPanelEffectifsESTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEffectifsESTPLayout.createSequentialGroup()
                .addGap(226, 226, 226)
                .addComponent(jButtonCreerEffectifsESTP)
                .addGap(18, 18, 18)
                .addComponent(jButtonListerEffectifsESTP)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerEffectifsESTP)
                .addGap(18, 18, 18)
                .addComponent(jButtonAnnulerEffectifsESTP, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanelEffectifsESTPLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabelEffectifESTI)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldEffectifESTI, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jLabelEffectifProbSTT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldEffectifProbSTT, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jLabelEffectifBacSTT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldEffectifBacSTT, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        jPanelEffectifsESTPLayout.setVerticalGroup(
            jPanelEffectifsESTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEffectifsESTPLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanelEffectifsESTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelEffectifsESTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelEffectifBacSTT, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldEffectifBacSTT, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelEffectifsESTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelEffectifESTI, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldEffectifESTI, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelEffectifProbSTT, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldEffectifProbSTT, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanelEffectifsESTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCreerEffectifsESTP, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSupprimerEffectifsESTP, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonListerEffectifsESTP, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerEffectifsESTP, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanelEffectifsESG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jPanelEffectifsESTP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 825, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(421, 421, 421)
                        .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(jButtonFermer)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelEffectifsESG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelEffectifsESTP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVisualiserEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserEtatsActionPerformed
        infoSaisies();
        if (typeSelected.equals("GEN")) {
            List<Souscentre> souscentreAvecNbcandlibresgList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des Nbcandlibresg
            Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
            ArrayList<String> typesBruts = new ArrayList<>();
            ArrayList<String> typesAconsiderer = new ArrayList<>();
            ArrayList<String> niveauxAconsiderer = new ArrayList<>();
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES CADRES IDENTIFICATEURS DES CANDIDATS LIBRES");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                boolean continuer = false;
                for (Caisse c : caisses) {
                    if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                        continuer = true;
                        break;
                    }
                }
                if (!continuer) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états de prise en charge des cadres identificateurs des candidats libres n'ont pas encore été créés pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    //recherche des types des examens à utiliser
                    for (Examen examen : examensSelected) {
                        System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                        if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                            typesBruts.add("ESG");
                        }
                        if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                            typesBruts.add("ESTP");
                        }
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 2) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    //recherche des niveaux des examens à utiliser
                    if (!niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add(niveauSelected);
                        niveauxAconsiderer.add("TOUT");
                    }
                    if (niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add("PROB");
                        niveauxAconsiderer.add("BACC");
                        niveauxAconsiderer.add("TOUT");
                    }
                    //recherche des centres de billetage
                    for (String niveau : niveauxAconsiderer) {
                        for (String type : typesAconsiderer) {
                            List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                            for (Centrebilletage centrebilletage : desCentrebilletages) {
                                ArrayList<Souscentre> souscentresList = new ArrayList<>();
                                if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                    List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                    for (Secteurcouv sect : secteurs) {
                                        if (!souscentresList.contains(sect.getSouscentre())) {
                                            souscentresList.add(sect.getSouscentre());
                                        }
                                    }
                                    centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                                }
                            }
                        }
                    }
                    tousNbcandlibresg = metier.findAllNbcandlibresgD1Session(anneeSelected);//le groupe est unique
                    if (!tousNbcandlibresg.isEmpty()) {
                        //sous-centres ayant des Nbcandlibresg
                        for (Nbcandlibresg nbcandlibresg : tousNbcandlibresg) {
                            if (!souscentreAvecNbcandlibresgList.contains(nbcandlibresg.getSouscentre())) {
                                souscentreAvecNbcandlibresgList.add(nbcandlibresg.getSouscentre());
                            }
                        }

                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            for (Region region : regions) {
                                for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                    if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                        int totalMontant = 0;
                                        ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                        int num = 1;
                                        for (int i = 0; i < souscentresList.size(); i++) {
                                            Souscentre souscentre = souscentresList.get(i);
                                            if (souscentreAvecNbcandlibresgList.contains(souscentre)) {
                                                Nbcandlibresg SonNbcandlibresg = new Nbcandlibresg();
                                                for (Nbcandlibresg nbcandlibresg : tousNbcandlibresg) {
                                                    if (nbcandlibresg.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                                        SonNbcandlibresg = nbcandlibresg;
                                                        break;
                                                    }
                                                }

                                                determinerCoutESG(SonNbcandlibresg);

                                                Map<String, Object> row = new HashMap<>();
                                                row.put("examen", groupedexamensEnstring);
                                                row.put("session", anneeSelected);                                    
                                                row.put("region", region.getNomreg());
                                                row.put("reference", "obcbudget-v.3");
                                                row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                row.put("num", num++);
                                                row.put("souscentre", souscentre.getNomsouscent());
                                                row.put("effectif", effectif);
                                                row.put("forfait", forfait);
                                                row.put("coutvac1", coutvac1);
                                                row.put("coutvac2", coutvac2);
                                                row.put("baspage", "OBC/AR/"+centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                row.put("total", montantArrondi);
                                                totalMontant += montantArrondi;//jasperreport prendra la dernière valeur de cout
                                                row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                datasource.add(row);
                                            }
                                        }
                                    }
                                }
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatIdentificateursCandidatsLibresESGReport.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun effectif de Prob ou de Bac ESG trouvé dans la base de données !");
                    }

                    souscentreAvecNbcandlibresgList.clear();
                    examensSelected.clear();
                    tousNbcandlibresg.clear();
                }//fin else continuer
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
            }
        }
        if (typeSelected.equals("TOUT ESTP")) {
            List<Souscentre> souscentreAvecNbcandlibrestpList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des Nbcandlibrestp
            Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
            ArrayList<String> typesBruts = new ArrayList<>();
            ArrayList<String> typesAconsiderer = new ArrayList<>();
            ArrayList<String> niveauxAconsiderer = new ArrayList<>();
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES CADRES IDENTIFICATEURS DES CANDIDATS LIBRES");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                boolean continuer = false;
                for (Caisse c : caisses) {
                    if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                        continuer = true;
                        break;
                    }
                }
                if (!continuer) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états de prise en charge des cadres identificateurs des candidats libres n'ont pas encore été créés pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    //recherche des types des examens à utiliser
                    for (Examen examen : examensSelected) {
                        System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                        if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                            typesBruts.add("ESG");
                        }
                        if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                            typesBruts.add("ESTP");
                        }
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 2) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    //recherche des niveaux des examens à utiliser
                    if (!niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add(niveauSelected);
                        niveauxAconsiderer.add("TOUT");
                    }
                    if (niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add("PROB");
                        niveauxAconsiderer.add("BACC");
                        niveauxAconsiderer.add("TOUT");
                    }
                    //recherche des centres de billetage
                    for (String niveau : niveauxAconsiderer) {
                        for (String type : typesAconsiderer) {
                            List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                            for (Centrebilletage centrebilletage : desCentrebilletages) {
                                ArrayList<Souscentre> souscentresList = new ArrayList<>();
                                if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                    List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                    for (Secteurcouv sect : secteurs) {
                                        if (!souscentresList.contains(sect.getSouscentre())) {
                                            souscentresList.add(sect.getSouscentre());
                                        }
                                    }
                                    centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                                }
                            }
                        }
                    }
                    tousNbcandlibrestp = metier.findAllNbcandlibrestpD1Session(anneeSelected);//le groupe est unique
                    if (!tousNbcandlibrestp.isEmpty()) {
                        //sous-centres ayant des Nbcandlibrestp
                        for (Nbcandlibrestp nbcandlibrestp : tousNbcandlibrestp) {
                            if (!souscentreAvecNbcandlibrestpList.contains(nbcandlibrestp.getSouscentre())) {
                                souscentreAvecNbcandlibrestpList.add(nbcandlibrestp.getSouscentre());
                            }
                        }
                  
                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            for (Region region : regions) {
                                for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                    if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                        int totalMontant = 0;
                                        ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                        int num = 1;
                                        for (int i = 0; i < souscentresList.size(); i++) {
                                            Souscentre souscentre = souscentresList.get(i);
                                            if (souscentreAvecNbcandlibrestpList.contains(souscentre)) {
                                                Nbcandlibrestp SonNbcandlibrestp = new Nbcandlibrestp();
                                                for (Nbcandlibrestp nbcandlibrestp : tousNbcandlibrestp) {
                                                    if (nbcandlibrestp.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                                        SonNbcandlibrestp = nbcandlibrestp;
                                                        break;
                                                    }
                                                }
                                                determinerCoutESTP(SonNbcandlibrestp);

                                                Map<String, Object> row = new HashMap<>();
                                                row.put("examen", groupedexamensEnstring);
                                                row.put("session", anneeSelected);                                             
                                                row.put("region", region.getNomreg());
                                                row.put("reference", "obcbudget-v.3");
                                                row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                row.put("num", num++);
                                                row.put("souscentre", souscentre.getNomsouscent());
                                                row.put("effectif", effectif);
                                                row.put("forfait", forfait);
                                                row.put("coutvac1", coutvac1);
                                                row.put("coutvac2", coutvac2);
                                                row.put("coutvac3", coutvac3);
                                                row.put("baspage", "OBC/AR/"+centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                row.put("total", montantArrondi);
                                                totalMontant += montantArrondi;//jasperreport prendra la dernière valeur de cout
                                                row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                datasource.add(row);
                                            }
                                        }
                                    }
                                }
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatIdentificateursCandidatsLibresESTPReport.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun effectif de candidats libres au Prob+Bac ESTI, de Prob+Prob BT STT ou de Bac+BT STT  trouvé dans la base de données !");
                    }

                    souscentreAvecNbcandlibrestpList.clear();
                    examensSelected.clear();
                    tousNbcandlibrestp.clear();
                }//fin else continuer
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
            }
        }
    }//GEN-LAST:event_jButtonVisualiserEtatsActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonCreerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEtatsActionPerformed
        infoSaisies();
        if (typeSelected.equals("GEN")) {
            List<Souscentre> souscentreAvecNbcandlibresgList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des Nbcandlibresg
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES CADRES IDENTIFICATEURS DES CANDIDATS LIBRES");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (!caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états de prise en charge des cadres identificateurs des candidats libres existent déjà pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    tousNbcandlibresg = metier.findAllNbcandlibresgD1Session(anneeSelected);//le groupe d'examen est unique
                    if (!tousNbcandlibresg.isEmpty()) {
                        //sous-centres ayant des Nbcandlibresg
                        for (Nbcandlibresg nbcandlibresg : tousNbcandlibresg) {
                            if (!souscentreAvecNbcandlibresgList.contains(nbcandlibresg.getSouscentre())) {
                                souscentreAvecNbcandlibresgList.add(nbcandlibresg.getSouscentre());
                            }
                        }

                        boolean testSicreer = false;
                        try {
                            for (Souscentre souscentre : souscentreAvecNbcandlibresgList) {

                                Nbcandlibresg sonNbcandlibresg = new Nbcandlibresg();
                                for (Nbcandlibresg nbcandlibresg : tousNbcandlibresg) {
                                    if (nbcandlibresg.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                        sonNbcandlibresg = nbcandlibresg;
                                        break;
                                    }
                                }
                                determinerCoutESG(sonNbcandlibresg);
                                int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                metier.creerCaisse(new Caisse(montantArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                testSicreer = true;
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testSicreer) {
                            JOptionPane.showMessageDialog(this, "Etats de prise en charge des cadres identificateurs des candidats libres créés avec succès pour ce groupe d'examens !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun effectif de Prob ou de Bac ESG trouvé dans la base de données !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
            }

            souscentreAvecNbcandlibresgList.clear();
            tousNbcandlibresg.clear();
        }
        if (typeSelected.equals("TOUT ESTP")) {
            List<Souscentre> souscentreAvecNbcandlibrestpList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des Nbcandlibrestp
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES CADRES IDENTIFICATEURS DES CANDIDATS LIBRES");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (!caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états de prise en charge des cadres identificateurs des candidats libres existent déjà pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    tousNbcandlibrestp = metier.findAllNbcandlibrestpD1Session(anneeSelected);//le groupe est unique ici
                    if (!tousNbcandlibrestp.isEmpty()) {
                        //sous-centres ayant des Nbcandlibrestp
                        for (Nbcandlibrestp nbcandlibrestp : tousNbcandlibrestp) {
                            if (!souscentreAvecNbcandlibrestpList.contains(nbcandlibrestp.getSouscentre())) {
                                souscentreAvecNbcandlibrestpList.add(nbcandlibrestp.getSouscentre());
                            }
                        }

                        boolean testSicreer = false;
                        try {
                            for (Souscentre souscentre : souscentreAvecNbcandlibrestpList) {
                                Nbcandlibrestp sonNbcandlibrestp = new Nbcandlibrestp();
                                for (Nbcandlibrestp nbcandlibrestp : tousNbcandlibrestp) {
                                    if (nbcandlibrestp.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                        sonNbcandlibrestp = nbcandlibrestp;
                                        break;
                                    }
                                }

                                determinerCoutESTP(sonNbcandlibrestp);
                                int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                metier.creerCaisse(new Caisse(montantArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                testSicreer = true;
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testSicreer) {
                            JOptionPane.showMessageDialog(this, "Etats de prise en charge des cadres identificateurs des candidats libres  créés avec succès pour ce groupe d'examens !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun effectif de Prob+Bac ESTI, Prob+Prob BT STT ou de Bac+BT STT trouvé dans la base de données !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
            }

            souscentreAvecNbcandlibrestpList.clear();
            tousNbcandlibrestp.clear();
        }
    }//GEN-LAST:event_jButtonCreerEtatsActionPerformed

    private void jButtonMettreAjourEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourEtatsActionPerformed
        infoSaisies();
        if (typeSelected.equals("GEN")) {
            List<Souscentre> souscentreAvecNbcandlibresgList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des Nbcandlibresg
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de prise en charge des cadres identificateurs des candidats libres pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES CADRES IDENTIFICATEURS DES CANDIDATS LIBRES");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état de prise en charge des cadres identificateurs des candidats libres n'existe pour ce groupe d'examens !");
                    } else {
                        //on conserve quelques info de ces anciennes caisses
                        Groupe groupe = caisses.get(0).getGroupe();
                        sessionSelected = caisses.get(0).getSession();
                        //on supprime toutes les anciennes caisses du groupe d'examens ainsi que les intervsec
                        for (Caisse c : caisses) {
                            metier.supprimerCaisse(c);
                        }
                        //on va les recréer

                        tousNbcandlibresg = metier.findAllNbcandlibresgD1Session(anneeSelected);//le groupe est unique
                        if (!tousNbcandlibresg.isEmpty()) {
                            //sous-centres ayant des Nbcandlibresg
                            for (Nbcandlibresg nbcandlibresg : tousNbcandlibresg) {
                                if (!souscentreAvecNbcandlibresgList.contains(nbcandlibresg.getSouscentre())) {
                                    souscentreAvecNbcandlibresgList.add(nbcandlibresg.getSouscentre());
                                }
                            }

                            boolean testSimodifier = false;
                            try {
                                for (Souscentre souscentre : souscentreAvecNbcandlibresgList) {

                                    Nbcandlibresg sonNbcandlibresg = new Nbcandlibresg();
                                    for (Nbcandlibresg nbcandlibresg : tousNbcandlibresg) {
                                        if (nbcandlibresg.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                            sonNbcandlibresg = nbcandlibresg;
                                            break;
                                        }
                                    }

                                    determinerCoutESG(sonNbcandlibresg);
                                    int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                    metier.creerCaisse(new Caisse(montantArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                    testSimodifier = true;
                                }
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                            if (testSimodifier) {
                                JOptionPane.showMessageDialog(this, "Etats de prise en charge des cadres identificateurs des candidats libres mis à jour avec succès pour ce groupe d'examens !");
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Aucun effectif de Prob ou de Bac ESG trouvé dans la base de données !");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
                }
                souscentreAvecNbcandlibresgList.clear();
                tousNbcandlibresg.clear();
            }//fin if result
        }

        if (typeSelected.equals("TOUT ESTP")) {
            List<Souscentre> souscentreAvecNbcandlibrestpList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des Nbcandlibrestp
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de prise en charge des cadres identificateurs des candidats libres pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES CADRES IDENTIFICATEURS DES CANDIDATS LIBRES");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état de prise en charge des cadres identificateurs des candidats libres n'existe pour ce groupe d'examens !");
                    } else {
                        //on conserve quelques info de ces anciennes caisses
                        Groupe groupe = caisses.get(0).getGroupe();
                        sessionSelected = caisses.get(0).getSession();
                        //on supprime toutes les anciennes caisses du groupe d'examens ainsi que les intervsec
                        for (Caisse c : caisses) {
                            metier.supprimerCaisse(c);
                        }
                        //on va les recréer

                        tousNbcandlibrestp = metier.findAllNbcandlibrestpD1Session(anneeSelected);//le groupe est unique
                        if (!tousNbcandlibrestp.isEmpty()) {
                            //sous-centres ayant des Nbcandlibrestp
                            for (Nbcandlibrestp nbcandlibrestp : tousNbcandlibrestp) {
                                if (!souscentreAvecNbcandlibrestpList.contains(nbcandlibrestp.getSouscentre())) {
                                    souscentreAvecNbcandlibrestpList.add(nbcandlibrestp.getSouscentre());
                                }
                            }

                            boolean testSimodifier = false;
                            try {
                                for (Souscentre souscentre : souscentreAvecNbcandlibrestpList) {
                                    Nbcandlibrestp sonNbcandlibrestp = new Nbcandlibrestp();
                                    for (Nbcandlibrestp nbcandlibrestp : tousNbcandlibrestp) {
                                        if (nbcandlibrestp.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                            sonNbcandlibrestp = nbcandlibrestp;
                                            break;
                                        }
                                    }

                                    determinerCoutESTP(sonNbcandlibrestp);
                                    int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                    metier.creerCaisse(new Caisse(montantArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                    testSimodifier = true;
                                }
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                            if (testSimodifier) {
                                JOptionPane.showMessageDialog(this, "Etats de prise en charge des cadres identificateurs des candidats libres mis à jour avec succès pour ce groupe d'examens !");
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Aucun effectif de Prob+Bac ESTI, de Prob + Prob BT STT ou de Bac + BT STT trouvé dans la base de données !");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
                }
                souscentreAvecNbcandlibrestpList.clear();
                tousNbcandlibrestp.clear();
            }//fin if result
        }
    }//GEN-LAST:event_jButtonMettreAjourEtatsActionPerformed

    private void jButtonSupprimerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEtatsActionPerformed
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de prise en charge des cadres identificateurs des candidats libres pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES CADRES IDENTIFICATEURS DES CANDIDATS LIBRES");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de prise en charge des cadres identificateurs des candidats libres n'existe pour ce groupe d'examens !");
                } else {
                    try {
                        for (Caisse caisse : caisses) {
                            metier.supprimerCaisse(caisse);
                        }
                        JOptionPane.showMessageDialog(this, "Etats de prise en charge des cadres identificateurs des candidats libres supprimés avec succès pour ce groupe d'examens !");
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerEtatsActionPerformed

    private void jButtonAnnulerChoixExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixExamenActionPerformed
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        jComboBoxSession.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixExamenActionPerformed

    private void jButtonAnnulerEffectifsESGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerEffectifsESGActionPerformed
        jTextFieldEffectifProbESG.setText("");
        jTextFieldEffectifBacESG.setText("");
    }//GEN-LAST:event_jButtonAnnulerEffectifsESGActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
        if (typeSelected.equals("GEN")) {
            jPanelEffectifsESG.setEnabled(true);
            jTextFieldEffectifProbESG.setEnabled(true);
            jTextFieldEffectifBacESG.setEnabled(true);
            jButtonCreerEffectifsESG.setEnabled(true);
            jButtonListerEffectifsESG.setEnabled(true);
            jButtonSupprimerEffectifsESG.setEnabled(true);
            jButtonAnnulerEffectifsESG.setEnabled(true);

            jPanelEffectifsESTP.setEnabled(false);
            jTextFieldEffectifESTI.setEnabled(false);
            jTextFieldEffectifProbSTT.setEnabled(false);
            jTextFieldEffectifBacSTT.setEnabled(false);
            jButtonCreerEffectifsESTP.setEnabled(false);
            jButtonListerEffectifsESTP.setEnabled(false);
            jButtonSupprimerEffectifsESTP.setEnabled(false);
            jButtonAnnulerEffectifsESTP.setEnabled(false);
        } else {
            if (typeSelected.equals("TOUT ESTP")) {
                jPanelEffectifsESG.setEnabled(false);
                jTextFieldEffectifProbESG.setEnabled(false);
                jTextFieldEffectifBacESG.setEnabled(false);
                jButtonCreerEffectifsESG.setEnabled(false);
                jButtonListerEffectifsESG.setEnabled(false);
                jButtonSupprimerEffectifsESG.setEnabled(false);
                jButtonAnnulerEffectifsESG.setEnabled(false);

                jPanelEffectifsESTP.setEnabled(true);
                jTextFieldEffectifESTI.setEnabled(true);
                jTextFieldEffectifProbSTT.setEnabled(true);
                jTextFieldEffectifBacSTT.setEnabled(true);
                jButtonCreerEffectifsESTP.setEnabled(true);
                jButtonListerEffectifsESTP.setEnabled(true);
                jButtonSupprimerEffectifsESTP.setEnabled(true);
                jButtonAnnulerEffectifsESTP.setEnabled(true);
            }
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jButtonCreerEffectifsESGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEffectifsESGActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || effectifProbESGString.equals("") || effectifBacESGString.equals("")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre et donner les effectifs de candidats libres au Prob ESG et Bac ESG à enregistrer !");
        } else {
            validerEffectifProbESG(effectifProbESGString);
            validerEffectifBacESG(effectifBacESGString);
            if (!continuerEffectifProbESG || !continuerEffectifBacESG) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. L'un au moins des effectifs de candididats libres du Prob ESG ou du Bac ESG fourni est incorrect !");
            } else {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                effectifProbESGSaisi = Integer.parseInt(effectifProbESGString);
                effectifBacESGSaisi = Integer.parseInt(effectifBacESGString);
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                for (Souscentre souscentre : souscentres) {
                    if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                        souscentreSelected = souscentre;
                        break;
                    }
                }
                boolean identifie =true;
                if(!jCheckBoxIdentifie.isSelected()) identifie=false;
                try {
                    metier.creerNbcandlibresg(new Nbcandlibresg(souscentreSelected, sessionSelected, effectifProbESGSaisi, effectifBacESGSaisi,identifie));
                    JOptionPane.showMessageDialog(this, "Effectifs de candidats libres au Prob ESG et Bac ESG  créés avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de créer les effectifs de candidats libres au Prob ESG et Bac ESG  au sous-centre privé " + nomSouscentreSelected + " \n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonCreerEffectifsESGActionPerformed

    private void jButtonSupprimerEffectifsESGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEffectifsESGActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session et un sous-centre !");
        } else {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les effectifs de candidats libres au Prob ESG et Bac ESG  du sous-centre [" + nomSouscentreSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                anneeSelected = Integer.parseInt(anneeString);
                try {
                    Nbcandlibresg nbcandlibresg = metier.findNbcandlibresgD1SouscentreD1Session(nomSouscentreSelected, anneeSelected);//le groupe d'examen est unique
                    metier.supprimerNbcandlibresg(nbcandlibresg);
                    JOptionPane.showMessageDialog(this, "Effectifs de candidats libres au Prob ESG et Bac ESG  supprimés avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer les effectifs de candidats libres au Prob ESG et Bac ESG du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerEffectifsESGActionPerformed

    private void jButtonListerEffectifsESGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerEffectifsESGActionPerformed
        infoSaisies();
        List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres contenant des candidats libres au prob ou bac ESG
        if (groupedexamensEnstring.equals("") || anneeString.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens et une session !");
        } else {
            anneeSelected = Integer.parseInt(anneeString);
            tousNbcandlibresg = metier.findAllNbcandlibresgD1Session(anneeSelected);//c'est le même groupe d'examen à chaque fois
            if (!tousNbcandlibresg.isEmpty()) {
                for (Nbcandlibresg nbcandlibresg : tousNbcandlibresg) {
                    if (!souscentreList.contains(nbcandlibresg.getSouscentre())) {
                        souscentreList.add(nbcandlibresg.getSouscentre());
                    }
                }
                try {
                    List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                    for (Region region : regions) {
                        int i = 1;
                        for (Souscentre souscentre : souscentreList) {
                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                                Nbcandlibresg sonNbcandlibresg = new Nbcandlibresg();
                                for (Nbcandlibresg nbcandlibresg : tousNbcandlibresg) {
                                    if (nbcandlibresg.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                        sonNbcandlibresg = nbcandlibresg;
                                        break;
                                    }
                                }
                                Map<String, Object> row = new HashMap<>();
                                row.put("session", anneeSelected);
                                row.put("examen", groupedexamensEnstring);
                                row.put("region", region.getNomreg());
                                row.put("num", i++);
                                row.put("souscentre", souscentre.getNomsouscent());
                                row.put("nbprob", sonNbcandlibresg.getNbprob());
                                row.put("nbbac", sonNbcandlibresg.getNbbac());
                                row.put("identifie", sonNbcandlibresg.getIdentifie());
                                datasource.add(row);

                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeNbcandlibresgReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Aucun effectif de candidats libres Prob ou Bac ESG trouvé dans la base des données !");
            }
        }
        tousNbcandlibresg.clear();
        souscentreList.clear();
    }//GEN-LAST:event_jButtonListerEffectifsESGActionPerformed

    private void jComboBoxDepartementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementActionPerformed
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        if (!nomDepartementSelected.equals("---"))
            remplirArrondissementCombobox();
    }//GEN-LAST:event_jComboBoxDepartementActionPerformed

    private void jComboBoxArrondissementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementActionPerformed
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        if (!nomArrondissementSelected.equals("---"))
            remplirSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementActionPerformed

    private void jComboBoxSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSouscentreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxSouscentreActionPerformed

    private void jComboBoxRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionActionPerformed
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        if (!nomRegionSelected.equals("---"))
            remplirDepartementCombobox();
    }//GEN-LAST:event_jComboBoxRegionActionPerformed

    private void jButtonAnnulerChoixSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixSouscentreActionPerformed
        jComboBoxRegion.setSelectedIndex(0);
        jComboBoxDepartement.setSelectedIndex(0);
        jComboBoxArrondissement.setSelectedIndex(0);
        jComboBoxSouscentre.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixSouscentreActionPerformed

    private void jButtonAnnulerEffectifsESTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerEffectifsESTPActionPerformed
        jTextFieldEffectifESTI.setText("");
        jTextFieldEffectifProbSTT.setText("");
        jTextFieldEffectifBacSTT.setText("");
    }//GEN-LAST:event_jButtonAnnulerEffectifsESTPActionPerformed

    private void jButtonCreerEffectifsESTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEffectifsESTPActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || effectifESTIString.equals("") || effectifProbSTTString.equals("") || effectifBacSTTString.equals("")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre et donner les effectifs de candidats libres au Prob+Bac ESTI, au Prob STT+Prob BT STT et Bac STT+BT STT à enregistrer !");
        } else {
            validerEffectifESTI(effectifESTIString);
            validerEffectifProbSTT(effectifProbSTTString);
            validerEffectifBacSTT(effectifBacSTTString);
            if (!continuerEffectifESTI || !continuerEffectifProbSTT || !continuerEffectifBacSTT) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. L'un au moins des effectifs de candididats libres au Prob+Bac ESTI, au Prob STT+Prob BT STT et Bac STT+BT STT  fourni est incorrect !");
            } else {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                effectifESTISaisi = Integer.parseInt(effectifESTIString);
                effectifProbSTTSaisi = Integer.parseInt(effectifProbSTTString);
                effectifBacSTTSaisi = Integer.parseInt(effectifBacSTTString);
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                for (Souscentre souscentre : souscentres) {
                    if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                        souscentreSelected = souscentre;
                        break;
                    }
                }

                boolean identifie =true;
                if(!jCheckBoxIdentifie.isSelected()) identifie=false;
                try {
                    metier.creerNbcandlibrestp(new Nbcandlibrestp(souscentreSelected, sessionSelected, effectifESTISaisi, effectifProbSTTSaisi, effectifBacSTTSaisi,identifie));
                    JOptionPane.showMessageDialog(this, "Effectifs de candidats libres au Prob+Bac ESTI, au Prob STT+Prob BT STT et Bac STT+BT STT  créés avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de créer les effectifs de candidats libres au libres au Prob+Bac ESTI, au Prob STT+Prob BT STT et Bac STT+BT STT  au sous-centre privé " + nomSouscentreSelected + " \n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonCreerEffectifsESTPActionPerformed

    private void jButtonSupprimerEffectifsESTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEffectifsESTPActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session et un sous-centre !");
        } else {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les effectifs de candidats libres au Prob+Bac ESTI, au Prob STT+Prob BT STT et Bac STT+BT STT  du sous-centre [" + nomSouscentreSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                anneeSelected = Integer.parseInt(anneeString);
                try {
                    Nbcandlibrestp nbcandlibrestp = metier.findNbcandlibrestpD1SouscentreD1Session(nomSouscentreSelected, anneeSelected);//le groupe est unique
                    metier.supprimerNbcandlibrestp(nbcandlibrestp);
                    JOptionPane.showMessageDialog(this, "Effectifs de candidats libres au au Prob+Bac ESTI, au Prob STT+Prob BT STT et Bac STT+BT STT  supprimés avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer les effectifs de candidats libres au Prob+Bac ESTI, au Prob STT+Prob BT STT et Bac STT+BT STT du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerEffectifsESTPActionPerformed

    private void jButtonListerEffectifsESTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerEffectifsESTPActionPerformed
        infoSaisies();
        List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres contenant des candidats libres au Prob+Bac ESTI, au Prob STT+Prob BT STT et Bac STT+BT STT
        if (groupedexamensEnstring.equals("") || anneeString.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens et une session !");
        } else {
            anneeSelected = Integer.parseInt(anneeString);
            tousNbcandlibrestp = metier.findAllNbcandlibrestpD1Session(anneeSelected);//c'est le même groupe d'examen à chaque fois
            if (!tousNbcandlibrestp.isEmpty()) {
                for (Nbcandlibrestp nbcandlibrestp : tousNbcandlibrestp) {
                    if (!souscentreList.contains(nbcandlibrestp.getSouscentre())) {
                        souscentreList.add(nbcandlibrestp.getSouscentre());
                    }
                }
                try {
                    List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                    for (Region region : regions) {
                        int i = 1;
                        for (Souscentre souscentre : souscentreList) {
                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                                Nbcandlibrestp sonNbcandlibrestp = new Nbcandlibrestp();
                                for (Nbcandlibrestp nbcandlibrestp : tousNbcandlibrestp) {
                                    if (nbcandlibrestp.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                        sonNbcandlibrestp = nbcandlibrestp;
                                        break;
                                    }
                                }
                                Map<String, Object> row = new HashMap<>();
                                row.put("session", anneeSelected);
                                row.put("examen", groupedexamensEnstring);
                                row.put("region", region.getNomreg());
                                row.put("num", i++);
                                row.put("souscentre", souscentre.getNomsouscent());
                                row.put("nbesti", sonNbcandlibrestp.getNbesti());
                                row.put("nbprobstt", sonNbcandlibrestp.getNbprobstt());
                                row.put("nbbacstt", sonNbcandlibrestp.getNbbacstt());
                                row.put("identifie", sonNbcandlibrestp.getIdentifie());
                                datasource.add(row);

                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeNbcandlibrestpReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Aucun effectif de candidats libres Prob ou Bac ESG trouvé dans la base des données !");
            }
        }
        tousNbcandlibresg.clear();
        souscentreList.clear();
    }//GEN-LAST:event_jButtonListerEffectifsESTPActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatIdentificateursCandidatsLibres.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatIdentificateursCandidatsLibres.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatIdentificateursCandidatsLibres.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatIdentificateursCandidatsLibres.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatIdentificateursCandidatsLibres().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonAnnulerChoixExamen;
    private javax.swing.JButton jButtonAnnulerChoixSouscentre;
    private javax.swing.JButton jButtonAnnulerEffectifsESG;
    private javax.swing.JButton jButtonAnnulerEffectifsESTP;
    private javax.swing.JButton jButtonCreerEffectifsESG;
    private javax.swing.JButton jButtonCreerEffectifsESTP;
    private javax.swing.JButton jButtonCreerEtats;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonListerEffectifsESG;
    private javax.swing.JButton jButtonListerEffectifsESTP;
    private javax.swing.JButton jButtonMettreAjourEtats;
    private javax.swing.JButton jButtonSupprimerEffectifsESG;
    private javax.swing.JButton jButtonSupprimerEffectifsESTP;
    private javax.swing.JButton jButtonSupprimerEtats;
    private javax.swing.JButton jButtonVisualiserEtats;
    private javax.swing.JCheckBox jCheckBoxIdentifie;
    private javax.swing.JComboBox<String> jComboBoxArrondissement;
    private javax.swing.JComboBox<String> jComboBoxDepartement;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxRegion;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxSouscentre;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelArrondissement;
    private javax.swing.JLabel jLabelDepartement;
    private javax.swing.JLabel jLabelEffectifBacESG;
    private javax.swing.JLabel jLabelEffectifBacSTT;
    private javax.swing.JLabel jLabelEffectifESTI;
    private javax.swing.JLabel jLabelEffectifProbESG;
    private javax.swing.JLabel jLabelEffectifProbSTT;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelRegion;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelSouscentre;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanelChoixExamen;
    private javax.swing.JPanel jPanelChoixSouscentre;
    private javax.swing.JPanel jPanelEffectifsESG;
    private javax.swing.JPanel jPanelEffectifsESTP;
    private javax.swing.JPanel jPanelGestionEtat;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldEffectifBacESG;
    private javax.swing.JTextField jTextFieldEffectifBacSTT;
    private javax.swing.JTextField jTextFieldEffectifESTI;
    private javax.swing.JTextField jTextFieldEffectifProbESG;
    private javax.swing.JTextField jTextFieldEffectifProbSTT;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Region> regions = null;
    private List<Examen> examens = null;
    private List<Option> options = null;
    private List<Matiere> matieres = null;
    private Examen examenSelected = null;
    private String[] examensList = null;
    private List<Examen> examensSelected = new ArrayList<>();
    private List<Departement> departements = null;
    private List<Arrondissement> arrondissements = null;
    private List<Souscentre> souscentres = null;
    private Souscentre souscentreSelected = null;
    private String[] sessionsCombo = null;
    private String[] regionsCombo = null;
    private String[] departementsCombo = null;
    private String[] arrondissementsCombo = null;
    private String[] souscentresCombo = null;
    private String nomRegionSelected = "";
    private String nomDepartementSelected = "";
    private String nomArrondissementSelected = "";
    private String nomSouscentreSelected = "";
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private List<Caisse> caisses = null;
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private int total = 0, forfait = 0, coutvac1 = 0, coutvac2 = 0, coutvac3 = 0, effectif = 0;
    private double nbj1 = 0, nbj2 = 0, nbj3 = 0;
    private List<Nbcandlibresg> tousNbcandlibresg = null;
    private List<Nbcandlibrestp> tousNbcandlibrestp = null;
    private String effectifProbESGString = "";
    private String effectifBacESGString = "";
    private String effectifESTIString = "";
    private String effectifProbSTTString = "";
    private String effectifBacSTTString = "";
    private int effectifProbESGSaisi = 0;
    private int effectifBacESGSaisi = 0;
    private int effectifESTISaisi = 0;
    private int effectifProbSTTSaisi = 0;
    private int effectifBacSTTSaisi = 0;
    private boolean continuerEffectifProbESG = false;
    private boolean continuerEffectifBacESG = false;
    private boolean continuerEffectifESTI = false;
    private boolean continuerEffectifProbSTT = false;
    private boolean continuerEffectifBacSTT = false;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        regions = metier.findAllRegions();
        souscentres = metier.findAllSouscentres();
        examens = metier.findAllExamens();
        options = metier.findAllOptions();
        matieres = metier.findAllMatieres();

        //on remplit la combobox des régions
        regionsCombo = new String[regions.size() + 1];
        regionsCombo[0] = "---";
        int i = 1;
        for (Region region : regions) {
            regionsCombo[i++] = region.getNomreg();
        }
        jComboBoxRegion.setModel(new DefaultComboBoxModel(regionsCombo));

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int k = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[k++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types d'examen
        typesCombo = new String[]{"---", "GEN", "TOUT ESTP"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "TOUT"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        remplirDepartementCombobox();
        remplirArrondissementCombobox();
        remplirSouscentreCombobox();

        //on inhibe les 2 panels d'effectifs
        jPanelEffectifsESG.setEnabled(false);
        jTextFieldEffectifProbESG.setEnabled(false);
        jTextFieldEffectifBacESG.setEnabled(false);
        jButtonCreerEffectifsESG.setEnabled(false);
        jButtonListerEffectifsESG.setEnabled(false);
        jButtonSupprimerEffectifsESG.setEnabled(false);
        jButtonAnnulerEffectifsESG.setEnabled(false);

        jPanelEffectifsESTP.setEnabled(false);
        jTextFieldEffectifESTI.setEnabled(false);
        jTextFieldEffectifProbSTT.setEnabled(false);
        jTextFieldEffectifBacSTT.setEnabled(false);
        jButtonCreerEffectifsESTP.setEnabled(false);
        jButtonListerEffectifsESTP.setEnabled(false);
        jButtonSupprimerEffectifsESTP.setEnabled(false);
        jButtonAnnulerEffectifsESTP.setEnabled(false);
    }

    private void infoSaisies() {
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        effectifProbESGString = jTextFieldEffectifProbESG.getText();
        effectifBacESGString = jTextFieldEffectifBacESG.getText();
        effectifESTIString = jTextFieldEffectifESTI.getText();
        effectifProbSTTString = jTextFieldEffectifProbSTT.getText();
        effectifBacSTTString = jTextFieldEffectifBacSTT.getText();
    }

    private void remplirDepartementCombobox() {
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        departements = metier.findAllDepartementsD1Region(nomRegionSelected);
        //on remplit la combobox des départements
        departementsCombo = new String[departements.size() + 1];
        departementsCombo[0] = "---";
        int i = 1;
        for (Departement departement : departements) {
            departementsCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartement.setModel(new DefaultComboBoxModel(departementsCombo));
    }

    private void remplirArrondissementCombobox() {
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        arrondissements = metier.findAllArrondissementsD1Departement(nomDepartementSelected);
        //on remplit la combobox des arrondissements
        arrondissementsCombo = new String[arrondissements.size() + 1];
        arrondissementsCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissements) {
            arrondissementsCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissement.setModel(new DefaultComboBoxModel(arrondissementsCombo));
    }

    private void remplirSouscentreCombobox() {
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        souscentres = metier.findAllSouscentresD1Arrondissement(nomArrondissementSelected);
        //on remplit la combobox des sous-centres
        souscentresCombo = new String[souscentres.size() + 1];
        souscentresCombo[0] = "---";
        int i = 1;
        for (Souscentre souscentre : souscentres) {
            souscentresCombo[i++] = souscentre.getNomsouscent();
        }
        jComboBoxSouscentre.setModel(new DefaultComboBoxModel(souscentresCombo));
    }

    private void determinerCoutESTP(Nbcandlibrestp nbcandlibrestp) {
        total = 0;
        forfait = 0;
        coutvac1 = 0;
        coutvac2 = 0;
        coutvac3 = 0;
        nbj1 = 5.5;
        nbj2 = 4.5;
        nbj3 = 6;
        effectif = 0;
        effectif = nbcandlibrestp.getNbesti() + nbcandlibrestp.getNbprobstt() + nbcandlibrestp.getNbbacstt();
        if (effectif > 0 && effectif <= 50) {
            forfait = 25000;
        }
        if (effectif > 50 && effectif <= 100) {
            forfait = 50000;
        }
        if (effectif > 100 && effectif <= 150) {
            forfait = 75000;
        }
        if (effectif > 150 && effectif <= 200) {
            forfait = 100000;
        }
        if (effectif > 200 && effectif <= 300) {
            forfait = 125000;
        }
        if (effectif > 300) {
            forfait = 150000;
        }
        
        if(!nbcandlibrestp.getIdentifie()) forfait = 0;
        
        if (nbcandlibrestp.getNbesti() > 0) {
            coutvac1 = (int) (2 * 1500 * nbj1);
        }
        if (nbcandlibrestp.getNbprobstt() > 0) {
            coutvac2 = (int) (2 * 1500 * nbj2);
        }
        if (nbcandlibrestp.getNbbacstt() > 0) {
            coutvac3 = (int) (2 * 1500 * nbj3);
        }
        total = forfait + coutvac1 + coutvac2 + coutvac3;
    }

    private void determinerCoutESG(Nbcandlibresg nbcandlibresg) {
        total = 0;
        forfait = 0;
        coutvac1 = 0;
        coutvac2 = 0;
        nbj1 = 4.5;
        nbj2 = 5;
        effectif = 0;
        effectif = nbcandlibresg.getNbprob() + nbcandlibresg.getNbbac();
        if (effectif > 0 && effectif <= 50) {
            forfait = 25000;
        }
        if (effectif > 50 && effectif <= 100) {
            forfait = 50000;
        }
        if (effectif > 100 && effectif <= 150) {
            forfait = 75000;
        }
        if (effectif > 150 && effectif <= 200) {
            forfait = 100000;
        }
        if (effectif > 200 && effectif <= 300) {
            forfait = 125000;
        }
        if (effectif > 300) {
            forfait = 150000;
        }
        
        if(!nbcandlibresg.getIdentifie()) forfait = 0;
        
        if (nbcandlibresg.getNbprob() > 0) {
            coutvac1 = (int) (2 * 1500 * nbj1);
        }
        if (nbcandlibresg.getNbbac() > 0) {
            coutvac2 = (int) (2 * 1500 * nbj2);
        }
        total = forfait + coutvac1 + coutvac2;
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    private void validerEffectifProbESG(String nbreString) {
        try {
            effectifProbESGSaisi = Integer.parseInt(nbreString);
            continuerEffectifProbESG = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "L'effectif du probatoire ESG doit être fourni et contenir uniquement des chiffres entiers!");
            continuerEffectifProbESG = false;
        }
    }

    private void validerEffectifBacESG(String nbreString) {
        try {
            effectifBacESGSaisi = Integer.parseInt(nbreString);
            continuerEffectifBacESG = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "L'effectif du baccalauréat ESG doit être fourni et contenir uniquement des chiffres entiers!");
            continuerEffectifBacESG = false;
        }
    }

    private void validerEffectifESTI(String nbreString) {
        try {
            effectifESTISaisi = Integer.parseInt(nbreString);
            continuerEffectifESTI = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "L'effectif du Prob Ind. + Bac Ind. doit être fourni et contenir uniquement des chiffres entiers!");
            continuerEffectifESTI = false;
        }
    }

    private void validerEffectifProbSTT(String nbreString) {
        try {
            effectifProbSTTSaisi = Integer.parseInt(nbreString);
            continuerEffectifProbSTT = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "L'effectif du Prob STT + Prob de BT STT doit être fourni et contenir uniquement des chiffres entiers!");
            continuerEffectifProbSTT = false;
        }
    }

    private void validerEffectifBacSTT(String nbreString) {
        try {
            effectifBacSTTSaisi = Integer.parseInt(nbreString);
            continuerEffectifBacSTT = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "L'effectif du Bac STT + BT STT doit être fourni et contenir uniquement des chiffres entiers!");
            continuerEffectifBacSTT = false;
        }
    }
}
