package couche_ui;

import couche_jpa.Examen;
import couche_jpa.Groupedexamen;
import couche_jpa.Region;
import couche_jpa.Secretariat;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_jpa.Statistique;
import couche_jpa.Statsecretariat;
import couche_metier.IMetier;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueEtatNbSallesCompositionESTP extends javax.swing.JFrame {

    public VueEtatNbSallesCompositionESTP() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonVisualiser = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jLabelExamen = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT DE NOMBRE DE SALLES DE COMPOSITION ESTP");

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonVisualiser.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiser.setText("Visualiser l'Ã©tat");
        jButtonVisualiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserActionPerformed(evt);
            }
        });

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jButtonAnnuler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(204, 255, 0));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Groupe d'examens", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(336, 336, 336)
                        .addComponent(jButtonVisualiser)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnuler)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonFermer))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(269, 269, 269)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(430, 430, 430)
                        .addComponent(jLabelSession)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonAnnuler, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(jButtonFermer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonVisualiser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(40, 40, 40))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        videFrame();
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jButtonVisualiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserActionPerformed
        infoSaisies();
        Map<Souscentre, ArrayList<Statistique>> souscentreStatistiquesMap = new HashMap<>();//contient des sous-centres avec leurs statistiques
        Map<Souscentre, ArrayList<Salletech>> souscentreSalletechsMap = new HashMap<>();//contient des sous-centres avec la liste de ses salletechs              
        List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats 
        Map<Souscentre, ArrayList<Secretariat>> souscentreSecretariatsMap = new HashMap<>();//contient les sous-centres chacun avec la liste de ses secretariats le cas Ã©chÃ©ant
        Map<Secretariat, ArrayList<Statsecretariat>> secretariatStatsecretariatsMap = new HashMap<>();//contient des secretariats avec ses statsecretariats
        Map<Secretariat, ArrayList<Salletechsecret>> secretariatSalletechsecretsMap = new HashMap<>();//contient des Secretariats avec la liste de ses salles simples       

        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            String separateur = ", ";
            examensList = groupedexamensEnstring.split(separateur);
            for (int i = 0; i < examensList.length; i++) {
                for (Examen e : examens) {
                    if (e.getSigle().equals(examensList[i])) {
                        examensSelected.add(e);
                        break;
                    }
                }
            }
            for (Examen e : examensSelected) {
                List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                for (Statistique s : lesStats) {
                    ArrayList<Statistique> statsList = new ArrayList<>();
                    if (souscentreStatistiquesMap.containsKey(s.getSouscentre())) {//si le prÃ©sent sous-centre est dans souscentreMap
                        statsList = souscentreStatistiquesMap.get(s.getSouscentre());
                    }
                    statsList.add(s);
                    souscentreStatistiquesMap.put(s.getSouscentre(), statsList);
                }
            }

            //remplissage souscentreAsecretariatsDemultipliesList
            secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
            if (!secretariats.isEmpty()) {
                for (Secretariat sec : secretariats) {
                    if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                        souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                    }
                }
            }

            //remplissage secretariatStatsecretariatsMap
            for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreEtSession(souscentre.getNomsouscent(), anneeSelected);
                List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                for (Secretariat sec : secretariatsList) {
                    ArrayList<Statsecretariat> statsList = new ArrayList<>();
                    for (Statsecretariat statsec : statsecretariatsList) {
                        if (statsec.getSecretariat().getNumsec() == sec.getNumsec()) {
                            if (secretariatStatsecretariatsMap.containsKey(sec)) {//si le prÃ©sent secretariat est dans secretariatStatsecretariatsMap
                                statsList = secretariatStatsecretariatsMap.get(sec);
                            }
                            statsList.add(statsec);
                            secretariatStatsecretariatsMap.put(sec, statsList);
                        }
                    }
                }
            }
            //remplissage de souscentreSecretariatsMap
            for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                ArrayList<Secretariat> secretariatsList = new ArrayList<>();
                for (Secretariat sec : secretariatStatsecretariatsMap.keySet()) {
                    if (sec.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                        if (!secretariatsList.contains(sec)) {
                            secretariatsList.add(sec);
                        }
                    }
                }
                if (!secretariatsList.isEmpty()) {
                    souscentreSecretariatsMap.put(souscentre, secretariatsList);
                }
            }
            //remplissage souscentreSalletechsMap et secretariatSalletechsecretsMap
            int nbcandsal = nombreCandidatsParSalle(niveauSelected, typeSelected);
            for (Souscentre souscentre : souscentreStatistiquesMap.keySet()) {
                if (!souscentreAsecretariatsDemultipliesList.contains(souscentre)) {//le souscentre ne doit pas Ãªtre Ã  secrÃ©tariats dÃ©multipliÃ©s                       
                    ArrayList<Salletech> salletechsList = new ArrayList<>();
                    ArrayList<Statistique> restestatsList = new ArrayList<>();
                    for (Statistique stat : souscentreStatistiquesMap.get(souscentre)) {
                        int reste = stat.getNombre();
                        Salletech sal = new Salletech();
                        int nbsal = 0;
                        if (reste >= nbcandsal) {
                            sal.setSouscentre(souscentre);
                            sal.setSerie(stat.getOption().getSigle());
                            while (reste >= nbcandsal) {
                                sal.setEffectif(sal.getEffectif() + nbcandsal);
                                reste -= nbcandsal;
                                nbsal += 1;
                            }
                            sal.setNbsal(nbsal);
                            salletechsList.add(sal);
                            if (reste != 0) {
                                Statistique uneStat = new Statistique(reste, stat.getExamen(), stat.getOption(), stat.getSession(), stat.getSouscentre());
                                restestatsList.add(uneStat);
                            }
                        } else {
                            restestatsList.add(stat);
                        }
                    }
                    //constituer les salletech de 2 spÃ©cialitÃ©s ou 1 lorsque restestatsList Ã  1 seule stat
                    if (restestatsList.size() > 1) {
                        int i = 0;
                        while (i < restestatsList.size() - 1) {
                            boolean trouver1 = false;
                            for (int j = i + 1; j < restestatsList.size(); j++) {
                                int nb = restestatsList.get(i).getNombre() + restestatsList.get(j).getNombre();
                                if (nb >= nbcandsal) {
                                    trouver1 = true;
                                    Salletech sal = new Salletech();
                                    sal.setSouscentre(souscentre);
                                    sal.setSerie(restestatsList.get(i).getOption().getSigle() + "/" + restestatsList.get(j).getOption().getSigle());
                                    sal.setEffectif(nbcandsal);
                                    sal.setNbsal(1);
                                    salletechsList.add(sal);
                                    if (restestatsList.get(i).getNombre() >= restestatsList.get(j).getNombre()) {
                                        if (nb - nbcandsal > 0) {
                                            restestatsList.get(j).setNombre(nb - nbcandsal);
                                        } else {
                                            restestatsList.remove(j);
                                        }
                                        restestatsList.remove(i);
                                    } else {
                                        if (nb - nbcandsal > 0) {
                                            restestatsList.get(i).setNombre(nb - nbcandsal);
                                        } else {
                                            restestatsList.remove(i);
                                        }
                                        if (nb - nbcandsal == 0) {//on a remove i donc j a dÃ©calÃ© d'une position
                                            restestatsList.remove(j - 1);
                                        } else {
                                            restestatsList.remove(j);
                                        }
                                    }
                                    break;
                                }
                            }
                            if (!trouver1 && i < restestatsList.size() - 2) {
                                i++;
                            }
                            if (i == restestatsList.size() - 2) {
                                break;
                            }
                        }
                    }
                    while (restestatsList.size() > 1) {
                        Salletech sal = new Salletech();
                        sal.setSouscentre(souscentre);
                        sal.setSerie(restestatsList.get(0).getOption().getSigle() + "/" + restestatsList.get(1).getOption().getSigle());
                        sal.setEffectif(restestatsList.get(0).getNombre() + restestatsList.get(1).getNombre());
                        sal.setNbsal(1);
                        salletechsList.add(sal);
                        restestatsList.remove(0);
                        restestatsList.remove(0);//au lieu de remove(1) Ã  cause du dÃ©calage
                    }
                    if (restestatsList.size() == 1) {//restestatsList n'a qu'une spÃ©cialitÃ© donc pas moyen de combiner
                        Salletech sal = new Salletech();
                        sal.setSouscentre(souscentre);
                        sal.setSerie(restestatsList.get(0).getOption().getSigle());
                        sal.setEffectif(restestatsList.get(0).getNombre());
                        sal.setNbsal(1);
                        salletechsList.add(sal);
                    }
                    for (int i=0; i<salletechsList.size(); i++) {
                        if (salletechsList.get(i).getEffectif() > nbcandsal && salletechsList.get(i).getNbsal()==1) {
                            int diff = salletechsList.get(i).getEffectif() - nbcandsal;
                            salletechsList.get(i).setEffectif(nbcandsal);
                            if (diff > 0) {
                                Salletech nouvellesal = new Salletech();
                                nouvellesal.setSouscentre(souscentre);
                                nouvellesal.setSerie(salletechsList.get(i).getSerie());
                                nouvellesal.setEffectif(diff);
                                nouvellesal.setNbsal(1);
                                salletechsList.add(nouvellesal);
                            }
                        }
                    }
                    souscentreSalletechsMap.put(souscentre, salletechsList);
                } else {
                    //cas souscentre Ã  secrÃ©tariats dÃ©multipliÃ©s
                    ArrayList<Secretariat> lesSecretariatsD1souscentre = souscentreSecretariatsMap.get(souscentre);
                    for (Secretariat sec : lesSecretariatsD1souscentre) {
                        ArrayList<Salletechsecret> salletechsecretsList = new ArrayList<>();
                        ArrayList<Statsecretariat> restestatsecList = new ArrayList<>();
                        for (Statsecretariat statsec : secretariatStatsecretariatsMap.get(sec)) {
                            int reste = statsec.getNombre();
                            Salletechsecret sal = new Salletechsecret();
                            int nbsal = 0;
                            if (reste >= nbcandsal) {
                                sal.setSecretariat(sec);
                                sal.setSerie(statsec.getOption().getSigle());
                                while (reste >= nbcandsal) {
                                    sal.setEffectif(sal.getEffectif() + nbcandsal);
                                    reste -= nbcandsal;
                                    nbsal += 1;
                                }
                                sal.setNbsal(nbsal);
                                salletechsecretsList.add(sal);
                                if (reste != 0) {
                                    Statsecretariat uneStat = new Statsecretariat(sec, statsec.getExamen(), statsec.getOption(), reste);
                                    restestatsecList.add(uneStat);
                                }
                            } else {
                                restestatsecList.add(statsec);
                            }
                        }
                        //constituer les salletechsecret de 2 spÃ©cialitÃ©s
                        if (restestatsecList.size() > 1) {
                            int i = 0;
                            while (i < restestatsecList.size() - 1) {
                                boolean trouver1 = false;
                                for (int j = i + 1; j < restestatsecList.size(); j++) {
                                    int nb = restestatsecList.get(i).getNombre() + restestatsecList.get(j).getNombre();
                                    if (nb >= nbcandsal) {
                                        trouver1 = true;
                                        Salletechsecret sal = new Salletechsecret();
                                        sal.setSecretariat(sec);
                                        sal.setSerie(restestatsecList.get(i).getOption().getSigle() + "/" + restestatsecList.get(j).getOption().getSigle());
                                        sal.setEffectif(nbcandsal);
                                        sal.setNbsal(1);
                                        salletechsecretsList.add(sal);
                                        if (restestatsecList.get(i).getNombre() >= restestatsecList.get(j).getNombre()) {
                                            if (nb - nbcandsal > 0) {
                                                restestatsecList.get(j).setNombre(nb - nbcandsal);
                                            } else {
                                                restestatsecList.remove(j);
                                            }
                                            restestatsecList.remove(i);
                                        } else {
                                            if (nb - nbcandsal > 0) {
                                                restestatsecList.get(i).setNombre(nb - nbcandsal);
                                            } else {
                                                restestatsecList.remove(i);
                                            }
                                            if (nb - nbcandsal == 0) {
                                                restestatsecList.remove(j - 1);//on a remove i donc j a dÃ©calÃ© d'une position
                                            } else {
                                                restestatsecList.remove(j);
                                            }
                                        }
                                        break;
                                    }
                                }
                                if (!trouver1 && i < restestatsecList.size() - 2) {
                                    i++;
                                }
                                if (i == restestatsecList.size() - 2) {
                                    break;
                                }
                            }
                        }
                        while (restestatsecList.size() > 1) {
                            Salletechsecret sal = new Salletechsecret();
                            sal.setSecretariat(sec);
                            sal.setSerie(restestatsecList.get(0).getOption().getSigle() + "/" + restestatsecList.get(1).getOption().getSigle());
                            sal.setEffectif(restestatsecList.get(0).getNombre() + restestatsecList.get(1).getNombre());
                            sal.setNbsal(1);
                            salletechsecretsList.add(sal);
                            restestatsecList.remove(0);
                            restestatsecList.remove(0);
                        }
                        if (restestatsecList.size() == 1) {//restestatsList n'a qu'une spÃ©cialitÃ© donc pas moyen de combiner
                            Salletechsecret sal = new Salletechsecret();
                            sal.setSecretariat(sec);
                            sal.setSerie(restestatsecList.get(0).getOption().getSigle());
                            sal.setEffectif(restestatsecList.get(0).getNombre());
                            sal.setNbsal(1);
                            salletechsecretsList.add(sal);
                        }
                        for (int i=0; i<salletechsecretsList.size(); i++) {
                            if (salletechsecretsList.get(i).getEffectif() > nbcandsal && salletechsecretsList.get(i).getNbsal()==1) {
                                int diff = salletechsecretsList.get(i).getEffectif() - nbcandsal;
                                salletechsecretsList.get(i).setEffectif(nbcandsal);
                                if (diff > 0) {
                                    Salletechsecret nouvellesal = new Salletechsecret();
                                    nouvellesal.setSecretariat(sec);
                                    nouvellesal.setSerie(salletechsecretsList.get(i).getSerie());
                                    nouvellesal.setEffectif(diff);
                                    nouvellesal.setNbsal(1);
                                    salletechsecretsList.add(nouvellesal);
                                }
                            }
                        }
                        secretariatSalletechsecretsMap.put(sec, salletechsecretsList);
                    }
                }
            }

            try {
                List<Map<String, Object>> datasource = new ArrayList<>();
                List<Region> regions = metier.findAllRegions();
                for (Region region : regions) {
                    int num = 0;
                    int nbSurvDesSurvRegional = 0;
                    for (Souscentre souscentre : souscentreStatistiquesMap.keySet()) {
                        if (region.getNomreg().equals(souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                            int nbsec = 0;
                            int nbtypesalles = 0;
                            if (!souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                nbsec = 1;
                            } else {
                                nbsec = souscentreSecretariatsMap.get(souscentre).size();
                            }
                            for (int i = 0; i < nbsec; i++) {
                                String souscentreAffiche = "";
                                String serie = "";
                                int effectif = 0;
                                int nbsal = 0;
                                int nbsaltotal = 0;
                                int nbsurv = 0;
                                int nbSurvDesSurv = 0;//sous-centre ou secrÃ©tariat
                                if (!souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                    nbtypesalles = souscentreSalletechsMap.get(souscentre).size();
                                } else {
                                    nbtypesalles = secretariatSalletechsecretsMap.get(souscentreSecretariatsMap.get(souscentre).get(i)).size();
                                }
                                for (int j = 0; j < nbtypesalles; j++) {
                                    if (!souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                        souscentreAffiche = souscentre.getNomsouscent();
                                        serie = souscentreSalletechsMap.get(souscentre).get(j).getSerie();
                                        effectif = souscentreSalletechsMap.get(souscentre).get(j).getEffectif();
                                        nbsal = souscentreSalletechsMap.get(souscentre).get(j).getNbsal();
                                        nbsurv = 2 * nbsal;
                                        nbSurvDesSurv = 0;
                                    } else {
                                        if (souscentreSecretariatsMap.get(souscentre).get(i).getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                                            souscentreAffiche = souscentreSecretariatsMap.get(souscentre).get(i).getEtablissement().getAbreviation() + " (Sec. " + souscentreSecretariatsMap.get(souscentre).get(i).getNumsec() + ")";
                                        } else {
                                            souscentreAffiche = souscentreSecretariatsMap.get(souscentre).get(i).getEtablissement().getAbreviation() + " (Sec. " + souscentreSecretariatsMap.get(souscentre).get(i).getNumsec() + " du sous-centre " + souscentre.getEtablissement().getAbreviation() + ")";
                                        }
                                        serie = secretariatSalletechsecretsMap.get(souscentreSecretariatsMap.get(souscentre).get(i)).get(j).getSerie();
                                        effectif = secretariatSalletechsecretsMap.get(souscentreSecretariatsMap.get(souscentre).get(i)).get(j).getEffectif();
                                        nbsal = secretariatSalletechsecretsMap.get(souscentreSecretariatsMap.get(souscentre).get(i)).get(j).getNbsal();
                                        nbsurv = 2 * nbsal;
                                        nbSurvDesSurv = 0;
                                    }

                                    Map<String, Object> row = new HashMap<>();
                                    row.put("num", num++);
                                    row.put("region", region.getNomreg());
                                    row.put("session", anneeSelected);
                                    row.put("examen", groupedexamensEnstring);
                                    row.put("souscentre", souscentreAffiche);
                                    row.put("serie", serie);
                                    row.put("effectif", effectif);
                                    row.put("nbsal", nbsal);
                                    row.put("nbsurv", nbsurv);
                                    nbsaltotal += nbsal;
                                    nbSurvDesSurv = calculNombreSurvDesSurv(nbsaltotal);
                                    if (j == nbtypesalles - 1) {
                                        nbSurvDesSurvRegional += nbSurvDesSurv;
                                    }
                                    row.put("nbSurvDesSurv", nbSurvDesSurv);
                                    row.put("nbSurvDesSurvRegional", nbSurvDesSurvRegional);
                                    datasource.add(row);
                                }
                            }
                        }
                    }
                }
                JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatNombreDeSallesESGReport.jrxml");//on utilise le mÃªme pour ESTP
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empÃªche jasperviewer de fermer l'appli lorsqu'on le ferme
                jasperViewer.setVisible(true);
            } catch (JRException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
            souscentreStatistiquesMap.clear();
            souscentreSalletechsMap.clear();
            souscentreAsecretariatsDemultipliesList.clear();
            souscentreSecretariatsMap.clear();
            secretariatStatsecretariatsMap.clear();
            secretariatSalletechsecretsMap.clear();
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Tous les champs sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonVisualiserActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatNbSallesCompositionESTP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatNbSallesCompositionESTP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatNbSallesCompositionESTP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatNbSallesCompositionESTP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatNbSallesCompositionESTP().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonVisualiser;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Examen> examens = null;
    private List<Examen> examensSelected = new ArrayList<Examen>();
    private String[] examensList = null;
    private String[] sessionsCombo = null;
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private String phase = "ECRIT";
    DecimalFormat df = new DecimalFormat("00.00");
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private List<Secretariat> secretariats = null;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        examens = metier.findAllExamens();

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int i = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[i++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "IND", "IND PROF", "STT", "STT PROF"};//TOUT=tous les types; TOUT ESTI=INDUSTRIEL+INDUSTRIEL PROFESSIONNEL; TOUT STT=STT+STT PROFESSIONNEL; TOUTN ESTP=TOUT SAUF ESG
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));
    }

    private void infoSaisies() {
        anneeString = (String) jComboBoxSession.getSelectedItem();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();

    }

    private void videFrame() {
        jComboBoxSession.setSelectedIndex(0);
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte Ã  la ligne dans le textArea
        }
    }

    private int nombreCandidatsParSalle(String niv, String typ) {
        int ncandParSalle = 0;
        if (niv.equals("PROB") && (typ.equals("GEN") || typ.equals("STT") || typ.equals("STT PROF"))) {
            ncandParSalle = 48;
        }
        if (niv.equals("BACC") && (typ.equals("GEN") || typ.equals("STT") || typ.equals("STT PROF"))) {
            ncandParSalle = 40;
        }
        if ((niv.equals("PROB") || niv.equals("BACC")) && (typ.equals("IND") || typ.equals("IND PROF"))) {
            ncandParSalle = 30;
        }

        return ncandParSalle;
    }

    private int nombreSallesParSurveillantExterne(Examen examen) {
        int nbSalleParSurv = 0;
        if (examen.getNiveau().equals("PROB") && (examen.getType().equals("GEN") || examen.getType().equals("STT"))) {
            nbSalleParSurv = 6;
        }
        if (examen.getNiveau().equals("BACC") && (examen.getType().equals("GEN") || examen.getType().equals("STT"))) {
            nbSalleParSurv = 5;
        }
        return nbSalleParSurv;
    }

    private int calculNombreSurvDesSurv(int nbsal) {
        int nbSurvDesSurv = 0;
        if (nbsal >= 4 && nbsal <= 6) {
            nbSurvDesSurv = 1;
        }
        if (nbsal >= 7 && nbsal <= 11) {
            nbSurvDesSurv = 2;
        }
        if (nbsal >= 12 && nbsal <= 16) {
            nbSurvDesSurv = 3;
        }
        if (nbsal >= 17 && nbsal <= 21) {
            nbSurvDesSurv = 4;
        }
        if (nbsal >= 22 && nbsal <= 26) {
            nbSurvDesSurv = 5;
        }
        if (nbsal >= 27 && nbsal <= 31) {
            nbSurvDesSurv = 6;
        }
        if (nbsal >= 32 && nbsal <= 36) {
            nbSurvDesSurv = 7;
        }
        if (nbsal >= 37 && nbsal <= 41) {
            nbSurvDesSurv = 8;
        }
        if (nbsal >= 42 && nbsal <= 46) {
            nbSurvDesSurv = 9;
        }
        if (nbsal >= 47) {
            nbSurvDesSurv = 10;
        }
        return nbSurvDesSurv;
    }
}
