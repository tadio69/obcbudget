
package couche_ui;




import couche_jpa.Categorie;
import couche_jpa.Rubriquetat;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;


public class VueRubriquetat extends javax.swing.JFrame {

    DefaultTableModel model;
    
    
    public VueRubriquetat() {
        initComponents();
        model=(DefaultTableModel) jTable1.getModel();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButtonCréer = new javax.swing.JButton();
        jButtonRechercher = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jLabelCategorie = new javax.swing.JLabel();
        jComboBoxCategorie = new javax.swing.JComboBox<>();
        jButtonVisualiser = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jTable1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "N° Ordre", "Catégorie", "Rubrique d'état", "Version"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(true);
        jTable1.setShowVerticalLines(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("RUBRIQUE D'ETAT");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Désignation :");

        jTextField1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonCréer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCréer.setText("Créer");
        jButtonCréer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCréerActionPerformed(evt);
            }
        });

        jButtonRechercher.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonRechercher.setText("Rechercher");
        jButtonRechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRechercherActionPerformed(evt);
            }
        });

        jButtonModifier.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonModifier.setText("Modifier");
        jButtonModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierActionPerformed(evt);
            }
        });

        jButtonSupprimer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jButtonAnnuler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jLabelCategorie.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelCategorie.setText("Catégorie :");

        jComboBoxCategorie.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxCategorie.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButtonVisualiser.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiser.setText("Visualiser");
        jButtonVisualiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(204, 204, 204)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabelCategorie))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jComboBoxCategorie, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(101, 101, 101))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addComponent(jButtonCréer)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonRechercher)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonModifier)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonSupprimer)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonAnnuler)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonFermer)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonVisualiser)))
                        .addGap(0, 27, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelCategorie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxCategorie, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonModifier, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(jButtonRechercher, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonCréer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonSupprimer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonAnnuler, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonVisualiser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonFermer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        videFrame();
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jButtonCréerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCréerActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();           
        if(!designationSaisi.equals("") && !titreCategorieSelected.equals("---")){
            for(Categorie c:categories){
                if(c.getTitre().equals(titreCategorieSelected)){
                    categorieSelected=c;
                    break;
                }
            }
            try{
                metier.creerRubriquetat(new Rubriquetat(designationSaisi.toUpperCase(),categorieSelected));
                JOptionPane.showMessageDialog(this, " Rubrique d'état créée avec succès !"); 
                //videFrame();
                rubriquetats=metier.findAllRubriquetats();
                int i=1;
                for(Rubriquetat r:rubriquetats){
                    model.insertRow(model.getRowCount(),new Object[]{r.getIdrubetat(),i++, r.getCategorie().getTitre(),r.getDesignation(),r.getVersion()});
                }
            }catch(ObcbudgetException ex){
                JOptionPane.showMessageDialog(this, "Impossible de créer la rubrique d'état de désignation ["+designationSaisi+"] \n raison:"+ex.getMessage());
            }
        }
        else JOptionPane.showMessageDialog(this, " Veuillez recommencez svp. Au moins une donnée manquante ou incorrecte !"); 
    }//GEN-LAST:event_jButtonCréerActionPerformed

    private void jButtonRechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRechercherActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();       
        if(!designationSaisi.equals("") && !designationSaisi.equalsIgnoreCase("toutes")){
            try{
                rubriquetatsRecherches=metier.findAllRubriquetatsLikeName(designationSaisi.toUpperCase());
                int i=1;
                for(Rubriquetat r:rubriquetatsRecherches){
                    model.insertRow(model.getRowCount(),new Object[]{r.getIdrubetat(),i++, r.getCategorie().getTitre(),r.getDesignation(),r.getVersion()});
                }
            }catch(ObcbudgetException ex){
                    JOptionPane.showMessageDialog(this, "Impossible de trouver des rubriques d'état de désignation proche de ["+designationSaisi+"] \n raison:"+ex.getMessage()); 
            } 
        }
        else{
            if(designationSaisi.equals("")) JOptionPane.showMessageDialog(this, " Le champ désignation est obligatoire !");
            else{
                rubriquetats=metier.findAllRubriquetats();
                int i=1;
                for(Rubriquetat r:rubriquetats){
                    model.insertRow(model.getRowCount(),new Object[]{r.getIdrubetat(),i++, r.getCategorie().getTitre(),r.getDesignation(),r.getVersion()});
                }
            }
        }          
    }//GEN-LAST:event_jButtonRechercherActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        //remplit le champ
        int ligne=jTable1.getSelectedRow();
        idRubriquetatCliked=(int) model.getValueAt(ligne,0);
        jComboBoxCategorie.setSelectedItem((String) model.getValueAt(ligne,2));
        jTextField1.setText((String) model.getValueAt(ligne,3));
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButtonModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies(); 
        int result = JOptionPane.showConfirmDialog(this,"Voulez-vous vraiment modifier cette rubrique d'état?", "confirmation de modification",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if(result == JOptionPane.YES_OPTION){
            if(!designationSaisi.equals("") && !titreCategorieSelected.equals("---")){
                rubriquetatCliked=metier.findRubriquetatById(idRubriquetatCliked);
                for(Categorie c:categories){
                    if(c.getTitre().equals(titreCategorieSelected)){
                        categorieSelected=c;
                        break;
                    }
                }
                rubriquetatCliked.setDesignation(designationSaisi.toUpperCase());
                rubriquetatCliked.setCategorie(categorieSelected);
                try{
                    metier.modifierRubriquetat(rubriquetatCliked);
                    JOptionPane.showMessageDialog(this, " Rubrique d'état modifiée avec succès !");
                    //videFrame();
                    rubriquetats=metier.findAllRubriquetats();
                    int i=1;
                    for(Rubriquetat r:rubriquetats){
                        model.insertRow(model.getRowCount(),new Object[]{r.getIdrubetat(),i++, r.getCategorie().getTitre(),r.getDesignation(),r.getVersion()});
                    }
                }catch(ObcbudgetException ex){
                        JOptionPane.showMessageDialog(this, "Impossible de modifier la rubrique d'état de désignation proche de ["+designationSaisi+"] \n raison:"+ex.getMessage()); 
                    }                                   
            }
            else JOptionPane.showMessageDialog(this, " Veuillez recommencez svp. Au moins une donnée manquante ou incorrecte !"); 
        }
        /*
        else if (result == JOptionPane.NO_OPTION){
               label.setText("You selected: No");
            }
        */
    }//GEN-LAST:event_jButtonModifierActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this,"Voulez-vous vraiment supprimer cette rubrique d'état?", "confirmation de suppression",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if(result == JOptionPane.YES_OPTION){
            if(!designationSaisi.equals("")){
                try{
                    metier.supprimerRubriquetat(metier.findRubriquetatById(idRubriquetatCliked));
                    JOptionPane.showMessageDialog(this, " Rubrique d'état supprimée avec succès !"); 
                    //videFrame();
                    rubriquetats=metier.findAllRubriquetats();
                    int i=1;
                    for(Rubriquetat r:rubriquetats){
                        model.insertRow(model.getRowCount(),new Object[]{r.getIdrubetat(),i++, r.getCategorie().getTitre(),r.getDesignation(),r.getVersion()});
                    }
                }catch(ObcbudgetException ex){
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer la rubrique d'état de désignation proche de ["+designationSaisi+"] \n raison:"+ex.getMessage()); 
                }                
            }
            else JOptionPane.showMessageDialog(this, " Le champ désignation est obligatoire !"); 
        }
        /*
        else if (result == JOptionPane.NO_OPTION){
               label.setText("You selected: No");
            }
        */
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jButtonVisualiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserActionPerformed
        rubriquetats=metier.findAllRubriquetats();
        try{
            List<Map<String, Object>> datasource=new ArrayList<>();
            int i=1;
            for(Rubriquetat rubriquetat:rubriquetats){               
                Map<String, Object> row=new HashMap<>();
                row.put("num",""+i++);
                row.put("designation",rubriquetat.getDesignation());
                row.put("categorie",rubriquetat.getCategorie().getTitre());
                datasource.add(row);
            }            
            JRDataSource jRDataSource=new JRBeanCollectionDataSource(datasource);
            JasperReport jasperReport=JasperCompileManager.compileReport("src\\main\\java\\reports\\rubriquetatReport.jrxml");
            JasperPrint jasperPrint=JasperFillManager.fillReport(jasperReport,null, jRDataSource);                                            
            JasperViewer jasperViewer=new JasperViewer(jasperPrint,false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
            jasperViewer.setVisible(true);
        }catch(JRException e){
            JOptionPane.showMessageDialog(this, e.getMessage()); 
        }
    }//GEN-LAST:event_jButtonVisualiserActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueRubriquetat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueRubriquetat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueRubriquetat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueRubriquetat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueRubriquetat().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonCréer;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonRechercher;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JButton jButtonVisualiser;
    private javax.swing.JComboBox<String> jComboBoxCategorie;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelCategorie;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier=null;
    private String designationSaisi="";
    private List<Rubriquetat> rubriquetatsRecherches=null;
    private List<Rubriquetat> rubriquetats=null;
    private int idRubriquetatCliked=0;
    private Rubriquetat rubriquetatCliked=null;
    private List<Categorie> categories=null;
    private String[] categoriesCombo=null;
    private String titreCategorieSelected="";
    private Categorie categorieSelected=null;
    
    private void doMyInit(){
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        
        categories=metier.findAllCategories();
        //on remplit la combobox des catégories
        categoriesCombo=new String[categories.size()+1];
        categoriesCombo[0]="---";
        int i=1;
        for(Categorie categorie : categories){
            categoriesCombo[i++]=categorie.getTitre();
        }
        jComboBoxCategorie.setModel(new DefaultComboBoxModel(categoriesCombo));
    }
    
    private void infoSaisies(){
        designationSaisi=jTextField1.getText();
        titreCategorieSelected=(String)jComboBoxCategorie.getSelectedItem();
    }
    private void videFrame(){
        jTextField1.setText("");
        jComboBoxCategorie.setSelectedIndex(0);
        model.setRowCount(0);//vide la jTable
    }
}
