package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Activite;
import couche_jpa.Arrondissement;
import couche_jpa.Caisse;
import couche_jpa.Centrebilletage;
import couche_jpa.Departement;
import couche_jpa.Elttranscriptepreuve;
import couche_jpa.Examen;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Intervenant;
import couche_jpa.Personnel;
import couche_jpa.Qualite;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueEtatDotationTranscriptionEpreuves extends javax.swing.JFrame {

    public VueEtatDotationTranscriptionEpreuves() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButtonFermer = new javax.swing.JButton();
        jPanelExaminateurs = new javax.swing.JPanel();
        jComboBoxDepartementListe = new javax.swing.JComboBox<>();
        jLabelDepartementListe = new javax.swing.JLabel();
        jLabelResponsable = new javax.swing.JLabel();
        jComboBoxArrondissementListe = new javax.swing.JComboBox<>();
        jComboBoxNomsEtPrenoms = new javax.swing.JComboBox<>();
        jLabelArrondissementListe = new javax.swing.JLabel();
        jComboBoxRegionListe = new javax.swing.JComboBox<>();
        jLabelRegionListe = new javax.swing.JLabel();
        jButtonSupprimerPersonnel = new javax.swing.JButton();
        jButtonAnnulerPersonnel = new javax.swing.JButton();
        jButtonCreerPersonnel = new javax.swing.JButton();
        jButtonListerPersonnels = new javax.swing.JButton();
        jPanelQualite = new javax.swing.JPanel();
        jLabelTypeResidence = new javax.swing.JLabel();
        jComboBoxQualite = new javax.swing.JComboBox<>();
        jLabelTransport = new javax.swing.JLabel();
        jComboBoxTransport = new javax.swing.JComboBox<>();
        jLabelDeplacement = new javax.swing.JLabel();
        jComboBoxDeplacement = new javax.swing.JComboBox<>();
        jLabelLocation = new javax.swing.JLabel();
        jComboBoxLocation = new javax.swing.JComboBox<>();
        jLabelTranscription = new javax.swing.JLabel();
        jComboBoxTranscription = new javax.swing.JComboBox<>();
        jLabelExpertise = new javax.swing.JLabel();
        jComboBoxExpertise = new javax.swing.JComboBox<>();
        jPanelChoixExamen = new javax.swing.JPanel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixExamen = new javax.swing.JButton();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelExamen = new javax.swing.JLabel();
        jPanelChoixSouscentre = new javax.swing.JPanel();
        jComboBoxDepartementSouscentre = new javax.swing.JComboBox<>();
        jLabelDepartementSouscentre = new javax.swing.JLabel();
        jLabelSouscentre = new javax.swing.JLabel();
        jComboBoxArrondissementSouscentre = new javax.swing.JComboBox<>();
        jComboBoxSouscentre = new javax.swing.JComboBox<>();
        jLabelArrondissementSouscentre = new javax.swing.JLabel();
        jComboBoxRegionSouscentre = new javax.swing.JComboBox<>();
        jLabelRegionSouscentre = new javax.swing.JLabel();
        jButtonAnnulerChoixSouscentre = new javax.swing.JButton();
        jPanelGestionEtat = new javax.swing.JPanel();
        jButtonCreerEtats = new javax.swing.JButton();
        jButtonMettreAjourEtats = new javax.swing.JButton();
        jButtonVisualiserEtats = new javax.swing.JButton();
        jButtonSupprimerEtats = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT DOTATION POUR TRANSCRIPTION DES EPREUVES");

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jPanelExaminateurs.setBackground(new java.awt.Color(255, 204, 0));
        jPanelExaminateurs.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer les paramètres de calcul par intervenant (NB: Frais location embosseur=0 chez le membre)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jComboBoxDepartementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartementListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementListeActionPerformed(evt);
            }
        });

        jLabelDepartementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartementListe.setText("Département :");

        jLabelResponsable.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelResponsable.setText("Noms et prénoms :");

        jComboBoxArrondissementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissementListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementListeActionPerformed(evt);
            }
        });

        jComboBoxNomsEtPrenoms.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxNomsEtPrenoms.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxNomsEtPrenoms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNomsEtPrenomsActionPerformed(evt);
            }
        });

        jLabelArrondissementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissementListe.setText("Arrondissement :");

        jComboBoxRegionListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegionListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionListeActionPerformed(evt);
            }
        });

        jLabelRegionListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegionListe.setText("Région :");

        jButtonSupprimerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerPersonnel.setText("Supprimer");
        jButtonSupprimerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerPersonnelActionPerformed(evt);
            }
        });

        jButtonAnnulerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerPersonnel.setText("Annuler");
        jButtonAnnulerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerPersonnelActionPerformed(evt);
            }
        });

        jButtonCreerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerPersonnel.setText("Créer");
        jButtonCreerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerPersonnelActionPerformed(evt);
            }
        });

        jButtonListerPersonnels.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonListerPersonnels.setText("Lister");
        jButtonListerPersonnels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerPersonnelsActionPerformed(evt);
            }
        });

        jPanelQualite.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Qualité intervenant", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 51, 204))); // NOI18N
        jPanelQualite.setEnabled(false);

        jLabelTypeResidence.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelTypeResidence.setText("Qualité :");

        jComboBoxQualite.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanelQualiteLayout = new javax.swing.GroupLayout(jPanelQualite);
        jPanelQualite.setLayout(jPanelQualiteLayout);
        jPanelQualiteLayout.setHorizontalGroup(
            jPanelQualiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelQualiteLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelTypeResidence)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxQualite, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelQualiteLayout.setVerticalGroup(
            jPanelQualiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelQualiteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelQualiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxQualite, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTypeResidence, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jLabelTransport.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelTransport.setText("Frais transport :");

        jComboBoxTransport.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelDeplacement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDeplacement.setText("Indemnité déplacement :");

        jComboBoxDeplacement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelLocation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelLocation.setText("Location embosseur :");

        jComboBoxLocation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelTranscription.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelTranscription.setText("Indemnité transcription :");

        jComboBoxTranscription.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelExpertise.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExpertise.setText("Expertise :");

        jComboBoxExpertise.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanelExaminateursLayout = new javax.swing.GroupLayout(jPanelExaminateurs);
        jPanelExaminateurs.setLayout(jPanelExaminateursLayout);
        jPanelExaminateursLayout.setHorizontalGroup(
            jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelDepartementListe)
                            .addComponent(jLabelRegionListe))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                                .addComponent(jLabelTransport)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxTransport, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelDeplacement)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxDeplacement, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelLocation)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelTranscription)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxTranscription, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(jLabelExpertise)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxExpertise, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboBoxRegionListe, 0, 238, Short.MAX_VALUE)
                                    .addComponent(jComboBoxDepartementListe, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelResponsable)
                                    .addComponent(jLabelArrondissementListe))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBoxArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxNomsEtPrenoms, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(52, 52, 52)
                                .addComponent(jPanelQualite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                        .addGap(486, 486, 486)
                        .addComponent(jButtonCreerPersonnel)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonListerPersonnels)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSupprimerPersonnel)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnulerPersonnel)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanelExaminateursLayout.setVerticalGroup(
            jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelExaminateursLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                            .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jComboBoxRegionListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelRegionListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabelDepartementListe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBoxDepartementListe, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)))
                        .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                            .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jComboBoxArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabelResponsable, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBoxNomsEtPrenoms, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jPanelQualite, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTransport, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxTransport, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDeplacement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxDeplacement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTranscription, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxTranscription, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelExpertise, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxExpertise, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCreerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonListerPersonnels, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSupprimerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(136, 136, 136))
        );

        jPanelChoixExamen.setBackground(new java.awt.Color(102, 255, 153));
        jPanelChoixExamen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un groupe d'examens et une session", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixExamen.setText("Annuler");
        jButtonAnnulerChoixExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixExamenActionPerformed(evt);
            }
        });

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        javax.swing.GroupLayout jPanelChoixExamenLayout = new javax.swing.GroupLayout(jPanelChoixExamen);
        jPanelChoixExamen.setLayout(jPanelChoixExamenLayout);
        jPanelChoixExamenLayout.setHorizontalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(0, 10, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabelSession)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixExamenLayout.setVerticalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17))
        );

        jPanelChoixSouscentre.setBackground(new java.awt.Color(204, 255, 0));
        jPanelChoixSouscentre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un sous-centre d'examen", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jComboBoxDepartementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartementSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementSouscentreActionPerformed(evt);
            }
        });

        jLabelDepartementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartementSouscentre.setText("Département :");

        jLabelSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSouscentre.setText("Sous-centre :");

        jComboBoxArrondissementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissementSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementSouscentreActionPerformed(evt);
            }
        });

        jComboBoxSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSouscentre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSouscentreActionPerformed(evt);
            }
        });

        jLabelArrondissementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissementSouscentre.setText("Arrondissement :");

        jComboBoxRegionSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegionSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionSouscentreActionPerformed(evt);
            }
        });

        jLabelRegionSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegionSouscentre.setText("Région :");

        jButtonAnnulerChoixSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixSouscentre.setText("Annuler");
        jButtonAnnulerChoixSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixSouscentreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixSouscentreLayout = new javax.swing.GroupLayout(jPanelChoixSouscentre);
        jPanelChoixSouscentre.setLayout(jPanelChoixSouscentreLayout);
        jPanelChoixSouscentreLayout.setHorizontalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelDepartementSouscentre)
                    .addComponent(jLabelArrondissementSouscentre)
                    .addComponent(jLabelSouscentre)
                    .addComponent(jLabelRegionSouscentre))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxDepartementSouscentre, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxRegionSouscentre, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(60, 60, 60)
                        .addComponent(jButtonAnnulerChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanelChoixSouscentreLayout.setVerticalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxRegionSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRegionSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxDepartementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonAnnulerChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelDepartementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelGestionEtat.setBackground(new java.awt.Color(0, 255, 255));
        jPanelGestionEtat.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer l'état", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 102, 255))); // NOI18N

        jButtonCreerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEtats.setText("Créer");
        jButtonCreerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEtatsActionPerformed(evt);
            }
        });

        jButtonMettreAjourEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjourEtats.setText("Mettre à jour");
        jButtonMettreAjourEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourEtatsActionPerformed(evt);
            }
        });

        jButtonVisualiserEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserEtats.setText("Visualiser");
        jButtonVisualiserEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserEtatsActionPerformed(evt);
            }
        });

        jButtonSupprimerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEtats.setText("Supprimer");
        jButtonSupprimerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEtatsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelGestionEtatLayout = new javax.swing.GroupLayout(jPanelGestionEtat);
        jPanelGestionEtat.setLayout(jPanelGestionEtatLayout);
        jPanelGestionEtatLayout.setHorizontalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jButtonCreerEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonMettreAjourEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiserEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerEtats)
                .addContainerGap(44, Short.MAX_VALUE))
        );
        jPanelGestionEtatLayout.setVerticalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonMettreAjourEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCreerEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonSupprimerEtats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVisualiserEtats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jPanelExaminateurs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(430, 430, 430)
                        .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(jButtonFermer)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelExaminateurs, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVisualiserEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserEtatsActionPerformed
        infoSaisies();
        ArrayList<Souscentre> souscentresAyantDesTranscripteursList = new ArrayList<>();//liste des sous-centres ayant des transcripteurs
        Map<Souscentre, ArrayList<Intervenant>> souscentreMembresMap = new HashMap<>();//contient chaque sous-centre avec la liste de ses membres
        Map<Souscentre, Intervenant> souscentreResponsableMap = new HashMap<>();//contient chaque sous-centre avec son responsable
        Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
        ArrayList<String> typesBruts = new ArrayList<>();
        ArrayList<String> typesAconsiderer = new ArrayList<>();
        ArrayList<String> niveauxAconsiderer = new ArrayList<>();
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION TRANSCRIPTION DES EPREUVES (DEFICIENT VISUEL)");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
            boolean continuer = false;
            for (Caisse c : caisses) {
                if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                    continuer = true;
                    break;
                }
            }
            if (!continuer) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de vacation transcription des épreuves (déficient visuel) n'ont pas encore été créés pour ce groupe d'examens !");
            } else {
                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                //recherche des types des examens à utiliser
                for (Examen examen : examensSelected) {
                    if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                        typesBruts.add("ESG");
                    }
                    if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                        typesBruts.add("ESTP");
                    }
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 2) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                //recherche des niveaux des examens à utiliser
                if (!niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add(niveauSelected);
                    niveauxAconsiderer.add("TOUT");
                }
                if (niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add("PROB");
                    niveauxAconsiderer.add("BACC");
                    niveauxAconsiderer.add("TOUT");
                }
                //recherche des centres de billetage
                for (String niveau : niveauxAconsiderer) {
                    for (String type : typesAconsiderer) {
                        List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                        for (Centrebilletage centrebilletage : desCentrebilletages) {
                            ArrayList<Souscentre> souscentresList = new ArrayList<>();
                            if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                for (Secteurcouv sect : secteurs) {
                                    if (!souscentresList.contains(sect.getSouscentre())) {
                                        souscentresList.add(sect.getSouscentre());
                                    }
                                }
                                centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                            }
                        }
                    }
                }
                responsables = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "RESPONSABLE DU JURY DE TRANSCRIPTION DES EPREUVES");
                membres = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "MEMBRE DU JURY DE TRANSCRIPTION DES EPREUVES");
                tousElttranscriptepreuves = metier.findAllElttranscriptepreuveD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);

                if (!responsables.isEmpty()) {
                    for (Intervenant respo : responsables) {
                        if (!souscentresAyantDesTranscripteursList.contains(respo.getSouscentre())) {
                            souscentresAyantDesTranscripteursList.add(respo.getSouscentre());
                        }
                        souscentreResponsableMap.put(respo.getSouscentre(), respo);
                    }
                    for (Souscentre souscentre : souscentresAyantDesTranscripteursList) {
                        ArrayList<Intervenant> membresList = new ArrayList<>();
                        for (Intervenant mbre : membres) {
                            if (mbre.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                membresList.add(mbre);
                            }
                        }
                        souscentreMembresMap.put(souscentre, membresList);
                    }
                }

                try {
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    List<Region> regions = metier.findAllRegions();
                    for (Region region : regions) {
                        for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                            if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                int totalMontant = 0;
                                ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                for (int i = 0; i < souscentresList.size(); i++) {
                                    Souscentre souscentre = souscentresList.get(i);
                                    if (souscentresAyantDesTranscripteursList.contains(souscentre)) {
                                        String nom = "";
                                        String prenom = "";
                                        String pers = "";
                                        String provenance="";
                                        int transpo = 0;
                                        int deplace = 0;
                                        int location = 0;
                                        int transcript = 0;
                                        int expert = 0;
                                        int nbmbres = souscentreMembresMap.get(souscentre).size();
                                        Elttranscriptepreuve elttranscript = new Elttranscriptepreuve();
                                        for (int j = 0; j <= nbmbres; j++) {
                                            if (j == nbmbres) {
                                                nom = souscentreResponsableMap.get(souscentre).getPersonnel().getNompers();
                                                prenom = souscentreResponsableMap.get(souscentre).getPersonnel().getPrenom();
                                                provenance=souscentreResponsableMap.get(souscentre).getPersonnel().getStructure();
                                                for (Elttranscriptepreuve elt : tousElttranscriptepreuves) {
                                                    if (elt.getIntervenant().getPersonnel().getNompers().equals(nom) && elt.getIntervenant().getPersonnel().getPrenom().equals(prenom)) {
                                                        elttranscript = elt;
                                                    }
                                                }
                                                pers = nom + " " + prenom + " (R)";
                                                transpo = elttranscript.getFraistrans();
                                                deplace = elttranscript.getIndemdeplace();
                                                location = elttranscript.getLocatembos();
                                                transcript = elttranscript.getIndemtranscript();
                                                expert = elttranscript.getExpertise();
                                            } 
                                            if (j < nbmbres) {
                                                nom = souscentreMembresMap.get(souscentre).get(j).getPersonnel().getNompers();
                                                prenom = souscentreMembresMap.get(souscentre).get(j).getPersonnel().getPrenom();
                                                provenance=souscentreMembresMap.get(souscentre).get(j).getPersonnel().getStructure();
                                                for (Elttranscriptepreuve elt : tousElttranscriptepreuves) {
                                                    if (elt.getIntervenant().getPersonnel().getNompers().equals(nom) && elt.getIntervenant().getPersonnel().getPrenom().equals(prenom)) {
                                                        elttranscript = elt;
                                                    }
                                                }
                                                pers = nom + " " + prenom + " (A)";
                                                transpo = elttranscript.getFraistrans();
                                                deplace = elttranscript.getIndemdeplace();
                                                location = elttranscript.getLocatembos();
                                                transcript = elttranscript.getIndemtranscript();
                                                expert = elttranscript.getExpertise();
                                            }

                                            Map<String, Object> row = new HashMap<>();
                                            row.put("session", anneeSelected);
                                            row.put("examen", groupedexamensEnstring);
                                            row.put("region", region.getNomreg());
                                            row.put("reference", "obcbudget-v.3");
                                            row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                            row.put("souscentre", souscentre.getNomsouscent());
                                            row.put("pers", pers);
                                            row.put("provenance", provenance);
                                            row.put("transport", transpo);
                                            row.put("deplacement", deplace);
                                            row.put("location", location);
                                            row.put("transcript", transcript);
                                            row.put("expert", expert);
                                            row.put("baspage", "OBC/AR/"+centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                            int total = transpo + deplace + location + transcript + expert;
                                            row.put("total", total);
                                            totalMontant += total;//jasperreport prendra la dernière valeur de total
                                            row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                            datasource.add(row);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatVacationTranscriptionEpreuveReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                souscentresAyantDesTranscripteursList.clear();//on vide le hashmap
            }//fin else continuer
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonVisualiserEtatsActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonCreerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEtatsActionPerformed
        infoSaisies();
        ArrayList<Souscentre> souscentresAyantDesTranscripteursList = new ArrayList<>();//liste des sous-centres ayant des transcripteurs
        Map<Souscentre, ArrayList<Elttranscriptepreuve>> souscentreElttranscriptepreuvesMap = new HashMap<>();//contient chaque sous-centre avec la liste de ses Elttranscriptepreuve
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION TRANSCRIPTION DES EPREUVES (DEFICIENT VISUEL)");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
            if (!caisses.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de vacation transcription des épreuves (déficient visuel) existent déjà pour ce groupe d'examens !");
            } else {
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                responsables = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "RESPONSABLE DU JURY DE TRANSCRIPTION DES EPREUVES");
                //membres = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "MEMBRE DU JURY DE TRANSCRIPTION DES EPREUVES");
                tousElttranscriptepreuves = metier.findAllElttranscriptepreuveD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);

                if (!responsables.isEmpty()) {
                    for (Intervenant respo : responsables) {
                        if (!souscentresAyantDesTranscripteursList.contains(respo.getSouscentre())) {
                            souscentresAyantDesTranscripteursList.add(respo.getSouscentre());
                        }
                    }
                    for (Souscentre souscentre : souscentresAyantDesTranscripteursList) {
                        ArrayList<Elttranscriptepreuve> ElttranscriptepreuvesList = new ArrayList<>();
                        for (Elttranscriptepreuve elt : tousElttranscriptepreuves) {
                            if (elt.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                ElttranscriptepreuvesList.add(elt);
                            }
                        }
                        souscentreElttranscriptepreuvesMap.put(souscentre, ElttranscriptepreuvesList);
                    }
                }

                boolean testSicreer = false;
                try {
                    for (Souscentre souscentre : souscentresAyantDesTranscripteursList) {
                        int net = 0;
                        for (Elttranscriptepreuve elttranscrip : souscentreElttranscriptepreuvesMap.get(souscentre)) {
                            //pour la caisse inutile de savoir si on traite Elttranscriptepreuve du responsable ou celui d'un membre 
                            //l'essentiel est d'avoir ce qu'on attend au souscentre
                            net += elttranscrip.getFraistrans() + elttranscrip.getIndemdeplace() + elttranscrip.getLocatembos() + elttranscrip.getIndemtranscript() + elttranscrip.getExpertise();
                        }
                        metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                        testSicreer = true;
                    }
                } catch (ObcbudgetException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                if (testSicreer) {
                    JOptionPane.showMessageDialog(this, "Etats de vacation transcription des épreuves (déficient visuel) créés avec succès pour ce groupe d'examens !");
                }
            }//fin else caisses
        }//fin if groupedexamen
        else {
            JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
        }
        souscentresAyantDesTranscripteursList.clear();
    }//GEN-LAST:event_jButtonCreerEtatsActionPerformed

    private void jButtonMettreAjourEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourEtatsActionPerformed
        infoSaisies();
        ArrayList<Souscentre> souscentresAyantDesTranscripteursList = new ArrayList<>();//liste des sous-centres ayant des transcripteurs
        Map<Souscentre, ArrayList<Elttranscriptepreuve>> souscentreElttranscriptepreuvesMap = new HashMap<>();//contient chaque sous-centre avec la liste de ses Elttranscriptepreuve
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de vacation transcription des épreuves (déficient visuel) pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION TRANSCRIPTION DES EPREUVES (DEFICIENT VISUEL)");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de vacation transcription des épreuves (déficient visuel) n'existe pour ce groupe d'examens !");
                } else {
                    //on conserve quelques info de ces anciennes caisses
                    Groupe groupe = caisses.get(0).getGroupe();
                    sessionSelected = caisses.get(0).getSession();
                    //on supprime toutes les anciennes caisses du groupe d'examens ainsi que les intervsec
                    for (Caisse c : caisses) {
                        metier.supprimerCaisse(c);
                    }
                    //on va les recréer

                    responsables = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "RESPONSABLE DU JURY DE TRANSCRIPTION DES EPREUVES");
                    //membres = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "MEMBRE DU JURY DE TRANSCRIPTION DES EPREUVES");
                    tousElttranscriptepreuves = metier.findAllElttranscriptepreuveD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);

                    if (!responsables.isEmpty()) {
                        for (Intervenant respo : responsables) {
                            if (!souscentresAyantDesTranscripteursList.contains(respo.getSouscentre())) {
                                souscentresAyantDesTranscripteursList.add(respo.getSouscentre());
                            }
                        }
                        for (Souscentre souscentre : souscentresAyantDesTranscripteursList) {
                            ArrayList<Elttranscriptepreuve> ElttranscriptepreuvesList = new ArrayList<>();
                            for (Elttranscriptepreuve elt : tousElttranscriptepreuves) {
                                if (elt.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                    ElttranscriptepreuvesList.add(elt);
                                }
                            }
                            souscentreElttranscriptepreuvesMap.put(souscentre, ElttranscriptepreuvesList);
                        }
                    }
                    boolean testSimodifier = false;

                    try {
                        for (Souscentre souscentre : souscentresAyantDesTranscripteursList) {
                            int net = 0;
                            for (Elttranscriptepreuve elttranscrip : souscentreElttranscriptepreuvesMap.get(souscentre)) {
                                //pour la caisse inutile de savoir si on traite Elttranscriptepreuve du responsable ou celui d'un membre 
                                //l'essentiel est d'avoir ce qu'on attend au souscentre
                                net += elttranscrip.getFraistrans() + elttranscrip.getIndemdeplace() + elttranscrip.getLocatembos() + elttranscrip.getIndemtranscript() + elttranscrip.getExpertise();
                            }
                            metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                            testSimodifier = true;
                        }
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testSimodifier) {
                        JOptionPane.showMessageDialog(this, "Etats de vacation transcription des épreuves (déficient visuel) mis à jour avec succès pour ce groupe d'examens !");
                    }
                }//fin else caisses
            }//fin if groupedexamen
            else {
                JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
            }
            souscentresAyantDesTranscripteursList.clear();
        }//fin if result
    }//GEN-LAST:event_jButtonMettreAjourEtatsActionPerformed

    private void jButtonSupprimerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEtatsActionPerformed
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de vacation transcription des épreuves (déficient visuel) pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION TRANSCRIPTION DES EPREUVES (DEFICIENT VISUEL)");
                caisses = metier.findAllCaissesOrdinairesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de vacation transcription des épreuves (déficient visuel) n'existe pour ce groupe d'examens !");
                } else {
                    try {
                        for (Caisse caisse : caisses) {
                            metier.supprimerCaisse(caisse);
                        }
                        JOptionPane.showMessageDialog(this, "Etats de vacation transcription des épreuves (déficient visuel) supprimés avec succès pour ce groupe d'examens !");
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }//fin else caisses
            }//fin if groupedexamen
        }//fin if result
    }//GEN-LAST:event_jButtonSupprimerEtatsActionPerformed

    private void jComboBoxDepartementSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementSouscentreActionPerformed
        remplirArrondissementSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxDepartementSouscentreActionPerformed

    private void jComboBoxArrondissementSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementSouscentreActionPerformed
        remplirSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementSouscentreActionPerformed

    private void jComboBoxSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSouscentreActionPerformed
        //jTextField1.setText();
    }//GEN-LAST:event_jComboBoxSouscentreActionPerformed

    private void jComboBoxRegionSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionSouscentreActionPerformed
        remplirDepartementSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxRegionSouscentreActionPerformed

    private void jComboBoxDepartementListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementListeActionPerformed
        remplirArrondissementListeCombobox();
        remplirPersonnelsDuDepartementCombobox();
    }//GEN-LAST:event_jComboBoxDepartementListeActionPerformed

    private void jComboBoxArrondissementListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementListeActionPerformed
        remplirPersonnelsDelArrondissementCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementListeActionPerformed

    private void jComboBoxNomsEtPrenomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNomsEtPrenomsActionPerformed
        nomsEtPrenomsSelected = (String) jComboBoxNomsEtPrenoms.getSelectedItem();
        if (!nomsEtPrenomsSelected.equals("---")) {
            for (Personnel p : personnels) {
                if ((p.getNompers() + " " + p.getPrenom()).equals(nomsEtPrenomsSelected)) {
                    personnelSelected = p;
                    break;
                }
            }
        }
    }//GEN-LAST:event_jComboBoxNomsEtPrenomsActionPerformed

    private void jComboBoxRegionListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionListeActionPerformed
        remplirDepartementListeCombobox();
    }//GEN-LAST:event_jComboBoxRegionListeActionPerformed

    private void jButtonSupprimerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerPersonnelActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nomsEtPrenomsSelected.equals("---") || titreQualiteSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre, un personnel et une qualité !");
        } else {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer ce personnel du sous-centre [" + nomSouscentreSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                anneeSelected = Integer.parseInt(anneeString);

                tousElttranscriptepreuves = metier.findAllElttranscriptepreuveD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                String qualite = "";
                if (titreQualiteSelected.equals("RESPONSABLE")) {
                    qualite = "RESPONSABLE DU JURY DE TRANSCRIPTION DES EPREUVES";
                }
                if (titreQualiteSelected.equals("MEMBRE")) {
                    qualite = "MEMBRE DU JURY DE TRANSCRIPTION DES EPREUVES";
                }
                try {
                    Intervenant intervenant = metier.findIntervenantByNomEtPrenomD1GroupeDexamensD1SessionD1SouscentreD1ActiviteEt1Qualite(personnelSelected.getNompers(), personnelSelected.getPrenom(), anneeSelected, nomSouscentreSelected, niveauSelected, typeSelected, phase, qualite);
                    Elttranscriptepreuve sonElttranscript = new Elttranscriptepreuve();
                    for (Elttranscriptepreuve elttranscrip : tousElttranscriptepreuves) {
                        if (elttranscrip.getIntervenant().getPersonnel().getNompers().equals(intervenant.getPersonnel().getNompers()) && elttranscrip.getIntervenant().getPersonnel().getPrenom().equals(intervenant.getPersonnel().getPrenom())) {
                            sonElttranscript = elttranscrip;
                        }
                    }
                    metier.supprimerElttranscriptepreuve(sonElttranscript);
                    metier.supprimerIntervenant(intervenant);
                    JOptionPane.showMessageDialog(this, qualite + " supprimé avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer ce " + qualite + " du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerPersonnelActionPerformed

    private void jButtonAnnulerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerPersonnelActionPerformed
        jComboBoxRegionListe.setSelectedIndex(0);
        jComboBoxDepartementListe.setSelectedIndex(0);
        jComboBoxArrondissementListe.setSelectedIndex(0);
        jComboBoxNomsEtPrenoms.setSelectedIndex(0);
        jComboBoxQualite.setSelectedIndex(0);
        jComboBoxTransport.setSelectedIndex(0);
        jComboBoxDeplacement.setSelectedIndex(0);
        jComboBoxLocation.setSelectedIndex(0);
        jComboBoxTranscription.setSelectedIndex(0);
        jComboBoxExpertise.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerPersonnelActionPerformed

    private void jButtonCreerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerPersonnelActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || titreQualiteSelected.equals("---") || nomsEtPrenomsSelected.equals("---") || fraistransportString.equals("---") || fraisdeplaceString.equals("---") || fraisembosseurString.equals("---") || fraistranscriptString.equals("---") || fraisexpertString.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre, un personnel, une qualité et les 5 paramètres !");
        } else {
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            anneeSelected = Integer.parseInt(anneeString);
            Intervenant intervenantCreated = null;
            for (Session s : sessions) {
                if (s.getAnnee() == anneeSelected) {
                    sessionSelected = s;
                    break;
                }
            }
            for (Souscentre souscentre : souscentres) {
                if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                    souscentreSelected = souscentre;
                    break;
                }
            }
            validerFraistransport(fraistransportString);
            validerFraisdeplace(fraisdeplaceString);
            validerFraisembosseur(fraisembosseurString);
            validerFraistranscript(fraistranscriptString);
            validerFraisexpert(fraisexpertString);
            boolean testSicreerInterveant = false;
            boolean testSicreerElttranscriptepreuve = false;
            try {
                //personnelSelected est déterminé au moment du clic sur la jcombox
                Activite activite = metier.findActiviteByNom(phase);
                Qualite qualite = new Qualite();
                if (titreQualiteSelected.equals("RESPONSABLE")) {
                    qualite = metier.findQualiteByTitre("RESPONSABLE DU JURY DE TRANSCRIPTION DES EPREUVES");
                }
                if (titreQualiteSelected.equals("MEMBRE")) {
                    qualite = metier.findQualiteByTitre("MEMBRE DU JURY DE TRANSCRIPTION DES EPREUVES");
                }
                boolean resident = false;
                intervenantCreated = new Intervenant(groupe, sessionSelected, personnelSelected, souscentreSelected, activite, qualite, resident);
                metier.creerIntervenant(intervenantCreated);
                testSicreerInterveant = true;
            } catch (ObcbudgetException ex) {
                testSicreerInterveant = false;
                JOptionPane.showMessageDialog(this, "Impossible de créer le " + titreQualiteSelected + " du jury de transcription des épreuves pour le sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
            }
            if (testSicreerInterveant) {
                metier.creerElttranscriptepreuve(new Elttranscriptepreuve(souscentreSelected, sessionSelected, groupe, intervenantCreated, fraistransportSaisi, fraisdeplaceSaisi, fraisembosseurSaisi, fraistranscriptSaisi, fraisexpertSaisi));
                testSicreerElttranscriptepreuve = true;
            }
            if (testSicreerElttranscriptepreuve) {
                JOptionPane.showMessageDialog(this, titreQualiteSelected + " du jury de transcription des épreuves et ses paramètres créés avec succès !");
            }
        }
    }//GEN-LAST:event_jButtonCreerPersonnelActionPerformed

    private void jButtonListerPersonnelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerPersonnelsActionPerformed
        infoSaisies();
        ArrayList<Souscentre> souscentresAyantDesTranscripteursList = new ArrayList<>();//liste des sous-centres ayant des transcripteurs
        Map<Souscentre, ArrayList<Intervenant>> souscentreMembresMap = new HashMap<>();//contient chaque sous-centre avec la liste de ses membres
        Map<Souscentre, Intervenant> souscentreResponsableMap = new HashMap<>();//contient chaque sous-centre avec son responsable
        if (groupedexamensEnstring.equals("") || anneeString.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens et une session !");
        } else {
            anneeSelected = Integer.parseInt(anneeString);
            responsables = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "RESPONSABLE DU JURY DE TRANSCRIPTION DES EPREUVES");
            membres = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "MEMBRE DU JURY DE TRANSCRIPTION DES EPREUVES");
            tousElttranscriptepreuves = metier.findAllElttranscriptepreuveD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
            if (!responsables.isEmpty()) {
                for (Intervenant respo : responsables) {
                    if (!souscentresAyantDesTranscripteursList.contains(respo.getSouscentre())) {
                        souscentresAyantDesTranscripteursList.add(respo.getSouscentre());
                    }
                    souscentreResponsableMap.put(respo.getSouscentre(), respo);
                }
                for (Souscentre souscentre : souscentresAyantDesTranscripteursList) {
                    ArrayList<Intervenant> membresList = new ArrayList<>();
                    for (Intervenant mbre : membres) {
                        if (mbre.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                            membresList.add(mbre);
                        }
                    }
                    souscentreMembresMap.put(souscentre, membresList);
                }

                try {
                    List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                    for (Region region : regions) {
                        for (Souscentre souscentre : souscentresAyantDesTranscripteursList) {
                            if (region.getNomreg().equals(souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                int i=0;
                                String nom = "";
                                String prenom = "";
                                String pers = "";
                                int transpo = 0;
                                int deplace = 0;
                                int location = 0;
                                int transcript = 0;
                                int expert = 0;
                                int nbmbres = souscentreMembresMap.get(souscentre).size();
                                Elttranscriptepreuve elttranscript = new Elttranscriptepreuve();
                                for (int j = 0; j <= nbmbres; j++) {
                                    if (i == nbmbres) {
                                        nom = souscentreResponsableMap.get(souscentre).getPersonnel().getNompers();
                                        prenom = souscentreResponsableMap.get(souscentre).getPersonnel().getPrenom();
                                        for (Elttranscriptepreuve elt : tousElttranscriptepreuves) {
                                            if (elt.getIntervenant().getPersonnel().getNompers().equals(nom) && elt.getIntervenant().getPersonnel().getPrenom().equals(prenom)) {
                                                elttranscript = elt;
                                            }
                                        }
                                        pers = nom + " " + prenom + " (R)";
                                        transpo = elttranscript.getFraistrans();
                                        deplace = elttranscript.getIndemdeplace();
                                        location = elttranscript.getLocatembos();
                                        transcript = elttranscript.getIndemtranscript();
                                        expert = elttranscript.getExpertise();
                                    } 
                                    if (i < nbmbres) {
                                        nom = souscentreMembresMap.get(souscentre).get(i).getPersonnel().getNompers();
                                        prenom = souscentreMembresMap.get(souscentre).get(i).getPersonnel().getPrenom();// + " (R)";
                                        for (Elttranscriptepreuve elt : tousElttranscriptepreuves) {
                                            if (elt.getIntervenant().getPersonnel().getNompers().equals(nom) && elt.getIntervenant().getPersonnel().getPrenom().equals(prenom)) {
                                                elttranscript = elt;
                                            }
                                        }
                                        pers = nom + " " + prenom + " (A)";
                                        transpo = elttranscript.getFraistrans();
                                        deplace = elttranscript.getIndemdeplace();
                                        location = elttranscript.getLocatembos();
                                        transcript = elttranscript.getIndemtranscript();
                                        expert = elttranscript.getExpertise();
                                    }
                                    Map<String, Object> row = new HashMap<>();
                                    row.put("session", anneeSelected);
                                    row.put("examen", groupedexamensEnstring);
                                    row.put("region", region.getNomreg());
                                    row.put("num", i++);
                                    row.put("souscentre", souscentre.getNomsouscent());
                                    row.put("pers", pers);
                                    row.put("transport", transpo);
                                    row.put("deplacement", deplace);
                                    row.put("location", location);
                                    row.put("transcript", transcript);
                                    row.put("expert", expert);
                                    datasource.add(row);
                                }
                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeParametresTranscritepreuveReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }
        }
        responsables.clear();
        membres.clear();
    }//GEN-LAST:event_jButtonListerPersonnelsActionPerformed

    private void jButtonAnnulerChoixExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixExamenActionPerformed
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        jComboBoxSession.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixExamenActionPerformed

    private void jButtonAnnulerChoixSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixSouscentreActionPerformed
        jComboBoxRegionSouscentre.setSelectedIndex(0);
        jComboBoxDepartementSouscentre.setSelectedIndex(0);
        jComboBoxArrondissementSouscentre.setSelectedIndex(0);
        jComboBoxSouscentre.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixSouscentreActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatDotationTranscriptionEpreuves.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatDotationTranscriptionEpreuves.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatDotationTranscriptionEpreuves.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatDotationTranscriptionEpreuves.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatDotationTranscriptionEpreuves().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonAnnulerChoixExamen;
    private javax.swing.JButton jButtonAnnulerChoixSouscentre;
    private javax.swing.JButton jButtonAnnulerPersonnel;
    private javax.swing.JButton jButtonCreerEtats;
    private javax.swing.JButton jButtonCreerPersonnel;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonListerPersonnels;
    private javax.swing.JButton jButtonMettreAjourEtats;
    private javax.swing.JButton jButtonSupprimerEtats;
    private javax.swing.JButton jButtonSupprimerPersonnel;
    private javax.swing.JButton jButtonVisualiserEtats;
    private javax.swing.JComboBox<String> jComboBoxArrondissementListe;
    private javax.swing.JComboBox<String> jComboBoxArrondissementSouscentre;
    private javax.swing.JComboBox<String> jComboBoxDepartementListe;
    private javax.swing.JComboBox<String> jComboBoxDepartementSouscentre;
    private javax.swing.JComboBox<String> jComboBoxDeplacement;
    private javax.swing.JComboBox<String> jComboBoxExpertise;
    private javax.swing.JComboBox<String> jComboBoxLocation;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxNomsEtPrenoms;
    private javax.swing.JComboBox<String> jComboBoxQualite;
    private javax.swing.JComboBox<String> jComboBoxRegionListe;
    private javax.swing.JComboBox<String> jComboBoxRegionSouscentre;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxSouscentre;
    private javax.swing.JComboBox<String> jComboBoxTranscription;
    private javax.swing.JComboBox<String> jComboBoxTransport;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelArrondissementListe;
    private javax.swing.JLabel jLabelArrondissementSouscentre;
    private javax.swing.JLabel jLabelDepartementListe;
    private javax.swing.JLabel jLabelDepartementSouscentre;
    private javax.swing.JLabel jLabelDeplacement;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelExpertise;
    private javax.swing.JLabel jLabelLocation;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelRegionListe;
    private javax.swing.JLabel jLabelRegionSouscentre;
    private javax.swing.JLabel jLabelResponsable;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelSouscentre;
    private javax.swing.JLabel jLabelTranscription;
    private javax.swing.JLabel jLabelTransport;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JLabel jLabelTypeResidence;
    private javax.swing.JPanel jPanelChoixExamen;
    private javax.swing.JPanel jPanelChoixSouscentre;
    private javax.swing.JPanel jPanelExaminateurs;
    private javax.swing.JPanel jPanelGestionEtat;
    private javax.swing.JPanel jPanelQualite;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Region> regions = null;
    private List<Examen> examens = null;
    private Examen examenSelected = null;
    private String[] examensList = null;
    private List<Examen> examensSelected = new ArrayList<>();
    private List<Departement> departementsSouscentre = null;
    private List<Arrondissement> arrondissementsSouscentre = null;
    private List<Departement> departementsListe = null;
    private List<Arrondissement> arrondissementsListe = null;
    private List<Souscentre> souscentres = null;
    private Souscentre souscentreSelected = null;
    private String[] sessionsCombo = null;
    private String[] regionsSouscentreCombo = null;
    private String[] departementsSouscentreCombo = null;
    private String[] arrondissementsSouscentreCombo = null;
    private String[] souscentresCombo = null;
    private String[] regionsListeCombo = null;
    private String[] departementsListeCombo = null;
    private String[] arrondissementsListeCombo = null;
    private String[] qualitesCombo = null;
    private String nomRegionSouscentreSelected = "";
    private String nomDepartementSouscentreSelected = "";
    private String nomArrondissementSouscentreSelected = "";
    private String nomRegionListeSelected = "";
    private String nomDepartementListeSelected = "";
    private String nomArrondissementListeSelected = "";
    private String nomSouscentreSelected = "";
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private String phase = "ECRIT";
    private List<Caisse> caisses = null;
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String[] fraistransportCombo = null;
    private String[] fraisdeplaceCombo = null;
    private String[] fraistranscriptCombo = null;
    private String[] fraisembosseurCombo = null;
    private String[] fraisexpertCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private String nomsEtPrenomsSelected = "";
    private Personnel personnelSelected = null;
    private List<Personnel> personnels = null;
    private String[] personnelsCombo = null;
    private List<Intervenant> responsables = null;
    private List<Intervenant> membres = null;
    private String titreQualiteSelected = "";
    private List<Qualite> qualites = null;
    private String fraistransportString = "";
    private String fraisdeplaceString = "";
    private String fraisembosseurString = "";
    private String fraistranscriptString = "";
    private String fraisexpertString = "";
    private int fraistransportSaisi = 0;
    private int fraisdeplaceSaisi = 0;
    private int fraisembosseurSaisi = 0;
    private int fraistranscriptSaisi = 0;
    private int fraisexpertSaisi = 0;
    private boolean continuerFraistransport = false;
    private boolean continuerFraisdeplace = false;
    private boolean continuerFraisembosseur = false;
    private boolean continuerFraistranscript = false;
    private boolean continuerFraisexpert = false;
    private Elttranscriptepreuve elttranscriptepreuve = null;
    private List<Elttranscriptepreuve> tousElttranscriptepreuves = null;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        regions = metier.findAllRegions();
        souscentres = metier.findAllSouscentres();
        examens = metier.findAllExamens();
        qualites = metier.findAllQualites();

        //on remplit la combobox des régions du sous-centre
        regionsSouscentreCombo = new String[regions.size() + 1];
        regionsSouscentreCombo[0] = "---";
        int i = 1;
        for (Region region : regions) {
            regionsSouscentreCombo[i++] = region.getNomreg();
        }
        jComboBoxRegionSouscentre.setModel(new DefaultComboBoxModel(regionsSouscentreCombo));

        //on remplit la combobox des régions des examinateurs
        regionsListeCombo = new String[regions.size() + 1];
        regionsListeCombo[0] = "---";
        int j = 1;
        for (Region region : regions) {
            regionsListeCombo[j++] = region.getNomreg();
        }
        jComboBoxRegionListe.setModel(new DefaultComboBoxModel(regionsListeCombo));

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int k = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[k++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "GEN", "IND", "IND PROF", "STT", "STT PROF", "TOUT", "TOUT ESTI", "TOUT STT", "TOUT ESTP"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC", "TOUT"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        //on remplit la combobox des qualités
        qualitesCombo = new String[]{"---", "RESPONSABLE", "MEMBRE"};
        jComboBoxQualite.setModel(new DefaultComboBoxModel(qualitesCombo));

        //Fraistransport,Fraisdeplace,Fraisembosseur,Fraistranscript,Fraisexpert,
        //on remplit la combobox des Fraistransport
        fraistransportCombo = new String[]{"---", "3000", "8000", "10000", "20000", "25000", "50000"};
        jComboBoxTransport.setModel(new DefaultComboBoxModel(fraistransportCombo));

        //on remplit la combobox des Fraisdeplace
        fraisdeplaceCombo = new String[]{"---", "0", "125000"};
        jComboBoxDeplacement.setModel(new DefaultComboBoxModel(fraisdeplaceCombo));

        //on remplit la combobox des Fraisembosseur
        fraisembosseurCombo = new String[]{"---", "0", "60000", "175000"};
        jComboBoxLocation.setModel(new DefaultComboBoxModel(fraisembosseurCombo));

        //on remplit la combobox des Fraistranscript
        fraistranscriptCombo = new String[]{"---", "10000", "20000"};
        jComboBoxTranscription.setModel(new DefaultComboBoxModel(fraistranscriptCombo));

        //on remplit la combobox des Fraisexpert
        fraisexpertCombo = new String[]{"---", "10000", "15000"};
        jComboBoxExpertise.setModel(new DefaultComboBoxModel(fraisexpertCombo));

        remplirDepartementSouscentreCombobox();
        remplirArrondissementSouscentreCombobox();
        remplirSouscentreCombobox();
        remplirDepartementListeCombobox();
        remplirArrondissementListeCombobox();
        remplirPersonnelsDelArrondissementCombobox();
        remplirPersonnelsDuDepartementCombobox();
    }

    private void infoSaisies() {
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        nomsEtPrenomsSelected = (String) jComboBoxNomsEtPrenoms.getSelectedItem();
        titreQualiteSelected = (String) jComboBoxQualite.getSelectedItem();
        fraistransportString = (String) jComboBoxTransport.getSelectedItem();
        fraisdeplaceString = (String) jComboBoxDeplacement.getSelectedItem();
        fraisembosseurString = (String) jComboBoxLocation.getSelectedItem();
        fraistranscriptString = (String) jComboBoxTranscription.getSelectedItem();
        fraisexpertString = (String) jComboBoxExpertise.getSelectedItem();
    }

    private void remplirDepartementSouscentreCombobox() {
        nomRegionSouscentreSelected = (String) jComboBoxRegionSouscentre.getSelectedItem();
        departementsSouscentre = metier.findAllDepartementsD1Region(nomRegionSouscentreSelected);
        //on remplit la combobox des départements du sous-centre
        departementsSouscentreCombo = new String[departementsSouscentre.size() + 1];
        departementsSouscentreCombo[0] = "---";
        int i = 1;
        for (Departement departement : departementsSouscentre) {
            departementsSouscentreCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartementSouscentre.setModel(new DefaultComboBoxModel(departementsSouscentreCombo));
    }

    private void remplirArrondissementSouscentreCombobox() {
        nomDepartementSouscentreSelected = (String) jComboBoxDepartementSouscentre.getSelectedItem();
        arrondissementsSouscentre = metier.findAllArrondissementsD1Departement(nomDepartementSouscentreSelected);
        //on remplit la combobox des arrondissements
        arrondissementsSouscentreCombo = new String[arrondissementsSouscentre.size() + 1];
        arrondissementsSouscentreCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissementsSouscentre) {
            arrondissementsSouscentreCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissementSouscentre.setModel(new DefaultComboBoxModel(arrondissementsSouscentreCombo));
    }

    private void remplirSouscentreCombobox() {
        nomArrondissementSouscentreSelected = (String) jComboBoxArrondissementSouscentre.getSelectedItem();
        souscentres = metier.findAllSouscentresD1Arrondissement(nomArrondissementSouscentreSelected);
        //on remplit la combobox des sous-centres
        souscentresCombo = new String[souscentres.size() + 1];
        souscentresCombo[0] = "---";
        int i = 1;
        for (Souscentre souscentre : souscentres) {
            souscentresCombo[i++] = souscentre.getNomsouscent();
        }
        jComboBoxSouscentre.setModel(new DefaultComboBoxModel(souscentresCombo));
    }

    private void remplirDepartementListeCombobox() {
        nomRegionListeSelected = (String) jComboBoxRegionListe.getSelectedItem();
        departementsListe = metier.findAllDepartementsD1Region(nomRegionListeSelected);
        //on remplit la combobox des départements des examinateurs
        departementsListeCombo = new String[departementsListe.size() + 1];
        departementsListeCombo[0] = "---";
        int i = 1;
        for (Departement departement : departementsListe) {
            departementsListeCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartementListe.setModel(new DefaultComboBoxModel(departementsListeCombo));
    }

    private void remplirArrondissementListeCombobox() {
        nomDepartementListeSelected = (String) jComboBoxDepartementListe.getSelectedItem();
        arrondissementsListe = metier.findAllArrondissementsD1Departement(nomDepartementListeSelected);
        //on remplit la combobox des arrondissements des examinateurs
        arrondissementsListeCombo = new String[arrondissementsListe.size() + 1];
        arrondissementsListeCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissementsListe) {
            arrondissementsListeCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissementListe.setModel(new DefaultComboBoxModel(arrondissementsListeCombo));
    }

    private void remplirPersonnelsDelArrondissementCombobox() {
        nomArrondissementListeSelected = (String) jComboBoxArrondissementListe.getSelectedItem();
        personnels = metier.findAllPersonnelsD1Arrondissement(nomArrondissementListeSelected);
        //on remplit les combobox des responsables et des membres
        personnelsCombo = new String[personnels.size() + 1];
        personnelsCombo[0] = "---";
        int i = 1;
        for (Personnel personnel : personnels) {
            personnelsCombo[i] = personnel.getNompers() + " " + personnel.getPrenom();
            i++;
        }
        jComboBoxNomsEtPrenoms.setModel(new DefaultComboBoxModel(personnelsCombo));
    }

    private void remplirPersonnelsDuDepartementCombobox() {
        nomDepartementListeSelected = (String) jComboBoxDepartementListe.getSelectedItem();
        personnels = metier.findAllPersonnelsD1Departement(nomDepartementListeSelected);
        //on remplit les combobox des personnels       
        personnelsCombo = new String[personnels.size() + 1];
        personnelsCombo[0] = "---";
        int i = 1;
        for (Personnel personnel : personnels) {
            personnelsCombo[i] = personnel.getNompers() + " " + personnel.getPrenom();
            i++;
        }
        jComboBoxNomsEtPrenoms.setModel(new DefaultComboBoxModel(personnelsCombo));
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    private void validerFraistransport(String nbreString) {
        try {
            fraistransportSaisi = Integer.parseInt(nbreString);
            continuerFraistransport = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Les frais de transport doit être fournis et contenir uniquement des chiffres entiers!");
            continuerFraistransport = false;
        }
    }

    private void validerFraisdeplace(String nbreString) {
        try {
            fraisdeplaceSaisi = Integer.parseInt(nbreString);
            continuerFraisdeplace = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "L'indemnité de déplacement doit être fourni et contenir uniquement des chiffres entiers!");
            continuerFraisdeplace = false;
        }
    }

    private void validerFraisembosseur(String nbreString) {
        try {
            fraisembosseurSaisi = Integer.parseInt(nbreString);
            continuerFraisembosseur = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Les frais de location de l'embosseur doit être fourni et contenir uniquement des chiffres entiers!");
            continuerFraisembosseur = false;
        }
    }

    private void validerFraistranscript(String nbreString) {
        try {
            fraistranscriptSaisi = Integer.parseInt(nbreString);
            continuerFraistranscript = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "L'indemnité de transcription doit être fourni et contenir uniquement des chiffres entiers!");
            continuerFraistranscript = false;
        }
    }

    private void validerFraisexpert(String nbreString) {
        try {
            fraisexpertSaisi = Integer.parseInt(nbreString);
            continuerFraisexpert = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Les frais d'expertise doivent être fournis et contenir uniquement des chiffres entiers!");
            continuerFraisexpert = false;
        }
    }
}
