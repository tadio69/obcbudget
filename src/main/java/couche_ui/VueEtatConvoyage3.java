package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Caisse;
import couche_jpa.Centre;
import couche_jpa.Centrebilletage;
import couche_jpa.Centredispatching;
import couche_jpa.Departement;
import couche_jpa.Examen;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Nbcopiesdispatchees;
import couche_jpa.Nbentetes;
import couche_jpa.Rattachdispatching;
import couche_jpa.Rattachregroupement;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueEtatConvoyage3 extends javax.swing.JFrame {

    public VueEtatConvoyage3() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButtonFermer = new javax.swing.JButton();
        jPanelChoixExamen = new javax.swing.JPanel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixExamen = new javax.swing.JButton();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelExamen = new javax.swing.JLabel();
        jPanelChoixCentre = new javax.swing.JPanel();
        jLabelRegion = new javax.swing.JLabel();
        jComboBoxRegion = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixCentre = new javax.swing.JButton();
        jLabelDepartement = new javax.swing.JLabel();
        jComboBoxDepartement = new javax.swing.JComboBox<>();
        jLabelNomCentredeliberation = new javax.swing.JLabel();
        jComboBoxCentredeliberation = new javax.swing.JComboBox<>();
        jPanelJurys = new javax.swing.JPanel();
        jLabelEffectif3 = new javax.swing.JLabel();
        jTextFieldEffectif3 = new javax.swing.JTextField();
        jButtonCreerEffectif3 = new javax.swing.JButton();
        jButtonSupprimerEffectif3 = new javax.swing.JButton();
        jButtonListerEffectif3 = new javax.swing.JButton();
        jPanelGestionEtat = new javax.swing.JPanel();
        jButtonCreerEtats = new javax.swing.JButton();
        jButtonMettreAjourEtats = new javax.swing.JButton();
        jButtonVisualiserEtats = new javax.swing.JButton();
        jButtonSupprimerEtats = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT DE CONVOYAGE 3");

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jPanelChoixExamen.setBackground(new java.awt.Color(102, 255, 153));
        jPanelChoixExamen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un groupe d'examens et une session", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixExamen.setText("Annuler");
        jButtonAnnulerChoixExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixExamenActionPerformed(evt);
            }
        });

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        javax.swing.GroupLayout jPanelChoixExamenLayout = new javax.swing.GroupLayout(jPanelChoixExamen);
        jPanelChoixExamen.setLayout(jPanelChoixExamenLayout);
        jPanelChoixExamenLayout.setHorizontalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(0, 32, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addGap(26, 26, 26))
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabelSession)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jButtonAnnulerChoixExamen)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixExamenLayout.setVerticalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17))
        );

        jPanelChoixCentre.setBackground(new java.awt.Color(0, 255, 153));
        jPanelChoixCentre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un centre de délibération", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jLabelRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegion.setText("Région :");

        jComboBoxRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixCentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixCentre.setText("Annuler");
        jButtonAnnulerChoixCentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixCentreActionPerformed(evt);
            }
        });

        jLabelDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartement.setText("Département :");

        jComboBoxDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementActionPerformed(evt);
            }
        });

        jLabelNomCentredeliberation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNomCentredeliberation.setText("Centre de délibération :");

        jComboBoxCentredeliberation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxCentredeliberation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCentredeliberationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixCentreLayout = new javax.swing.GroupLayout(jPanelChoixCentre);
        jPanelChoixCentre.setLayout(jPanelChoixCentreLayout);
        jPanelChoixCentreLayout.setHorizontalGroup(
            jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelRegion)
                            .addComponent(jLabelDepartement))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelNomCentredeliberation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxCentredeliberation, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                        .addGap(352, 352, 352)
                        .addComponent(jButtonAnnulerChoixCentre)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanelChoixCentreLayout.setVerticalGroup(
            jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNomCentredeliberation, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxCentredeliberation, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButtonAnnulerChoixCentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelJurys.setBackground(new java.awt.Color(255, 204, 204));
        jPanelJurys.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Effectifs reçus au centre de regroupement ou de ventilation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabelEffectif3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelEffectif3.setText("Effectif 3 :");

        jTextFieldEffectif3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonCreerEffectif3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEffectif3.setText("Créer");
        jButtonCreerEffectif3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEffectif3ActionPerformed(evt);
            }
        });

        jButtonSupprimerEffectif3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEffectif3.setText("Supprimer");
        jButtonSupprimerEffectif3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEffectif3ActionPerformed(evt);
            }
        });

        jButtonListerEffectif3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonListerEffectif3.setText("Lister");
        jButtonListerEffectif3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerEffectif3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelJurysLayout = new javax.swing.GroupLayout(jPanelJurys);
        jPanelJurys.setLayout(jPanelJurysLayout);
        jPanelJurysLayout.setHorizontalGroup(
            jPanelJurysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelJurysLayout.createSequentialGroup()
                .addGroup(jPanelJurysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelJurysLayout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jButtonCreerEffectif3)
                        .addGap(21, 21, 21)
                        .addComponent(jButtonSupprimerEffectif3)
                        .addGap(21, 21, 21)
                        .addComponent(jButtonListerEffectif3))
                    .addGroup(jPanelJurysLayout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(jLabelEffectif3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldEffectif3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        jPanelJurysLayout.setVerticalGroup(
            jPanelJurysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelJurysLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanelJurysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelEffectif3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldEffectif3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelJurysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelJurysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonSupprimerEffectif3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonListerEffectif3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonCreerEffectif3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanelGestionEtat.setBackground(new java.awt.Color(0, 255, 255));
        jPanelGestionEtat.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer l'état", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jButtonCreerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEtats.setText("Créer");
        jButtonCreerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEtatsActionPerformed(evt);
            }
        });

        jButtonMettreAjourEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjourEtats.setText("Mettre à jour");
        jButtonMettreAjourEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourEtatsActionPerformed(evt);
            }
        });

        jButtonVisualiserEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserEtats.setText("Visualiser");
        jButtonVisualiserEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserEtatsActionPerformed(evt);
            }
        });

        jButtonSupprimerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEtats.setText("Supprimer");
        jButtonSupprimerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEtatsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelGestionEtatLayout = new javax.swing.GroupLayout(jPanelGestionEtat);
        jPanelGestionEtat.setLayout(jPanelGestionEtatLayout);
        jPanelGestionEtatLayout.setHorizontalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jButtonCreerEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonMettreAjourEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiserEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerEtats)
                .addContainerGap(48, Short.MAX_VALUE))
        );
        jPanelGestionEtatLayout.setVerticalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonMettreAjourEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCreerEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonSupprimerEtats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVisualiserEtats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanelChoixCentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanelJurys, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonFermer))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(415, 415, 415)
                        .addComponent(jLabel1)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanelChoixCentre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelJurys, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(23, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(83, 83, 83))))
        );

        jLabel1.getAccessibleContext().setAccessibleName("ETAT CM (PRATIQUE SERIE E)  ET JURYS PRESENTATION DES RAPPORTS DE STAGE (BACC SERIE TI)");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVisualiserEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserEtatsActionPerformed
        infoSaisies();
        Map<Centre, Integer> centreEffectif3Map = new HashMap<>();//contient l'ensemble des centres avec leur effectif 3
        Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
        ArrayList<String> typesBruts = new ArrayList<>();
        ArrayList<String> typesAconsiderer = new ArrayList<>();
        ArrayList<String> niveauxAconsiderer = new ArrayList<>();
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("INDEMNITE POUR CONVOYAGE 3 ET VENTILATION DES COPIES");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);

            boolean poursuivre = false;
            for (Caisse c : caisses) {
                if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                    poursuivre = true;
                    break;
                }
            }
            if (!poursuivre) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de convoyage 3 n'ont pas encore été créés pour ce groupe d'examens !");
            } else {
                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                //remplissage centreEffectif3Map
                tousNbentetes = metier.findAllNbentetesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                if (!tousNbentetes.isEmpty()) {
                    for (Nbentetes nbent : tousNbentetes) {
                        centreEffectif3Map.put(nbent.getCentre(), nbent.getNbent());
                    }
                }

                //recherche des types des examens à utiliser
                for (Examen examen : examensSelected) {
                    System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                    if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                        typesBruts.add("ESG");
                    }
                    if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                        typesBruts.add("ESTP");
                    }
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 2) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                //recherche des niveaux des examens à utiliser
                if (!niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add(niveauSelected);
                    niveauxAconsiderer.add("TOUT");
                }
                if (niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add("PROB");
                    niveauxAconsiderer.add("BACC");
                    niveauxAconsiderer.add("TOUT");
                }

                //recherche des centres de billetage
                for (String niveau : niveauxAconsiderer) {
                    for (String type : typesAconsiderer) {
                        List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                        for (Centrebilletage centrebilletage : desCentrebilletages) {
                            ArrayList<Souscentre> souscentresList = new ArrayList<>();
                            if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                for (Secteurcouv sect : secteurs) {
                                    if (!souscentresList.contains(sect.getSouscentre())) {
                                        souscentresList.add(sect.getSouscentre());

                                    }
                                }
                                centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                            }
                        }
                    }
                }

                try {
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    for (Region region : regions) {
                        for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                            int totalMontant = 0;
                            int num = 1;
                            if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                for (int i = 0; i < souscentresList.size(); i++) {
                                    Souscentre souscentre = souscentresList.get(i);
                                    //ce sous-centre doit être aussi centre c'est à dire abrié par un établissement qui abrite aussi un centre
                                    Centre sonCentre = new Centre();
                                    List<Centre> centres = metier.findAllCentres();
                                    for (Centre centre : centres) {
                                        if (centre.getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                                            sonCentre = centre;
                                            break;
                                        }
                                    }
                                    if (centreEffectif3Map.containsKey(sonCentre)) {
                                        determinerCoutESTP(centreEffectif3Map, sonCentre);
                                        int totalCMArrondi = (int) Math.ceil((double) totalCM / (double) 1000) * 1000;
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("examen", groupedexamensEnstring);
                                        row.put("session", anneeSelected);
                                        row.put("region", region.getNomreg());
                                        row.put("reference", "");
                                        row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                        row.put("num", num++);
                                        row.put("centre", sonCentre.getNomcent() + "\n\n" + nbcolisEnchaine);
                                        row.put("cm", "Chargé de Mission");
                                        row.put("effectif", effectif3);
                                        row.put("distance", distance);
                                        row.put("fraisconvCM", fraisconvCM);
                                        row.put("indemCM", indemCM);
                                        row.put("baspage", "OBC/AR/"+centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                        row.put("totalCM", totalCMArrondi);
                                        totalMontant += totalCMArrondi;//jasperreport prendra la dernière valeur de totalMontant
                                        row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatConvoyage3ESTPReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                examensSelected.clear();//on vide
                centreEffectif3Map.clear();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonVisualiserEtatsActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonCreerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEtatsActionPerformed
        infoSaisies();
        Map<Centre, Integer> centreEffectif3Map = new HashMap<>();//contient l'ensemble des centres avec leur effectif 3
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("INDEMNITE POUR CONVOYAGE 3 ET VENTILATION DES COPIES");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
            if (!caisses.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de convoyage 3 existent déjà pour ce groupe d'examens !");
            } else {
                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                //remplissage centreEffectif3Map
                tousNbentetes = metier.findAllNbentetesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                if (!tousNbentetes.isEmpty()) {
                    for (Nbentetes nbent : tousNbentetes) {
                        centreEffectif3Map.put(nbent.getCentre(), nbent.getNbent());
                    }
                }

                boolean testsicreer = false;

                try {
                    for (Centre centre : centreEffectif3Map.keySet()) {
                        determinerCoutESTP(centreEffectif3Map, centre);
                        int net = (int) Math.ceil((double) totalCM / (double) 1000) * 1000;
                        Souscentre souscentre = metier.findSouscentreByEtablissement(centre.getEtablissement().getAbreviation());
                        metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                        testsicreer = true;
                    }
                } catch (ObcbudgetException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                if (testsicreer) {
                    JOptionPane.showMessageDialog(this, "Etats de convoyage 3 créés avec succès pour ce groupe d'examens !");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
        }
        examensSelected.clear();//on vide
        centreEffectif3Map.clear();
    }//GEN-LAST:event_jButtonCreerEtatsActionPerformed

    private void jButtonMettreAjourEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourEtatsActionPerformed
        infoSaisies();
        Map<Centre, Integer> centreEffectif3Map = new HashMap<>();//contient l'ensemble des centres avec leur effectif 3
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de convoyage 3 pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("INDEMNITE POUR CONVOYAGE 3 ET VENTILATION DES COPIES");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de convoyage 3 n'existe pour ce groupe d'examens !");
                } else {
                    //on conserve quelques info de ces anciennes caisses
                    Groupe groupe = caisses.get(0).getGroupe();
                    sessionSelected = caisses.get(0).getSession();
                    //on supprime toutes les anciennes caisses du groupe d'examens
                    for (Caisse c : caisses) {
                        metier.supprimerCaisse(c);
                    }
                    //on va les recréer
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }

                    //remplissage centreEffectif3Map
                    tousNbentetes = metier.findAllNbentetesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!tousNbentetes.isEmpty()) {
                        for (Nbentetes nbent : tousNbentetes) {
                            centreEffectif3Map.put(nbent.getCentre(), nbent.getNbent());
                        }
                    }
                    boolean testsicreer = false;

                    try {
                        for (Centre centre : centreEffectif3Map.keySet()) {
                            determinerCoutESTP(centreEffectif3Map, centre);
                            int net = (int) Math.ceil((double) totalCM / (double) 1000) * 1000;
                            Souscentre souscentre = metier.findSouscentreByEtablissement(centre.getEtablissement().getAbreviation());
                            metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                            testsicreer = true;
                        }
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testsicreer) {
                        JOptionPane.showMessageDialog(this, "Etats de convoyage 3 créés avec succès pour ce groupe d'examens !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
            }
            examensSelected.clear();//on vide
            centreEffectif3Map.clear();
        }
    }//GEN-LAST:event_jButtonMettreAjourEtatsActionPerformed

    private void jButtonSupprimerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEtatsActionPerformed
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de convoyage 3 pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("INDEMNITE POUR CONVOYAGE 3 ET VENTILATION DES COPIES");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de convoyage 3 n'existe pour ce groupe d'examens !");
                } else {
                    boolean testsisupprimer = false;
                    try {
                        for (Caisse caisse : caisses) {
                            metier.supprimerCaisse(caisse);
                        }
                        testsisupprimer = true;
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testsisupprimer) {
                        JOptionPane.showMessageDialog(this, "Etats de convoyage 3 supprimés avec succès pour ce groupe d'examens !");
                    }
                }
            }
        }


    }//GEN-LAST:event_jButtonSupprimerEtatsActionPerformed

    private void jButtonAnnulerChoixExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixExamenActionPerformed
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        jComboBoxSession.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixExamenActionPerformed

    private void jButtonAnnulerChoixCentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixCentreActionPerformed
        jComboBoxRegion.setSelectedIndex(0);
        jComboBoxCentredeliberation.setSelectedIndex(0);
        jComboBoxDepartement.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixCentreActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jComboBoxRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionActionPerformed
        remplirDepartementCombobox();
    }//GEN-LAST:event_jComboBoxRegionActionPerformed

    private void jButtonCreerEffectif3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEffectif3ActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomCentredeliberationSelected.equals("---") || effectif3String.equals("")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un centre de délibétaion et donner l'effectif 3 !");
        } else {
            validerEffectif3(effectif3String);
            if (!continuer || effectif3 == 0) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. L'effectif 3 fourni est incorrect !");
            } else {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                for (Centre centre : tousLesCentresdeliberation) {
                    if (centre.getNomcent().equals(nomCentredeliberationSelected)) {
                        centredeliberationSelected = centre;
                        break;
                    }
                }

                try {
                    metier.creerNbentetes(new Nbentetes(centredeliberationSelected, groupe, sessionSelected, effectif3));
                    JOptionPane.showMessageDialog(this, "Effectif 3 enregistré avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de d'enregistrer l'effectif 3 dans le centre de délibération [" + nomCentredeliberationSelected + "]" + "\n raison:" + ex.getMessage());
                }
            }
        }

    }//GEN-LAST:event_jButtonCreerEffectif3ActionPerformed

    private void jButtonSupprimerEffectif3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEffectif3ActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomCentredeliberationSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session et un centre de délibération !");
        } else {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer l'effectif 3 du centre de délibération [" + nomCentredeliberationSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                anneeSelected = Integer.parseInt(anneeString);
                try {
                    Nbentetes nbentetes = metier.findNbentetesD1CentredeliberationD1GroupedexamensD1Session(nomCentredeliberationSelected, anneeSelected, niveauSelected, typeSelected);
                    metier.supprimerNbentetes(nbentetes);
                    JOptionPane.showMessageDialog(this, "Effectif 3 supprimé avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer l'effectif 3 du centre de délibération [" + nomCentredeliberationSelected + "] \n raison:" + ex.getMessage());
                }
            }
        }

    }//GEN-LAST:event_jButtonSupprimerEffectif3ActionPerformed

    private void jButtonListerEffectif3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerEffectif3ActionPerformed
        infoSaisies();
        Map<Centre, Integer> centreEffectif3Map = new HashMap<>();//contient chaque centre avec l'effectif 3 correspondant
        if (groupedexamensEnstring.equals("") || anneeString.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens et une session !");
        } else {
            anneeSelected = Integer.parseInt(anneeString);
            tousNbentetes = metier.findAllNbentetesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
            if (!tousNbentetes.isEmpty()) {
                for (Nbentetes nbent : tousNbentetes) {
                    centreEffectif3Map.put(nbent.getCentre(), nbent.getNbent());
                }
            }

            if (!tousNbentetes.isEmpty()) {
                try {
                    List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                    for (Region region : regions) {
                        int i = 1;
                        for (Centre centre : centreEffectif3Map.keySet()) {
                            if (centre.getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                                Map<String, Object> row = new HashMap<>();
                                row.put("session", anneeSelected);
                                row.put("examen", groupedexamensEnstring);
                                row.put("region", region.getNomreg());
                                row.put("num", i++);
                                row.put("centre", centre.getNomcent());
                                row.put("effectif", centreEffectif3Map.get(centre));
                                datasource.add(row);
                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeEffectif3Report.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Aucun effectif 3 trouvé dans la base de données !");
            }
        }
        centreEffectif3Map.clear();
    }//GEN-LAST:event_jButtonListerEffectif3ActionPerformed

    private void jComboBoxDepartementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementActionPerformed
        remplirCentredeliberationCombobox();
    }//GEN-LAST:event_jComboBoxDepartementActionPerformed

    private void jComboBoxCentredeliberationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCentredeliberationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxCentredeliberationActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatConvoyage3.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatConvoyage3.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatConvoyage3.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatConvoyage3.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatConvoyage3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonAnnulerChoixCentre;
    private javax.swing.JButton jButtonAnnulerChoixExamen;
    private javax.swing.JButton jButtonCreerEffectif3;
    private javax.swing.JButton jButtonCreerEtats;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonListerEffectif3;
    private javax.swing.JButton jButtonMettreAjourEtats;
    private javax.swing.JButton jButtonSupprimerEffectif3;
    private javax.swing.JButton jButtonSupprimerEtats;
    private javax.swing.JButton jButtonVisualiserEtats;
    private javax.swing.JComboBox<String> jComboBoxCentredeliberation;
    private javax.swing.JComboBox<String> jComboBoxDepartement;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxRegion;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelDepartement;
    private javax.swing.JLabel jLabelEffectif3;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelNomCentredeliberation;
    private javax.swing.JLabel jLabelRegion;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanelChoixCentre;
    private javax.swing.JPanel jPanelChoixExamen;
    private javax.swing.JPanel jPanelGestionEtat;
    private javax.swing.JPanel jPanelJurys;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldEffectif3;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Region> regions = null;
    private List<Examen> examens = null;
    private Examen examenSelected = null;
    private String[] examensList = null;
    private List<Examen> examensSelected = new ArrayList<>();
    private List<Departement> departements = null;
    private String[] sessionsCombo = null;
    private String[] regionsCombo = null;
    private String[] departementsCombo = null;
    private String[] centresdeliberationCombo = null;
    private String nomRegionSelected = "";
    private String nomCentredeliberationSelected = "";
    private String nomDepartementSelected = "";
    private List<Centredispatching> centresregroupement = null;
    private List<Centredispatching> tousLesCentresregroupement = null;
    private List<Centre> centresdeliberation = null;
    private List<Centre> tousLesCentresdeliberation = null;
    private Centre centredeliberationSelected = null;
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private List<Caisse> caisses = null;
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private int tauxcolis = 500, nbplaces = 0, coutplace = 14, nbcolis = 0, prixplace = 0, distance = 0, fraisconvCM = 0, indemCM = 0, totalCM = 0;
    private int[] tabColis = new int[3];
    private String phasesPourAffichage = "";
    private boolean continuer = false;
    private int effectif3 = 0;
    private String effectif3String = "";
    private List<Nbentetes> tousNbentetes = null;
    private List<Nbcopiesdispatchees> nbcopiesdispatchees = null;
    private List<Rattachregroupement> rattachregroupements = null;
    private String nbcolisEnchaine = "";
    private boolean resultTestRattacherAregroupement = false;
    private boolean resultTestRattacherAventilation = false;
    private Rattachdispatching rattachdispatchingAregroupement = null;//rattach souscentre à regroupement
    private Rattachdispatching rattachdispatchingAventilation = null;//rattach souscentre à ventilation

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        regions = metier.findAllRegions();
        examens = metier.findAllExamens();
        tousLesCentresdeliberation = metier.findAllCentres();
        tousLesCentresregroupement = metier.findAllCentredispatchingD1Type("Regroupement");
        rattachregroupements = metier.findAllRattachregroupements();

        //on remplit la combobox des régions du sous-centre
        regionsCombo = new String[regions.size() + 1];
        regionsCombo[0] = "---";
        int i = 1;
        for (Region region : regions) {
            regionsCombo[i++] = region.getNomreg();
        }
        jComboBoxRegion.setModel(new DefaultComboBoxModel(regionsCombo));

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int k = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[k++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "GEN", "IND", "IND PROF", "STT", "STT PROF", "TOUT", "TOUT ESTI", "TOUT STT", "TOUT ESTP"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC", "TOUT"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));
    }

    private void infoSaisies() {
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        nomCentredeliberationSelected = (String) jComboBoxCentredeliberation.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        effectif3String = jTextFieldEffectif3.getText();
    }

    private void remplirDepartementCombobox() {
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        departements = metier.findAllDepartementsD1Region(nomRegionSelected);
        //on remplit la combobox des départements
        departementsCombo = new String[departements.size() + 1];
        departementsCombo[0] = "---";
        int i = 1;
        for (Departement departement : departements) {
            departementsCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartement.setModel(new DefaultComboBoxModel(departementsCombo));
    }

    private void remplirCentredeliberationCombobox() {
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        centresdeliberation = metier.findAllCentresD1Departement(nomDepartementSelected);
        //on remplit la combobox des centres de délibération
        centresdeliberationCombo = new String[centresdeliberation.size() + 1];
        centresdeliberationCombo[0] = "---";
        int i = 1;
        for (Centre centre : centresdeliberation) {
            centresdeliberationCombo[i++] = centre.getNomcent();
        }
        jComboBoxCentredeliberation.setModel(new DefaultComboBoxModel(centresdeliberationCombo));

    }

    private void validerEffectif3(String nbreString) {
        try {
            effectif3 = Integer.parseInt(nbreString);
            continuer = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, " L'effectif 3 doit être fourni et contenir uniquement des chiffres entiers!");
            continuer = false;
        }
    }

    // ESG NON CONCERNE
    //acheminement des documents de délibération des centres de ventilation ou de regroupement vers les centres de délibération par les CM
    private void determinerCoutESTP(Map<Centre, Integer> centreEffectif3Map, Centre centre) {
        effectif3 = 0;
        tauxcolis = 500;
        effectif3 = centreEffectif3Map.get(centre);
        //ce centre (via le sous-centre correspondant) peut être rattaché à un centre de regroupement ou de ventilation
        //on recherche la distance selon le cas

        Rattachregroupement sonRattachregroupement = new Rattachregroupement();
        for (Rattachregroupement rattach : rattachregroupements) {
            if (rattach.getEtablissement().getAbreviation().equals(centre.getEtablissement().getAbreviation())) {
                sonRattachregroupement = rattach;
            }
        }
        distance = sonRattachregroupement.getDistance();
        prixplace = sonRattachregroupement.getPrixplace();

        tabColis[0] = 0;
        tabColis[1] = (int) Math.ceil((double) effectif3 / (double) 100);
        tabColis[2] = (int) Math.ceil((double) effectif3 / (double) 100);

        nbcolis = tabColis[0] + tabColis[1] + tabColis[2];
        nbcolisEnchaine = "(" + tabColis[0] + "," + tabColis[1] + "," + tabColis[2] + ")";
        
        Souscentre souscentre=metier.findSouscentreByEtablissement(centre.getEtablissement().getAbreviation());
        if (distance == 0 && testSiCentreDeVentilation(souscentre)) {
            fraisconvCM = tauxcolis * nbcolis;
        }
        if (distance == 0 && !testSiCentreDeVentilation(souscentre)) {//on donne un forfait de 3000 F de transport pour les centres urbains non ventilation ie distance=0
            fraisconvCM = tauxcolis * nbcolis + 3000;
        }
        if (distance > 0 && distance / 2 <= 100) {//on donne un forfait de 5000 F de transport pour l'aller
            fraisconvCM = tauxcolis * nbcolis + 14 * prixplace + 5000;
        }
        if (distance / 2 > 100 && distance / 2 <= 200) {//on donne un forfait de 10000 F de transport pour l'aller
            fraisconvCM = tauxcolis * nbcolis + 14 * prixplace + 10000;
        }
        if (distance / 2 > 200) {//on donne un forfait de 15000 F de transport pour l'aller
            fraisconvCM = tauxcolis * nbcolis + 14 * prixplace + 15000;
        }
        indemCM = 25000;

        if (distance == 0) {
            indemCM = 0;
        }

        totalCM = fraisconvCM + indemCM;
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    private boolean testerSiRattacherAcentreregroupement(Souscentre souscentre) {
        resultTestRattacherAregroupement = false;
        try {
            rattachdispatchingAregroupement = metier.findRattachdispatchingD1SouscentreD1Type(souscentre.getNomsouscent(), "Regroupement"); //metier.findRattachregroupementD1Souscentre(souscentre.getNomsouscent());//permet de recupérer la la distance
            resultTestRattacherAregroupement = true;
        } catch (ObcbudgetException ex) {
            resultTestRattacherAregroupement = false;
        }
        return resultTestRattacherAregroupement;
    }

    private boolean testerSiRattacherAcentreventilation(Souscentre souscentre) {
        resultTestRattacherAventilation = false;
        try {
            rattachdispatchingAventilation = metier.findRattachdispatchingD1SouscentreD1Type(souscentre.getNomsouscent(), "Ventilation"); //metier.findRattachregroupementD1Souscentre(souscentre.getNomsouscent());//permet de recupérer la la distance
            resultTestRattacherAventilation = true;
        } catch (ObcbudgetException ex) {
            resultTestRattacherAventilation = false;
        }
        return resultTestRattacherAventilation;
    }

    private boolean testSiCentreDeVentilation(Souscentre souscentre) {
        //on déterminent la liste des centres de ventilation
        List<Centredispatching> centresVentilation = metier.findAllCentredispatchingD1Type("Ventilation");
        boolean valTest = false;
        for (Centredispatching centreventilation : centresVentilation) {
            if (centreventilation.getEtablissement().getNometab().equals(souscentre.getEtablissement().getNometab())) {
                //le même établissement abrite ce sous-centre et un centre de ventilation
                valTest = true;
                break;
            }
        }
        return valTest;
    }
}
