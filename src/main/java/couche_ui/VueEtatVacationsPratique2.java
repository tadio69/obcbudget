package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Arrondissement;
import couche_jpa.Caisse;
import couche_jpa.Centrebilletage;
import couche_jpa.Departement;
import couche_jpa.Eltjurypratique2;
import couche_jpa.Examen;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Jurypratique2;
import couche_jpa.Nature;
import couche_jpa.Nbadmissibles;
import couche_jpa.Nbepreuveprof;
import couche_jpa.Option;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_jpa.Sousfamille;
import couche_jpa.Specialisation;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueEtatVacationsPratique2 extends javax.swing.JFrame {

    public VueEtatVacationsPratique2() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButtonFermer = new javax.swing.JButton();
        jPanelChoixExamen = new javax.swing.JPanel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixExamen = new javax.swing.JButton();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelExamen = new javax.swing.JLabel();
        jPanelChoixCentre = new javax.swing.JPanel();
        jLabelRegion = new javax.swing.JLabel();
        jComboBoxRegion = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixSouscentre = new javax.swing.JButton();
        jLabelDepartement = new javax.swing.JLabel();
        jComboBoxDepartement = new javax.swing.JComboBox<>();
        jLabelNomCentre = new javax.swing.JLabel();
        jComboBoxSouscentre = new javax.swing.JComboBox<>();
        jLabelArrondissement = new javax.swing.JLabel();
        jComboBoxArrondissement = new javax.swing.JComboBox<>();
        jPanelNbexaminNbvacChefAtelierNbadmissib = new javax.swing.JPanel();
        jLabelNbvac = new javax.swing.JLabel();
        jTextFieldNbvac = new javax.swing.JTextField();
        jButtonCreerNbexaminNbvacChefAtelierNbadmissib = new javax.swing.JButton();
        jButtonListerNbexaminNbvacChefAtelierNbadmissib = new javax.swing.JButton();
        jLabelNbexamin = new javax.swing.JLabel();
        jLabelNbchefatel = new javax.swing.JLabel();
        jTextFieldNbchefAtelier = new javax.swing.JTextField();
        jButtonAnnulerNbexaminNbvacChefAtelierNbadmissib = new javax.swing.JButton();
        jTextFieldNbexaminateurs = new javax.swing.JTextField();
        jLabelSpecialite = new javax.swing.JLabel();
        jComboBoxSpecialite = new javax.swing.JComboBox<>();
        jButtonSupprimerNbexaminNbvacChefAtelierNbadmissib = new javax.swing.JButton();
        jPanelGestionEtat = new javax.swing.JPanel();
        jButtonCreerEtats = new javax.swing.JButton();
        jButtonMettreAjourEtats = new javax.swing.JButton();
        jButtonVisualiserEtats = new javax.swing.JButton();
        jButtonSupprimerEtats = new javax.swing.JButton();
        jPanelNbmbreSecretChefTravaux = new javax.swing.JPanel();
        jLabelNbmbresSecretariat = new javax.swing.JLabel();
        jTextFieldNbmbresSecretariat = new javax.swing.JTextField();
        jButtonCreerNbmbreSecretChefTravaux = new javax.swing.JButton();
        jButtonSupprimerNbmbreSecretChefTravaux = new javax.swing.JButton();
        jButtonListerNbmbreSecretChefTravaux = new javax.swing.JButton();
        jLabelNbChefsTravaux = new javax.swing.JLabel();
        jTextFieldNbchefsTravaux = new javax.swing.JTextField();
        jButtonAnnulerNbmbreSecretChefTravaux = new javax.swing.JButton();
        jPanelChoixTypeNombreAenregistrer = new javax.swing.JPanel();
        jRadioButtonNbexaminNbvacChefAtelier = new javax.swing.JRadioButton();
        jRadioButtonNbmbreSecretChefTravaux = new javax.swing.JRadioButton();
        jButtonAnnulerChoixTypeNbreAenregistrer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT VACATIONS PRATIQUE 2");

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jPanelChoixExamen.setBackground(new java.awt.Color(102, 255, 153));
        jPanelChoixExamen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un groupe d'examens et une session", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixExamen.setText("Annuler");
        jButtonAnnulerChoixExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixExamenActionPerformed(evt);
            }
        });

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        javax.swing.GroupLayout jPanelChoixExamenLayout = new javax.swing.GroupLayout(jPanelChoixExamen);
        jPanelChoixExamen.setLayout(jPanelChoixExamenLayout);
        jPanelChoixExamenLayout.setHorizontalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(0, 32, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addGap(26, 26, 26))
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabelSession)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jButtonAnnulerChoixExamen)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixExamenLayout.setVerticalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanelChoixCentre.setBackground(new java.awt.Color(153, 255, 255));
        jPanelChoixCentre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un sous-centre de pratique", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jLabelRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegion.setText("Région :");

        jComboBoxRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixSouscentre.setText("Annuler");
        jButtonAnnulerChoixSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixSouscentreActionPerformed(evt);
            }
        });

        jLabelDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartement.setText("Département :");

        jComboBoxDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementActionPerformed(evt);
            }
        });

        jLabelNomCentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNomCentre.setText("Sous-centre de pratique :");

        jComboBoxSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSouscentreActionPerformed(evt);
            }
        });

        jLabelArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissement.setText("Arrondissement :");

        jComboBoxArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixCentreLayout = new javax.swing.GroupLayout(jPanelChoixCentre);
        jPanelChoixCentre.setLayout(jPanelChoixCentreLayout);
        jPanelChoixCentreLayout.setHorizontalGroup(
            jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelRegion)
                    .addComponent(jLabelDepartement)
                    .addComponent(jLabelNomCentre)
                    .addComponent(jLabelArrondissement))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                        .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(82, 82, 82)
                        .addComponent(jButtonAnnulerChoixSouscentre))
                    .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 537, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixCentreLayout.setVerticalGroup(
            jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNomCentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelNbexaminNbvacChefAtelierNbadmissib.setBackground(new java.awt.Color(255, 204, 204));
        jPanelNbexaminNbvacChefAtelierNbadmissib.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Examinateurs/Vacations/Chefs d'atelier", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabelNbvac.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbvac.setText("Nbre vac./examin. :");

        jTextFieldNbvac.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonCreerNbexaminNbvacChefAtelierNbadmissib.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerNbexaminNbvacChefAtelierNbadmissib.setText("Créer");
        jButtonCreerNbexaminNbvacChefAtelierNbadmissib.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerNbexaminNbvacChefAtelierNbadmissibActionPerformed(evt);
            }
        });

        jButtonListerNbexaminNbvacChefAtelierNbadmissib.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonListerNbexaminNbvacChefAtelierNbadmissib.setText("Lister");
        jButtonListerNbexaminNbvacChefAtelierNbadmissib.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerNbexaminNbvacChefAtelierNbadmissibActionPerformed(evt);
            }
        });

        jLabelNbexamin.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbexamin.setText("Nbre examin. :");

        jLabelNbchefatel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbchefatel.setText("Nbre chefs atelier :");

        jTextFieldNbchefAtelier.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonAnnulerNbexaminNbvacChefAtelierNbadmissib.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerNbexaminNbvacChefAtelierNbadmissib.setText("Annuler");
        jButtonAnnulerNbexaminNbvacChefAtelierNbadmissib.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerNbexaminNbvacChefAtelierNbadmissibActionPerformed(evt);
            }
        });

        jTextFieldNbexaminateurs.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelSpecialite.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSpecialite.setText("Spécialité :");

        jComboBoxSpecialite.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonSupprimerNbexaminNbvacChefAtelierNbadmissib.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerNbexaminNbvacChefAtelierNbadmissib.setText("Supprimer");
        jButtonSupprimerNbexaminNbvacChefAtelierNbadmissib.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerNbexaminNbvacChefAtelierNbadmissibActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelNbexaminNbvacChefAtelierNbadmissibLayout = new javax.swing.GroupLayout(jPanelNbexaminNbvacChefAtelierNbadmissib);
        jPanelNbexaminNbvacChefAtelierNbadmissib.setLayout(jPanelNbexaminNbvacChefAtelierNbadmissibLayout);
        jPanelNbexaminNbvacChefAtelierNbadmissibLayout.setHorizontalGroup(
            jPanelNbexaminNbvacChefAtelierNbadmissibLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNbexaminNbvacChefAtelierNbadmissibLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanelNbexaminNbvacChefAtelierNbadmissibLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelNbexaminNbvacChefAtelierNbadmissibLayout.createSequentialGroup()
                        .addComponent(jLabelSpecialite)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxSpecialite, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jLabelNbexamin))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelNbexaminNbvacChefAtelierNbadmissibLayout.createSequentialGroup()
                        .addComponent(jLabelNbvac)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldNbvac, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(jLabelNbchefatel)))
                .addGroup(jPanelNbexaminNbvacChefAtelierNbadmissibLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelNbexaminNbvacChefAtelierNbadmissibLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jTextFieldNbexaminateurs, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelNbexaminNbvacChefAtelierNbadmissibLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldNbchefAtelier, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(jPanelNbexaminNbvacChefAtelierNbadmissibLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelNbexaminNbvacChefAtelierNbadmissibLayout.createSequentialGroup()
                        .addComponent(jButtonCreerNbexaminNbvacChefAtelierNbadmissib)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonAnnulerNbexaminNbvacChefAtelierNbadmissib))
                    .addGroup(jPanelNbexaminNbvacChefAtelierNbadmissibLayout.createSequentialGroup()
                        .addComponent(jButtonListerNbexaminNbvacChefAtelierNbadmissib)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonSupprimerNbexaminNbvacChefAtelierNbadmissib)))
                .addGap(0, 10, Short.MAX_VALUE))
        );
        jPanelNbexaminNbvacChefAtelierNbadmissibLayout.setVerticalGroup(
            jPanelNbexaminNbvacChefAtelierNbadmissibLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNbexaminNbvacChefAtelierNbadmissibLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanelNbexaminNbvacChefAtelierNbadmissibLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelNbexaminNbvacChefAtelierNbadmissibLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelSpecialite, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxSpecialite, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelNbexamin, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldNbexaminateurs, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelNbexaminNbvacChefAtelierNbadmissibLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonCreerNbexaminNbvacChefAtelierNbadmissib, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonAnnulerNbexaminNbvacChefAtelierNbadmissib, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanelNbexaminNbvacChefAtelierNbadmissibLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNbvac, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNbvac, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonListerNbexaminNbvacChefAtelierNbadmissib, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSupprimerNbexaminNbvacChefAtelierNbadmissib, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNbchefatel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNbchefAtelier, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelGestionEtat.setBackground(new java.awt.Color(153, 204, 255));
        jPanelGestionEtat.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer l'état", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jButtonCreerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEtats.setText("Créer");
        jButtonCreerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEtatsActionPerformed(evt);
            }
        });

        jButtonMettreAjourEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjourEtats.setText("Mettre à jour");
        jButtonMettreAjourEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourEtatsActionPerformed(evt);
            }
        });

        jButtonVisualiserEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserEtats.setText("Visualiser");
        jButtonVisualiserEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserEtatsActionPerformed(evt);
            }
        });

        jButtonSupprimerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEtats.setText("Supprimer");
        jButtonSupprimerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEtatsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelGestionEtatLayout = new javax.swing.GroupLayout(jPanelGestionEtat);
        jPanelGestionEtat.setLayout(jPanelGestionEtatLayout);
        jPanelGestionEtatLayout.setHorizontalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jButtonCreerEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonMettreAjourEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiserEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerEtats)
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanelGestionEtatLayout.setVerticalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonMettreAjourEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCreerEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonSupprimerEtats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVisualiserEtats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanelNbmbreSecretChefTravaux.setBackground(new java.awt.Color(255, 204, 255));
        jPanelNbmbreSecretChefTravaux.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Secrétariat/Chefs de travaux", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabelNbmbresSecretariat.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbmbresSecretariat.setText("Nbre Mbres secrétariat :");

        jTextFieldNbmbresSecretariat.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonCreerNbmbreSecretChefTravaux.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerNbmbreSecretChefTravaux.setText("Créer");
        jButtonCreerNbmbreSecretChefTravaux.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerNbmbreSecretChefTravauxActionPerformed(evt);
            }
        });

        jButtonSupprimerNbmbreSecretChefTravaux.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerNbmbreSecretChefTravaux.setText("Supprimer");
        jButtonSupprimerNbmbreSecretChefTravaux.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerNbmbreSecretChefTravauxActionPerformed(evt);
            }
        });

        jButtonListerNbmbreSecretChefTravaux.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonListerNbmbreSecretChefTravaux.setText("Lister");
        jButtonListerNbmbreSecretChefTravaux.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerNbmbreSecretChefTravauxActionPerformed(evt);
            }
        });

        jLabelNbChefsTravaux.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbChefsTravaux.setText("Nbre chef travaux :");

        jTextFieldNbchefsTravaux.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonAnnulerNbmbreSecretChefTravaux.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerNbmbreSecretChefTravaux.setText("Annuler");
        jButtonAnnulerNbmbreSecretChefTravaux.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerNbmbreSecretChefTravauxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelNbmbreSecretChefTravauxLayout = new javax.swing.GroupLayout(jPanelNbmbreSecretChefTravaux);
        jPanelNbmbreSecretChefTravaux.setLayout(jPanelNbmbreSecretChefTravauxLayout);
        jPanelNbmbreSecretChefTravauxLayout.setHorizontalGroup(
            jPanelNbmbreSecretChefTravauxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNbmbreSecretChefTravauxLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanelNbmbreSecretChefTravauxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelNbChefsTravaux)
                    .addComponent(jLabelNbmbresSecretariat))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelNbmbreSecretChefTravauxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldNbmbresSecretariat, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNbchefsTravaux, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelNbmbreSecretChefTravauxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonCreerNbmbreSecretChefTravaux)
                    .addComponent(jButtonListerNbmbreSecretChefTravaux))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelNbmbreSecretChefTravauxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonAnnulerNbmbreSecretChefTravaux)
                    .addComponent(jButtonSupprimerNbmbreSecretChefTravaux))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelNbmbreSecretChefTravauxLayout.setVerticalGroup(
            jPanelNbmbreSecretChefTravauxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNbmbreSecretChefTravauxLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanelNbmbreSecretChefTravauxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNbmbresSecretariat, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNbmbresSecretariat, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCreerNbmbreSecretChefTravaux, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerNbmbreSecretChefTravaux, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelNbmbreSecretChefTravauxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNbChefsTravaux, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNbchefsTravaux, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSupprimerNbmbreSecretChefTravaux, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonListerNbmbreSecretChefTravaux, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanelChoixTypeNombreAenregistrer.setBackground(new java.awt.Color(0, 255, 204));
        jPanelChoixTypeNombreAenregistrer.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Que voulez-vous enregistrer ?", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 102, 255))); // NOI18N

        jRadioButtonNbexaminNbvacChefAtelier.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jRadioButtonNbexaminNbvacChefAtelier.setText("Le nombre d'examinateurs/vacations/chefs d'atelier");
        jRadioButtonNbexaminNbvacChefAtelier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonNbexaminNbvacChefAtelierActionPerformed(evt);
            }
        });

        jRadioButtonNbmbreSecretChefTravaux.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jRadioButtonNbmbreSecretChefTravaux.setText("Le nombre de membres de secrétariat/chefs de travaux");
        jRadioButtonNbmbreSecretChefTravaux.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonNbmbreSecretChefTravauxActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixTypeNbreAenregistrer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixTypeNbreAenregistrer.setText("Annuler");
        jButtonAnnulerChoixTypeNbreAenregistrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixTypeNbreAenregistrerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixTypeNombreAenregistrerLayout = new javax.swing.GroupLayout(jPanelChoixTypeNombreAenregistrer);
        jPanelChoixTypeNombreAenregistrer.setLayout(jPanelChoixTypeNombreAenregistrerLayout);
        jPanelChoixTypeNombreAenregistrerLayout.setHorizontalGroup(
            jPanelChoixTypeNombreAenregistrerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixTypeNombreAenregistrerLayout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jRadioButtonNbexaminNbvacChefAtelier)
                .addGap(18, 18, 18)
                .addComponent(jButtonAnnulerChoixTypeNbreAenregistrer)
                .addContainerGap())
            .addGroup(jPanelChoixTypeNombreAenregistrerLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jRadioButtonNbmbreSecretChefTravaux)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixTypeNombreAenregistrerLayout.setVerticalGroup(
            jPanelChoixTypeNombreAenregistrerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixTypeNombreAenregistrerLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanelChoixTypeNombreAenregistrerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAnnulerChoixTypeNbreAenregistrer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonNbexaminNbvacChefAtelier))
                .addGap(18, 18, 18)
                .addComponent(jRadioButtonNbmbreSecretChefTravaux)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(331, 331, 331)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanelChoixCentre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jPanelChoixTypeNombreAenregistrer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanelNbexaminNbvacChefAtelierNbadmissib, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanelNbmbreSecretChefTravaux, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonFermer)
                                .addGap(24, 24, 24)))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelChoixCentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelChoixTypeNombreAenregistrer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelNbexaminNbvacChefAtelierNbadmissib, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelNbmbreSecretChefTravaux, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jLabel1.getAccessibleContext().setAccessibleName("ETAT CM (PRATIQUE SERIE E)  ET JURYS PRESENTATION DES RAPPORTS DE STAGE (BACC SERIE TI)");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVisualiserEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserEtatsActionPerformed
        infoSaisies();
        Map<Option, Integer> optionNbepreuvepratique2Map = new HashMap<>();//contient chaque spécialité du groupe d'examens sélectionné chacune avec son nombre d'épreuves pratiques 2
        Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
        List<Souscentre> souscentresRattachesList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session
        Map<Souscentre, ArrayList<Jurypratique2>> souscentreJurypratique2Map = new HashMap<>();//contient chaque sous-centre et le tableau de ses jurypratique2
        Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
        ArrayList<String> typesBruts = new ArrayList<>();
        ArrayList<String> typesAconsiderer = new ArrayList<>();
        ArrayList<String> niveauxAconsiderer = new ArrayList<>();
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATIONS PRATIQUE 2");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);

            boolean poursuivre = false;
            for (Caisse c : caisses) {
                if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                    poursuivre = true;
                    break;
                }
            }
            if (!poursuivre) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de vacations de pratique 2 n'ont pas encore été créés pour ce groupe d'examens !");
            } else {
                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                for (Examen e : examensSelected) {
                    //remplissage de optionNbepreuvepratique2Map 
                    for (Nbepreuveprof nbepprat : nbereuveprofs) {
                        if (nbepprat.getExamen().getSigle().equals(e.getSigle())) {
                            optionNbepreuvepratique2Map.put(nbepprat.getOption(), nbepprat.getNbprofpratique2());
                        }
                    }

                    //remplissage de souscentresRattachesList
                    List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                    for (Nature n : lesNats) {
                        Souscentre unSouscentre = n.getSouscentre();
                        if (!souscentresRattachesList.contains(unSouscentre)) {
                            souscentresRattachesList.add(unSouscentre);
                        }
                    }
                    //remplissage de souscentrePhasesMap
                    for (int j = 0; j < souscentresRattachesList.size(); j++) {
                        ArrayList<Character> phasesList = new ArrayList<>();
                        Souscentre s = souscentresRattachesList.get(j);
                        for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                            if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                if (!phasesList.contains(n.getActivite().getInitiale())) {
                                    phasesList.add(n.getActivite().getInitiale());
                                }
                                //pas de break ici car on doit parcourir tous lesNats
                            }
                        }
                        if (!souscentrePhasesMap.containsKey(s)) {
                            souscentrePhasesMap.put(s, phasesList);
                        } else {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                            ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                            for (int k = 0; k < phasesList.size(); k++) {
                                if (!phasesList1.contains(phasesList.get(k))) {
                                    phasesList1.add(phasesList.get(k));
                                }
                            }
                            Collections.sort(phasesList1);
                            souscentrePhasesMap.put(s, phasesList1);
                        }
                    }
                }

                desEltjuryspratique2 = metier.findAllEltjurypratique2D1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                juryspratique2 = metier.findAllJuryspratique2D1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                nbadmissibles = metier.findAllNbadmissiblesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                //recherche des types des examens à utiliser
                for (Examen examen : examensSelected) {
                    System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                    if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                        typesBruts.add("ESG");
                    }
                    if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                        typesBruts.add("ESTP");
                    }
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 2) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                //recherche des niveaux des examens à utiliser
                if (!niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add(niveauSelected);
                    niveauxAconsiderer.add("TOUT");
                }
                if (niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add("PROB");
                    niveauxAconsiderer.add("BACC");
                    niveauxAconsiderer.add("TOUT");
                }

                //recherche des centres de billetage
                for (String niveau : niveauxAconsiderer) {
                    for (String type : typesAconsiderer) {
                        List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                        for (Centrebilletage centrebilletage : desCentrebilletages) {
                            ArrayList<Souscentre> souscentresList = new ArrayList<>();
                            if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                for (Secteurcouv sect : secteurs) {
                                    if (!souscentresList.contains(sect.getSouscentre())) {
                                        souscentresList.add(sect.getSouscentre());
                                    }
                                }
                                centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                            }
                        }
                    }
                }
                if (desEltjuryspratique2.isEmpty() || juryspratique2.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Aucune donnée de pratique 2 trouvée dans la base des données !");
                } else {
                    //remplissage de souscentre souscentreJurypratique2Map
                    for (Souscentre souscentre : souscentresRattachesList) {
                        ArrayList<Jurypratique2> jurypratique2D1souscentreList = new ArrayList<>();//liste des jurypratique2 du souscentre courant
                        for (Jurypratique2 juryprat : juryspratique2) {
                            if (juryprat.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent()) && !jurypratique2D1souscentreList.contains(juryprat)) {
                                jurypratique2D1souscentreList.add(juryprat);
                            }
                        }
                        if (!jurypratique2D1souscentreList.isEmpty()) {
                            souscentreJurypratique2Map.put(souscentre, jurypratique2D1souscentreList);
                        }
                    }
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                int totalMontant = 0;
                                if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                    for (int i = 0; i < souscentresList.size(); i++) {
                                        Souscentre souscentre = souscentresList.get(i);
                                        if (souscentreJurypratique2Map.containsKey(souscentre)) {
                                            int num = 1;
                                            int nbseccheftrav = 0, vacseccheftrav = 0, total = 0;
                                            ArrayList<Jurypratique2> jurypratique2List = souscentreJurypratique2Map.get(souscentre);
                                            int nbj = jurypratique2List.size();
                                            for (int p = 0; p <= nbj + 1; p++) {
                                                if (p == nbj) {
                                                    optionAffichee = "Secrétariat";
                                                    determinerCoutVacsecEtcheftravaux(souscentrePhasesMap, souscentre, desEltjuryspratique2);
                                                    nbseccheftrav = nbmbresec;
                                                    vacseccheftrav = coutvacsec;
                                                    nbadmissib = 0;
                                                    nbepreuveprat2 = 0;
                                                    nbexamin = 0;
                                                    nbvacparens = 0;
                                                    nbvactotal = 0;
                                                    coutvac = 0;
                                                    nbcopies = 0;
                                                    coutcopies = 0;
                                                    nbchefatel = 0;
                                                    montantchefatel = 0;
                                                    supplement = 0;
                                                    total = coutvacsec;
                                                }
                                                if (p == nbj + 1) {
                                                    optionAffichee = "Prép. Mat. d'oeuvre\n (Chef Travaux)";//,coutvaccheftrav
                                                    determinerCoutVacsecEtcheftravaux(souscentrePhasesMap, souscentre, desEltjuryspratique2);
                                                    nbseccheftrav = nbcheftrav;
                                                    vacseccheftrav = coutvaccheftrav;
                                                    nbadmissib = 0;
                                                    nbepreuveprat2 = 0;
                                                    nbexamin = 0;
                                                    nbvacparens = 0;
                                                    nbvactotal = 0;
                                                    coutvac = 0;
                                                    nbcopies = 0;
                                                    coutcopies = 0;
                                                    nbchefatel = 0;
                                                    montantchefatel = 0;
                                                    supplement = 0;
                                                    total = coutvaccheftrav;
                                                }
                                                if (p < nbj) {
                                                    determinerCoutD1Jurypratique2(optionNbepreuvepratique2Map, jurypratique2List.get(p), nbadmissibles);
                                                    nbseccheftrav = 0;
                                                    vacseccheftrav = 0;
                                                    total = totalJurypratique2;
                                                }

                                                Map<String, Object> row = new HashMap<>();
                                                row.put("examen", groupedexamensEnstring);
                                                row.put("session", anneeSelected);
                                                row.put("reference", "");
                                                row.put("region", region.getNomreg());
                                                row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                row.put("num", num++);
                                                row.put("souscentre", souscentre.getNomsouscent());
                                                row.put("option", optionAffichee);
                                                row.put("nbadmissib", nbadmissib);
                                                row.put("nbepreuveprat2", nbepreuveprat2);
                                                row.put("nbexamin", nbexamin);
                                                row.put("nbvacparens", nbvacparens);
                                                row.put("nbvactotal", nbvactotal);
                                                row.put("coutvac", coutvac);
                                                row.put("nbcopies", nbcopies);
                                                row.put("coutcopies", coutcopies);
                                                row.put("nbchefatel", nbchefatel);
                                                row.put("montantchefatel", montantchefatel);
                                                row.put("supplement", supplement);
                                                row.put("nbseccheftrav", nbseccheftrav);
                                                row.put("vacseccheftrav", vacseccheftrav);
                                                row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                row.put("total", totalArrondi);
                                                totalMontant += totalArrondi;//jasperreport prendra la dernière valeur de totalMontant
                                                row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                datasource.add(row);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatVacationsPratique2Report.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    examensSelected.clear();//on vide
                    souscentrePhasesMap.clear();
                    souscentresRattachesList.clear();
                    optionNbepreuvepratique2Map.clear();
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonVisualiserEtatsActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonCreerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEtatsActionPerformed
        infoSaisies();
        Map<Option, Integer> optionNbepreuvepratique2Map = new HashMap<>();//contient chaque spécialité du groupe d'examens sélectionné chacune avec son nombre d'épreuves pratiques 2
        Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
        Map<Souscentre, ArrayList<Jurypratique2>> souscentreJurypratique2Map = new HashMap<>();//contient chaque sous-centre et le tableau de ses jurypratique2
        List<Souscentre> souscentresRattachesList = new ArrayList<>();//contient l'ensemble des sous-centres techniques issus des rattachements de la session
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATIONS PRATIQUE 2");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
            if (!caisses.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de vacations de pratique 2 existent déjà pour ce groupe d'examens !");
            } else {
                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                for (Examen e : examensSelected) {
                    //remplissage de optionNbepreuvepratique2Map 
                    for (Nbepreuveprof nbepprat : nbereuveprofs) {
                        if (nbepprat.getExamen().getSigle().equals(e.getSigle())) {
                            optionNbepreuvepratique2Map.put(nbepprat.getOption(), nbepprat.getNbprofpratique2());
                        }
                    }

                    //remplissage de souscentresRattachesList
                    List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                    for (Nature n : lesNats) {
                        Souscentre unSouscentre = n.getSouscentre();
                        if (!souscentresRattachesList.contains(unSouscentre)) {
                            souscentresRattachesList.add(unSouscentre);
                        }
                    }
                    //remplissage de souscentrePhasesMap
                    for (int j = 0; j < souscentresRattachesList.size(); j++) {
                        ArrayList<Character> phasesList = new ArrayList<>();
                        Souscentre s = souscentresRattachesList.get(j);
                        for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                            if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                if (!phasesList.contains(n.getActivite().getInitiale())) {
                                    phasesList.add(n.getActivite().getInitiale());
                                }
                                //pas de break ici car on doit parcourir tous lesNats
                            }
                        }
                        if (!souscentrePhasesMap.containsKey(s)) {
                            souscentrePhasesMap.put(s, phasesList);
                        } else {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                            ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                            for (int k = 0; k < phasesList.size(); k++) {
                                if (!phasesList1.contains(phasesList.get(k))) {
                                    phasesList1.add(phasesList.get(k));
                                }
                            }
                            Collections.sort(phasesList1);
                            souscentrePhasesMap.put(s, phasesList1);
                        }
                    }
                }

                desEltjuryspratique2 = metier.findAllEltjurypratique2D1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                juryspratique2 = metier.findAllJuryspratique2D1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                nbadmissibles = metier.findAllNbadmissiblesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                if (desEltjuryspratique2.isEmpty() || juryspratique2.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Aucune donnée de pratique 2 trouvée dans la base des données !");
                } else {
                    //remplissage de souscentre souscentreJurypratique2Map
                    for (Souscentre souscentre : souscentresRattachesList) {
                        ArrayList<Jurypratique2> jurypratique2D1souscentreList = new ArrayList<>();//liste des jurypratique2 du souscentre courant
                        for (Jurypratique2 juryprat : juryspratique2) {
                            if (juryprat.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent()) && !jurypratique2D1souscentreList.contains(juryprat)) {
                                jurypratique2D1souscentreList.add(juryprat);
                            }
                        }
                        if (!jurypratique2D1souscentreList.isEmpty()) {
                            souscentreJurypratique2Map.put(souscentre, jurypratique2D1souscentreList);
                        }
                    }
                    boolean testsicreer = false;
                    try {
                        for (Souscentre souscentre : souscentreJurypratique2Map.keySet()) {
                            int net = 0;
                            for (Jurypratique2 jurypratique2 : souscentreJurypratique2Map.get(souscentre)) {
                                determinerCoutD1Jurypratique2(optionNbepreuvepratique2Map, jurypratique2, nbadmissibles);
                                net += totalJurypratique2;
                            }
                            determinerCoutVacsecEtcheftravaux(souscentrePhasesMap, souscentre, desEltjuryspratique2);
                            net += totalSectrav;
                            int totalArrondi = (int) Math.ceil((double) net / (double) 1000) * 1000;
                            metier.creerCaisse(new Caisse(totalArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                            testsicreer = true;
                        }
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testsicreer) {
                        JOptionPane.showMessageDialog(this, "Etats de vacations de pratique 2 créés avec succès pour ce groupe d'examens !");
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
        }

        examensSelected.clear();//on vide

        souscentrePhasesMap.clear();

        souscentresRattachesList.clear();

        optionNbepreuvepratique2Map.clear();
    }//GEN-LAST:event_jButtonCreerEtatsActionPerformed

    private void jButtonMettreAjourEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourEtatsActionPerformed
        infoSaisies();
        Map<Option, Integer> optionNbepreuvepratique2Map = new HashMap<>();//contient chaque spécialité du groupe d'examens sélectionné chacune avec son nombre d'épreuves pratiques 2
        Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
        List<Souscentre> souscentresRattachesList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session
        Map<Souscentre, ArrayList<Jurypratique2>> souscentreJurypratique2Map = new HashMap<>();//contient chaque sous-centre et le tableau de ses jurypratique2
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de vacations de pratique 2 pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATIONS PRATIQUE 2");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de vacations de pratique 2 n'existe pour ce groupe d'examens !");
                } else {
                    //on conserve quelques info de ces anciennes caisses
                    Groupe groupe = caisses.get(0).getGroupe();
                    sessionSelected = caisses.get(0).getSession();
                    //on supprime toutes les anciennes caisses du groupe d'examens
                    for (Caisse c : caisses) {
                        metier.supprimerCaisse(c);
                    }
                    //on va les recréer
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Examen e : examensSelected) {
                        //remplissage de optionNbepreuvepratique2Map 
                        for (Nbepreuveprof nbepprat : nbereuveprofs) {
                            if (nbepprat.getExamen().getSigle().equals(e.getSigle())) {
                                optionNbepreuvepratique2Map.put(nbepprat.getOption(), nbepprat.getNbprofpratique2());
                            }
                        }

                        //remplissage de souscentresRattachesList
                        List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                        for (Nature n : lesNats) {
                            Souscentre unSouscentre = n.getSouscentre();
                            if (!souscentresRattachesList.contains(unSouscentre)) {
                                souscentresRattachesList.add(unSouscentre);
                            }
                        }
                        //remplissage de souscentrePhasesMap
                        for (int j = 0; j < souscentresRattachesList.size(); j++) {
                            ArrayList<Character> phasesList = new ArrayList<>();
                            Souscentre s = souscentresRattachesList.get(j);
                            for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                    if (!phasesList.contains(n.getActivite().getInitiale())) {
                                        phasesList.add(n.getActivite().getInitiale());
                                    }
                                    //pas de break ici car on doit parcourir tous lesNats
                                }
                            }
                            if (!souscentrePhasesMap.containsKey(s)) {
                                souscentrePhasesMap.put(s, phasesList);
                            } else {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                for (int k = 0; k < phasesList.size(); k++) {
                                    if (!phasesList1.contains(phasesList.get(k))) {
                                        phasesList1.add(phasesList.get(k));
                                    }
                                }
                                Collections.sort(phasesList1);
                                souscentrePhasesMap.put(s, phasesList1);
                            }
                        }
                    }

                    desEltjuryspratique2 = metier.findAllEltjurypratique2D1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    juryspratique2 = metier.findAllJuryspratique2D1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    nbadmissibles = metier.findAllNbadmissiblesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (desEltjuryspratique2.isEmpty() || juryspratique2.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Aucune donnée de pratique 2 trouvée dans la base des données !");
                    } else {
                        //remplissage de souscentre souscentreJurypratique2Map
                        for (Souscentre souscentre : souscentresRattachesList) {
                            ArrayList<Jurypratique2> jurypratique2D1souscentreList = new ArrayList<>();//liste des jurypratique2 du souscentre courant
                            for (Jurypratique2 juryprat : juryspratique2) {
                                if (juryprat.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent()) && !jurypratique2D1souscentreList.contains(juryprat)) {
                                    jurypratique2D1souscentreList.add(juryprat);
                                }
                            }
                            if (!jurypratique2D1souscentreList.isEmpty()) {
                                souscentreJurypratique2Map.put(souscentre, jurypratique2D1souscentreList);
                            }
                        }
                        boolean testsicreer = false;

                        try {
                            for (Souscentre souscentre : souscentreJurypratique2Map.keySet()) {
                                int net = 0;
                                for (Jurypratique2 jurypratique2 : souscentreJurypratique2Map.get(souscentre)) {
                                    determinerCoutD1Jurypratique2(optionNbepreuvepratique2Map, jurypratique2, nbadmissibles);
                                    net += totalJurypratique2;
                                }
                                determinerCoutVacsecEtcheftravaux(souscentrePhasesMap, souscentre, desEltjuryspratique2);
                                net += totalSectrav;
                                int totalArrondi = (int) Math.ceil((double) net / (double) 1000) * 1000;
                                metier.creerCaisse(new Caisse(totalArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                testsicreer = true;
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testsicreer) {
                            JOptionPane.showMessageDialog(this, "Etats de vacations de pratique 2 mis à jour avec succès pour ce groupe d'examens !");
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
            }
            examensSelected.clear();//on vide
            souscentrePhasesMap.clear();
            souscentresRattachesList.clear();
            optionNbepreuvepratique2Map.clear();
        }
    }//GEN-LAST:event_jButtonMettreAjourEtatsActionPerformed

    private void jButtonSupprimerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEtatsActionPerformed
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de vacations de pratique 2 pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATIONS PRATIQUE 2");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de vacations de pratique 2 n'existe pour ce groupe d'examens !");
                } else {
                    boolean testsisupprimer = false;
                    try {
                        for (Caisse caisse : caisses) {
                            metier.supprimerCaisse(caisse);
                        }
                        testsisupprimer = true;
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testsisupprimer) {
                        JOptionPane.showMessageDialog(this, "Etats de vacations de pratique 2 supprimés avec succès pour ce groupe d'examens !");
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerEtatsActionPerformed

    private void jButtonAnnulerChoixExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixExamenActionPerformed
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        jComboBoxSession.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixExamenActionPerformed

    private void jButtonAnnulerChoixSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixSouscentreActionPerformed
        jComboBoxRegion.setSelectedIndex(0);
        jComboBoxDepartement.setSelectedIndex(0);
        jComboBoxArrondissement.setSelectedIndex(0);
        jComboBoxSouscentre.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixSouscentreActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jComboBoxRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionActionPerformed
        remplirDepartementCombobox();
    }//GEN-LAST:event_jComboBoxRegionActionPerformed

    private void jButtonCreerNbexaminNbvacChefAtelierNbadmissibActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerNbexaminNbvacChefAtelierNbadmissibActionPerformed
        infoSaisies();
        if (jRadioButtonNbexaminNbvacChefAtelier.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || sigleOptionSelected.equals("---") || nbvacString.equals("---") || nbChefAtelierString.equals("") || nbExaminateurString.equals("")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre, donner le nombre d'examinateurs, le nombre de chef d'atelier et le nombre de vacations !");
            } else {
                validerNbvac(nbvacString);
                validerNbchefatelier(nbChefAtelierString);
                validerNbexaminateur(nbExaminateurString);
                if (!continuerNbvac || nbvacSaisi == 0 || !continuerNbchefatelier || !continuerNbexaminateur || nbExaminateurSaisi == 0) {
                    JOptionPane.showMessageDialog(this, "Recommencez svp. Au moins un des nombres saisis est incorrect !");
                } else {
                    Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                    anneeSelected = Integer.parseInt(anneeString);
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }
                    for (Souscentre souscentre : souscentres) {
                        if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                            souscentreSelected = souscentre;
                            break;
                        }
                    }

                    for (Option option : options) {
                        if (option.getSigle().equals(sigleOptionSelected)) {
                            optionSelected = option;
                            break;
                        }
                    }
                    try {
                        metier.creerJurypratique2(new Jurypratique2(souscentreSelected, optionSelected, nbExaminateurSaisi, nbvacSaisi, nbChefAtelierSaisi, groupe, sessionSelected));
                        JOptionPane.showMessageDialog(this, "Nombres de vacations, d'examinateurs et de chefs d'atelier enregistrés avec succès !");
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de d'enregistrer les nombres de vacations, d'examinateurs et de chefs d'atelier dans le sous-centre [" + nomSouscentreSelected + "]" + "\n raison:" + ex.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonCreerNbexaminNbvacChefAtelierNbadmissibActionPerformed

    private void jButtonSupprimerNbexaminNbvacChefAtelierNbadmissibActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerNbexaminNbvacChefAtelierNbadmissibActionPerformed
        infoSaisies();
        if (jRadioButtonNbexaminNbvacChefAtelier.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || sigleOptionSelected.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre et une spécialité !");
            } else {
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les de vacations, d'examinateurs et de chefs d'atelier pour la spécialité " + sigleOptionSelected + " du sous-centre [" + nomSouscentreSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    anneeSelected = Integer.parseInt(anneeString);
                    try {
                        Jurypratique2 jurypratique2 = metier.findJurypratique2D1OptionD1SouscentreD1GroupedexamensD1Session(nomSouscentreSelected, anneeSelected, niveauSelected, typeSelected, sigleOptionSelected);
                        metier.supprimerJurypratique2(jurypratique2);
                        JOptionPane.showMessageDialog(this, "Nombres de vacations, d'examinateurs et de chefs d'atelier supprimés avec succès !");
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de supprimer les nombres de vacations, d'examinateurs et de chefs d'atelier pour la spécialité " + sigleOptionSelected + " du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerNbexaminNbvacChefAtelierNbadmissibActionPerformed

    private void jButtonListerNbexaminNbvacChefAtelierNbadmissibActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerNbexaminNbvacChefAtelierNbadmissibActionPerformed
        infoSaisies();
        if (jRadioButtonNbexaminNbvacChefAtelier.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens et une session !");
            } else {
                anneeSelected = Integer.parseInt(anneeString);
                juryspratique2 = metier.findAllJuryspratique2D1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);

                if (!juryspratique2.isEmpty()) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                        for (Region region : regions) {
                            int i = 1;
                            for (Jurypratique2 jurypratique2 : juryspratique2) {
                                if (jurypratique2.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                                    Map<String, Object> row = new HashMap<>();
                                    row.put("session", anneeSelected);
                                    row.put("examen", groupedexamensEnstring);
                                    row.put("region", region.getNomreg());
                                    row.put("num", i++);
                                    row.put("souscentre", jurypratique2.getSouscentre().getNomsouscent());
                                    row.put("option", jurypratique2.getOption().getSigle());
                                    row.put("nbexaminateur", jurypratique2.getNbexamin());
                                    row.put("nbvac", jurypratique2.getNbvac());
                                    row.put("nbchefatelier", jurypratique2.getNbchefatel());
                                    datasource.add(row);
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeNbexaminNbvacChefAtelierReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Aucun nombre d'admissibles, de vacations, d'examinateurs et de chefs d'atelier trouvé dans la base de données !");
                }
            }
        }
    }//GEN-LAST:event_jButtonListerNbexaminNbvacChefAtelierNbadmissibActionPerformed

    private void jComboBoxDepartementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementActionPerformed
        remplirArrondissementCombobox();

    }//GEN-LAST:event_jComboBoxDepartementActionPerformed

    private void jComboBoxSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSouscentreActionPerformed
        remplirSpecialiteCombobox();
    }//GEN-LAST:event_jComboBoxSouscentreActionPerformed

    private void jComboBoxArrondissementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementActionPerformed
        remplirSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementActionPerformed

    private void jButtonCreerNbmbreSecretChefTravauxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerNbmbreSecretChefTravauxActionPerformed
        infoSaisies();
        if (jRadioButtonNbmbreSecretChefTravaux.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nbMbresecString.equals("") || nbChefTravauxString.equals("")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre donner le nombre de membres de secrétariat et celui de chefs de travaux !");
            } else {
                validerNbmbressec(nbMbresecString);
                validerNbcheftrav(nbChefTravauxString);//continuerNbmbresec,continuerNbcheftrav
                if (!continuerNbmbresec || nbMbresecSaisi == 0 || !continuerNbcheftrav || nbChefTravauxSaisi == 0) {
                    JOptionPane.showMessageDialog(this, "Recommencez svp. Au moins un des nombres saisis est incorrect !");
                } else {
                    Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                    anneeSelected = Integer.parseInt(anneeString);
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }
                    for (Souscentre souscentre : souscentres) {
                        if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                            souscentreSelected = souscentre;
                            break;
                        }
                    }

                    try {
                        metier.creerEltjurypratique2(new Eltjurypratique2(souscentreSelected, nbMbresecSaisi, nbChefTravauxSaisi, groupe, sessionSelected));
                        JOptionPane.showMessageDialog(this, "Nombres de membres de secrétariat et de chefs de travaux enregistrés avec succès !");
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible d'enregistrer les nombres de membres de secrétariat et de chefs de travaux dans le sous-centre [" + nomSouscentreSelected + "]" + "\n raison:" + ex.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonCreerNbmbreSecretChefTravauxActionPerformed

    private void jButtonSupprimerNbmbreSecretChefTravauxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerNbmbreSecretChefTravauxActionPerformed
        infoSaisies();
        if (jRadioButtonNbmbreSecretChefTravaux.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session et un sous-centre !");
            } else {
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les nombres de membres de secrétariat et de chefs de travaux du sous-centre [" + nomSouscentreSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    anneeSelected = Integer.parseInt(anneeString);
                    try {
                        Eltjurypratique2 eltjurypratique2 = metier.findEltjurypratique2D1SouscentreD1GroupedexamensD1Session(nomSouscentreSelected, anneeSelected, niveauSelected, typeSelected);
                        metier.supprimerEltjurypratique2(eltjurypratique2);
                        JOptionPane.showMessageDialog(this, "Nombres de membres de secrétariat et de chefs de travaux supprimé avec succès !");
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de supprimer les nombres de membres de secrétariat et de chefs de travaux de chefs de salle du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerNbmbreSecretChefTravauxActionPerformed

    private void jButtonListerNbmbreSecretChefTravauxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerNbmbreSecretChefTravauxActionPerformed
        infoSaisies();
        if (jRadioButtonNbmbreSecretChefTravaux.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens et une session !");
            } else {
                anneeSelected = Integer.parseInt(anneeString);
                desEltjuryspratique2 = metier.findAllEltjurypratique2D1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);

                if (!desEltjuryspratique2.isEmpty()) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                        for (Region region : regions) {
                            int i = 1;
                            for (Eltjurypratique2 eltjurypratique2 : desEltjuryspratique2) {
                                if (eltjurypratique2.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                                    Map<String, Object> row = new HashMap<>();
                                    row.put("session", anneeSelected);
                                    row.put("examen", groupedexamensEnstring);
                                    row.put("region", region.getNomreg());
                                    row.put("num", i++);
                                    row.put("souscentre", eltjurypratique2.getSouscentre().getNomsouscent());
                                    row.put("nbmbresec", eltjurypratique2.getNbmbresec());
                                    row.put("nbcheftrav", eltjurypratique2.getNbcheftrav());
                                    datasource.add(row);
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeNbmbresecNbchefstravauxReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Aucun nombre de membres de secrétariat et de chefs de travaux trouvé dans la base de données !");
                }
            }
        }
    }//GEN-LAST:event_jButtonListerNbmbreSecretChefTravauxActionPerformed

    private void jRadioButtonNbexaminNbvacChefAtelierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonNbexaminNbvacChefAtelierActionPerformed
        jPanelNbexaminNbvacChefAtelierNbadmissib.setEnabled(true);
        jTextFieldNbvac.setEnabled(true);
        jTextFieldNbchefAtelier.setEnabled(true);
        jTextFieldNbexaminateurs.setEnabled(true);
        jButtonCreerNbexaminNbvacChefAtelierNbadmissib.setEnabled(true);
        jButtonSupprimerNbexaminNbvacChefAtelierNbadmissib.setEnabled(true);
        jButtonListerNbexaminNbvacChefAtelierNbadmissib.setEnabled(true);
        jButtonAnnulerNbexaminNbvacChefAtelierNbadmissib.setEnabled(true);
        jComboBoxSpecialite.setEnabled(true);

        jPanelNbmbreSecretChefTravaux.setEnabled(false);
        jTextFieldNbmbresSecretariat.setEnabled(false);
        jTextFieldNbmbresSecretariat.setText("");
        jTextFieldNbchefsTravaux.setEnabled(false);
        jTextFieldNbchefsTravaux.setText("");
        jButtonCreerNbmbreSecretChefTravaux.setEnabled(false);
        jButtonSupprimerNbmbreSecretChefTravaux.setEnabled(false);
        jButtonListerNbmbreSecretChefTravaux.setEnabled(false);
        jButtonAnnulerNbmbreSecretChefTravaux.setEnabled(false);
    }//GEN-LAST:event_jRadioButtonNbexaminNbvacChefAtelierActionPerformed

    private void jRadioButtonNbmbreSecretChefTravauxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonNbmbreSecretChefTravauxActionPerformed
        jPanelNbmbreSecretChefTravaux.setEnabled(true);
        jTextFieldNbmbresSecretariat.setEnabled(true);
        jTextFieldNbchefsTravaux.setEnabled(true);
        jButtonCreerNbmbreSecretChefTravaux.setEnabled(true);
        jButtonSupprimerNbmbreSecretChefTravaux.setEnabled(true);
        jButtonListerNbmbreSecretChefTravaux.setEnabled(true);
        jButtonAnnulerNbmbreSecretChefTravaux.setEnabled(true);

        jPanelNbexaminNbvacChefAtelierNbadmissib.setEnabled(false);
        jTextFieldNbexaminateurs.setEnabled(false);
        jTextFieldNbexaminateurs.setText("");
        jTextFieldNbvac.setEnabled(false);
        jTextFieldNbvac.setText("");
        jTextFieldNbchefAtelier.setEnabled(false);
        jTextFieldNbchefAtelier.setText("");
        jComboBoxSpecialite.setEnabled(false);
        jComboBoxSpecialite.removeAllItems();
        jButtonCreerNbexaminNbvacChefAtelierNbadmissib.setEnabled(false);
        jButtonSupprimerNbexaminNbvacChefAtelierNbadmissib.setEnabled(false);
        jButtonListerNbexaminNbvacChefAtelierNbadmissib.setEnabled(false);
        jButtonAnnulerNbexaminNbvacChefAtelierNbadmissib.setEnabled(false);
    }//GEN-LAST:event_jRadioButtonNbmbreSecretChefTravauxActionPerformed

    private void jButtonAnnulerChoixTypeNbreAenregistrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixTypeNbreAenregistrerActionPerformed
        jPanelNbexaminNbvacChefAtelierNbadmissib.setEnabled(false);

        jTextFieldNbexaminateurs.setEnabled(false);
        jTextFieldNbexaminateurs.setText("");
        jTextFieldNbvac.setEnabled(false);
        jTextFieldNbvac.setText("");
        jTextFieldNbchefAtelier.setEnabled(false);
        jTextFieldNbchefAtelier.setText("");
        jComboBoxSpecialite.setEnabled(false);
        //jComboBoxSpecialite.setSelectedIndex(0);
        jButtonCreerNbexaminNbvacChefAtelierNbadmissib.setEnabled(false);
        jButtonSupprimerNbexaminNbvacChefAtelierNbadmissib.setEnabled(false);
        jButtonListerNbexaminNbvacChefAtelierNbadmissib.setEnabled(false);
        jButtonAnnulerNbexaminNbvacChefAtelierNbadmissib.setEnabled(false);

        jPanelNbmbreSecretChefTravaux.setEnabled(false);

        jTextFieldNbmbresSecretariat.setEnabled(false);
        jTextFieldNbmbresSecretariat.setText("");
        jTextFieldNbchefsTravaux.setEnabled(false);
        jTextFieldNbchefsTravaux.setText("");
        jButtonCreerNbmbreSecretChefTravaux.setEnabled(false);
        jButtonSupprimerNbmbreSecretChefTravaux.setEnabled(false);
        jButtonListerNbmbreSecretChefTravaux.setEnabled(false);
        jButtonAnnulerNbmbreSecretChefTravaux.setEnabled(false);

        buttonGroup1.clearSelection();
    }//GEN-LAST:event_jButtonAnnulerChoixTypeNbreAenregistrerActionPerformed

    private void jButtonAnnulerNbexaminNbvacChefAtelierNbadmissibActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerNbexaminNbvacChefAtelierNbadmissibActionPerformed
        jTextFieldNbvac.setText("");
        jTextFieldNbchefAtelier.setText("");
        jTextFieldNbexaminateurs.setText("");
        jComboBoxSpecialite.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerNbexaminNbvacChefAtelierNbadmissibActionPerformed

    private void jButtonAnnulerNbmbreSecretChefTravauxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerNbmbreSecretChefTravauxActionPerformed
        jTextFieldNbchefsTravaux.setText("");
        jTextFieldNbmbresSecretariat.setText("");
    }//GEN-LAST:event_jButtonAnnulerNbmbreSecretChefTravauxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatVacationsPratique2.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatVacationsPratique2.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatVacationsPratique2.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatVacationsPratique2.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatVacationsPratique2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonAnnulerChoixExamen;
    private javax.swing.JButton jButtonAnnulerChoixSouscentre;
    private javax.swing.JButton jButtonAnnulerChoixTypeNbreAenregistrer;
    private javax.swing.JButton jButtonAnnulerNbexaminNbvacChefAtelierNbadmissib;
    private javax.swing.JButton jButtonAnnulerNbmbreSecretChefTravaux;
    private javax.swing.JButton jButtonCreerEtats;
    private javax.swing.JButton jButtonCreerNbexaminNbvacChefAtelierNbadmissib;
    private javax.swing.JButton jButtonCreerNbmbreSecretChefTravaux;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonListerNbexaminNbvacChefAtelierNbadmissib;
    private javax.swing.JButton jButtonListerNbmbreSecretChefTravaux;
    private javax.swing.JButton jButtonMettreAjourEtats;
    private javax.swing.JButton jButtonSupprimerEtats;
    private javax.swing.JButton jButtonSupprimerNbexaminNbvacChefAtelierNbadmissib;
    private javax.swing.JButton jButtonSupprimerNbmbreSecretChefTravaux;
    private javax.swing.JButton jButtonVisualiserEtats;
    private javax.swing.JComboBox<String> jComboBoxArrondissement;
    private javax.swing.JComboBox<String> jComboBoxDepartement;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxRegion;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxSouscentre;
    private javax.swing.JComboBox<String> jComboBoxSpecialite;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelArrondissement;
    private javax.swing.JLabel jLabelDepartement;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelNbChefsTravaux;
    private javax.swing.JLabel jLabelNbchefatel;
    private javax.swing.JLabel jLabelNbexamin;
    private javax.swing.JLabel jLabelNbmbresSecretariat;
    private javax.swing.JLabel jLabelNbvac;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelNomCentre;
    private javax.swing.JLabel jLabelRegion;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelSpecialite;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanelChoixCentre;
    private javax.swing.JPanel jPanelChoixExamen;
    private javax.swing.JPanel jPanelChoixTypeNombreAenregistrer;
    private javax.swing.JPanel jPanelGestionEtat;
    private javax.swing.JPanel jPanelNbexaminNbvacChefAtelierNbadmissib;
    private javax.swing.JPanel jPanelNbmbreSecretChefTravaux;
    private javax.swing.JRadioButton jRadioButtonNbexaminNbvacChefAtelier;
    private javax.swing.JRadioButton jRadioButtonNbmbreSecretChefTravaux;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldNbchefAtelier;
    private javax.swing.JTextField jTextFieldNbchefsTravaux;
    private javax.swing.JTextField jTextFieldNbexaminateurs;
    private javax.swing.JTextField jTextFieldNbmbresSecretariat;
    private javax.swing.JTextField jTextFieldNbvac;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Region> regions = null;
    private List<Examen> examens = null;
    private Examen examenSelected = null;
    private String[] examensList = null;
    private List<Examen> examensSelected = new ArrayList<>();
    private List<Departement> departements = null;
    private List<Arrondissement> arrondissements = null;
    private String[] sessionsCombo = null;
    private String[] regionsCombo = null;
    private String[] departementsCombo = null;
    private String[] arrondissementsCombo = null;
    private String[] souscentresCombo = null;
    private String[] sousfamillesCombo = null;
    private String nomRegionSelected = "";
    private String nomSouscentreSelected = "";
    private String nomDepartementSelected = "";
    private String nomArrondissementSelected = "";
    private String titreSousfamilleSelected = "";
    private List<Souscentre> souscentres = null;
    private Souscentre souscentreSelected = null;
    private List<Sousfamille> sousfamilles = null;
    private Sousfamille sousfamilleSelected = null;
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private String phase = "PRATIQUE";
    private List<Caisse> caisses = null;
    private List<Option> options = null;
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String[] specialitesCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private int nbadmissib = 0, nbepreuveprat2 = 0, nbexamin = 0, nbvacparens = 0, nbvactotal = 0, coutvac = 0, nbcopies = 0, coutcopies = 0, nbchefatel = 0, montantchefatel = 0, supplement = 0, nbmbresec = 0, nbcheftrav = 0, coutvacsec = 0, coutvaccheftrav = 0, txcop = 0, totalJurypratique2 = 0, totalSectrav = 0;
    private String optionAffichee = "";
    private boolean continuerNbchefatelier = false;
    private boolean continuerNbvac = false;
    private boolean continuerNbexaminateur = false;
    private boolean continuerNbmbresec = false;
    private boolean continuerNbcheftrav = false;
    private int nbMbresecSaisi = 0;
    private String nbMbresecString = "";
    private int nbvacSaisi = 0;
    private String nbvacString = "";
    private int nbChefAtelierSaisi = 0;
    private String nbChefAtelierString = "";
    private int nbExaminateurSaisi = 0;
    private String nbExaminateurString = "";
    private int nbChefTravauxSaisi = 0;
    private String nbChefTravauxString = "";
    private List<Specialisation> specialites = null;
    private String sigleOptionSelected = "";
    private Option optionSelected = null;
    private List<Jurypratique2> juryspratique2 = null;
    private List<Eltjurypratique2> desEltjuryspratique2 = null;
    private List<Nbepreuveprof> nbereuveprofs = null;
    private List<Nbadmissibles> nbadmissibles = null;
    private Nbadmissibles unNbadmissibles = null;
    private int nbadmissibSaisi = 0;
    private String nbadmissibString = "";
    private boolean continuerNbadmissib = false;
    private String sigleOptionNbadmissibSelected = "";

    //private boolean valBoutonRadioNbchefsalle = false;
    //private boolean valBoutonRadioNbcopies = false;
    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        regions = metier.findAllRegions();
        examens = metier.findAllExamens();
        souscentres = metier.findAllSouscentres();
        options = metier.findAllOptions();
        nbereuveprofs = metier.findAllNbepreuveprofs();

        //on remplit la combobox des régions du sous-centre
        regionsCombo = new String[regions.size() + 1];
        regionsCombo[0] = "---";
        int i = 1;
        for (Region region : regions) {
            regionsCombo[i++] = region.getNomreg();
        }
        jComboBoxRegion.setModel(new DefaultComboBoxModel(regionsCombo));

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int k = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[k++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "IND"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        remplirDepartementCombobox();
        remplirArrondissementCombobox();
        remplirSouscentreCombobox();
        remplirSpecialiteCombobox();

        buttonGroup1.add(jRadioButtonNbmbreSecretChefTravaux);
        buttonGroup1.add(jRadioButtonNbexaminNbvacChefAtelier);

        jPanelNbmbreSecretChefTravaux.setEnabled(false);
        jTextFieldNbmbresSecretariat.setEnabled(false);
        jTextFieldNbchefsTravaux.setEnabled(false);
        jButtonCreerNbmbreSecretChefTravaux.setEnabled(false);
        jButtonSupprimerNbmbreSecretChefTravaux.setEnabled(false);
        jButtonListerNbmbreSecretChefTravaux.setEnabled(false);
        jButtonAnnulerNbmbreSecretChefTravaux.setEnabled(false);

        jPanelNbexaminNbvacChefAtelierNbadmissib.setEnabled(false);
        jTextFieldNbexaminateurs.setEnabled(false);
        jTextFieldNbvac.setEnabled(false);
        jTextFieldNbchefAtelier.setEnabled(false);
        jButtonCreerNbexaminNbvacChefAtelierNbadmissib.setEnabled(false);
        jButtonSupprimerNbexaminNbvacChefAtelierNbadmissib.setEnabled(false);
        jButtonListerNbexaminNbvacChefAtelierNbadmissib.setEnabled(false);
        jButtonAnnulerNbexaminNbvacChefAtelierNbadmissib.setEnabled(false);
        jComboBoxSpecialite.setEnabled(false);
    }

    private void infoSaisies() {
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        nbvacString = jTextFieldNbvac.getText();
        sigleOptionSelected = (String) jComboBoxSpecialite.getSelectedItem();
        nbChefAtelierString = jTextFieldNbchefAtelier.getText();
        nbMbresecString = jTextFieldNbmbresSecretariat.getText();
        nbExaminateurString = jTextFieldNbexaminateurs.getText();
        nbChefTravauxString = jTextFieldNbchefsTravaux.getText();
    }

    private void remplirDepartementCombobox() {
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        departements = metier.findAllDepartementsD1Region(nomRegionSelected);
        //on remplit la combobox des départements
        departementsCombo = new String[departements.size() + 1];
        departementsCombo[0] = "---";
        int i = 1;
        for (Departement departement : departements) {
            departementsCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartement.setModel(new DefaultComboBoxModel(departementsCombo));
    }

    private void remplirArrondissementCombobox() {
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        arrondissements = metier.findAllArrondissementsD1Departement(nomDepartementSelected);
        //on remplit la combobox des départements
        arrondissementsCombo = new String[arrondissements.size() + 1];
        arrondissementsCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissements) {
            arrondissementsCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissement.setModel(new DefaultComboBoxModel(arrondissementsCombo));
    }

    private void remplirSouscentreCombobox() {
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        souscentres = metier.findAllSouscentresD1Arrondissement(nomArrondissementSelected);
        //on remplit la combobox des sous-centres
        souscentresCombo = new String[souscentres.size() + 1];
        souscentresCombo[0] = "---";
        int i = 1;
        for (Souscentre souscentre : souscentres) {
            souscentresCombo[i++] = souscentre.getNomsouscent();
        }
        jComboBoxSouscentre.setModel(new DefaultComboBoxModel(souscentresCombo));

    }

    private void validerNbchefatelier(String nbreString) {
        try {
            nbChefAtelierSaisi = Integer.parseInt(nbreString);
            continuerNbchefatelier = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de chefs d'atelier doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbchefatelier = false;
        }
    }

    private void validerNbvac(String nbreString) {
        try {
            nbvacSaisi = Integer.parseInt(nbreString);
            continuerNbvac = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de vacations doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbvac = false;
        }
    }

    private void validerNbexaminateur(String nbreString) {
        try {
            nbExaminateurSaisi = Integer.parseInt(nbreString);
            continuerNbexaminateur = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre d'examinateurs doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbexaminateur = false;
        }
    }

    private void validerNbmbressec(String nbreString) {
        try {
            nbMbresecSaisi = Integer.parseInt(nbreString);
            continuerNbmbresec = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de membres de secrétariat doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbmbresec = false;
        }
    }

    private void validerNbcheftrav(String nbreString) {
        try {
            nbChefTravauxSaisi = Integer.parseInt(nbreString);
            continuerNbcheftrav = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de chefs de travaux doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbcheftrav = false;
        }
    }

    private void validerNbadmissib(String nbreString) {
        try {
            nbadmissibSaisi = Integer.parseInt(nbreString);
            continuerNbadmissib = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de candidats admissibles doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbadmissib = false;
        }
    }

    private void determinerCoutD1Jurypratique2(Map<Option, Integer> optionNbepreuvepratique2Map, Jurypratique2 jurypratique2, List<Nbadmissibles> nbadmissibles) {
        supplement = 0;
        optionAffichee = jurypratique2.getOption().getSigle();
        for (Nbadmissibles nbadmiss : nbadmissibles) {
            if (nbadmiss.getSouscentre().getNomsouscent().equals(jurypratique2.getSouscentre().getNomsouscent()) && nbadmiss.getOption().getSigle().equals(optionAffichee)) {
                nbadmissib = nbadmiss.getNbadmiss();
                break;
            }
        }
        for (Option option : optionNbepreuvepratique2Map.keySet()) {
            if (option.getSigle().equals(optionAffichee)) {
                nbepreuveprat2 = optionNbepreuvepratique2Map.get(option);
                break;
            }
        }
        nbexamin = jurypratique2.getNbexamin();
        nbvacparens = jurypratique2.getNbvac();
        nbvactotal = nbexamin * nbvacparens;
        coutvac = nbvactotal * 1500;
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        nbcopies = nbadmissib * nbepreuveprat2;
        if (niveauSelected.equals("PROB")) {
            txcop = 150;
        }
        if (niveauSelected.equals("BACC")) {
            txcop = 200;
        }
        coutcopies = nbcopies * txcop;
        nbchefatel = jurypratique2.getNbchefatel();
        int effectifchefatelier =0;
        if(nbchefatel!=0) effectifchefatelier = nbadmissib / nbchefatel;
        if (effectifchefatelier <= 25) {
            montantchefatel = nbchefatel * 10000;
        }
        if (effectifchefatelier >= 26 && effectifchefatelier <= 50) {
            montantchefatel = nbchefatel * 15000;
        }
        if (effectifchefatelier >= 51 && effectifchefatelier <= 100) {
            montantchefatel = nbchefatel * 20000;
        }
        if (effectifchefatelier >= 101) {
            montantchefatel = nbchefatel * 30000;
        }
        if (nbchefatel > 0) {
            supplement = nbcopies * 25;
        }
        totalJurypratique2 = coutvac + coutcopies + montantchefatel + supplement;
    }

    private void determinerCoutVacsecEtcheftravaux(Map<Souscentre, ArrayList<Character>> souscentrePhasesMap, Souscentre souscentre, List<Eltjurypratique2> desEltjuryspratique2) {
        nbcheftrav = 0;
        nbmbresec = 0;
        for (Eltjurypratique2 eltjury : desEltjuryspratique2) {
            if (souscentre.getNomsouscent().equals(eltjury.getSouscentre().getNomsouscent())) {
                nbcheftrav = eltjury.getNbcheftrav();
                nbmbresec = eltjury.getNbmbresec();
                break;
            }
        }

        ArrayList<Character> phasesList = souscentrePhasesMap.get(souscentre);
        String phasesEnchaine = "";
        if (!phasesList.isEmpty()) {
            for (char c : phasesList) {
                phasesEnchaine += c;
            }
        }

        if (phasesEnchaine.equals("CDEP") || phasesEnchaine.equals("CDEPT")) {
            coutvaccheftrav = nbcheftrav * 15000;
            coutvacsec = nbmbresec * 15000;
        }
        if (phasesEnchaine.equals("EP") || phasesEnchaine.equals("EPT") || phasesEnchaine.equals("CP") || phasesEnchaine.equals("CPT") || phasesEnchaine.equals("CEP") || phasesEnchaine.equals("CEPT")) {
            coutvaccheftrav = nbcheftrav * 12000;
            coutvacsec = nbmbresec * 12000;
        }
        if (phasesEnchaine.equals("P") || phasesEnchaine.equals("PT")) {
            coutvaccheftrav = nbcheftrav * 10000;
            coutvacsec = nbmbresec * 10000;
        }
        totalSectrav = coutvaccheftrav + coutvacsec;
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    private void remplirSpecialiteCombobox() {
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!nomSouscentreSelected.equals("---") && !anneeString.equals("---") && !niveauSelected.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            specialites = metier.findAllSpecialisationsD1SouscentrePour1SessionEtniveau(anneeSelected, nomSouscentreSelected, niveauSelected);
            if (specialites.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. ce sous-centre de pratique n'a aucune spécialité pour la session et niveau d'examen choisis !");
            } else {
                for (int i = 0; i < specialites.size() - 2; i++) {//élimination des doublons
                    for (int j = i; j < specialites.size() - 1; j++) {
                        if (specialites.get(j).getOption().getSigle().equals(specialites.get(i).getOption().getSigle())) {
                            //specialites.remove(j);
                        }
                    }
                }
                specialitesCombo = new String[specialites.size() + 1];
                specialitesCombo[0] = "---";
                int i = 1;
                for (Specialisation spec : specialites) {
                    specialitesCombo[i++] = spec.getOption().getSigle();
                }
                jComboBoxSpecialite.setModel(new DefaultComboBoxModel(specialitesCombo));
            }
        }
    }
}
