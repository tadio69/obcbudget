package couche_ui;

import couche_jpa.Examen;
import couche_jpa.Groupedexamen;
import couche_jpa.Region;
import couche_jpa.Secretariat;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_jpa.Statistique;
import couche_jpa.Statsecretariat;
import couche_metier.IMetier;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueEtatNbSallesCompositionESG extends javax.swing.JFrame {

    public VueEtatNbSallesCompositionESG() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonVisualiser = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jLabelExamen = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT DE NOMBRE DE SALLES DE COMPOSITION ESG");

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonVisualiser.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiser.setText("Visualiser l'Ã©tat");
        jButtonVisualiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserActionPerformed(evt);
            }
        });

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jButtonAnnuler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(204, 255, 0));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Groupe d'examens", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(339, 339, 339)
                        .addComponent(jButtonVisualiser)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnuler)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonFermer))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel1)))
                .addContainerGap(29, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(256, 256, 256))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabelSession)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(420, 420, 420))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonAnnuler, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(jButtonFermer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonVisualiser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(40, 40, 40))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        videFrame();
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jButtonVisualiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserActionPerformed
        infoSaisies();
        Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueABIMap = new HashMap<>();//contient des sous-centres avec leurs statistiques ABI
        Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueAutresLitterairesMap = new HashMap<>();//contient des sous-centres avec leurs statistiques littÃ©raires non ABI
        Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueScientifiquesMap = new HashMap<>();//contient des sous-centres chacun avec leurs statistiques scientifiques
        Map<Souscentre, ArrayList<Salle>> souscentreSalleSimplesABIMap = new HashMap<>();//contient des sous-centres avec la liste de ses salles simples ABI (ie d'ffectif>=15)
        Map<Souscentre, SalleCumulee> souscentreSalleCumuleeABIMap = new HashMap<>();//contient des sous-centres avec sa salle cumulÃ©e ABI
        Map<Souscentre, ArrayList<Salle>> souscentreSalleSimplesAutresLitterairesMap = new HashMap<>();//contient des sous-centres avec la liste de ses salles simples AutresLitteraires (ie d'ffectif>=15)
        Map<Souscentre, SalleCumulee> souscentreSalleCumuleeAutresLitterairesMap = new HashMap<>();//contient des sous-centres avec la sa salle cumulÃ©e AutresLitteraires
        Map<Souscentre, ArrayList<Salle>> souscentreSalleSimplesScientifiquesMap = new HashMap<>();//contient des sous-centres avec la liste de ses salles simples Scientifiques (ie d'ffectif>=15)
        Map<Souscentre, SalleCumulee> souscentreSalleCumuleeScientifiquesMap = new HashMap<>();//contient des sous-centre avec sa salle cumulÃ©e Scientifiques
        Map<Souscentre, ArrayList<Salle>> souscentreSallesMap = new HashMap<>();//contient des sous-centres chacun avec la liste de ses salles cumulÃ©es ou simples
        ArrayList<Souscentre> souscentresList = new ArrayList<>();//contient tous les souscentres trouvÃ©s dans les statistiques

        Map<Secretariat, Integer> secretariatEffectifMap = new HashMap<>();//contient l'ensemble des secrÃ©tariats d'un groupe d'examens avec chacun avec son nombre de candidats
        List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats 
        Map<Souscentre, ArrayList<Secretariat>> souscentreSecretariatsMap = new HashMap<>();//contient les sous-centres chacun avec la liste de ses secretariats le cas Ã©chÃ©ant
        Map<Secretariat, ArrayList<Statsecretariat>> secretariatStatsecABIMap = new HashMap<>();//contient des secretariats avec ses statsecretariat ABI
        Map<Secretariat, ArrayList<Statsecretariat>> secretariatStatsecAutresLitterairesMap = new HashMap<>();//contient des secretariats avec ses statsecretariat littÃ©raires non ABI
        Map<Secretariat, ArrayList<Statsecretariat>> secretariatStatsecScientifiquesMap = new HashMap<>();//contient des secretariats avec ses statsecretariat scientifiques
        Map<Secretariat, ArrayList<Sallesecret>> secretariatSalleSimplesABIMap = new HashMap<>();//contient des Secretariats avec la liste de ses salles simples ABI (ie d'ffectif>=15)
        Map<Secretariat, SalleCumuleesecret> secretariatSalleCumuleeABIMap = new HashMap<>();//contient des Secretariats avec sa salle cumulÃ©e ABI
        Map<Secretariat, ArrayList<Sallesecret>> secretariatSalleSimplesAutresLitterairesMap = new HashMap<>();//contient des Secretariat avec la liste de ses salles simples AutresLitteraires (ie d'ffectif>=15)
        Map<Secretariat, SalleCumuleesecret> secretariatSalleCumuleeAutresLitterairesMap = new HashMap<>();//contient des Secretariats avec la sa salle cumulÃ©e AutresLitteraires
        Map<Secretariat, ArrayList<Sallesecret>> secretariatSalleSimplesScientifiquesMap = new HashMap<>();//contient des Secretariat avec la liste de ses salles simples Scientifiques (ie d'ffectif>=15)
        Map<Secretariat, SalleCumuleesecret> secretariatSalleCumuleeScientifiquesMap = new HashMap<>();//contient des Secretariats avec sa salle cumulÃ©e Scientifiques
        Map<Secretariat, ArrayList<Sallesecret>> secretariatSallesMap = new HashMap<>();//contient des Secretariats chacun avec la liste de ses salles cumulÃ©es ou simples

        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            String separateur = ", ";
            examensList = groupedexamensEnstring.split(separateur);
            for (Examen e : examens) {
                if (e.getSigle().equals(examensList[0])) {
                    examenSelected = e;
                    break;
                }
            }

            //remplissage souscentreAsecretariatsDemultipliesList
            secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
            if (!secretariats.isEmpty()) {
                for (Secretariat sec : secretariats) {
                    if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                        souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                    }
                }
            }

            List<Statistique> statABI = metier.findAllStatistiquesABID1ExamenDans1Session(examenSelected.getSigle(), anneeSelected);
            List<Statistique> statAutresLitteraires = metier.findAllStatistiquesAutresLitterairesD1ExamenDans1Session(examenSelected.getSigle(), anneeSelected);
            List<Statistique> statScientifiques = metier.findAllStatistiquesScientifiquesD1ExamenDans1Session(examenSelected.getSigle(), anneeSelected);

            //remplissage de souscentreStatistiqueABIMap et souscentresList en partie
            for (Statistique s : statABI) {
                if (!souscentreAsecretariatsDemultipliesList.contains(s.getSouscentre())) {
                    if (souscentreStatistiqueABIMap.containsKey(s.getSouscentre())) {//si le prÃ©sent sous-centre est dans souscentreStatistiqueABIMap
                        souscentreStatistiqueABIMap.get(s.getSouscentre()).add(s);//on lui ajoute s
                    } else {
                        ArrayList<Statistique> liste = new ArrayList<>();
                        liste.add(s);
                        souscentreStatistiqueABIMap.put(s.getSouscentre(), liste);
                    }
                }
                if (!souscentresList.contains(s.getSouscentre())) {
                    souscentresList.add(s.getSouscentre());//on charge tous les sous-centres ABI
                }
            }

            //remplissage de souscentreStatistiqueAutresLitterairesMap et souscentresList en partie
            for (Statistique s : statAutresLitteraires) {
                if (!souscentreAsecretariatsDemultipliesList.contains(s.getSouscentre())) {
                    if (souscentreStatistiqueAutresLitterairesMap.containsKey(s.getSouscentre())) {//si le prÃ©sent sous-centre est dans souscentreStatistiqueAutresLitterairesMap
                        souscentreStatistiqueAutresLitterairesMap.get(s.getSouscentre()).add(s);//on lui ajoute s
                    } else {
                        ArrayList<Statistique> liste = new ArrayList<>();
                        liste.add(s);
                        souscentreStatistiqueAutresLitterairesMap.put(s.getSouscentre(), liste);
                    }
                }
                if (!souscentresList.contains(s.getSouscentre())) {
                    souscentresList.add(s.getSouscentre());//on charge tous les sous-centres ABI
                }
            }

            //remplissage de souscentreStatistiqueScientifiquesMap et souscentresList en partie
            for (Statistique s : statScientifiques) {
                if (!souscentreAsecretariatsDemultipliesList.contains(s.getSouscentre())) {
                    if (souscentreStatistiqueScientifiquesMap.containsKey(s.getSouscentre())) {//si le prÃ©sent sous-centre est dans souscentreStatistiqueScientifiquesMap
                        souscentreStatistiqueScientifiquesMap.get(s.getSouscentre()).add(s);//on lui ajoute s
                    } else {
                        ArrayList<Statistique> liste = new ArrayList<>();
                        liste.add(s);
                        souscentreStatistiqueScientifiquesMap.put(s.getSouscentre(), liste);
                    }
                }
                if (!souscentresList.contains(s.getSouscentre())) {
                    souscentresList.add(s.getSouscentre());//on charge tous les sous-centres ABI
                }
            }
            
            int nbrecandparsalle=nombreCandidatsParSalle(examenSelected);
            //remplissage de souscentreSalleSimplesABIMap et souscentreSalleCumuleeABIMap
            for (Souscentre souscentre : souscentreStatistiqueABIMap.keySet()) {
                ArrayList<Salle> salsimplesList = new ArrayList<>();
                for (Statistique stat : souscentreStatistiqueABIMap.get(souscentre)) {
                    if (stat.getNombre() >= 20) {
                        Salle sal = new Salle();
                        sal.setSouscentre(souscentre);
                        sal.setSerie(stat.getOption().getSigle());
                        sal.setEffectif(stat.getNombre());
                        sal.setNbcandsal(nbrecandparsalle);
                        salsimplesList.add(sal);
                    } else {
                        SalleCumulee salcu = new SalleCumulee();
                        if (!souscentreSalleCumuleeABIMap.containsKey(souscentre)) {
                            salcu.setSouscentre(souscentre);
                            salcu.setSerie(stat.getOption().getSigle());
                            salcu.setEffectif(stat.getNombre());
                            salcu.setNbcandsal(nbrecandparsalle);
                            //salcu.setPaquet("ABI"); //le paquet est ABI par dÃ©faut
                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                salcu.setZone("NOSO");
                            }
                        }
                        if (!souscentreSalleCumuleeABIMap.isEmpty() && souscentreSalleCumuleeABIMap.containsKey(souscentre)) {
                            salcu = souscentreSalleCumuleeABIMap.get(souscentre);
                            salcu.setSerie(salcu.getSerie() + "/" + stat.getOption().getSigle());
                            salcu.setEffectif(salcu.getEffectif() + stat.getNombre());
                            //souscentre, zone et paquet dÃ©jÃ  connus ici
                        }
                        souscentreSalleCumuleeABIMap.put(souscentre, salcu);
                    }
                }
                souscentreSalleSimplesABIMap.put(souscentre, salsimplesList);
            }

            //remplissage de souscentreSalleSimplesAutresLitterairesMap et souscentreSalleCumuleeAutresLitterairesMap
            for (Souscentre souscentre : souscentreStatistiqueAutresLitterairesMap.keySet()) {
                ArrayList<Salle> salsimplesList = new ArrayList<>();
                for (Statistique stat : souscentreStatistiqueAutresLitterairesMap.get(souscentre)) {
                    if (stat.getNombre() >= 20) {
                        Salle sal = new Salle();
                        sal.setSouscentre(souscentre);
                        sal.setSerie(stat.getOption().getSigle());
                        sal.setEffectif(stat.getNombre());
                        sal.setNbcandsal(nbrecandparsalle);
                        salsimplesList.add(sal);
                    } else {
                        SalleCumulee salcu = new SalleCumulee();
                        if (!souscentreSalleCumuleeAutresLitterairesMap.containsKey(souscentre)) {
                            salcu.setSouscentre(souscentre);
                            salcu.setSerie(stat.getOption().getSigle());
                            salcu.setEffectif(stat.getNombre());
                            salcu.setNbcandsal(nbrecandparsalle);
                            salcu.setPaquet("AUTRES");
                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                salcu.setZone("NOSO");
                            }
                        }
                        if (!souscentreSalleCumuleeAutresLitterairesMap.isEmpty() && souscentreSalleCumuleeAutresLitterairesMap.containsKey(souscentre)) {
                            salcu = souscentreSalleCumuleeAutresLitterairesMap.get(souscentre);
                            salcu.setSerie(salcu.getSerie() + "/" + stat.getOption().getSigle());
                            salcu.setEffectif(salcu.getEffectif() + stat.getNombre());
                            //souscentre, zone et paquet dÃ©jÃ  connus ici
                        }
                        souscentreSalleCumuleeAutresLitterairesMap.put(souscentre, salcu);
                    }
                }
                souscentreSalleSimplesAutresLitterairesMap.put(souscentre, salsimplesList);
            }

            //remplissage de souscentreSalleSimplesScientifiquesMap et souscentreSalleCumuleeScientifiquesMap
            for (Souscentre souscentre : souscentreStatistiqueScientifiquesMap.keySet()) {
                ArrayList<Salle> salsimplesList = new ArrayList<>();
                for (Statistique stat : souscentreStatistiqueScientifiquesMap.get(souscentre)) {
                    if (stat.getNombre() >= 20) {
                        Salle sal = new Salle();
                        sal.setSouscentre(souscentre);
                        sal.setSerie(stat.getOption().getSigle());
                        sal.setEffectif(stat.getNombre());
                        sal.setNbcandsal(nbrecandparsalle);
                        salsimplesList.add(sal);
                    } else {
                        SalleCumulee salcu = new SalleCumulee();
                        if (!souscentreSalleCumuleeScientifiquesMap.containsKey(souscentre)) {
                            salcu.setSouscentre(souscentre);
                            salcu.setSerie(stat.getOption().getSigle());
                            salcu.setEffectif(stat.getNombre());
                            salcu.setNbcandsal(nbrecandparsalle);
                            salcu.setPaquet("SCIENTIFIQUE");
                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                salcu.setZone("NOSO");
                            }
                        }
                        if (!souscentreSalleCumuleeScientifiquesMap.isEmpty() && souscentreSalleCumuleeScientifiquesMap.containsKey(souscentre)) {
                            salcu = souscentreSalleCumuleeScientifiquesMap.get(souscentre);
                            salcu.setSerie(salcu.getSerie() + "/" + stat.getOption().getSigle());
                            salcu.setEffectif(salcu.getEffectif() + stat.getNombre());
                            //souscentre, zone et paquet dÃ©jÃ  connus ici
                        }
                        souscentreSalleCumuleeScientifiquesMap.put(souscentre, salcu);
                    }
                }
                souscentreSalleSimplesScientifiquesMap.put(souscentre, salsimplesList);
            }
            //remplissage de souscentreSallesMap avec calcul de nbsal
            for (Souscentre souscentre : souscentresList) {
                ArrayList<Salle> sallesList = new ArrayList<>();
                if (souscentreSalleCumuleeABIMap.containsKey(souscentre)) {
                    souscentreSalleCumuleeABIMap.get(souscentre).calculNbsal();
                    Salle sal = new Salle();
                    sal.setSouscentre(souscentre);
                    sal.setSerie(souscentreSalleCumuleeABIMap.get(souscentre).getSerie());
                    sal.setEffectif(souscentreSalleCumuleeABIMap.get(souscentre).getEffectif());
                    sal.setNbsal(souscentreSalleCumuleeABIMap.get(souscentre).getNbsal());
                    sallesList.add(sal);
                }
                if (souscentreSalleSimplesABIMap.containsKey(souscentre)) {
                    for (Salle salle : souscentreSalleSimplesABIMap.get(souscentre)) {
                        salle.calculNbsal();
                        sallesList.add(salle);
                    }
                }
                if (souscentreSalleCumuleeAutresLitterairesMap.containsKey(souscentre)) {
                    souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).calculNbsal();
                    Salle sal = new Salle();
                    sal.setSouscentre(souscentre);
                    sal.setSerie(souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).getSerie());
                    sal.setEffectif(souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).getEffectif());
                    sal.setNbsal(souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).getNbsal());
                    sallesList.add(sal);
                }
                if (souscentreSalleSimplesAutresLitterairesMap.containsKey(souscentre)) {
                    for (Salle salle : souscentreSalleSimplesAutresLitterairesMap.get(souscentre)) {
                        salle.calculNbsal();
                        sallesList.add(salle);
                    }
                }
                if (souscentreSalleCumuleeScientifiquesMap.containsKey(souscentre)) {
                    souscentreSalleCumuleeScientifiquesMap.get(souscentre).calculNbsal();
                    Salle sal = new Salle();
                    sal.setSouscentre(souscentre);
                    sal.setSerie(souscentreSalleCumuleeScientifiquesMap.get(souscentre).getSerie());
                    sal.setEffectif(souscentreSalleCumuleeScientifiquesMap.get(souscentre).getEffectif());
                    sal.setNbsal(souscentreSalleCumuleeScientifiquesMap.get(souscentre).getNbsal());
                    sallesList.add(sal);
                }
                if (souscentreSalleSimplesScientifiquesMap.containsKey(souscentre)) {
                    for (Salle salle : souscentreSalleSimplesScientifiquesMap.get(souscentre)) {
                        salle.calculNbsal();
                        sallesList.add(salle);
                    }
                }
                souscentreSallesMap.put(souscentre, sallesList);
            }
            //remplissage secretariatEffectifMap
            for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreEtSession(souscentre.getNomsouscent(), anneeSelected);
                List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                for (Secretariat sec : secretariatsList) {
                    int stat = 0;
                    for (Statsecretariat statsec : statsecretariatsList) {
                        if (statsec.getSecretariat().getNumsec() == sec.getNumsec() && statsec.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                            stat += statsec.getNombre();
                        }
                    }
                    secretariatEffectifMap.put(sec, stat);
                }
            }
            //remplissage de souscentreSecretariatsMap
            for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                ArrayList<Secretariat> secretariatsList = new ArrayList<>();
                for (Secretariat sec : secretariatEffectifMap.keySet()) {
                    if (sec.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                        if (!secretariatsList.contains(sec)) {
                            secretariatsList.add(sec);
                        }
                    }
                }
                if (!secretariatsList.isEmpty()) {
                    souscentreSecretariatsMap.put(souscentre, secretariatsList);//examenSelected
                }
            }

            List<Statsecretariat> statsecABI = metier.findAllStatsecretariatsABID1ExamenDans1Session(examenSelected.getSigle(), anneeSelected);
            List<Statsecretariat> statsecAutresLitteraires = metier.findAllStatsecretariatsAutresLitterairesD1ExamenDans1Session(examenSelected.getSigle(), anneeSelected);
            List<Statsecretariat> statsecScientifiques = metier.findAllStatsecretariatsScientifiquesD1ExamenDans1Session(examenSelected.getSigle(), anneeSelected);

            //remplissage de secretariatStatsecABIMap et souscentresList en partie
            for (Secretariat sec : secretariatEffectifMap.keySet()) {
                for (Statsecretariat s : statsecABI) {
                    if (s.getSecretariat().getNumsec() == sec.getNumsec() && s.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                        if (secretariatStatsecABIMap.containsKey(sec)) {//si le prÃ©sent secretariat est dans secretariatStatsecABIMap
                            secretariatStatsecABIMap.get(s.getSecretariat()).add(s);//on lui ajoute s
                        } else {
                            ArrayList<Statsecretariat> liste = new ArrayList<>();
                            liste.add(s);
                            secretariatStatsecABIMap.put(s.getSecretariat(), liste);
                        }
                    }
                }
            }

            //remplissage de secretariatStatsecAutresLitterairesMap et souscentresList en partie
            for (Secretariat sec : secretariatEffectifMap.keySet()) {
                for (Statsecretariat s : statsecAutresLitteraires) {
                    if (s.getSecretariat().getNumsec() == sec.getNumsec() && s.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                        if (secretariatStatsecAutresLitterairesMap.containsKey(s.getSecretariat())) {//si le prÃ©sent secretariat est dans secretariatStatsecAutresLitterairesMap
                            secretariatStatsecAutresLitterairesMap.get(s.getSecretariat()).add(s);//on lui ajoute s
                        } else {
                            ArrayList<Statsecretariat> liste = new ArrayList<>();
                            liste.add(s);
                            secretariatStatsecAutresLitterairesMap.put(s.getSecretariat(), liste);
                        }
                    }
                }
            }

            //remplissage de secretariatStatsecScientifiquesMap et souscentresList en partie
            for (Secretariat sec : secretariatEffectifMap.keySet()) {
                for (Statsecretariat s : statsecScientifiques) {
                    if (s.getSecretariat().getNumsec() == sec.getNumsec() && s.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                        if (secretariatStatsecScientifiquesMap.containsKey(s.getSecretariat())) {//si le prÃ©sent secretariat est dans secretariatStatsecScientifiquesMap
                            secretariatStatsecScientifiquesMap.get(s.getSecretariat()).add(s);//on lui ajoute s
                        } else {
                            ArrayList<Statsecretariat> liste = new ArrayList<>();
                            liste.add(s);
                            secretariatStatsecScientifiquesMap.put(s.getSecretariat(), liste);
                        }
                    }
                }
            }

            //remplissage de secretariatSalleSimplesABIMap et secretariatSalleCumuleeABIMap
            for (Secretariat secretariat : secretariatStatsecABIMap.keySet()) {
                ArrayList<Sallesecret> salsimplesList = new ArrayList<>();
                for (Statsecretariat statsec : secretariatStatsecABIMap.get(secretariat)) {
                    if (statsec.getNombre() >= 20) {
                        Sallesecret sal = new Sallesecret();
                        sal.setSecretariat(secretariat);
                        sal.setSerie(statsec.getOption().getSigle());
                        sal.setEffectif(statsec.getNombre());
                        sal.setNbcandsal(nbrecandparsalle);
                        salsimplesList.add(sal);
                    } else {
                        SalleCumuleesecret salcu = new SalleCumuleesecret();
                        if (!secretariatSalleCumuleeABIMap.containsKey(secretariat)) {
                            salcu.setSecretariat(secretariat);
                            salcu.setSerie(statsec.getOption().getSigle());
                            salcu.setEffectif(statsec.getNombre());
                            salcu.setNbcandsal(nbrecandparsalle);
                            //salcu.setPaquet("ABI"); //le paquet est ABI par dÃ©faut
                            if (secretariat.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || secretariat.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                salcu.setZone("NOSO");
                            }
                        }
                        if (!secretariatSalleCumuleeABIMap.isEmpty() && secretariatSalleCumuleeABIMap.containsKey(secretariat)) {
                            salcu = secretariatSalleCumuleeABIMap.get(secretariat);
                            salcu.setSerie(salcu.getSerie() + "/" + statsec.getOption().getSigle());
                            salcu.setEffectif(salcu.getEffectif() + statsec.getNombre());
                            //secretariat, zone et paquet dÃ©jÃ  connus ici
                        }
                        secretariatSalleCumuleeABIMap.put(secretariat, salcu);
                    }
                }
                secretariatSalleSimplesABIMap.put(secretariat, salsimplesList);
            }

            //remplissage de secretariatSalleSimplesAutresLitterairesMap et secretariatSalleCumuleeAutresLitterairesMap
            for (Secretariat secretariat : secretariatStatsecAutresLitterairesMap.keySet()) {
                ArrayList<Sallesecret> salsimplesList = new ArrayList<>();
                for (Statsecretariat statsec : secretariatStatsecAutresLitterairesMap.get(secretariat)) {
                    if (statsec.getNombre() >= 20) {
                        Sallesecret sal = new Sallesecret();
                        sal.setSecretariat(secretariat);
                        sal.setSerie(statsec.getOption().getSigle());
                        sal.setEffectif(statsec.getNombre());
                        sal.setNbcandsal(nbrecandparsalle);
                        salsimplesList.add(sal);
                    } else {
                        SalleCumuleesecret salcu = new SalleCumuleesecret();
                        if (!secretariatSalleCumuleeAutresLitterairesMap.containsKey(secretariat)) {
                            salcu.setSecretariat(secretariat);
                            salcu.setSerie(statsec.getOption().getSigle());
                            salcu.setEffectif(statsec.getNombre());
                            salcu.setNbcandsal(nbrecandparsalle);
                            salcu.setPaquet("AUTRES");
                            if (secretariat.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || secretariat.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                salcu.setZone("NOSO");
                            }
                        }
                        if (!secretariatSalleCumuleeAutresLitterairesMap.isEmpty() && secretariatSalleCumuleeAutresLitterairesMap.containsKey(secretariat)) {
                            salcu = secretariatSalleCumuleeAutresLitterairesMap.get(secretariat);
                            salcu.setSerie(salcu.getSerie() + "/" + statsec.getOption().getSigle());
                            salcu.setEffectif(salcu.getEffectif() + statsec.getNombre());
                            //souscentre, zone et paquet dÃ©jÃ  connus ici
                        }
                        secretariatSalleCumuleeAutresLitterairesMap.put(secretariat, salcu);
                    }
                }
                secretariatSalleSimplesAutresLitterairesMap.put(secretariat, salsimplesList);
            }

            //remplissage de secretariatSalleSimplesScientifiquesMap et secretariatSalleCumuleeScientifiquesMap
            for (Secretariat secretariat : secretariatStatsecScientifiquesMap.keySet()) {
                ArrayList<Sallesecret> salsimplesList = new ArrayList<>();
                for (Statsecretariat statsec : secretariatStatsecScientifiquesMap.get(secretariat)) {
                    if (statsec.getNombre() >= 20) {
                        Sallesecret sal = new Sallesecret();
                        sal.setSecretariat(secretariat);
                        sal.setSerie(statsec.getOption().getSigle());
                        sal.setEffectif(statsec.getNombre());
                        sal.setNbcandsal(nbrecandparsalle);
                        salsimplesList.add(sal);
                    } else {
                        SalleCumuleesecret salcu = new SalleCumuleesecret();
                        if (!secretariatSalleCumuleeScientifiquesMap.containsKey(secretariat)) {
                            salcu.setSecretariat(secretariat);
                            salcu.setSerie(statsec.getOption().getSigle());
                            salcu.setEffectif(statsec.getNombre());
                            salcu.setNbcandsal(nbrecandparsalle);
                            salcu.setPaquet("SCIENTIFIQUE");
                            if (secretariat.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || secretariat.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                salcu.setZone("NOSO");
                            }
                        }
                        if (!secretariatSalleCumuleeScientifiquesMap.isEmpty() && secretariatSalleCumuleeScientifiquesMap.containsKey(secretariat)) {
                            salcu = secretariatSalleCumuleeScientifiquesMap.get(secretariat);
                            salcu.setSerie(salcu.getSerie() + "/" + statsec.getOption().getSigle());
                            salcu.setEffectif(salcu.getEffectif() + statsec.getNombre());
                            //souscentre, zone et paquet dÃ©jÃ  connus ici
                        }
                        secretariatSalleCumuleeScientifiquesMap.put(secretariat, salcu);
                    }
                }
                secretariatSalleSimplesScientifiquesMap.put(secretariat, salsimplesList);
            }
            //remplissage de secretariatSallesMap avec calcul de nbsal et de nbsurvdessurv
            for (Secretariat secretariat : secretariatEffectifMap.keySet()) {
                ArrayList<Sallesecret> sallesList = new ArrayList<>();
                if (secretariatSalleCumuleeABIMap.containsKey(secretariat)) {
                    secretariatSalleCumuleeABIMap.get(secretariat).calculNbsal();
                    Sallesecret sal = new Sallesecret();
                    sal.setSecretariat(secretariat);
                    sal.setSerie(secretariatSalleCumuleeABIMap.get(secretariat).getSerie());
                    sal.setEffectif(secretariatSalleCumuleeABIMap.get(secretariat).getEffectif());
                    sal.setNbsal(secretariatSalleCumuleeABIMap.get(secretariat).getNbsal());
                    sallesList.add(sal);
                }
                if (secretariatSalleSimplesABIMap.containsKey(secretariat)) {
                    for (Sallesecret salle : secretariatSalleSimplesABIMap.get(secretariat)) {
                        salle.calculNbsal();
                        sallesList.add(salle);
                    }
                }
                if (secretariatSalleCumuleeAutresLitterairesMap.containsKey(secretariat)) {
                    secretariatSalleCumuleeAutresLitterairesMap.get(secretariat).calculNbsal();
                    Sallesecret sal = new Sallesecret();
                    sal.setSecretariat(secretariat);
                    sal.setSerie(secretariatSalleCumuleeAutresLitterairesMap.get(secretariat).getSerie());
                    sal.setEffectif(secretariatSalleCumuleeAutresLitterairesMap.get(secretariat).getEffectif());
                    sal.setNbsal(secretariatSalleCumuleeAutresLitterairesMap.get(secretariat).getNbsal());
                    sallesList.add(sal);
                }
                if (secretariatSalleSimplesAutresLitterairesMap.containsKey(secretariat)) {
                    for (Sallesecret salle : secretariatSalleSimplesAutresLitterairesMap.get(secretariat)) {
                        salle.calculNbsal();
                        sallesList.add(salle);
                    }
                }
                if (secretariatSalleCumuleeScientifiquesMap.containsKey(secretariat)) {
                    secretariatSalleCumuleeScientifiquesMap.get(secretariat).calculNbsal();
                    Sallesecret sal = new Sallesecret();
                    sal.setSecretariat(secretariat);
                    sal.setSerie(secretariatSalleCumuleeScientifiquesMap.get(secretariat).getSerie());
                    sal.setEffectif(secretariatSalleCumuleeScientifiquesMap.get(secretariat).getEffectif());
                    sal.setNbsal(secretariatSalleCumuleeScientifiquesMap.get(secretariat).getNbsal());
                    sallesList.add(sal);
                }
                if (secretariatSalleSimplesScientifiquesMap.containsKey(secretariat)) {
                    for (Sallesecret salle : secretariatSalleSimplesScientifiquesMap.get(secretariat)) {
                        salle.calculNbsal();
                        sallesList.add(salle);
                    }
                }
                secretariatSallesMap.put(secretariat, sallesList);
            }

            ArrayList<Souscentre> tousSouscentres = new ArrayList<>();
            //remplissage de tousSouscentres
            for (Souscentre souscentre : souscentresList) {
                if (!tousSouscentres.contains(souscentre)) {
                    tousSouscentres.add(souscentre);
                }
            }
            for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                if (!tousSouscentres.contains(souscentre)) {
                    tousSouscentres.add(souscentre);
                }
            }

            try {
                List<Map<String, Object>> datasource = new ArrayList<>();
                List<Region> regions = metier.findAllRegions();
                for (Region region : regions) {
                    int num = 0;
                    int nbSurvDesSurvRegional = 0;
                    for (Souscentre souscentre : tousSouscentres) {
                        if (region.getNomreg().equals(souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                            int nbsec = 0;
                            int nbtypesalles = 0;
                            if (!souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                nbsec = 1;
                            } else {
                                nbsec = souscentreSecretariatsMap.get(souscentre).size();
                            }
                            for (int i = 0; i < nbsec; i++) {
                                String souscentreAffiche = "";
                                String serie = "";
                                int effectif = 0;
                                int nbsal = 0;
                                int nbsaltotal = 0;
                                int nbsurv = 0;
                                int nbSurvDesSurv = 0;//sous-centre ou secrÃ©tariat
                                if (!souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                    nbtypesalles = souscentreSallesMap.get(souscentre).size();
                                } else {
                                    nbtypesalles = secretariatSallesMap.get(souscentreSecretariatsMap.get(souscentre).get(i)).size();
                                }
                                for (int j = 0; j < nbtypesalles; j++) {
                                    if (!souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                        souscentreAffiche = souscentre.getNomsouscent();
                                        serie = souscentreSallesMap.get(souscentre).get(j).getSerie();
                                        effectif = souscentreSallesMap.get(souscentre).get(j).getEffectif();
                                        nbsal = souscentreSallesMap.get(souscentre).get(j).getNbsal();
                                        nbsurv = 2 * nbsal;
                                        nbSurvDesSurv = 0;
                                    } else {
                                        if (souscentreSecretariatsMap.get(souscentre).get(i).getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                                            souscentreAffiche = souscentreSecretariatsMap.get(souscentre).get(i).getEtablissement().getAbreviation() + " (Sec. " + souscentreSecretariatsMap.get(souscentre).get(i).getNumsec() + ")";
                                        } else {
                                            souscentreAffiche = souscentreSecretariatsMap.get(souscentre).get(i).getEtablissement().getAbreviation() + " (Sec. " + souscentreSecretariatsMap.get(souscentre).get(i).getNumsec() + " du sous-centre " + souscentre.getEtablissement().getAbreviation() + ")";
                                        }
                                        serie = secretariatSallesMap.get(souscentreSecretariatsMap.get(souscentre).get(i)).get(j).getSerie();
                                        effectif = secretariatSallesMap.get(souscentreSecretariatsMap.get(souscentre).get(i)).get(j).getEffectif();
                                        nbsal = secretariatSallesMap.get(souscentreSecretariatsMap.get(souscentre).get(i)).get(j).getNbsal();
                                        nbsurv = 2 * nbsal;
                                        nbSurvDesSurv = 0;
                                    }

                                    Map<String, Object> row = new HashMap<>();
                                    row.put("num", num++);
                                    row.put("region", region.getNomreg());
                                    row.put("session", anneeSelected);
                                    row.put("examen", examenSelected.getNomexam());
                                    row.put("souscentre", souscentreAffiche);
                                    row.put("serie", serie);
                                    row.put("effectif", effectif);
                                    row.put("nbsal", nbsal);
                                    row.put("nbsurv", nbsurv);
                                    nbsaltotal += nbsal;
                                    nbSurvDesSurv = calculNombreSurvDesSurv(nbsaltotal);
                                    if (j == nbtypesalles - 1) {
                                        nbSurvDesSurvRegional += nbSurvDesSurv;
                                    }
                                    row.put("nbSurvDesSurv", nbSurvDesSurv);
                                    row.put("nbSurvDesSurvRegional", nbSurvDesSurvRegional);
                                    datasource.add(row);
                                }
                            }
                        }
                    }
                }
                JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatNombreDeSallesESGReport.jrxml");
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empÃªche jasperviewer de fermer l'appli lorsqu'on le ferme
                jasperViewer.setVisible(true);
            } catch (JRException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
            souscentreSalleSimplesScientifiquesMap.clear();//on vide le hashmap
            souscentreSalleCumuleeScientifiquesMap.clear();//on vide le hashmap
            souscentreSalleSimplesAutresLitterairesMap.clear();//on vide le hashmap
            souscentreSalleCumuleeAutresLitterairesMap.clear();//on vide 
            souscentreSalleSimplesABIMap.clear();
            souscentreSalleCumuleeABIMap.clear();
            souscentreSallesMap.clear();
            souscentresList.clear();
            souscentreStatistiqueABIMap.clear();
            souscentreStatistiqueAutresLitterairesMap.clear();
            souscentreStatistiqueScientifiquesMap.clear();
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Tous les champs sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonVisualiserActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatNbSallesCompositionESG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatNbSallesCompositionESG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatNbSallesCompositionESG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatNbSallesCompositionESG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatNbSallesCompositionESG().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonVisualiser;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Examen> examens = null;
    private Examen examenSelected = null;
    private String[] examensList = null;
    private String[] sessionsCombo = null;
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private String phase = "ECRIT";
    DecimalFormat df = new DecimalFormat("00.00");
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private List<Secretariat> secretariats = null;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        examens = metier.findAllExamens();

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int i = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[i++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "GEN"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));
    }

    private void infoSaisies() {
        anneeString = (String) jComboBoxSession.getSelectedItem();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();

    }

    private void videFrame() {
        jComboBoxSession.setSelectedIndex(0);
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte Ã  la ligne dans le textArea
        }
    }

    private int nombreCandidatsParSalle(Examen examen) {//pas important car non utilisÃ© ici mais dans salle et sallecumulÃ©e
        int ncandParSalle = 0;
        if (examen.getNiveau().equals("PROB") && examen.getType().equals("GEN")) {
            ncandParSalle = 48;
        }
        if (examen.getNiveau().equals("BACC") && examen.getType().equals("GEN")) {
            ncandParSalle = 40;
        }
        return ncandParSalle;
    }

    /*
    private int nombreSallesParSurveillantExterne(Examen examen) {
        int nbSalleParSurv = 0;
        if (examen.getNiveau().equals("PROB") && (examen.getType().equals("GEN") || examen.getType().equals("STT"))) {
            nbSalleParSurv = 6;
        }
        if (examen.getNiveau().equals("BACC") && (examen.getType().equals("GEN") || examen.getType().equals("STT"))) {
            nbSalleParSurv = 5;
        }
        return nbSalleParSurv;
    }
     */
    private int calculNombreSurvDesSurv(int nbsal) {
        int nbSurvDesSurv = 0;
        if (nbsal >= 4 && nbsal <= 6) {
            nbSurvDesSurv = 1;
        }
        if (nbsal >= 7 && nbsal <= 13) {
            nbSurvDesSurv = 2;
        }
        if (nbsal >= 14 && nbsal <= 20) {
            nbSurvDesSurv = 3;
        }
        if (nbsal >= 21 && nbsal <= 27) {
            nbSurvDesSurv = 4;
        }
        if (nbsal >= 28 && nbsal <= 34) {
            nbSurvDesSurv = 5;
        }
        if (nbsal >= 35 && nbsal <= 41) {
            nbSurvDesSurv = 6;
        }
        if (nbsal >= 42 && nbsal <= 48) {
            nbSurvDesSurv = 7;
        }
        if (nbsal >= 49 && nbsal <= 54) {
            nbSurvDesSurv = 8;
        }

        if (nbsal >= 55) {
            nbSurvDesSurv = 9;
        }
        return nbSurvDesSurv;
    }
}
