package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Arrondissement;
import couche_jpa.Caisse;
import couche_jpa.Centrebilletage;
import couche_jpa.Departement;
import couche_jpa.Eltpratiqueti;
import couche_jpa.Examen;
import couche_jpa.Groupe;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_jpa.Statistique;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 *
 * @author famille chijou
 */
public class VueEtatVacationPratiqueProbESGserieTI extends javax.swing.JFrame {

    /**
     * Creates new form VueEtatMatiereDoeuvre
     */
    public VueEtatVacationPratiqueProbESGserieTI() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jPanelGestionEtat = new javax.swing.JPanel();
        jButtonCreerEtats = new javax.swing.JButton();
        jButtonMettreAjourEtats = new javax.swing.JButton();
        jButtonVisualiserEtats = new javax.swing.JButton();
        jButtonSupprimerEtats = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jPanelChoixSouscentre = new javax.swing.JPanel();
        jLabelRegion = new javax.swing.JLabel();
        jComboBoxRegion = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixSouscentrepratique = new javax.swing.JButton();
        jLabelDepartement = new javax.swing.JLabel();
        jComboBoxDepartement = new javax.swing.JComboBox<>();
        jLabelNomCentre = new javax.swing.JLabel();
        jComboBoxSouscentre = new javax.swing.JComboBox<>();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jLabelDepartement1 = new javax.swing.JLabel();
        jComboBoxArrondissement = new javax.swing.JComboBox<>();
        jPanelCout = new javax.swing.JPanel();
        jButtonCreerParametres = new javax.swing.JButton();
        jButtonListerParametres = new javax.swing.JButton();
        jButtonAnnulerParametres = new javax.swing.JButton();
        jLabelNbvacation = new javax.swing.JLabel();
        jTextFieldNbvacation = new javax.swing.JTextField();
        jButtonSupprimerParametres = new javax.swing.JButton();
        jTextFieldNbchefsal = new javax.swing.JTextField();
        jLabelNbchefsal = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT VACATION DE PRATIQUE D'INFORMATIQUE");

        jPanelGestionEtat.setBackground(new java.awt.Color(0, 255, 255));
        jPanelGestionEtat.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer l'état", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 102, 255))); // NOI18N

        jButtonCreerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEtats.setText("Créer");
        jButtonCreerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEtatsActionPerformed(evt);
            }
        });

        jButtonMettreAjourEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjourEtats.setText("Mettre à jour");
        jButtonMettreAjourEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourEtatsActionPerformed(evt);
            }
        });

        jButtonVisualiserEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserEtats.setText("Visualiser");
        jButtonVisualiserEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserEtatsActionPerformed(evt);
            }
        });

        jButtonSupprimerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEtats.setText("Supprimer");
        jButtonSupprimerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEtatsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelGestionEtatLayout = new javax.swing.GroupLayout(jPanelGestionEtat);
        jPanelGestionEtat.setLayout(jPanelGestionEtatLayout);
        jPanelGestionEtatLayout.setHorizontalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jButtonCreerEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonMettreAjourEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiserEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerEtats)
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanelGestionEtatLayout.setVerticalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonMettreAjourEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCreerEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonSupprimerEtats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVisualiserEtats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jPanelChoixSouscentre.setBackground(new java.awt.Color(153, 255, 255));
        jPanelChoixSouscentre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un sous-centre de probatoire ESG série TI et une session d'examen", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jLabelRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegion.setText("Région :");

        jComboBoxRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixSouscentrepratique.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixSouscentrepratique.setText("Annuler");
        jButtonAnnulerChoixSouscentrepratique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixSouscentrepratiqueActionPerformed(evt);
            }
        });

        jLabelDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartement.setText("Département :");

        jComboBoxDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementActionPerformed(evt);
            }
        });

        jLabelNomCentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNomCentre.setText("Sous-centre :");

        jComboBoxSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSouscentreActionPerformed(evt);
            }
        });

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jLabelDepartement1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartement1.setText("Arrondissement :");

        jComboBoxArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixSouscentreLayout = new javax.swing.GroupLayout(jPanelChoixSouscentre);
        jPanelChoixSouscentre.setLayout(jPanelChoixSouscentreLayout);
        jPanelChoixSouscentreLayout.setHorizontalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelSession)
                    .addComponent(jLabelRegion)
                    .addComponent(jLabelDepartement))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                                .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelNomCentre))
                            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                                .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addComponent(jLabelDepartement1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(152, 152, 152)
                        .addComponent(jButtonAnnulerChoixSouscentrepratique)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixSouscentreLayout.setVerticalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDepartement1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelNomCentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnulerChoixSouscentrepratique, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelCout.setBackground(new java.awt.Color(255, 204, 204));
        jPanelCout.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Paramètres de calcul", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jButtonCreerParametres.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerParametres.setText("Créer");
        jButtonCreerParametres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerParametresActionPerformed(evt);
            }
        });

        jButtonListerParametres.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonListerParametres.setText("Lister");
        jButtonListerParametres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerParametresActionPerformed(evt);
            }
        });

        jButtonAnnulerParametres.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerParametres.setText("Annuler");
        jButtonAnnulerParametres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerParametresActionPerformed(evt);
            }
        });

        jLabelNbvacation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbvacation.setText("Nombre de vacations :");

        jTextFieldNbvacation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonSupprimerParametres.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerParametres.setText("Supprimer");
        jButtonSupprimerParametres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerParametresActionPerformed(evt);
            }
        });

        jTextFieldNbchefsal.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelNbchefsal.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbchefsal.setText("Nombre de chefs de salle :");

        javax.swing.GroupLayout jPanelCoutLayout = new javax.swing.GroupLayout(jPanelCout);
        jPanelCout.setLayout(jPanelCoutLayout);
        jPanelCoutLayout.setHorizontalGroup(
            jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCoutLayout.createSequentialGroup()
                .addGap(16, 16, Short.MAX_VALUE)
                .addGroup(jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelCoutLayout.createSequentialGroup()
                        .addComponent(jLabelNbvacation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldNbvacation, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelCoutLayout.createSequentialGroup()
                        .addComponent(jButtonCreerParametres)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonListerParametres)))
                .addGroup(jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCoutLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSupprimerParametres)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnulerParametres))
                    .addGroup(jPanelCoutLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabelNbchefsal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldNbchefsal, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 36, Short.MAX_VALUE))
        );
        jPanelCoutLayout.setVerticalGroup(
            jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCoutLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNbvacation, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNbchefsal, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNbchefsal, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNbvacation, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonListerParametres, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSupprimerParametres, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCreerParametres, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerParametres, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel2.setText("AU PROBATOIRE ESG SERIE TI");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(155, 155, 155)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(318, 318, 318)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jPanelCout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(528, 528, 528)
                        .addComponent(jButtonFermer))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelCout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)))
                .addGap(18, 18, 18)
                .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonCreerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEtatsActionPerformed
        infoSaisies();
        Map<Souscentre, Integer> souscentreEffectifTIMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats de la série TI            
        Map<Souscentre, Eltpratiqueti> souscentreEltpratiquetiMap = new HashMap<>();//contient l'ensemble des sous-centres chacun avec son eltpratiqueti 
        if (!anneeString.equals("---")) {
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type("PROB", "GEN");
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION PRATIQUE TI/ESG");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, "PROB", "GEN");
            Examen examenSelected = new Examen();
            if (!caisses.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de vacation pratique TI/ESG existe déjà pour ce groupe d'examens !");
            } else {
                for (Examen e : examens) {
                    if (e.getSigle().equals("PROB ESG")) {
                        examenSelected = e;
                        break;
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }              

                //remplissage de souscentreEffectifTIMap
                List<Statistique> lesStats = metier.findAllStatistiquesTID1ExamenDans1Session(examenSelected.getSigle(), anneeSelected);
                for (Statistique s : lesStats) {
                    souscentreEffectifTIMap.put(s.getSouscentre(), s.getNombre());
                }

                lesEltpratiqueti = metier.findAllEltpratiquetiD1Session(anneeSelected);

                //remplissage de souscentreEltpratiquetiMap
                for (Eltpratiqueti eltpratiqueti : lesEltpratiqueti) {
                    souscentreEltpratiquetiMap.put(eltpratiqueti.getSouscentre(), eltpratiqueti);
                }

                boolean testSicreer = false;
                if (!souscentreEffectifTIMap.isEmpty()) {
                    try {
                        for (Souscentre souscentre : souscentreEffectifTIMap.keySet()) {
                            if (souscentreEltpratiquetiMap.containsKey(souscentre)) {
                                Eltpratiqueti eltpratiqueti = souscentreEltpratiquetiMap.get(souscentre);
                                determinerCout(souscentre, souscentreEffectifTIMap, eltpratiqueti);
                                int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                metier.creerCaisse(new Caisse(totalArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                testSicreer = true;
                            }
                        }
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testSicreer) {
                        JOptionPane.showMessageDialog(this, "Etats de vacation pratique TI/ESG créés avec succès pour ce groupe d'examens !");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Aucun candidat de la série TI au probatoire ESG trouvé dans la base de données !");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Les champs session et imputation sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonCreerEtatsActionPerformed

    private void jButtonMettreAjourEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourEtatsActionPerformed
        infoSaisies();
        Map<Souscentre, Integer> souscentreEffectifTIMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats de la série TI 
        Map<Souscentre, Eltpratiqueti> souscentreEltpratiquetiMap = new HashMap<>();//contient l'ensemble des sous-centres chacun avec son eltpratiqueti 
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de vacation pratique TI/ESG ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION PRATIQUE TI/ESG");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, "PROB", "GEN");
                Examen examenSelected = new Examen();
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de vacation de pratique TI/ESG n'existe encore !");
                } else {
                    for (Examen e : examens) {
                        if (e.getSigle().equals("PROB ESG")) {
                            examenSelected = e;
                            break;
                        }
                    }
                    //on conserve quelques info de ces anciennes caisses
                    Groupe groupe = caisses.get(0).getGroupe();
                    sessionSelected = caisses.get(0).getSession();
                    //on supprime toutes les anciennes caisses du groupe d'examens ainsi que les intervsec
                    for (Caisse c : caisses) {
                        metier.supprimerCaisse(c);
                    }

                    //remplissage de souscentreEffectifTIMap
                    List<Statistique> lesStats = metier.findAllStatistiquesTID1ExamenDans1Session(examenSelected.getSigle(), anneeSelected);
                    for (Statistique s : lesStats) {
                        souscentreEffectifTIMap.put(s.getSouscentre(), s.getNombre());
                    }

                    lesEltpratiqueti = metier.findAllEltpratiquetiD1Session(anneeSelected);

                    //remplissage de souscentreEltpratiquetiMap
                    for (Eltpratiqueti eltpratiqueti : lesEltpratiqueti) {
                        souscentreEltpratiquetiMap.put(eltpratiqueti.getSouscentre(), eltpratiqueti);
                    }

                    if (!souscentreEffectifTIMap.isEmpty()) {
                        boolean testSimodifier = false;
                        try {
                            for (Souscentre souscentre : souscentreEffectifTIMap.keySet()) {
                                if (souscentreEltpratiquetiMap.containsKey(souscentre)) {
                                    Eltpratiqueti eltpratiqueti = souscentreEltpratiquetiMap.get(souscentre);
                                    determinerCout(souscentre, souscentreEffectifTIMap, eltpratiqueti);
                                    int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                    metier.creerCaisse(new Caisse(totalArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                    testSimodifier = true;
                                }
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testSimodifier) {
                            JOptionPane.showMessageDialog(this, "Etats de vacations de pratique TI/ESG modifiés avec succès !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun candidat de la série TI au probatoire ESG trouvé dans la base de données !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Le champ session est obligatoire !");
            }
        }
    }//GEN-LAST:event_jButtonMettreAjourEtatsActionPerformed

    private void jButtonVisualiserEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserEtatsActionPerformed
        infoSaisies();
        Map<Souscentre, Integer> souscentreEffectifTIMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats de la série TI 
        Map<Souscentre, Eltpratiqueti> souscentreEltpratiquetiMap = new HashMap<>();//contient l'ensemble des sous-centres chacun avec son eltpratiqueti 
        Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
        ArrayList<String> typesBruts = new ArrayList<>();
        ArrayList<String> typesAconsiderer = new ArrayList<>();
        ArrayList<String> niveauxAconsiderer = new ArrayList<>();
        Examen examenSelected = new Examen();
        if (!anneeString.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION PRATIQUE TI/ESG");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, "PROB", "GEN");

            boolean continuer = false;
            for (Caisse c : caisses) {
                if (c.getGroupe().getNiveau().equals("PROB") && c.getGroupe().getType().equals("GEN")) {
                    continuer = true;
                    break;
                }
            }
            if (!continuer) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de vacations de pratique TI/ESG n'ont pas encore été créés !");
            } else {

                for (Examen e : examens) {
                    if (e.getSigle().equals("PROB ESG")) {
                        examenSelected = e;
                        break;
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                //recherche des types des examens à utiliser
                typesBruts.add("ESG");

                typesAconsiderer.add("ESG");
                typesAconsiderer.add("TOUT");

                //recherche des niveaux des examens à utiliser
                niveauxAconsiderer.add("PROB");
                niveauxAconsiderer.add("TOUT");

                //recherche des centres de billetage
                for (String niveau : niveauxAconsiderer) {
                    for (String type : typesAconsiderer) {
                        List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                        for (Centrebilletage centrebilletage : desCentrebilletages) {
                            ArrayList<Souscentre> souscentresList = new ArrayList<>();
                            if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                for (Secteurcouv sect : secteurs) {
                                    if (!souscentresList.contains(sect.getSouscentre())) {
                                        souscentresList.add(sect.getSouscentre());
                                    }
                                }
                                centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                            }
                        }
                    }
                }

                //remplissage de souscentreEffectifTIMap
                List<Statistique> lesStats = metier.findAllStatistiquesTID1ExamenDans1Session(examenSelected.getSigle(), anneeSelected);
                for (Statistique s : lesStats) {
                    souscentreEffectifTIMap.put(s.getSouscentre(), s.getNombre());
                }

                lesEltpratiqueti = metier.findAllEltpratiquetiD1Session(anneeSelected);

                //remplissage de souscentreEltpratiquetiMap
                for (Eltpratiqueti eltpratiqueti : lesEltpratiqueti) {
                    souscentreEltpratiquetiMap.put(eltpratiqueti.getSouscentre(), eltpratiqueti);
                }

                if (!souscentreEffectifTIMap.isEmpty()) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    int totalMontant = 0;
                                    ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                    for (int i = 0; i < souscentresList.size(); i++) {
                                        Souscentre souscentre = souscentresList.get(i);
                                        if (souscentreEffectifTIMap.containsKey(souscentre)) {
                                            if (souscentreEltpratiquetiMap.containsKey(souscentre)) {
                                                Eltpratiqueti eltpratiqueti = souscentreEltpratiquetiMap.get(souscentre);
                                                determinerCout(souscentre, souscentreEffectifTIMap, eltpratiqueti);

                                                Map<String, Object> row = new HashMap<>();
                                                row.put("session", anneeSelected);                                              
                                                row.put("region", region.getNomreg());
                                                row.put("reference", "obcbudget-v.3");
                                                row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                row.put("souscentre", souscentre.getNomsouscent());
                                                row.put("effectif", effectif);
                                                row.put("nbvac", nbvac);
                                                row.put("coutvac", coutvac);
                                                row.put("nbcopies", effectif);
                                                row.put("coutcopies", coutcopies);
                                                row.put("nbchefsal", nbchefsal);
                                                row.put("indemnite", indemnite);
                                                row.put("supplement", supplement);
                                                row.put("baspage", "OBC/AR/"+centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                row.put("total", totalArrondi);
                                                totalMontant += totalArrondi;
                                                row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                datasource.add(row);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatVacationPratiqueInfoProbESGserieTIReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Aucun candidat de la série TI au probatoire ESG trouvé dans la base de données !");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Le champ session est obligatoire !");
        }
    }//GEN-LAST:event_jButtonVisualiserEtatsActionPerformed

    private void jButtonSupprimerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEtatsActionPerformed
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de TI/ESG ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION PRATIQUE TI/ESG");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, "PROB", "GEN");
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de vacation de pratique TI/ESG n'existe !");
                } else {
                    try {
                        for (Caisse caisse : caisses) {
                            metier.supprimerCaisse(caisse);
                        }
                        JOptionPane.showMessageDialog(this, "Etats de vacations de pratique TI/ESG supprimés avec succès !");
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerEtatsActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jComboBoxRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionActionPerformed
        remplirDepartementCombobox();
    }//GEN-LAST:event_jComboBoxRegionActionPerformed

    private void jButtonAnnulerChoixSouscentrepratiqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixSouscentrepratiqueActionPerformed
        jComboBoxRegion.setSelectedIndex(0);
        jComboBoxDepartement.setSelectedIndex(0);
        jComboBoxArrondissement.setSelectedIndex(0);
        jComboBoxSouscentre.setSelectedIndex(0);
        jComboBoxSession.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixSouscentrepratiqueActionPerformed

    private void jComboBoxDepartementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementActionPerformed
        remplirArrondissementCombobox();
    }//GEN-LAST:event_jComboBoxDepartementActionPerformed

    private void jComboBoxSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSouscentreActionPerformed
        //
    }//GEN-LAST:event_jComboBoxSouscentreActionPerformed

    private void jButtonCreerParametresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerParametresActionPerformed
        infoSaisies();
        if (anneeString.equals("---") || nomSouscentreSelected.equals("---") || nbvacString.equals("") || nbchefsalString.equals("")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir une session, un sous-centre, donner le nombre de vacations et le nombre de chefs de salle !");
        } else {
            validerNbvacation(nbvacString);
            validerNbchefsal(nbchefsalString);
            if (!continuerNbvac || nbvacSaisi == 0 || !continuerNbchefsal || nbchefsalSaisi == 0) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Au moins un des nombres saisis est incorrect !");
            } else {
                anneeSelected = Integer.parseInt(anneeString);
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                for (Souscentre souscentre : souscentres) {
                    if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                        souscentreSelected = souscentre;
                        break;
                    }
                }

                try {
                    metier.creerEltpratiqueti(new Eltpratiqueti(souscentreSelected, sessionSelected, nbvacSaisi, nbchefsalSaisi));
                    JOptionPane.showMessageDialog(this, "Nombre de vacations et de chefs de salle enregistrés avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de d'enregistrer nombre de vacations et de chefs de salle du sous-centre [" + nomSouscentreSelected + "]" + "\n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonCreerParametresActionPerformed

    private void jButtonListerParametresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerParametresActionPerformed
        infoSaisies();
        Map<Souscentre, Eltpratiqueti> souscentreEltpratiquetiMap = new HashMap<>();//contient chaque sous-centre et son Eltpratiqueti
        if (anneeString.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir une session !");
        } else {
            anneeSelected = Integer.parseInt(anneeString);
            lesEltpratiqueti = metier.findAllEltpratiquetiD1Session(anneeSelected);

            if (!lesEltpratiqueti.isEmpty()) {
                for (Eltpratiqueti eltpratiqueti : lesEltpratiqueti) {
                    if(!souscentreEltpratiquetiMap.containsKey(eltpratiqueti.getSouscentre())){
                        souscentreEltpratiquetiMap.put(eltpratiqueti.getSouscentre(), eltpratiqueti);
                    }
                }
                try {
                    List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                    for (Region region : regions) {
                        int i = 1;
                        for (Souscentre souscentre : souscentreEltpratiquetiMap.keySet()) {
                            Eltpratiqueti eltpratiqueti=souscentreEltpratiquetiMap.get(souscentre);
                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                                Map<String, Object> row = new HashMap<>();
                                row.put("session", anneeSelected);
                                row.put("region", region.getNomreg());
                                row.put("num", i++);
                                row.put("souscentre", souscentre.getNomsouscent());
                                row.put("nbvac", eltpratiqueti.getNbvac());
                                row.put("nbchefsal", eltpratiqueti.getNbchefsal());
                                datasource.add(row);
                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeParametresEltpratiquetiReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Aucun nombre de vacations ou de chefs de salle trouvé dans la base de données !");
            }
        }
    }//GEN-LAST:event_jButtonListerParametresActionPerformed

    private void jButtonAnnulerParametresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerParametresActionPerformed
        jTextFieldNbchefsal.setText("");
        jTextFieldNbvacation.setText("");
    }//GEN-LAST:event_jButtonAnnulerParametresActionPerformed

    private void jButtonSupprimerParametresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerParametresActionPerformed
        infoSaisies();
        if (anneeString.equals("---") || nomSouscentreSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir une session et un sous-centre !");
        } else {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les nombres de vacations et de chefs de salle du sous-centre [" + nomSouscentreSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                anneeSelected = Integer.parseInt(anneeString);
                try {
                    Eltpratiqueti eltpratiqueti = metier.findEltpratiquetiD1SouscentreD1Session(nomSouscentreSelected, anneeSelected);
                    metier.supprimerEltpratiqueti(eltpratiqueti);
                    JOptionPane.showMessageDialog(this, "Nombres de vacations et de chefs de salle supprimés avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer les nombres de vacations et de chefs de salle au sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerParametresActionPerformed

    private void jComboBoxArrondissementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementActionPerformed
        remplirSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatVacationPratiqueProbESGserieTI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatVacationPratiqueProbESGserieTI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatVacationPratiqueProbESGserieTI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatVacationPratiqueProbESGserieTI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatVacationPratiqueProbESGserieTI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonAnnulerChoixSouscentrepratique;
    private javax.swing.JButton jButtonAnnulerParametres;
    private javax.swing.JButton jButtonCreerEtats;
    private javax.swing.JButton jButtonCreerParametres;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonListerParametres;
    private javax.swing.JButton jButtonMettreAjourEtats;
    private javax.swing.JButton jButtonSupprimerEtats;
    private javax.swing.JButton jButtonSupprimerParametres;
    private javax.swing.JButton jButtonVisualiserEtats;
    private javax.swing.JComboBox<String> jComboBoxArrondissement;
    private javax.swing.JComboBox<String> jComboBoxDepartement;
    private javax.swing.JComboBox<String> jComboBoxRegion;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxSouscentre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelDepartement;
    private javax.swing.JLabel jLabelDepartement1;
    private javax.swing.JLabel jLabelNbchefsal;
    private javax.swing.JLabel jLabelNbvacation;
    private javax.swing.JLabel jLabelNomCentre;
    private javax.swing.JLabel jLabelRegion;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JPanel jPanelChoixSouscentre;
    private javax.swing.JPanel jPanelCout;
    private javax.swing.JPanel jPanelGestionEtat;
    private javax.swing.JTextField jTextFieldNbchefsal;
    private javax.swing.JTextField jTextFieldNbvacation;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Examen> examens = null;
    private List<Region> regions = null;
    private String nomRegionSelected = "";
    private List<Departement> departements = null;
    private List<Arrondissement> arrondissements = null;
    private String[] sessionsCombo = null;
    private String[] regionsCombo = null;
    private String[] departementsCombo = null;
    private String[] arrondissementsCombo = null;
    private String nomArrondissementSelected = "";
    private String nomSouscentreSelected = "";
    private List<Souscentre> souscentres = null;
    private ArrayList<Souscentre> souscentresTI = new ArrayList<>();
    private Souscentre souscentreSelected = null;
    private String[] souscentresCombo = null;
    private String nomDepartementSelected = "";
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private int cout = 0;
    private List<Caisse> caisses = null;
    private int effectif = 0, nbchefsal = 0, nbvac = 0, total = 0, coutvac = 0, coutcopies = 0, indemnite = 0, supplement = 0, txvac = 1500, txcopie = 150;
    private boolean continuerNbvac = false;
    private boolean continuerNbchefsal = false;
    private int nbvacSaisi = 0;
    private int nbchefsalSaisi = 0;
    private String nbvacString = "";
    private String nbchefsalString = "";
    private List<Eltpratiqueti> lesEltpratiqueti = null;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        examens = metier.findAllExamens();
        regions = metier.findAllRegions();
        departements = metier.findAllDepartements();

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int i = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[i++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des régions
        regionsCombo = new String[regions.size() + 1];
        regionsCombo[0] = "---";
        int j = 1;
        for (Region region : regions) {
            regionsCombo[j++] = region.getNomreg();
        }
        jComboBoxRegion.setModel(new DefaultComboBoxModel(regionsCombo));
        
        remplirDepartementCombobox();
        remplirArrondissementCombobox();
        remplirSouscentreCombobox();
    }

    private void infoSaisies() {
        anneeString = (String) jComboBoxSession.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        nbvacString = (String) jTextFieldNbvacation.getText();
        nbchefsalString = (String) jTextFieldNbchefsal.getText();
    }

    private void determinerCout(Souscentre souscentre, Map<Souscentre, Integer> souscentreEffectifTIMap, Eltpratiqueti eltpratiqueti) {
        effectif = souscentreEffectifTIMap.get(souscentre);
        nbchefsal = eltpratiqueti.getNbchefsal();
        nbvac = eltpratiqueti.getNbvac();
        coutvac = nbvac * txvac;
        coutcopies = effectif * txcopie;
        indemnite = nbchefsal * 3000;
        supplement = effectif * 25;

        total = coutvac + coutcopies + indemnite + supplement;
    }

    private void remplirDepartementCombobox() {
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        departements = metier.findAllDepartementsD1Region(nomRegionSelected);
        //on remplit la combobox des départements
        departementsCombo = new String[departements.size() + 1];
        departementsCombo[0] = "---";
        int i = 1;
        for (Departement departement : departements) {
            departementsCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartement.setModel(new DefaultComboBoxModel(departementsCombo));
    }

    private void remplirArrondissementCombobox() {
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        arrondissements = metier.findAllArrondissementsD1Departement(nomDepartementSelected);
        //on remplit la combobox des arrondissements
        arrondissementsCombo = new String[arrondissements.size() + 1];
        arrondissementsCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissements) {
            arrondissementsCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissement.setModel(new DefaultComboBoxModel(arrondissementsCombo));
    }

    private void remplirSouscentreCombobox() {
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        souscentres = metier.findAllSouscentresD1Arrondissement(nomArrondissementSelected);
        //on remplit la combobox des sous-centres de pratique
        souscentresCombo = new String[souscentres.size() + 1];
        souscentresCombo[0] = "---";
        int i = 1;
        for (Souscentre souscentre : souscentres) {
            souscentresCombo[i++] = souscentre.getNomsouscent();
        }
        jComboBoxSouscentre.setModel(new DefaultComboBoxModel(souscentresCombo));
    }

    private void validerNbvacation(String nbreString) {
        try {
            nbvacSaisi = Integer.parseInt(nbreString);
            continuerNbvac = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de vacations doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbvac = false;
        }
    }

    private void validerNbchefsal(String nbreString) {
        try {
            nbchefsalSaisi = Integer.parseInt(nbreString);
            continuerNbchefsal = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de chefs de salle doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbchefsal = false;
        }
    }
}
