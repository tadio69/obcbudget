package couche_ui;

import couche_jpa.Arrondissement;
import couche_jpa.Bureau;
import couche_jpa.Centrebilletage;
import couche_jpa.Departement;
import couche_jpa.Etablissement;
import couche_jpa.Personnel;
import couche_jpa.Region;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueCentrebilletage extends javax.swing.JFrame {

    DefaultTableModel model;

    public VueCentrebilletage() {
        initComponents();
        model = (DefaultTableModel) jTable1.getModel();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabelRegion = new javax.swing.JLabel();
        jLabelDepartement = new javax.swing.JLabel();
        jComboBoxRegion = new javax.swing.JComboBox<>();
        jComboBoxDepartement = new javax.swing.JComboBox<>();
        jLabelEtablissement = new javax.swing.JLabel();
        jComboBoxEtablissement = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonCreer = new javax.swing.JButton();
        jButtonRechercher = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jLabelArrondissement = new javax.swing.JLabel();
        jComboBoxArrondissement = new javax.swing.JComboBox<>();
        jLabelDres = new javax.swing.JLabel();
        jCheckBoxDres = new javax.swing.JCheckBox();
        jLabelDdes = new javax.swing.JLabel();
        jCheckBoxDdes = new javax.swing.JCheckBox();
        jPanelExamens = new javax.swing.JPanel();
        jLabelNiveau = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jLabeBureau = new javax.swing.JLabel();
        jButtonOKbureau = new javax.swing.JButton();
        jLabeSecteurs = new javax.swing.JLabel();
        jButtonOKSecteurs = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("CENTRE DE BILLETAGE");

        jLabelRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegion.setText("Région :");

        jLabelDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartement.setText("Département :");

        jComboBoxRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionActionPerformed(evt);
            }
        });

        jComboBoxDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementActionPerformed(evt);
            }
        });

        jLabelEtablissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelEtablissement.setText("Etablissement :");

        jComboBoxEtablissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jTable1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "N° Ordre", "Région", "Département", "Arrondissement", "Etablissement", "Niveau", "Type", "Dres incluse(s)", "Ddes incluse(s)", "Version"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(true);
        jTable1.setShowVerticalLines(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButtonCreer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreer.setText("Créer");
        jButtonCreer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerActionPerformed(evt);
            }
        });

        jButtonRechercher.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonRechercher.setText("Rechercher");
        jButtonRechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRechercherActionPerformed(evt);
            }
        });

        jButtonSupprimer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jButtonAnnuler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jLabelArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissement.setText("Arrondissement :");

        jComboBoxArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementActionPerformed(evt);
            }
        });

        jLabelDres.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDres.setText("DRES incluse(s) :");

        jLabelDdes.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDdes.setText("DDES incluse(s) :");

        jPanelExamens.setBackground(new java.awt.Color(153, 255, 153));
        jPanelExamens.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Examens concernés", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(51, 0, 204))); // NOI18N

        jLabelNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveau.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanelExamensLayout = new javax.swing.GroupLayout(jPanelExamens);
        jPanelExamens.setLayout(jPanelExamensLayout);
        jPanelExamensLayout.setHorizontalGroup(
            jPanelExamensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelExamensLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanelExamensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelType)
                    .addComponent(jLabelNiveau))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelExamensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBoxNiveau, 0, 151, Short.MAX_VALUE)
                    .addComponent(jComboBoxType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanelExamensLayout.setVerticalGroup(
            jPanelExamensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelExamensLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelExamensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelExamensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jLabeBureau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabeBureau.setText("Créer son bureau :");

        jButtonOKbureau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonOKbureau.setText("OK");
        jButtonOKbureau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKbureauActionPerformed(evt);
            }
        });

        jLabeSecteurs.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabeSecteurs.setText("Y rattacher des centres :");

        jButtonOKSecteurs.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonOKSecteurs.setText("OK");
        jButtonOKSecteurs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKSecteursActionPerformed(evt);
            }
        });

        jButtonModifier.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonModifier.setText("Modifier");
        jButtonModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(404, 404, 404)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(286, 286, 286)
                        .addComponent(jButtonCreer)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonRechercher)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonModifier, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSupprimer)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnuler)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonFermer))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelDepartement)
                            .addComponent(jLabelRegion)
                            .addComponent(jLabelArrondissement)
                            .addComponent(jLabelEtablissement))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxArrondissement, 0, 342, Short.MAX_VALUE)
                            .addComponent(jComboBoxRegion, 0, 342, Short.MAX_VALUE)
                            .addComponent(jComboBoxDepartement, 0, 342, Short.MAX_VALUE)
                            .addComponent(jComboBoxEtablissement, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelDres)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxDres, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(73, 73, 73)
                                .addComponent(jLabelDdes)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxDdes, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanelExamens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabeSecteurs)
                                    .addComponent(jLabeBureau))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonOKSecteurs)
                                    .addComponent(jButtonOKbureau))))))
                .addGap(0, 45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabeBureau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonOKbureau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabeSecteurs, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonOKSecteurs, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanelExamens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelEtablissement, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxEtablissement, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelDdes, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxDdes, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDres, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxDres, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCreer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonRechercher, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSupprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnuler, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonModifier, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        videFrame();
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jComboBoxRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionActionPerformed
        remplirDepartementCombobox();
    }//GEN-LAST:event_jComboBoxRegionActionPerformed

    private void jComboBoxDepartementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementActionPerformed
        remplirArrondissementCombobox();
    }//GEN-LAST:event_jComboBoxDepartementActionPerformed

    private void jComboBoxArrondissementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementActionPerformed
        remplirEtablissementCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementActionPerformed

    private void jButtonCreerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        if (!nomEtablissementSelected.equals("---") && !niveauSelected.equals("---") && !typeSelected.equals("---")) {
            for (Etablissement etab : etablissements) {
                if (etab.getAbreviation().equals(nomEtablissementSelected)) {
                    etablissementSelected = etab;
                    break;
                }
            }
            boolean valDres = false;
            boolean valDdes = false;
            if (dresIncluses) {
                valDres = true;
            }
            if (ddesIncluses) {
                valDdes = true;
            }
            try {
                metier.creerCentrebilletage(new Centrebilletage(etablissementSelected, niveauSelected, typeSelected, valDres, valDdes));
                JOptionPane.showMessageDialog(this, "centre de billetage créé avec succès !");
                //videFrame();
                int i = 1;
                centrebilletages = metier.findAllCentrebilletagesD1Arrondissement(nomArrondissementSelected);
                for (Centrebilletage c : centrebilletages) {
                    model.insertRow(model.getRowCount(), new Object[]{c.getIdcentrebill(), i++, c.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), c.getEtablissement().getArrondissement().getDepartement().getNomdepart(), c.getEtablissement().getArrondissement().getNomarr(), c.getEtablissement().getAbreviation(), c.getNiveau(), c.getType(), c.getDres(), c.getDdes(),c.getVersion()});
                }
            } catch (ObcbudgetException ex) {
                JOptionPane.showMessageDialog(this, "Impossible de créer le centre de billetage [" + nomEtablissementSelected + "] \n raison:" + ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonCreerActionPerformed

    private void jButtonRechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRechercherActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        if (!nomRegionSelected.equals("---")) {
            if (!nomDepartementSelected.equals("---")) {
                if (!nomArrondissementSelected.equals("---")) {
                    if (!nomEtablissementSelected.equals("---")) {
                        try {
                            int i = 1;
                            centrebilletageRecherche = metier.findCentrebilletageD1Etablissement(nomEtablissementSelected);
                            model.insertRow(model.getRowCount(), new Object[]{centrebilletageRecherche.getIdcentrebill(), i++, centrebilletageRecherche.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), centrebilletageRecherche.getEtablissement().getArrondissement().getDepartement().getNomdepart(), centrebilletageRecherche.getEtablissement().getArrondissement().getNomarr(), centrebilletageRecherche.getEtablissement().getAbreviation(), centrebilletageRecherche.getNiveau(), centrebilletageRecherche.getType(), centrebilletageRecherche.getDres(), centrebilletageRecherche.getDdes(),centrebilletageRecherche.getVersion()});
                        } catch (ObcbudgetException ex) {
                            JOptionPane.showMessageDialog(this, "Impossible d'extraire le centre de billetage abrité par [" + nomEtablissementSelected + "] \n raison:" + ex.getMessage());
                        }
                    } else {
                        try {
                            int i = 1;
                            centrebilletages = metier.findAllCentrebilletagesD1Arrondissement(nomArrondissementSelected);
                            for (Centrebilletage c : centrebilletages) {
                                model.insertRow(model.getRowCount(), new Object[]{c.getIdcentrebill(), i++, c.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), c.getEtablissement().getArrondissement().getDepartement().getNomdepart(), c.getEtablissement().getArrondissement().getNomarr(), c.getEtablissement().getAbreviation(), c.getNiveau(), c.getType(), c.getDres(), c.getDdes(),c.getVersion()});
                            }
                        } catch (ObcbudgetException ex) {
                            JOptionPane.showMessageDialog(this, "Impossible d'extraire les centres de billetage de l'arrondissement [" + nomArrondissementSelected + "] \n raison:" + ex.getMessage());
                        }
                    }
                } else {
                    try {
                        int i = 1;
                        centrebilletages = metier.findAllCentrebilletagesD1Departement(nomDepartementSelected);
                        for (Centrebilletage c : centrebilletages) {
                            model.insertRow(model.getRowCount(), new Object[]{c.getIdcentrebill(), i++, c.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), c.getEtablissement().getArrondissement().getDepartement().getNomdepart(), c.getEtablissement().getArrondissement().getNomarr(), c.getEtablissement().getAbreviation(), c.getNiveau(), c.getType(), c.getDres(), c.getDdes(),c.getVersion()});
                        }
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible d'extraire les centres de billetage du département [" + nomDepartementSelected + "] \n raison:" + ex.getMessage());
                    }
                }
            } else {
                try {
                    int i = 1;
                    centrebilletages = metier.findAllCentrebilletagesD1Region(nomRegionSelected);
                    for (Centrebilletage c : centrebilletages) {
                        model.insertRow(model.getRowCount(), new Object[]{c.getIdcentrebill(), i++, c.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), c.getEtablissement().getArrondissement().getDepartement().getNomdepart(), c.getEtablissement().getArrondissement().getNomarr(), c.getEtablissement().getAbreviation(), c.getNiveau(), c.getType(), c.getDres(), c.getDdes(),c.getVersion()});
                    }
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible d'extraire les centres de billetage de la région [" + nomRegionSelected + "] \n raison:" + ex.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Au moins la région est obligatoire !");
        }
    }//GEN-LAST:event_jButtonRechercherActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        //remplit les champs
        int ligne = jTable1.getSelectedRow();
        idCentrebilletageCliked = (int) model.getValueAt(ligne, 0);
        jComboBoxRegion.setSelectedItem((String) model.getValueAt(ligne, 2));
        jComboBoxDepartement.setSelectedItem((String) model.getValueAt(ligne, 3));
        jComboBoxArrondissement.setSelectedItem((String) model.getValueAt(ligne, 4));
        jComboBoxEtablissement.setSelectedItem((String) model.getValueAt(ligne, 5));
        jComboBoxNiveau.setSelectedItem((String) model.getValueAt(ligne, 6));
        jComboBoxType.setSelectedItem((String) model.getValueAt(ligne, 7));
        jCheckBoxDres.setSelected((boolean) model.getValueAt(ligne, 8));
        jCheckBoxDdes.setSelected((boolean) model.getValueAt(ligne, 9));
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer le centre de billetage [" + nomEtablissementSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!nomEtablissementSelected.equals("---")) {
                try {
                    metier.supprimerCentrebilletage(metier.findCentrebilletageById(idCentrebilletageCliked));
                    JOptionPane.showMessageDialog(this, "Centre de billetage [" + nomEtablissementSelected + "] supprimé avec succès !");
                    int i = 1;
                    centrebilletages = metier.findAllCentrebilletagesD1Arrondissement(nomArrondissementSelected);
                    for (Centrebilletage c : centrebilletages) {
                        model.insertRow(model.getRowCount(), new Object[]{c.getIdcentrebill(), i++, c.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), c.getEtablissement().getArrondissement().getDepartement().getNomdepart(), c.getEtablissement().getArrondissement().getNomarr(), c.getEtablissement().getAbreviation(), c.getNiveau(), c.getType(), c.getDres(), c.getDdes(),c.getVersion()});
                    }
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer le centre de billetage [" + nomEtablissementSelected + "] \n raison:" + ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Le champ établissement est obligatoire !");
            }
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jButtonOKbureauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKbureauActionPerformed
        new VueBureau().setVisible(true);
    }//GEN-LAST:event_jButtonOKbureauActionPerformed

    private void jButtonOKSecteursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKSecteursActionPerformed
        new VueSecteurcouverture().setVisible(true);
    }//GEN-LAST:event_jButtonOKSecteursActionPerformed

    private void jButtonModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this,"Voulez-vous vraiment modifier ce centre de billetage?", "confirmation de modification",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if(result == JOptionPane.YES_OPTION){
            if (!nomEtablissementSelected.equals("---") && !niveauSelected.equals("---") && !typeSelected.equals("---")) {
                for (Etablissement etab : etablissements) {
                    if (etab.getAbreviation().equals(nomEtablissementSelected)) {
                        etablissementSelected = etab;
                        break;
                    }
                }
                boolean valDres = false;
                boolean valDdes = false;
                if (dresIncluses) {
                    valDres = true;
                }
                if (ddesIncluses) {
                    valDdes = true;
                }
                centrebilletageCliked=metier.findCentrebilletageById(idCentrebilletageCliked);
                centrebilletageCliked.setEtablissement(etablissementSelected);
                centrebilletageCliked.setNiveau(niveauSelected);
                centrebilletageCliked.setType(typeSelected);
                centrebilletageCliked.setDres(valDres);
                centrebilletageCliked.setDdes(valDdes);
                try {
                    metier.modifierCentrebilletage(centrebilletageCliked);
                    JOptionPane.showMessageDialog(this, "centre de billetage modifié avec succès !");
                    //videFrame();
                    int i = 1;
                    centrebilletages = metier.findAllCentrebilletagesD1Arrondissement(nomArrondissementSelected);
                    for (Centrebilletage c : centrebilletages) {
                        model.insertRow(model.getRowCount(), new Object[]{c.getIdcentrebill(), i++, c.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), c.getEtablissement().getArrondissement().getDepartement().getNomdepart(), c.getEtablissement().getArrondissement().getNomarr(), c.getEtablissement().getAbreviation(), c.getNiveau(), c.getType(), c.getDres(), c.getDdes(),c.getVersion()});
                    }
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de modifier le centre de billetage [" + nomEtablissementSelected + "] \n raison:" + ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
            }
        }      
    }//GEN-LAST:event_jButtonModifierActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueCentrebilletage.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueCentrebilletage.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueCentrebilletage.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueCentrebilletage.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueCentrebilletage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonCreer;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonOKSecteurs;
    private javax.swing.JButton jButtonOKbureau;
    private javax.swing.JButton jButtonRechercher;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JCheckBox jCheckBoxDdes;
    private javax.swing.JCheckBox jCheckBoxDres;
    private javax.swing.JComboBox<String> jComboBoxArrondissement;
    private javax.swing.JComboBox<String> jComboBoxDepartement;
    private javax.swing.JComboBox<String> jComboBoxEtablissement;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxRegion;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabeBureau;
    private javax.swing.JLabel jLabeSecteurs;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelArrondissement;
    private javax.swing.JLabel jLabelDdes;
    private javax.swing.JLabel jLabelDepartement;
    private javax.swing.JLabel jLabelDres;
    private javax.swing.JLabel jLabelEtablissement;
    private javax.swing.JLabel jLabelNiveau;
    private javax.swing.JLabel jLabelRegion;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanelExamens;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Region> regions = null;
    private String[] regionsCombo = null;
    private List<Departement> departements = null;
    private List<Arrondissement> arrondissements = null;
    private String[] departementsCombo = null;
    private String[] arrondissementsCombo = null;
    private String[] etablissementsCombo = null;
    private List<Etablissement> etablissements = null;
    private Departement departementSelected = null;
    private Arrondissement arrondissementSelected = null;
    private Etablissement etablissementSelected = null;
    private String nomEtablissementSelected = "";
    private String nomRegionSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String niveauSelected = "";
    private String nomDepartementSelected = "";
    private String nomArrondissementSelected = "";
    private boolean dresIncluses = false;
    private boolean ddesIncluses = false;
    private List<Centrebilletage> centrebilletages = null;
    private Centrebilletage centrebilletageRecherche = null;
    private Centrebilletage centrebilletageCliked = null;
    private int idCentrebilletageCliked =0;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        regions = metier.findAllRegions();

        //on remplit la combobox des régions
        regionsCombo = new String[regions.size() + 1];
        regionsCombo[0] = "---";
        int i = 1;
        for (Region region : regions) {
            regionsCombo[i++] = region.getNomreg();
        }
        jComboBoxRegion.setModel(new DefaultComboBoxModel(regionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "ESG", "ESTP", "TOUT"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC", "TOUT"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        remplirDepartementCombobox();
        remplirArrondissementCombobox();
        remplirEtablissementCombobox();
    }

    private void infoSaisies() {
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        nomEtablissementSelected = (String) jComboBoxEtablissement.getSelectedItem();

        if (jCheckBoxDres.isSelected()) {
            dresIncluses = true;
        }

        if (jCheckBoxDdes.isSelected()) {
            ddesIncluses = true;
        }

        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
    }

    private void videFrame() {
        jComboBoxRegion.setSelectedIndex(0);
        jComboBoxDepartement.setSelectedIndex(0);
        jComboBoxArrondissement.setSelectedIndex(0);
        jComboBoxEtablissement.setSelectedIndex(0);
        jCheckBoxDres.setSelected(false);
        jCheckBoxDdes.setSelected(false);
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        model.setRowCount(0);//vide la jTable       
    }

    private void remplirDepartementCombobox() {
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        departements = metier.findAllDepartementsD1Region(nomRegionSelected);
        //on remplit la combobox des départements
        departementsCombo = new String[departements.size() + 1];
        departementsCombo[0] = "---";
        int i = 1;
        for (Departement departement : departements) {
            departementsCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartement.setModel(new DefaultComboBoxModel(departementsCombo));
    }

    private void remplirArrondissementCombobox() {
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        arrondissements = metier.findAllArrondissementsD1Departement(nomDepartementSelected);
        //on remplit la combobox des arrondissements
        arrondissementsCombo = new String[arrondissements.size() + 1];
        arrondissementsCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissements) {
            arrondissementsCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissement.setModel(new DefaultComboBoxModel(arrondissementsCombo));
    }

    private void remplirEtablissementCombobox() {
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        etablissements = metier.findAllEtablissementsD1Arrondissement(nomArrondissementSelected);
        //on remplit la combobox des établissements
        etablissementsCombo = new String[etablissements.size() + 1];
        etablissementsCombo[0] = "---";
        int i = 1;
        for (Etablissement etablissement : etablissements) {
            etablissementsCombo[i++] = etablissement.getAbreviation();
        }
        jComboBoxEtablissement.setModel(new DefaultComboBoxModel(etablissementsCombo));
    }
}
