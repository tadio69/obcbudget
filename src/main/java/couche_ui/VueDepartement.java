
package couche_ui;

import couche_jpa.Departement;
import couche_jpa.Region;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 *
 * @author famille chijou
 */
public class VueDepartement extends javax.swing.JFrame {

    DefaultTableModel model;
    /**
     * Creates new form VueDepartement
     */
    public VueDepartement() {
        initComponents();
        model=(DefaultTableModel) jTable2.getModel();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldNom = new javax.swing.JTextField();
        jComboBoxRegion = new javax.swing.JComboBox<>();
        jButtonCreer = new javax.swing.JButton();
        jButtonRechercher = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("DEPARTEMENT");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Nom :");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("Région :");

        jTextFieldNom.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jComboBoxRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButtonCreer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreer.setText("Créer");
        jButtonCreer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerActionPerformed(evt);
            }
        });

        jButtonRechercher.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonRechercher.setText("Rechercher");
        jButtonRechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRechercherActionPerformed(evt);
            }
        });

        jButtonModifier.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonModifier.setText("Modifier");
        jButtonModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierActionPerformed(evt);
            }
        });

        jButtonSupprimer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jButtonAnnuler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jTable2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "N° Ordre", "Région", "Département", "Version"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setShowHorizontalLines(true);
        jTable2.setShowVerticalLines(true);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(195, 195, 195))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButtonCreer)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonRechercher)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonModifier)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSupprimer)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnuler)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonFermer))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldNom, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNom, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButtonCreer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonRechercher, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonModifier, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonSupprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonAnnuler, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButtonFermer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
     
    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        videFrame();       
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jButtonCreerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();           
        if(!nomSaisi.equals("")){
            if(nomRegionSelected.equals("---")) JOptionPane.showMessageDialog(this, " Veuillez sélectionner une région svp !"); 
            else{
                for(Region r:regions){
                    if(r.getNomreg().equals(nomRegionSelected)){
                        regionSelected=r;
                        break;
                    }
                }
                try{
                    metier.creerDepartement(new Departement(nomSaisi.toUpperCase(),regionSelected));
                    JOptionPane.showMessageDialog(this, " Département créé avec succès !"); 
                    //videFrame();
                    departements=metier.findAllDepartements();
                    int i=1;
                    for(Departement d:departements){
                        model.insertRow(model.getRowCount(),new Object[]{d.getIddepart(),i++,d.getRegion().getNomreg(), d.getNomdepart(),d.getVersion()});
                    }
                }catch(ObcbudgetException ex){
                    JOptionPane.showMessageDialog(this, "Impossible de créer le département de nom ["+nomSaisi+"] \n raison:"+ex.getMessage()); 
                }
            }
        }
        else JOptionPane.showMessageDialog(this, " Tous les champs sont obligatoires !");  
    }//GEN-LAST:event_jButtonCreerActionPerformed

    private void jButtonRechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRechercherActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();        
        if(!nomSaisi.equals("") && !nomSaisi.equalsIgnoreCase("tous")){
            try{
                departementsRecherches=metier.findAllDepartementsLikeName(nomSaisi.toUpperCase()); 
                int i=1;
                for(Departement d:departementsRecherches){
                    model.insertRow(model.getRowCount(),new Object[]{d.getIddepart(),i++,d.getRegion().getNomreg(), d.getNomdepart(),d.getVersion()});
                } 
            }catch(ObcbudgetException ex){
                    JOptionPane.showMessageDialog(this, "Impossible de trouver des départements de nom proche de ["+nomSaisi+"] \n raison:"+ex.getMessage()); 
            } 
        }
        else{
            if(nomSaisi.equals("")) JOptionPane.showMessageDialog(this, " Le champ nom est obligatoire !");
            else{
                departements=metier.findAllDepartements();
                int i=1;
                for(Departement d:departements){
                    model.insertRow(model.getRowCount(),new Object[]{d.getIddepart(), i++,d.getRegion().getNomreg(), d.getNomdepart(),d.getVersion()});
                }
            }
        }       
    }//GEN-LAST:event_jButtonRechercherActionPerformed

    private void jButtonModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierActionPerformed
        //model.setRowCount(0);//vide la jTable
        infoSaisies(); 
        int result = JOptionPane.showConfirmDialog(this,"Voulez-vous vraiment modifier ce département?", "confirmation de modification",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if(result == JOptionPane.YES_OPTION){
            if(!nomSaisi.equals("")){
                /*//code remplacé par mla ligne suivante
                for(Departement d:departements){
                    if(d.getIddepart()==idDepartementCliked){
                        departementcliked=d;
                        break;
                    }
                }
                */
                departementcliked=metier.findDepartementById(idDepartementCliked);
                if(nomRegionSelected.equals("---")) JOptionPane.showMessageDialog(this, " Veuillez sélectionner une région svp !");
                else{
                    for(Region r:regions){
                        if(r.getNomreg().equals(nomRegionSelected)){
                            regionSelected=r;
                            break;
                        }
                    }
                    departementcliked.setNomdepart(nomSaisi.toUpperCase());
                    departementcliked.setRegion(regionSelected);
                    try{
                        metier.modifierDepartement(departementcliked);
                        JOptionPane.showMessageDialog(this, " Département modifié avec succès !"); 
                        //videFrame();
                        departements=metier.findAllDepartements();
                        int i=1;
                        for(Departement d:departements){
                            model.insertRow(model.getRowCount(),new Object[]{d.getIddepart(),i++,d.getRegion().getNomreg(), d.getNomdepart(),d.getVersion()});
                        }
                    }catch(ObcbudgetException ex){
                        JOptionPane.showMessageDialog(this, "Impossible de modifier le département de nom ["+nomSaisi+"] \n raison:"+ex.getMessage()); 
                    }
                }
            }
            else JOptionPane.showMessageDialog(this, " Tous les champs sont obligatoires !"); 
        }
        /*
        else if (result == JOptionPane.NO_OPTION){
               label.setText("You selected: No");
            }
        */      
    }//GEN-LAST:event_jButtonModifierActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        //model.setRowCount(0);//vide la jTable
        infoSaisies(); 
        int result = JOptionPane.showConfirmDialog(this,"Voulez-vous vraiment supprimer ce département?", "confirmation de modification",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if(result == JOptionPane.YES_OPTION){
            if(!nomSaisi.equals("")){
                try{
                    metier.supprimerDepartement(metier.findDepartementById(idDepartementCliked));
                    JOptionPane.showMessageDialog(this, " Département supprimé avec succès !"); 
                    //videFrame();
                    departements=metier.findAllDepartements();
                    int i=1;
                    for(Departement d:departements){
                        model.insertRow(model.getRowCount(),new Object[]{d.getIddepart(), i++,d.getRegion().getNomreg(), d.getNomdepart(),d.getVersion()});
                    }
                }catch(ObcbudgetException ex){
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer le département de nom ["+nomSaisi+"] \n raison:"+ex.getMessage()); 
                }                        
            }
            else JOptionPane.showMessageDialog(this, " Tous les champs sont obligatoires !");
        }
        /*
        else if (result == JOptionPane.NO_OPTION){
               label.setText("You selected: No");
            }
        */
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        //remplit les champs
        int ligne=jTable2.getSelectedRow();
        idDepartementCliked=(int) model.getValueAt(ligne,0);
        jComboBoxRegion.setSelectedItem((String) model.getValueAt(ligne,2));
        jTextFieldNom.setText((String) model.getValueAt(ligne,3));
    }//GEN-LAST:event_jTable2MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueDepartement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueDepartement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueDepartement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueDepartement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueDepartement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonCreer;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonRechercher;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JComboBox<String> jComboBoxRegion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextFieldNom;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier=null;
    private String nomSaisi="";
    private String nomRegionSelected="";
    private List<Departement> departementsRecherches=null;
    private List<Region> regions=null;
    private List<Departement> departements=null;
    private int idDepartementCliked=0;
    private Departement departementcliked=null;
    
    private Region regionSelected=null;
    private String[] regionsCombo=null;
    
    private void doMyInit(){
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        regions=metier.findAllRegions();
        
        //on remplit la combobox des régions
        regionsCombo=new String[regions.size()+1];
        regionsCombo[0]="---";
        int i=1;
        for(Region region : regions){
            regionsCombo[i++]=region.getNomreg();
        }
        jComboBoxRegion.setModel(new DefaultComboBoxModel(regionsCombo));
    }
    
    private void infoSaisies(){
        nomSaisi=jTextFieldNom.getText();
        nomRegionSelected=(String) jComboBoxRegion.getSelectedItem();
    }
    private void videFrame(){
        jTextFieldNom.setText("");
        jComboBoxRegion.setSelectedIndex(0);
        model.setRowCount(0);//vide la jTable
    }

}
