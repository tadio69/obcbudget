package couche_ui;

import couche_jpa.Centre;
import couche_jpa.Centredispatching;
import couche_jpa.Etablissement;
import couche_jpa.Famille;
import couche_jpa.Rattachregroupement;
import couche_jpa.Region;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueRattachCentreRegroupement extends javax.swing.JFrame {

    DefaultTableModel model;

    public VueRattachCentreRegroupement() {
        initComponents();
        model = (DefaultTableModel) jTable1.getModel();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabelNomCentreVentilation = new javax.swing.JLabel();
        jComboBoxCentreVentilation = new javax.swing.JComboBox<>();
        jLabeTypeCentreVentilation = new javax.swing.JLabel();
        jTextFieldTypeCentreVentilation = new javax.swing.JTextField();
        jLabelRegionCentreVentilation = new javax.swing.JLabel();
        jComboBoxRegionCentreVentilation = new javax.swing.JComboBox<>();
        jLabeFamilleCentreVentilation = new javax.swing.JLabel();
        jTextFieldFamilleCentreVentilation = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabelDistance = new javax.swing.JLabel();
        jLabelTexteDroitDistance = new javax.swing.JLabel();
        jTextFieldDistance = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabelRegionEtablissement = new javax.swing.JLabel();
        jComboBoxRegionEtablissement = new javax.swing.JComboBox<>();
        jLabelNomEtablissement = new javax.swing.JLabel();
        jLabeTypeCentreRegroupement = new javax.swing.JLabel();
        jTextFieldTypeCentreRegroupement = new javax.swing.JTextField();
        jLabeFamilleCentreRegroupement = new javax.swing.JLabel();
        jTextFieldFamilleCentreRegroupement = new javax.swing.JTextField();
        jLabelPrixplace = new javax.swing.JLabel();
        jTextFieldPrixplace = new javax.swing.JTextField();
        jLabelTexteFCFA1 = new javax.swing.JLabel();
        jLabelTexteDroiteFCFA = new javax.swing.JLabel();
        jComboBoxEtablissement = new javax.swing.JComboBox<>();
        jButtonFermer = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonRechercher = new javax.swing.JButton();
        jButtonCreer = new javax.swing.JButton();
        jPanelEtats = new javax.swing.JPanel();
        jButtonNonRattaches = new javax.swing.JButton();
        jButtonVisualiser = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jTable1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "N° Ordre", "Région centre ventil.", "Centre ventil.", "Type centre ventil.", "Famille centre ventil.", "Région centre regroup.", "Centre regroup/délib.", "Type centre regroup.", "Famille centre regroup.", "Distance", "Coût transport"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(true);
        jTable1.setShowVerticalLines(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("RATTACHEMENT DES CENTRES DE REGROUPEMENT/DELIBERATION");

        jPanel1.setBackground(new java.awt.Color(0, 255, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Centre de ventilation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jLabelNomCentreVentilation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNomCentreVentilation.setText("Nom :");

        jComboBoxCentreVentilation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxCentreVentilation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCentreVentilationActionPerformed(evt);
            }
        });

        jLabeTypeCentreVentilation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabeTypeCentreVentilation.setText("Type :");

        jTextFieldTypeCentreVentilation.setEditable(false);
        jTextFieldTypeCentreVentilation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelRegionCentreVentilation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegionCentreVentilation.setText("Région :");

        jComboBoxRegionCentreVentilation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegionCentreVentilation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionCentreVentilationActionPerformed(evt);
            }
        });

        jLabeFamilleCentreVentilation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabeFamilleCentreVentilation.setText("Famille :");

        jTextFieldFamilleCentreVentilation.setEditable(false);
        jTextFieldFamilleCentreVentilation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelRegionCentreVentilation)
                                    .addComponent(jLabelNomCentreVentilation)))
                            .addComponent(jLabeTypeCentreVentilation, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldTypeCentreVentilation, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxRegionCentreVentilation, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxCentreVentilation, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabeFamilleCentreVentilation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldFamilleCentreVentilation, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(211, 211, 211)))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBoxRegionCentreVentilation)
                    .addComponent(jLabelRegionCentreVentilation, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNomCentreVentilation, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxCentreVentilation, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabeTypeCentreVentilation, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldTypeCentreVentilation, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabeFamilleCentreVentilation, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldFamilleCentreVentilation, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel3.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel3.setText("AUX CENTRES DE VENTILATION");

        jPanel2.setBackground(new java.awt.Color(204, 255, 0));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Centre de regroupement ou de délibération (non regroupement)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(102, 0, 255))); // NOI18N

        jLabelDistance.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDistance.setText("Distance :");

        jLabelTexteDroitDistance.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelTexteDroitDistance.setText("km   ");

        jTextFieldDistance.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(5, 0, 130));
        jLabel2.setText("(En aller et retour du sous-centre au centre de regroupement ou de ventilation)");

        jLabelRegionEtablissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegionEtablissement.setText("Région :");

        jComboBoxRegionEtablissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegionEtablissement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionEtablissementActionPerformed(evt);
            }
        });

        jLabelNomEtablissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNomEtablissement.setText("Nom :");

        jLabeTypeCentreRegroupement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabeTypeCentreRegroupement.setText("Type :");

        jTextFieldTypeCentreRegroupement.setEditable(false);
        jTextFieldTypeCentreRegroupement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabeFamilleCentreRegroupement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabeFamilleCentreRegroupement.setText("Famille :");

        jTextFieldFamilleCentreRegroupement.setEditable(false);
        jTextFieldFamilleCentreRegroupement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelPrixplace.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelPrixplace.setText("Coût transport :");

        jTextFieldPrixplace.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelTexteFCFA1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelTexteFCFA1.setText("F CFA");

        jLabelTexteDroiteFCFA.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelTexteDroiteFCFA.setText("(En aller simple)");

        jComboBoxEtablissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxEtablissement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEtablissementActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelPrixplace)
                    .addComponent(jLabelDistance))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jTextFieldDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelTexteDroitDistance)
                        .addGap(4, 4, 4)
                        .addComponent(jLabel2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jTextFieldPrixplace, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelTexteFCFA1)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelTexteDroiteFCFA))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabeFamilleCentreRegroupement)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldFamilleCentreRegroupement, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(436, 436, 436))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelNomEtablissement)
                            .addComponent(jLabeTypeCentreRegroupement)
                            .addComponent(jLabelRegionEtablissement))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldTypeCentreRegroupement, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxRegionEtablissement, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxEtablissement, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(197, 197, 197))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxRegionEtablissement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRegionEtablissement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxEtablissement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNomEtablissement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabeTypeCentreRegroupement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldTypeCentreRegroupement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabeFamilleCentreRegroupement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldFamilleCentreRegroupement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTexteDroitDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPrixplace, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPrixplace, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTexteDroiteFCFA, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTexteFCFA1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jLabelTexteDroitDistance.getAccessibleContext().setAccessibleName("km    (du sous-centre au centre de regroupement ou de ventlation)");

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jButtonAnnuler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jButtonSupprimer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jButtonRechercher.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonRechercher.setText("Rechercher");
        jButtonRechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRechercherActionPerformed(evt);
            }
        });

        jButtonCreer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreer.setText("Créer");
        jButtonCreer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerActionPerformed(evt);
            }
        });

        jPanelEtats.setBackground(new java.awt.Color(0, 255, 51));
        jPanelEtats.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Visualiser/imprimer les centres de regroupement", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jButtonNonRattaches.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonNonRattaches.setText("Non rattachés");
        jButtonNonRattaches.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNonRattachesActionPerformed(evt);
            }
        });

        jButtonVisualiser.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiser.setText("Rattachés");
        jButtonVisualiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelEtatsLayout = new javax.swing.GroupLayout(jPanelEtats);
        jPanelEtats.setLayout(jPanelEtatsLayout);
        jPanelEtatsLayout.setHorizontalGroup(
            jPanelEtatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEtatsLayout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addComponent(jButtonVisualiser)
                .addGap(87, 87, 87)
                .addComponent(jButtonNonRattaches)
                .addContainerGap(84, Short.MAX_VALUE))
        );
        jPanelEtatsLayout.setVerticalGroup(
            jPanelEtatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEtatsLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanelEtatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNonRattaches, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVisualiser, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanelEtats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonCreer)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonRechercher)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSupprimer)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnuler)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonFermer)
                        .addGap(352, 352, 352))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1316, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(381, 381, 381)
                        .addComponent(jLabel3)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jPanelEtats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnuler, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSupprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonRechercher, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCreer, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        videFrame();
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jButtonCreerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        validerDistance(distanceString);
        validerPrixplace(prixplaceString);
        if (continuerSiDistanceOK && continuerSiPrixplaceOK && distanceSaisie >= 0 && prixplaceSaisie >= 0) {
            if (!nomEtablissementSelected.equals("---") && !nomCentreVentilationSelected.equals("---")) {
                etablissementSelected = metier.findEtablissementByAbreviation(nomEtablissementSelected);              
                String separateur = " ; ";
                String[] nomcentreventilationList = null;
                nomcentreventilationList = nomCentreVentilationSelected.split(separateur);
                String nomExacteventilation = nomcentreventilationList[0];
                String typeExateventilation = nomcentreventilationList[1];

                for (Centredispatching c : centresVentilation) {
                    if (c.getEtablissement().getAbreviation().equals(nomExacteventilation) && c.getType().equals(typeExateventilation)) {
                        centreVentilationSelected = c;
                        break;
                    }
                }
                try {
                    metier.creerRattachregroupement(new Rattachregroupement(etablissementSelected, centreVentilationSelected, distanceSaisie, prixplaceSaisie));
                    JOptionPane.showMessageDialog(this, "Rattachement effectué avec succès !");
                    int i = 1;
                    rattachregroupements = metier.findAllRattachregroupementsD1CentredispatchingD1Type(nomExacteventilation, typeExateventilation);

                    for (Rattachregroupement r : rattachregroupements) {
                        String type = "";
                        String fam = "";
                        Centredispatching centreregroupement = new Centredispatching();
                        if (testerSiEtablissementCentreRegroupement(r.getEtablissement())) {
                            centreregroupement = metier.findCentredispatchingD1TypeByEtablissement(r.getEtablissement().getAbreviation(), "Regroupement");
                            type = centreregroupement.getType();
                            fam = centreregroupement.getFamille().getTitre();
                        }
                        model.insertRow(model.getRowCount(), new Object[]{r.getIdratregroup(), i++, r.getCentreventilation().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), r.getCentreventilation().getEtablissement().getAbreviation(), r.getCentreventilation().getType(), r.getCentreventilation().getFamille().getTitre(), r.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), r.getEtablissement().getAbreviation(), type, fam, r.getDistance(), r.getPrixplace()});
                    }
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible d'effectuer le rattachement souhaité \n raison:" + ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, " Veuillez recommencer svp. Au moins une donnée manquante ou incorrecte !");
            }
        } else {
            JOptionPane.showMessageDialog(this, "La distance et le coût de transport doivent être des entiers positifs !");
        }
    }//GEN-LAST:event_jButtonCreerActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        //remplit les champs
        int ligne = jTable1.getSelectedRow();
        idRattachregroupementCliked = (int) model.getValueAt(ligne, 0);
        jComboBoxRegionCentreVentilation.setSelectedItem((String) model.getValueAt(ligne, 2));
        jComboBoxCentreVentilation.setSelectedItem((String) model.getValueAt(ligne, 3) + " ; " + (String) model.getValueAt(ligne, 4));
        jTextFieldTypeCentreVentilation.setText((String) model.getValueAt(ligne, 4));
        jTextFieldFamilleCentreVentilation.setText((String) model.getValueAt(ligne, 5));
        jComboBoxRegionEtablissement.setSelectedItem((String) model.getValueAt(ligne, 6));
        jComboBoxEtablissement.setSelectedItem((String) model.getValueAt(ligne, 7));
        jTextFieldTypeCentreRegroupement.setText((String) model.getValueAt(ligne, 8));
        jTextFieldFamilleCentreRegroupement.setText((String) model.getValueAt(ligne, 9));
        jTextFieldDistance.setText("" + model.getValueAt(ligne, 10));
        jTextFieldPrixplace.setText("" + model.getValueAt(ligne, 11));
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButtonRechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRechercherActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        if (!nomCentreVentilationSelected.equals("---")) {
            String[] nomcentreventilationList = null;
            String separateur = " ; ";
            nomcentreventilationList = nomCentreVentilationSelected.split(separateur);
            String nomExacte = nomcentreventilationList[0];
            String typeExate = nomcentreventilationList[1];
            try {
                int i = 1;
                rattachregroupements = metier.findAllRattachregroupementsD1CentredispatchingD1Type(nomExacte, typeExate);
                for (Rattachregroupement r : rattachregroupements) {
                    String type = "";
                    String fam = "";
                    Centredispatching centreregroupement = new Centredispatching();
                    if (testerSiEtablissementCentreRegroupement(r.getEtablissement())) {
                        centreregroupement = metier.findCentredispatchingD1TypeByEtablissement(r.getEtablissement().getAbreviation(), "Regroupement");
                        type = centreregroupement.getType();
                        fam = centreregroupement.getFamille().getTitre();
                    }
                    model.insertRow(model.getRowCount(), new Object[]{r.getIdratregroup(), i++, r.getCentreventilation().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), r.getCentreventilation().getEtablissement().getAbreviation(), r.getCentreventilation().getType(), r.getCentreventilation().getFamille().getTitre(), r.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), r.getEtablissement().getAbreviation(), type, fam, r.getDistance(), r.getPrixplace()});
                }
            } catch (ObcbudgetException ex) {
                JOptionPane.showMessageDialog(this, "Impossible de trouver les rattachements du centre de ventilation  [" + nomCentreVentilationSelected + "] \n raison:" + ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Le nom du centre de ventilation doit être fourni");
        }
    }//GEN-LAST:event_jButtonRechercherActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer ce rattachement?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!nomEtablissementSelected.equals("---") && !nomCentreVentilationSelected.equals("---")) {
                String[] nomcentreventilationList = null;
                String separateur = " ; ";
                nomcentreventilationList = nomCentreVentilationSelected.split(separateur);
                String nomExacte = nomcentreventilationList[0];
                String typeExate = nomcentreventilationList[1];
                try {
                    metier.supprimerRattachregroupement(metier.findRattachregroupementById(idRattachregroupementCliked));
                    JOptionPane.showMessageDialog(this, "Rattachement supprimé avec succès !");
                    int i = 1;
                    rattachregroupements = metier.findAllRattachregroupementsD1CentredispatchingD1Type(nomExacte, typeExate);
                    for (Rattachregroupement r : rattachregroupements) {
                        String type = "";
                        String fam = "";
                        Centredispatching centreregroupement = new Centredispatching();
                        if (testerSiEtablissementCentreRegroupement(r.getEtablissement())) {
                            centreregroupement = metier.findCentredispatchingD1TypeByEtablissement(r.getEtablissement().getAbreviation(), "Regroupement");
                            type = centreregroupement.getType();
                            fam = centreregroupement.getFamille().getTitre();
                        }
                        model.insertRow(model.getRowCount(), new Object[]{r.getIdratregroup(), i++, r.getCentreventilation().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), r.getCentreventilation().getEtablissement().getAbreviation(), r.getCentreventilation().getType(), r.getCentreventilation().getFamille().getTitre(), r.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), r.getEtablissement().getAbreviation(), type, fam, r.getDistance(), r.getPrixplace()});
                    }
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer le rattachement du centre de regroupement [" + nomEtablissementSelected + "] \n raison:" + ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Le centre de regroupement de ventilation et de regroupement/délibération sont obligatoires !");
            }
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jComboBoxCentreVentilationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCentreVentilationActionPerformed
        String[] nomcentreventilationList = null;
        nomCentreVentilationSelected = (String) jComboBoxCentreVentilation.getSelectedItem();
        if (!nomCentreVentilationSelected.equals("---")) {
            String separateur = " ; ";
            nomcentreventilationList = nomCentreVentilationSelected.split(separateur);
            String nomExacte = nomcentreventilationList[0];
            String typeExate = nomcentreventilationList[1];
            for (Centredispatching centreventilation : centresVentilation) {
                if (centreventilation.getEtablissement().getAbreviation().equals(nomExacte) && centreventilation.getType().equals(typeExate)) {
                    jTextFieldTypeCentreVentilation.setText(centreventilation.getType());
                    jTextFieldFamilleCentreVentilation.setText(centreventilation.getFamille().getTitre());
                    break;
                }
            }
        }
    }//GEN-LAST:event_jComboBoxCentreVentilationActionPerformed

    private void jComboBoxRegionCentreVentilationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionCentreVentilationActionPerformed
        remplirCentreVentilationCombobox();
    }//GEN-LAST:event_jComboBoxRegionCentreVentilationActionPerformed

    private void jButtonVisualiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserActionPerformed
        Map<Centredispatching, ArrayList<Rattachregroupement>> centreventilationRattachregroupementMap = new HashMap<>();//contient les centres de ventilation chacun avec le tableau de ses Rattachregroupement
        for (Centredispatching centreventilation : centresVentilation) {
            List<Rattachregroupement> lesRattachregroupements = metier.findAllRattachregroupementsD1Centredispatching(centreventilation.getEtablissement().getAbreviation());
            ArrayList<Rattachregroupement> rattachregroupementList = new ArrayList<>();//liste des centres de Rattachregroupement du centre de ventilation courant
            for (Rattachregroupement rattach : lesRattachregroupements) {
                if (!rattachregroupementList.contains(rattach)) {
                    rattachregroupementList.add(rattach);
                }
            }
            centreventilationRattachregroupementMap.put(centreventilation, rattachregroupementList);
        }
        if (!centreventilationRattachregroupementMap.isEmpty()) {
            try {
                List<Map<String, Object>> datasource = new ArrayList<>();
                List<Region> regions = metier.findAllRegions();
                for (Region region : regions) {
                    for (Centredispatching centreventilation : centreventilationRattachregroupementMap.keySet()) {
                        int num = 1;
                        if (centreventilation.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                            for (Rattachregroupement rattachregroupement : centreventilationRattachregroupementMap.get(centreventilation)) {
                                Map<String, Object> row = new HashMap<>();
                                row.put("region", region.getNomreg());
                                row.put("centreventilation", centreventilation.getEtablissement().getAbreviation() + " (Famille :" + centreventilation.getFamille().getTitre() + "; Type :" + centreventilation.getType() + ")");
                                row.put("num", num++);
                                row.put("centreregroupement", rattachregroupement.getEtablissement().getAbreviation());//centreregroupement=etablisseùent qui l'abrite
                                row.put("distance", rattachregroupement.getDistance());
                                row.put("prixplace", rattachregroupement.getPrixplace());
                                datasource.add(row);
                            }
                        }
                    }
                }
                JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\rattachCentreregroupementAuCentreventilationReport.jrxml");
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                jasperViewer.setVisible(true);
            } catch (JRException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Aucun rattachement trouvé dans la base des données !");
        }
    }//GEN-LAST:event_jButtonVisualiserActionPerformed

    private void jComboBoxRegionEtablissementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionEtablissementActionPerformed
        remplirEtablissementCombobox();
    }//GEN-LAST:event_jComboBoxRegionEtablissementActionPerformed

    private void jButtonNonRattachesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNonRattachesActionPerformed
        rattachregroupements = metier.findAllRattachregroupements();
        ArrayList<Etablissement> etablissementsList = new ArrayList<>();//liste des centres de regroupement/délibération non rattachés
        for (Centredispatching centreregroupement : centresRegroupement) {
            boolean trouver = false;
            for (Rattachregroupement rattachregroupement : rattachregroupements) {
                if (rattachregroupement.getEtablissement().getAbreviation().equals(centreregroupement.getEtablissement().getAbreviation())) {
                    trouver = true;
                    break;
                }
            }
            if (!trouver) {
                etablissementsList.add(centreregroupement.getEtablissement());
            }
        }
        for (Centre centre : centres) {
            boolean trouver = false;
            for (Rattachregroupement rattachregroupement : rattachregroupements) {
                if (rattachregroupement.getEtablissement().getAbreviation().equals(centre.getEtablissement().getAbreviation())) {
                    trouver = true;
                    break;
                }
            }
            if (!trouver) {
                etablissementsList.add(centre.getEtablissement());
            }
        }

        if (!etablissementsList.isEmpty()) {
            try {
                List<Map<String, Object>> datasource = new ArrayList<>();
                List<Region> regions = metier.findAllRegions();
                int num = 1;
                for (Region region : regions) {
                    for (Etablissement etablissement : etablissementsList) {
                        if (etablissement.getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                            Map<String, Object> row = new HashMap<>();
                            row.put("region", region.getNomreg());
                            row.put("num", num++);
                            row.put("centreregroupement", etablissement.getAbreviation());//centreregroupement=etablisseùent qui l'abrite
                            datasource.add(row);
                        }
                    }
                }
                JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\centresregroupementNonRattachesAuCentreventilationReport.jrxml");
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                jasperViewer.setVisible(true);
            } catch (JRException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "La liste des centres de regroupement non rattachés est vide !");
        }

    }//GEN-LAST:event_jButtonNonRattachesActionPerformed

    private void jComboBoxEtablissementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEtablissementActionPerformed
        remplirTypePlusFamilleRegroupementCombobox();
    }//GEN-LAST:event_jComboBoxEtablissementActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueRattachCentreRegroupement.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueRattachCentreRegroupement.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueRattachCentreRegroupement.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueRattachCentreRegroupement.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueRattachCentreRegroupement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonCreer;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonNonRattaches;
    private javax.swing.JButton jButtonRechercher;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JButton jButtonVisualiser;
    private javax.swing.JComboBox<String> jComboBoxCentreVentilation;
    private javax.swing.JComboBox<String> jComboBoxEtablissement;
    private javax.swing.JComboBox<String> jComboBoxRegionCentreVentilation;
    private javax.swing.JComboBox<String> jComboBoxRegionEtablissement;
    private javax.swing.JLabel jLabeFamilleCentreRegroupement;
    private javax.swing.JLabel jLabeFamilleCentreVentilation;
    private javax.swing.JLabel jLabeTypeCentreRegroupement;
    private javax.swing.JLabel jLabeTypeCentreVentilation;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelDistance;
    private javax.swing.JLabel jLabelNomCentreVentilation;
    private javax.swing.JLabel jLabelNomEtablissement;
    private javax.swing.JLabel jLabelPrixplace;
    private javax.swing.JLabel jLabelRegionCentreVentilation;
    private javax.swing.JLabel jLabelRegionEtablissement;
    private javax.swing.JLabel jLabelTexteDroitDistance;
    private javax.swing.JLabel jLabelTexteDroiteFCFA;
    private javax.swing.JLabel jLabelTexteFCFA1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelEtats;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldDistance;
    private javax.swing.JTextField jTextFieldFamilleCentreRegroupement;
    private javax.swing.JTextField jTextFieldFamilleCentreVentilation;
    private javax.swing.JTextField jTextFieldPrixplace;
    private javax.swing.JTextField jTextFieldTypeCentreRegroupement;
    private javax.swing.JTextField jTextFieldTypeCentreVentilation;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Region> regions = null;
    private String[] regionsCombo = null;
    private List<Centredispatching> centresVentilation = null;
    private List<Centredispatching> centresRegroupement = null;
    private List<Centredispatching> tousLesCentresRegroupement = null;
    private List<Centre> centres = null;
    private String nomRegionEtablissementSelected = "";
    private String nomRegionVentilationSelected = "";
    private String nomCentreVentilationSelected = "";
    private String nomEtablissementSelected = "";
    private Centredispatching centreVentilationSelected = null;
    private Etablissement etablissementSelected = null;
    private String[] centresVentilationCombo = null;
    private String[] etablissementsCombo = null;
    private int idRattachregroupementCliked = 0;
    private List<Rattachregroupement> rattachregroupements = null;
    private int distanceSaisie = 0;
    private String distanceString = "";
    private int prixplaceSaisie = 0;
    private String prixplaceString = "";
    private boolean continuerSiDistanceOK = false;
    private boolean continuerSiPrixplaceOK = false;
    private List<Famille> familles = null;
    private String[] famillesCombo = null;
    private String titreFamilleSelected = "";

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        regions = metier.findAllRegions();
        tousLesCentresRegroupement = metier.findAllCentredispatchingD1Type("Regroupement");
        centresVentilation = metier.findAllCentredispatchingD1Type("Ventilation");
        centres = metier.findAllCentres();

        jTextFieldDistance.setText("0");
        jTextFieldPrixplace.setText("0");

        //on remplit les combobox des régions
        regionsCombo = new String[regions.size() + 1];
        regionsCombo[0] = "---";
        int j = 1;
        for (Region region : regions) {
            regionsCombo[j++] = region.getNomreg();
        }
        jComboBoxRegionEtablissement.setModel(new DefaultComboBoxModel(regionsCombo));
        jComboBoxRegionCentreVentilation.setModel(new DefaultComboBoxModel(regionsCombo));

        remplirCentreVentilationCombobox();
        remplirEtablissementCombobox();
    }

    private void infoSaisies() {
        nomRegionVentilationSelected = (String) jComboBoxRegionCentreVentilation.getSelectedItem();
        nomRegionEtablissementSelected = (String) jComboBoxRegionEtablissement.getSelectedItem();
        nomCentreVentilationSelected = (String) jComboBoxCentreVentilation.getSelectedItem();
        nomEtablissementSelected = (String) jComboBoxEtablissement.getSelectedItem();
        distanceString = jTextFieldDistance.getText();
        prixplaceString = jTextFieldPrixplace.getText();
    }

    private void videFrame() {
        jComboBoxRegionCentreVentilation.setSelectedIndex(0);
        jComboBoxRegionEtablissement.setSelectedIndex(0);
        jComboBoxCentreVentilation.setSelectedIndex(0);
        jComboBoxEtablissement.setSelectedIndex(0);
        jTextFieldTypeCentreVentilation.setText("");
        jTextFieldFamilleCentreVentilation.setText("");
        jTextFieldTypeCentreRegroupement.setText("");
        jTextFieldFamilleCentreRegroupement.setText("");
        jTextFieldDistance.setText("0");
        jTextFieldPrixplace.setText("0");
        model.setRowCount(0);//vide la jTable
    }

    private void remplirCentreVentilationCombobox() {
        nomRegionVentilationSelected = (String) jComboBoxRegionCentreVentilation.getSelectedItem();
        centresVentilation = metier.findAllCentresVentilationEtspecialeD1Region(nomRegionVentilationSelected);
        //on remplit la combobox des Centres de ventilation
        centresVentilationCombo = new String[centresVentilation.size() + 1];
        centresVentilationCombo[0] = "---";
        int i = 1;
        for (Centredispatching centreVentilation : centresVentilation) {
            centresVentilationCombo[i++] = centreVentilation.getEtablissement().getAbreviation() + " ; " + centreVentilation.getType();
        }
        jComboBoxCentreVentilation.setModel(new DefaultComboBoxModel(centresVentilationCombo));
    }

    private void remplirEtablissementCombobox() {
        nomRegionEtablissementSelected = (String) jComboBoxRegionEtablissement.getSelectedItem();
        centresRegroupement = metier.findAllCentresdispatchingD1TypeD1Region("Regroupement", nomRegionEtablissementSelected);
        List<Centre> centres = metier.findAllCentresD1Region(nomRegionEtablissementSelected);
        //on remplit la combobox des etablissements
        etablissementsCombo = new String[centresRegroupement.size() + centres.size() + 1];
        etablissementsCombo[0] = "---";
        int i = 1;
        for (Centredispatching centreRegroupement : centresRegroupement) {
            etablissementsCombo[i++] = centreRegroupement.getEtablissement().getAbreviation();
        }
        for (Centre centre : centres) {
            if(!testerSiEtablissementCentreRegroupement(centre.getEtablissement())) etablissementsCombo[i++] = centre.getEtablissement().getAbreviation();
        }
        jComboBoxEtablissement.setModel(new DefaultComboBoxModel(etablissementsCombo));
    }

    private void validerDistance(String nbreString) {
        try {
            distanceSaisie = Integer.parseInt(nbreString);
            continuerSiDistanceOK = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "La distance doit être fournie et contenir uniquement des chiffres !");
            continuerSiDistanceOK = false;
        }
    }

    private void validerPrixplace(String nbreString) {
        try {
            prixplaceSaisie = Integer.parseInt(nbreString);
            continuerSiPrixplaceOK = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le coût de transport doit être fournie et contenir uniquement des chiffres !");
            continuerSiPrixplaceOK = false;
        }
    }

    private boolean testerSiEtablissementCentreRegroupement(Etablissement etab) {
        boolean tester = false;
        for (Centredispatching centredispatch : tousLesCentresRegroupement) {
            if (centredispatch.getEtablissement().getAbreviation().equals(etab.getAbreviation())) {
                tester = true;
                break;
            }
        }
        return tester;
    }
    
    private void remplirTypePlusFamilleRegroupementCombobox(){
        nomEtablissementSelected = (String) jComboBoxEtablissement.getSelectedItem();
        Centredispatching centreregroupement=new Centredispatching();
        if(testerSiEtablissementCentreRegroupement(metier.findEtablissementByAbreviation(nomEtablissementSelected))){
            centreregroupement=metier.findCentredispatchingD1TypeByEtablissement(nomEtablissementSelected, "Regroupement");
            jTextFieldTypeCentreRegroupement.setText(centreregroupement.getType());
            jTextFieldFamilleCentreRegroupement.setText(centreregroupement.getFamille().getTitre());
        }
        else{
            jTextFieldTypeCentreRegroupement.setText("");
            jTextFieldFamilleCentreRegroupement.setText("");
        }
    }
}
