package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Caisse;
import couche_jpa.Centre;
import couche_jpa.Centrebilletage;
import couche_jpa.Departement;
import couche_jpa.Eltcorrecttech;
import couche_jpa.Examen;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Jurydel;
import couche_jpa.Jurytemoin;
import couche_jpa.Nbchefsalle;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_jpa.Sousfamille;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueEtatDeliberation extends javax.swing.JFrame {

    public VueEtatDeliberation() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButtonFermer = new javax.swing.JButton();
        jPanelChoixExamen = new javax.swing.JPanel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixExamen = new javax.swing.JButton();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelExamen = new javax.swing.JLabel();
        jPanelChoixCentre = new javax.swing.JPanel();
        jLabelRegion = new javax.swing.JLabel();
        jComboBoxRegion = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixCentre = new javax.swing.JButton();
        jLabelDepartement = new javax.swing.JLabel();
        jComboBoxDepartement = new javax.swing.JComboBox<>();
        jLabelNomCentre = new javax.swing.JLabel();
        jComboBoxCentre = new javax.swing.JComboBox<>();
        jPanelGestionEtat = new javax.swing.JPanel();
        jButtonCreerEtats = new javax.swing.JButton();
        jButtonMettreAjourEtats = new javax.swing.JButton();
        jButtonVisualiserEtats = new javax.swing.JButton();
        jButtonSupprimerEtats = new javax.swing.JButton();
        jPanelNbjurystemoins = new javax.swing.JPanel();
        jLabelNbjurystemoins = new javax.swing.JLabel();
        jTextFieldNbjurystemoins = new javax.swing.JTextField();
        jButtonCreerJurytemoin = new javax.swing.JButton();
        jButtonSupprimerJurytemoin = new javax.swing.JButton();
        jButtonListerJurystemoins = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT DE PRE-DELIBERATION");

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jPanelChoixExamen.setBackground(new java.awt.Color(102, 255, 153));
        jPanelChoixExamen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un groupe d'examens et une session", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixExamen.setText("Annuler");
        jButtonAnnulerChoixExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixExamenActionPerformed(evt);
            }
        });

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        javax.swing.GroupLayout jPanelChoixExamenLayout = new javax.swing.GroupLayout(jPanelChoixExamen);
        jPanelChoixExamen.setLayout(jPanelChoixExamenLayout);
        jPanelChoixExamenLayout.setHorizontalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(0, 32, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addGap(26, 26, 26))
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabelSession)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jButtonAnnulerChoixExamen)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixExamenLayout.setVerticalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanelChoixCentre.setBackground(new java.awt.Color(153, 255, 255));
        jPanelChoixCentre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un centre de correction", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jLabelRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegion.setText("Région :");

        jComboBoxRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixCentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixCentre.setText("Annuler");
        jButtonAnnulerChoixCentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixCentreActionPerformed(evt);
            }
        });

        jLabelDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartement.setText("Département :");

        jComboBoxDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementActionPerformed(evt);
            }
        });

        jLabelNomCentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNomCentre.setText("Centre de délibération :");

        jComboBoxCentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxCentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCentreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixCentreLayout = new javax.swing.GroupLayout(jPanelChoixCentre);
        jPanelChoixCentre.setLayout(jPanelChoixCentreLayout);
        jPanelChoixCentreLayout.setHorizontalGroup(
            jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelRegion)
                    .addComponent(jLabelDepartement)
                    .addComponent(jLabelNomCentre))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                        .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonAnnulerChoixCentre)
                        .addGap(53, 53, 53))
                    .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                        .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxCentre, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(20, Short.MAX_VALUE))))
        );
        jPanelChoixCentreLayout.setVerticalGroup(
            jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixCentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxCentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNomCentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanelGestionEtat.setBackground(new java.awt.Color(153, 204, 255));
        jPanelGestionEtat.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer l'état", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jButtonCreerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEtats.setText("Créer");
        jButtonCreerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEtatsActionPerformed(evt);
            }
        });

        jButtonMettreAjourEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjourEtats.setText("Mettre à jour");
        jButtonMettreAjourEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourEtatsActionPerformed(evt);
            }
        });

        jButtonVisualiserEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserEtats.setText("Visualiser");
        jButtonVisualiserEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserEtatsActionPerformed(evt);
            }
        });

        jButtonSupprimerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEtats.setText("Supprimer");
        jButtonSupprimerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEtatsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelGestionEtatLayout = new javax.swing.GroupLayout(jPanelGestionEtat);
        jPanelGestionEtat.setLayout(jPanelGestionEtatLayout);
        jPanelGestionEtatLayout.setHorizontalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jButtonCreerEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonMettreAjourEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiserEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerEtats)
                .addContainerGap(48, Short.MAX_VALUE))
        );
        jPanelGestionEtatLayout.setVerticalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonMettreAjourEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCreerEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonSupprimerEtats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVisualiserEtats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanelNbjurystemoins.setBackground(new java.awt.Color(255, 204, 255));
        jPanelNbjurystemoins.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Jurys temoins", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabelNbjurystemoins.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbjurystemoins.setText("Nombre :");

        jTextFieldNbjurystemoins.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonCreerJurytemoin.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerJurytemoin.setText("Créer");
        jButtonCreerJurytemoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerJurytemoinActionPerformed(evt);
            }
        });

        jButtonSupprimerJurytemoin.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerJurytemoin.setText("Supprimer");
        jButtonSupprimerJurytemoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerJurytemoinActionPerformed(evt);
            }
        });

        jButtonListerJurystemoins.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonListerJurystemoins.setText("Lister");
        jButtonListerJurystemoins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerJurystemoinsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelNbjurystemoinsLayout = new javax.swing.GroupLayout(jPanelNbjurystemoins);
        jPanelNbjurystemoins.setLayout(jPanelNbjurystemoinsLayout);
        jPanelNbjurystemoinsLayout.setHorizontalGroup(
            jPanelNbjurystemoinsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNbjurystemoinsLayout.createSequentialGroup()
                .addGroup(jPanelNbjurystemoinsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelNbjurystemoinsLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jButtonCreerJurytemoin)
                        .addGap(21, 21, 21)
                        .addComponent(jButtonSupprimerJurytemoin)
                        .addGap(21, 21, 21)
                        .addComponent(jButtonListerJurystemoins))
                    .addGroup(jPanelNbjurystemoinsLayout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(jLabelNbjurystemoins)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldNbjurystemoins, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanelNbjurystemoinsLayout.setVerticalGroup(
            jPanelNbjurystemoinsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNbjurystemoinsLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanelNbjurystemoinsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNbjurystemoins, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNbjurystemoins, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelNbjurystemoinsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelNbjurystemoinsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonSupprimerJurytemoin, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonListerJurystemoins, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonCreerJurytemoin, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(311, 311, 311)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelNbjurystemoins, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanelChoixCentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonFermer)
                        .addGap(37, 37, 37))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelChoixCentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jPanelNbjurystemoins, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(22, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(74, 74, 74))))
        );

        jLabel1.getAccessibleContext().setAccessibleName("ETAT CM (PRATIQUE SERIE E)  ET JURYS PRESENTATION DES RAPPORTS DE STAGE (BACC SERIE TI)");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVisualiserEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserEtatsActionPerformed
        infoSaisies();
        Map<Souscentre, ArrayList<Eltcorrecttech>> souscentreEltcorrecttechMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses Eltcorrecttech
        List<Souscentre> souscentreAvecEltcorrecttechList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des Eltcorrecttech
        Map<Centre, Integer> centreJurytemoinMap = new HashMap<>();//contient les centres chacun avec son nombre de jurys temoins
        Map<Souscentre, Integer> souscentreNbchefsalleMap = new HashMap<>();//contient les sous-centres chacun avec son nombre de chefs de salle
        Map<Centrebilletage, ArrayList<Centre>> centrebilletageCentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des centres situés dans ses secteurs de couverture
        ArrayList<String> typesBruts = new ArrayList<>();
        ArrayList<String> typesAconsiderer = new ArrayList<>();
        ArrayList<String> niveauxAconsiderer = new ArrayList<>();
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATIONS DE PRE-DELIBERATION");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);

            boolean poursuivre = false;
            for (Caisse c : caisses) {
                if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                    poursuivre = true;
                    break;
                }
            }
            if (!poursuivre) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de pré-délibération n'ont pas encore été créés pour ce groupe d'examens !");
            } else {
                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                //remplissage de souscentreNbchefsalleMap
                if (typeSelected.equals("GEN")) {
                    nbchefsalles = metier.findAllNbchefsallesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!nbchefsalles.isEmpty()) {
                        for (Nbchefsalle nbchefsalle : nbchefsalles) {
                            souscentreNbchefsalleMap.put(nbchefsalle.getSouscentre(), nbchefsalle.getNombre());
                        }
                    }
                } else {//cas ESTP
                    //remplissage souscentreEltcorrecttechMap
                    eltcorrecttechs = metier.findAllEltcorrecttechsD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    for (Eltcorrecttech eltcorrecttech : eltcorrecttechs) {
                        if (!souscentreAvecEltcorrecttechList.contains(eltcorrecttech.getSouscentre())) {
                            souscentreAvecEltcorrecttechList.add(eltcorrecttech.getSouscentre());
                        }
                    }
                    for (Souscentre souscentre : souscentreAvecEltcorrecttechList) {
                        ArrayList<Eltcorrecttech> eltcorrecttechsList = new ArrayList<>();
                        for (Eltcorrecttech eltcorrecttech : eltcorrecttechs) {
                            if (eltcorrecttech.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                eltcorrecttechsList.add(eltcorrecttech);
                            }
                        }
                        souscentreEltcorrecttechMap.put(souscentre, eltcorrecttechsList);
                    }
                }

                //remplissage centreJurytemoinMap
                jurystemoins = metier.findAllJurystemoinsD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                if (!jurystemoins.isEmpty()) {
                    for (Jurytemoin jurytemoin : jurystemoins) {
                        centreJurytemoinMap.put(jurytemoin.getCentre(), jurytemoin.getNbjurytemoin());
                    }
                }

                //recherche des types des examens à utiliser
                for (Examen examen : examensSelected) {
                    System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                    if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                        typesBruts.add("ESG");
                    }
                    if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                        typesBruts.add("ESTP");
                    }
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 2) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                //recherche des niveaux des examens à utiliser
                if (!niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add(niveauSelected);
                    niveauxAconsiderer.add("TOUT");
                }
                if (niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add("PROB");
                    niveauxAconsiderer.add("BACC");
                    niveauxAconsiderer.add("TOUT");
                }

                //recherche des centres de billetage
                for (String niveau : niveauxAconsiderer) {
                    for (String type : typesAconsiderer) {
                        List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                        for (Centrebilletage centrebilletage : desCentrebilletages) {
                            ArrayList<Centre> centresList = new ArrayList<>();
                            if (!centrebilletageCentresMap.containsKey(centrebilletage)) {
                                List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                for (Secteurcouv sect : secteurs) {
                                    if (testSiCentre(sect.getSouscentre())) {
                                        Centre centre = metier.findCentreByEtablissement(sect.getSouscentre().getEtablissement().getAbreviation());
                                        if (!centresList.contains(centre)) {
                                            centresList.add(centre);
                                        }
                                    }
                                }
                                centrebilletageCentresMap.put(centrebilletage, centresList);
                            }
                        }
                    }
                }

                if (typeSelected.equals("GEN")) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Centrebilletage centrebilletage : centrebilletageCentresMap.keySet()) {
                                int totalMontant = 0;
                                if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    ArrayList<Centre> centresList = centrebilletageCentresMap.get(centrebilletage);
                                    for (int i = 0; i < centresList.size(); i++) {
                                        Centre centre = centresList.get(i);
                                        int num = 1;
                                        Souscentre souscentre = metier.findSouscentreByEtablissement(centre.getEtablissement().getAbreviation());
                                        if (souscentreNbchefsalleMap.containsKey(souscentre) && centreJurytemoinMap.containsKey(centre)) {
                                            optionAffichee = "Pré-délibération: " + "\n chefs de salle (4 vac.)";
                                            nbmbres = souscentreNbchefsalleMap.get(souscentre);
                                            nbjurys = centreJurytemoinMap.get(centre);
                                            nbvac = nbmbres * 4;
                                            coutvac = nbvac * txvac;
                                            primevice = 0;
                                            primeteneurPhys = nbjurys * 5000;
                                            primeteneurNum = 0;
                                            total = coutvac + primeteneurPhys;

                                            Map<String, Object> row = new HashMap<>();
                                            row.put("examen", groupedexamensEnstring);
                                            row.put("session", anneeSelected);
                                            row.put("region", region.getNomreg());
                                            row.put("reference", "");
                                            row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                            row.put("num", num++);
                                            row.put("centre", centre.getNomcent());
                                            row.put("option", optionAffichee);
                                            row.put("nbjury", nbjurys);
                                            row.put("nbmbres", nbmbres);
                                            row.put("nbvac", nbvac);
                                            row.put("coutvac", coutvac);
                                            row.put("primevice", primevice);
                                            row.put("primeteneurPhys", primeteneurPhys);
                                            row.put("primeteneurNum", primeteneurNum);
                                            row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                            int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                            row.put("total", totalArrondi);
                                            totalMontant += totalArrondi;//jasperreport prendra la dernière valeur de totalMontant
                                            row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                            datasource.add(row);
                                        }
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatPreDeliberationESGReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
                if (typeSelected.equals("IND") || typeSelected.equals("IND PROF")) {//cas TI
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Centrebilletage centrebilletage : centrebilletageCentresMap.keySet()) {
                                int totalMontant = 0;
                                if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    ArrayList<Centre> centresList = centrebilletageCentresMap.get(centrebilletage);
                                    for (int i = 0; i < centresList.size(); i++) {
                                        Centre centre = centresList.get(i);
                                        int num = 1;
                                        Souscentre souscentre = metier.findSouscentreByEtablissement(centre.getEtablissement().getAbreviation());
                                        if (souscentreEltcorrecttechMap.containsKey(souscentre) && centreJurytemoinMap.containsKey(centre)) {
                                            optionAffichee = "Pré-délibération: " + "\n chefs de salle (4 vac.)";
                                            nbjurys = centreJurytemoinMap.get(centre);
                                            int nbmbres = 0;//somme de tous les chefs de salle des différentes spécialités + EG
                                            for (Eltcorrecttech eltcorrecttech : souscentreEltcorrecttechMap.get(souscentre)) {
                                                nbmbres += eltcorrecttech.getNbchefsal();
                                            }
                                            nbvac = nbmbres * 4;//4 vac/mbre
                                            coutvac = nbvac * txvac;
                                            nbteneurs = nbjurys;//1 teneur par jury. pas de teneur num
                                            primevice = 0;
                                            primeteneurPhys = nbteneurs * 10000;//ici un teneur a 10000
                                            primeteneurNum = 0;
                                            total = coutvac + primeteneurPhys;

                                            Map<String, Object> row = new HashMap<>();
                                            row.put("titre", "DES VACATIONS DE PRE-DELIBERATION");
                                            row.put("examen", groupedexamensEnstring);
                                            row.put("session", anneeSelected);
                                            row.put("region", region.getNomreg());
                                            row.put("reference", "");
                                            row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                            row.put("num", num++);
                                            row.put("centre", centre.getNomcent());
                                            row.put("option", optionAffichee);
                                            row.put("nbjury", nbjurys);
                                            row.put("nbmbres", nbmbres);
                                            row.put("nbvac", nbvac);
                                            row.put("coutvac", coutvac);
                                            row.put("nbteneurs", nbteneurs);
                                            row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                            row.put("primeteneurPhys", primeteneurPhys);//pour tous teneurs même numérique
                                            int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                            row.put("total", totalArrondi);
                                            totalMontant += totalArrondi;//jasperreport prendra la dernière valeur de totalMontant
                                            row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                            datasource.add(row);
                                        }
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatPreDeliberationESTPReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
                if (typeSelected.equals("STT") || typeSelected.equals("STT PROF")) {//cas STT
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Centrebilletage centrebilletage : centrebilletageCentresMap.keySet()) {
                                int totalMontant = 0;
                                if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    ArrayList<Centre> centresList = centrebilletageCentresMap.get(centrebilletage);
                                    for (int i = 0; i < centresList.size(); i++) {
                                        Centre centre = centresList.get(i);
                                        int num = 1;
                                        Souscentre souscentre = metier.findSouscentreByEtablissement(centre.getEtablissement().getAbreviation());
                                        if (souscentreEltcorrecttechMap.containsKey(souscentre) && centreJurytemoinMap.containsKey(centre)) {
                                            optionAffichee = "Pré-délibération: " + "\n chefs de salle (4 vac.)";
                                            nbjurys = centreJurytemoinMap.get(centre);
                                            int nbmbres = 0;//somme de tous les chefs de salle des différentes spécialités +EG
                                            for (Eltcorrecttech eltcorrecttech : souscentreEltcorrecttechMap.get(souscentre)) {
                                                nbmbres += eltcorrecttech.getNbchefsal();
                                            }
                                            nbvac = nbmbres * 4;//4 vac/mbre
                                            coutvac = nbvac * txvac;
                                            nbteneurs = nbjurys;//1 teneur par jury. pas de teneur num
                                            primevice = 0;
                                            primeteneurPhys = nbteneurs * 10000;//ici un teneur a 10000
                                            primeteneurNum = 0;
                                            total = coutvac + primeteneurPhys;

                                            Map<String, Object> row = new HashMap<>();
                                            row.put("titre", "DES VACATIONS DE PRE-DELIBERATION");
                                            row.put("examen", groupedexamensEnstring);
                                            row.put("session", anneeSelected);                                 
                                            row.put("region", region.getNomreg());
                                            row.put("reference", "");
                                            row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                            row.put("num", num++);
                                            row.put("centre", centre.getNomcent());
                                            row.put("option", optionAffichee);
                                            row.put("nbjury", nbjurys);
                                            row.put("nbmbres", nbmbres);
                                            row.put("nbvac", nbvac);
                                            row.put("coutvac", coutvac);
                                            row.put("nbteneurs", nbteneurs);
                                            row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                            row.put("primeteneurPhys", primeteneurPhys);//pour tous teneurs même numérique
                                            int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                            row.put("total", totalArrondi);
                                            totalMontant += totalArrondi;//jasperreport prendra la dernière valeur de totalMontant
                                            row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                            datasource.add(row);
                                        }
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatPreDeliberationESTPReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }

                examensSelected.clear();//on vide
                centreJurytemoinMap.clear();
                souscentreNbchefsalleMap.clear();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonVisualiserEtatsActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonCreerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEtatsActionPerformed
        infoSaisies();
        Map<Souscentre, ArrayList<Eltcorrecttech>> souscentreEltcorrecttechMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses Eltcorrecttech
        List<Souscentre> souscentreAvecEltcorrecttechList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des Eltcorrecttech
        Map<Centre, Integer> centreJurytemoinMap = new HashMap<>();//contient les centres chacun avec son nombre de jurys temoins
        Map<Souscentre, Integer> souscentreNbchefsalleMap = new HashMap<>();//contient les sous-centres chacun avec son nombre de chefs de salle
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATIONS DE PRE-DELIBERATION");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
            if (!caisses.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de pré-délibération existent déjà pour ce groupe d'examens !");
            } else {
                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                //remplissage de souscentreNbchefsalleMap
                if (typeSelected.equals("GEN")) {
                    nbchefsalles = metier.findAllNbchefsallesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!nbchefsalles.isEmpty()) {
                        for (Nbchefsalle nbchefsalle : nbchefsalles) {
                            souscentreNbchefsalleMap.put(nbchefsalle.getSouscentre(), nbchefsalle.getNombre());
                        }
                    }
                } else {//cas ESTP
                    //remplissage souscentreEltcorrecttechMap
                    eltcorrecttechs = metier.findAllEltcorrecttechsD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    for (Eltcorrecttech eltcorrecttech : eltcorrecttechs) {
                        if (!souscentreAvecEltcorrecttechList.contains(eltcorrecttech.getSouscentre())) {
                            souscentreAvecEltcorrecttechList.add(eltcorrecttech.getSouscentre());
                        }
                    }
                    for (Souscentre souscentre : souscentreAvecEltcorrecttechList) {
                        ArrayList<Eltcorrecttech> eltcorrecttechsList = new ArrayList<>();
                        for (Eltcorrecttech eltcorrecttech : eltcorrecttechs) {
                            if (eltcorrecttech.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                eltcorrecttechsList.add(eltcorrecttech);
                            }
                        }
                        souscentreEltcorrecttechMap.put(souscentre, eltcorrecttechsList);
                    }
                }

                //remplissage centreJurytemoinMap
                jurystemoins = metier.findAllJurystemoinsD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                if (!jurystemoins.isEmpty()) {
                    for (Jurytemoin jurytemoin : jurystemoins) {
                        centreJurytemoinMap.put(jurytemoin.getCentre(), jurytemoin.getNbjurytemoin());
                    }
                }

                boolean testsicreer = false;
                if (typeSelected.equals("GEN")) {
                    try {
                        for (Centre centre : centreJurytemoinMap.keySet()) {
                            Souscentre souscentre = metier.findSouscentreByEtablissement(centre.getEtablissement().getAbreviation());
                            if (souscentreNbchefsalleMap.containsKey(souscentre)) {
                                nbmbres = souscentreNbchefsalleMap.get(souscentre);
                                nbjurys = centreJurytemoinMap.get(centre);
                                nbvac = nbmbres * 4;
                                coutvac = nbvac * txvac;
                                primevice = 0;
                                primeteneurPhys = nbjurys * 5000;
                                primeteneurNum = 0;
                                total = coutvac + primeteneurPhys;
                                int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;

                                metier.creerCaisse(new Caisse(totalArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                testsicreer = true;
                            }
                        }
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testsicreer) {
                        JOptionPane.showMessageDialog(this, "Etats de pré-délibération créés avec succès pour ce groupe d'examens !");
                    }
                }
                if (typeSelected.equals("IND") || typeSelected.equals("IND PROF")) {//cas TI
                    try {
                        for (Centre centre : centreJurytemoinMap.keySet()) {
                            Souscentre souscentre = metier.findSouscentreByEtablissement(centre.getEtablissement().getAbreviation());
                            if (souscentreEltcorrecttechMap.containsKey(souscentre)) {
                                //15 membres pour EG  au BACC et 20 au PROB                      
                                nbjurys = centreJurytemoinMap.get(centre);
                                int nbmbres = 0;//somme de tous les chefs de salle des différentes spécialités + EG
                                for (Eltcorrecttech eltcorrecttech : souscentreEltcorrecttechMap.get(souscentre)) {
                                    nbmbres += eltcorrecttech.getNbchefsal();
                                }
                                nbvac = nbmbres * 4;//4 vacations par mbre
                                coutvac = nbvac * txvac;
                                nbteneurs = nbjurys;//1 teneur PV physique par JT. pas de teneur num ici
                                primevice = 0;
                                primeteneurPhys = nbteneurs * 10000;//pour tous les teneurs. chacun a 10000
                                primeteneurNum = 0;
                                /*
                                    coutEG 8vac/mbre
                                    int nbmbreEG = 15;//15 pour tout centre de bacc
                                    if (niveauSelected.equals("PROB")) {
                                        nbmbreEG = 20;//20 pour tout centre de prob
                                    }
                                 */
                                total = coutvac + primeteneurPhys;// + nbmbreEG * 8 * 1500;
                                int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;

                                metier.creerCaisse(new Caisse(totalArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                testsicreer = true;
                            }
                        }
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testsicreer) {
                        JOptionPane.showMessageDialog(this, "Etats de pré-délibération créés avec succès pour ce groupe d'examens !");
                    }
                }
                if (typeSelected.equals("STT") || typeSelected.equals("STT PROF")) {//cas STT
                    try {
                        for (Centre centre : centreJurytemoinMap.keySet()) {
                            Souscentre souscentre = metier.findSouscentreByEtablissement(centre.getEtablissement().getAbreviation());
                            if (souscentreEltcorrecttechMap.containsKey(souscentre)) {
                                nbjurys = centreJurytemoinMap.get(centre);
                                int nbmbres = 0;//somme de tous les chefs de salle des différentes spécialités + EG
                                for (Eltcorrecttech eltcorrecttech : souscentreEltcorrecttechMap.get(souscentre)) {
                                    nbmbres += eltcorrecttech.getNbchefsal();
                                }
                                nbvac = nbmbres * 4;//4 vacations par mbre
                                coutvac = nbvac * txvac;
                                nbteneurs = nbjurys;//1 teneur PV physique par JT. pas de teneur num ici
                                primevice = 0;
                                primeteneurPhys = nbteneurs * 10000;//pour tous les teneurs. chacun a 10000
                                primeteneurNum = 0;
                                //coutEG= 10*8*1500 pour 10 membres, 8vac/mbre
                                total = coutvac + primeteneurPhys; //+ 10 * 8 * 1500;
                                int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                metier.creerCaisse(new Caisse(totalArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                testsicreer = true;
                            }
                        }
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testsicreer) {
                        JOptionPane.showMessageDialog(this, "Etats de pré-délibération créés avec succès pour ce groupe d'examens !");
                    }
                }
                examensSelected.clear();//on vide
                centreJurytemoinMap.clear();
                souscentreNbchefsalleMap.clear();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonCreerEtatsActionPerformed

    private void jButtonMettreAjourEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourEtatsActionPerformed
        infoSaisies();
        Map<Souscentre, ArrayList<Eltcorrecttech>> souscentreEltcorrecttechMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses Eltcorrecttech
        List<Souscentre> souscentreAvecEltcorrecttechList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des Eltcorrecttech
        Map<Centre, Integer> centreJurytemoinMap = new HashMap<>();//contient les centres chacun avec son nombre de jurys temoins
        Map<Souscentre, Integer> souscentreNbchefsalleMap = new HashMap<>();//contient les sous-centres chacun avec son nombre de chefs de salle
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de pré-délibération pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATIONS DE PRE-DELIBERATION");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de pré-délibération n'existe pour ce groupe d'examens !");
                } else {
                    //on conserve quelques info de ces anciennes caisses
                    Groupe groupe = caisses.get(0).getGroupe();
                    sessionSelected = caisses.get(0).getSession();
                    //on supprime toutes les anciennes caisses du groupe d'examens
                    for (Caisse c : caisses) {
                        metier.supprimerCaisse(c);
                    }
                    //on va les recréer
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }

                    //remplissage de souscentreNbchefsalleMap
                    if (typeSelected.equals("GEN")) {
                        nbchefsalles = metier.findAllNbchefsallesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                        if (!nbchefsalles.isEmpty()) {
                            for (Nbchefsalle nbchefsalle : nbchefsalles) {
                                souscentreNbchefsalleMap.put(nbchefsalle.getSouscentre(), nbchefsalle.getNombre());
                            }
                        }
                    } else {//cas ESTP
                        //remplissage souscentreEltcorrecttechMap
                        eltcorrecttechs = metier.findAllEltcorrecttechsD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                        for (Eltcorrecttech eltcorrecttech : eltcorrecttechs) {
                            if (!souscentreAvecEltcorrecttechList.contains(eltcorrecttech.getSouscentre())) {
                                souscentreAvecEltcorrecttechList.add(eltcorrecttech.getSouscentre());
                            }
                        }
                        for (Souscentre souscentre : souscentreAvecEltcorrecttechList) {
                            ArrayList<Eltcorrecttech> eltcorrecttechsList = new ArrayList<>();
                            for (Eltcorrecttech eltcorrecttech : eltcorrecttechs) {
                                if (eltcorrecttech.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                    eltcorrecttechsList.add(eltcorrecttech);
                                }
                            }
                            souscentreEltcorrecttechMap.put(souscentre, eltcorrecttechsList);
                        }
                    }

                    //remplissage centreJurytemoinMap
                    jurystemoins = metier.findAllJurystemoinsD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!jurystemoins.isEmpty()) {
                        for (Jurytemoin jurytemoin : jurystemoins) {
                            centreJurytemoinMap.put(jurytemoin.getCentre(), jurytemoin.getNbjurytemoin());
                        }
                    }

                    boolean testsimodifier = false;
                    if (typeSelected.equals("GEN")) {
                        try {
                            for (Centre centre : centreJurytemoinMap.keySet()) {
                                Souscentre souscentre = metier.findSouscentreByEtablissement(centre.getEtablissement().getAbreviation());
                                if (souscentreNbchefsalleMap.containsKey(souscentre)) {
                                    nbmbres = souscentreNbchefsalleMap.get(souscentre);
                                    nbjurys = centreJurytemoinMap.get(centre);
                                    nbvac = nbmbres * 4;
                                    coutvac = nbvac * txvac;
                                    primevice = 0;
                                    primeteneurPhys = nbjurys * 5000;
                                    primeteneurNum = 0;
                                    total = coutvac + primeteneurPhys;
                                    int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;

                                    metier.creerCaisse(new Caisse(totalArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                    testsimodifier = true;
                                }
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testsimodifier) {
                            JOptionPane.showMessageDialog(this, "Etats de pré-délibération créés avec succès pour ce groupe d'examens !");
                        }
                    }
                    if (typeSelected.equals("IND") || typeSelected.equals("IND PROF")) {//cas TI
                        try {
                            for (Centre centre : centreJurytemoinMap.keySet()) {
                                Souscentre souscentre = metier.findSouscentreByEtablissement(centre.getEtablissement().getAbreviation());
                                if (souscentreEltcorrecttechMap.containsKey(souscentre)) {
                                    //15 membres pour EG  au BACC et 20 au PROB                      
                                    nbjurys = centreJurytemoinMap.get(centre);
                                    int nbmbres = 0;//somme de tous les chefs de salle des différentes spécialités + EG
                                    for (Eltcorrecttech eltcorrecttech : souscentreEltcorrecttechMap.get(souscentre)) {
                                        nbmbres += eltcorrecttech.getNbchefsal();
                                    }
                                    nbvac = nbmbres * 4;//4 vacations par mbre
                                    coutvac = nbvac * txvac;
                                    nbteneurs = nbjurys;//1 teneur PV physique par JT. pas de teneur num ici
                                    primevice = 0;
                                    primeteneurPhys = nbteneurs * 10000;//pour tous les teneurs. chacun a 10000
                                    primeteneurNum = 0;
                                    /*
                                    coutEG 8vac/mbre
                                    int nbmbreEG = 15;//15 pour tout centre de bacc
                                    if (niveauSelected.equals("PROB")) {
                                        nbmbreEG = 20;//20 pour tout centre de prob
                                    }
                                     */
                                    total = coutvac + primeteneurPhys; //+ nbmbreEG * 8 * 1500;
                                    int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;

                                    metier.creerCaisse(new Caisse(totalArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                    testsimodifier = true;
                                }
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testsimodifier) {
                            JOptionPane.showMessageDialog(this, "Etats de pré-délibération créés avec succès pour ce groupe d'examens !");
                        }
                    }
                    if (typeSelected.equals("STT") || typeSelected.equals("STT PROF")) {//cas STT
                        try {
                            for (Centre centre : centreJurytemoinMap.keySet()) {
                                Souscentre souscentre = metier.findSouscentreByEtablissement(centre.getEtablissement().getAbreviation());
                                if (souscentreEltcorrecttechMap.containsKey(souscentre)) {
                                    //membres EG déjà gérés avec la délibération                    
                                    nbjurys = centreJurytemoinMap.get(centre);
                                    int nbmbres = 0;//somme de tous les chefs de salle des différentes spécialités + EG
                                    for (Eltcorrecttech eltcorrecttech : souscentreEltcorrecttechMap.get(souscentre)) {
                                        nbmbres += eltcorrecttech.getNbchefsal();
                                    }
                                    nbvac = nbmbres * 4;//4 vacations par mbre
                                    coutvac = nbvac * txvac;
                                    nbteneurs = nbjurys;//1 teneur PV physique par JT. pas de teneur num ici
                                    primevice = 0;
                                    primeteneurPhys = nbteneurs * 10000;//pour tous les teneurs. chacun a 10000
                                    primeteneurNum = 0;
                                    //coutEG= 10*8*1500 pour 10 membres, 8vac/mbre
                                    total = coutvac + primeteneurPhys; //+ 10 * 8 * 1500;
                                    int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;

                                    metier.creerCaisse(new Caisse(totalArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                    testsimodifier = true;
                                }
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testsimodifier) {
                            JOptionPane.showMessageDialog(this, "Etats de pré-délibération créés avec succès pour ce groupe d'examens !");
                        }
                    }

                    examensSelected.clear();//on vide
                    centreJurytemoinMap.clear();
                    souscentreNbchefsalleMap.clear();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
            }

        }
    }//GEN-LAST:event_jButtonMettreAjourEtatsActionPerformed

    private void jButtonSupprimerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEtatsActionPerformed
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de pré-délibération pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATIONS DE PRE-DELIBERATION");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de pré-délibération n'existe pour ce groupe d'examens !");
                } else {
                    boolean testsisupprimer = false;
                    try {
                        for (Caisse caisse : caisses) {
                            metier.supprimerCaisse(caisse);
                        }
                        testsisupprimer = true;
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testsisupprimer) {
                        JOptionPane.showMessageDialog(this, "Etats de pré-délibération supprimés avec succès pour ce groupe d'examens !");
                    }
                }
            }
        }

    }//GEN-LAST:event_jButtonSupprimerEtatsActionPerformed

    private void jButtonAnnulerChoixExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixExamenActionPerformed
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        jComboBoxSession.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixExamenActionPerformed

    private void jButtonAnnulerChoixCentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixCentreActionPerformed
        jComboBoxRegion.setSelectedIndex(0);
        jComboBoxDepartement.setSelectedIndex(0);
        jComboBoxCentre.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixCentreActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jComboBoxRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionActionPerformed
        remplirDepartementCombobox();
    }//GEN-LAST:event_jComboBoxRegionActionPerformed

    private void jComboBoxDepartementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementActionPerformed
        remplirCentreCombobox();

    }//GEN-LAST:event_jComboBoxDepartementActionPerformed

    private void jComboBoxCentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCentreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxCentreActionPerformed

    private void jButtonCreerJurytemoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerJurytemoinActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomCentreSelected.equals("---") || nbjurytemoinString.equals("")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un centre et donner le nombre de jurys temoins !");
        } else {
            validerNbjurytemoin(nbjurytemoinString);
            if (!continuerNbjurytemoin) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Le nombre de jurys temoins fourni est incorrect !");
            } else {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                for (Centre centre : centres) {
                    if (centre.getNomcent().equals(nomCentreSelected)) {
                        centreSelected = centre;
                        break;
                    }
                }

                try {
                    metier.creerJurytemoin(new Jurytemoin(nbjurytemoinSaisi, centreSelected, groupe, sessionSelected));
                    JOptionPane.showMessageDialog(this, "nombre de jurys temoins enregistré avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de d'enregistrer le nombre de jurys temoins dans le centre [" + nomCentreSelected + "]" + "\n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonCreerJurytemoinActionPerformed

    private void jButtonSupprimerJurytemoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerJurytemoinActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomCentreSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session et un centre !");
        } else {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer le nombre de jurys du centre [" + nomCentreSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                anneeSelected = Integer.parseInt(anneeString);
                try {
                    Jurytemoin jurytemoin = metier.findJurytemoinD1CentreD1GroupedexamensD1Session(nomCentreSelected, anneeSelected, niveauSelected, typeSelected);
                    metier.supprimerJurytemoin(jurytemoin);
                    JOptionPane.showMessageDialog(this, "Nombre de jurys temoins supprimé avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer le nombre de jurys temoins du centre [" + nomCentreSelected + "] \n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerJurytemoinActionPerformed

    private void jButtonListerJurystemoinsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerJurystemoinsActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens et une session !");
        } else {
            anneeSelected = Integer.parseInt(anneeString);
            jurystemoins = metier.findAllJurystemoinsD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);

            if (!jurystemoins.isEmpty()) {
                try {
                    List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                    for (Region region : regions) {
                        int i = 1;
                        for (Jurytemoin jurytemoin : jurystemoins) {
                            if (jurytemoin.getCentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                                Map<String, Object> row = new HashMap<>();
                                row.put("session", anneeSelected);
                                row.put("examen", groupedexamensEnstring);
                                row.put("region", region.getNomreg());
                                row.put("num", i++);
                                row.put("centre", jurytemoin.getCentre().getNomcent());
                                row.put("nbjurytemoin", jurytemoin.getNbjurytemoin());
                                datasource.add(row);
                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeJurystemoins.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Aucun nombre de jurys témoins trouvé dans la base de données !");
            }
        }
    }//GEN-LAST:event_jButtonListerJurystemoinsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatDeliberation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatDeliberation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatDeliberation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatDeliberation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatDeliberation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonAnnulerChoixCentre;
    private javax.swing.JButton jButtonAnnulerChoixExamen;
    private javax.swing.JButton jButtonCreerEtats;
    private javax.swing.JButton jButtonCreerJurytemoin;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonListerJurystemoins;
    private javax.swing.JButton jButtonMettreAjourEtats;
    private javax.swing.JButton jButtonSupprimerEtats;
    private javax.swing.JButton jButtonSupprimerJurytemoin;
    private javax.swing.JButton jButtonVisualiserEtats;
    private javax.swing.JComboBox<String> jComboBoxCentre;
    private javax.swing.JComboBox<String> jComboBoxDepartement;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxRegion;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelDepartement;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelNbjurystemoins;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelNomCentre;
    private javax.swing.JLabel jLabelRegion;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanelChoixCentre;
    private javax.swing.JPanel jPanelChoixExamen;
    private javax.swing.JPanel jPanelGestionEtat;
    private javax.swing.JPanel jPanelNbjurystemoins;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldNbjurystemoins;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Region> regions = null;
    private List<Examen> examens = null;
    private Examen examenSelected = null;
    private String[] examensList = null;
    private List<Examen> examensSelected = new ArrayList<>();
    private List<Departement> departements = null;
    private String[] sessionsCombo = null;
    private String[] regionsCombo = null;
    private String[] departementsCombo = null;
    private String[] arrondissementsCombo = null;
    private String[] centresCombo = null;
    private String[] sousfamillesCombo = null;
    private String nomRegionSelected = "";
    private String nomCentreSelected = "";
    private String nomDepartementSelected = "";
    private String titreSousfamilleSelected = "";
    private List<Centre> centres = null;
    private Centre centreSelected = null;
    private List<Sousfamille> sousfamilles = null;
    private Sousfamille sousfamilleSelected = null;
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private String phase = "DELIBERATION";
    private List<Caisse> caisses = null;
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private int nbmat = 0, nbmbres = 0, nbmbrestotal = 0, nbmbresEG = 15, nbjurys = 0, nbteneurs = 0, nbvac = 0, txvac = 1500, coutvac = 0, primevice = 0, primeteneurPhys = 0, primeteneurNum = 0, total;
    private String optionAffichee = "";
    //private int[] tabColis1 = new int[3];
    //private int[] tabColis2 = new int[3];
    private boolean continuerNbjurytemoin = false;
    private int nbjurytemoinSaisi = 0;
    private String nbjurytemoinString = "";
    private List<Jurytemoin> jurystemoins = null;
    private List<Jurydel> jurydels = null;
    private List<Nbchefsalle> nbchefsalles = null;
    private List<Eltcorrecttech> eltcorrecttechs = null;

    //private boolean valBoutonRadioNbchefsalle = false;
    //private boolean valBoutonRadioNbcopies = false;
    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        regions = metier.findAllRegions();
        examens = metier.findAllExamens();
        centres = metier.findAllCentres();
        sousfamilles = metier.findAllSousfamilles();

        //on remplit la combobox des régions du sous-centre
        regionsCombo = new String[regions.size() + 1];
        regionsCombo[0] = "---";
        int i = 1;
        for (Region region : regions) {
            regionsCombo[i++] = region.getNomreg();
        }
        jComboBoxRegion.setModel(new DefaultComboBoxModel(regionsCombo));

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int k = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[k++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "GEN", "IND", "IND PROF", "STT", "STT PROF", "TOUT", "TOUT ESTI", "TOUT STT", "TOUT ESTP"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC", "TOUT"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        remplirDepartementCombobox();
        remplirCentreCombobox();
    }

    private void infoSaisies() {
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        nomCentreSelected = (String) jComboBoxCentre.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        nbjurytemoinString = jTextFieldNbjurystemoins.getText();
    }

    private void remplirDepartementCombobox() {
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        departements = metier.findAllDepartementsD1Region(nomRegionSelected);
        //on remplit la combobox des départements
        departementsCombo = new String[departements.size() + 1];
        departementsCombo[0] = "---";
        int i = 1;
        for (Departement departement : departements) {
            departementsCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartement.setModel(new DefaultComboBoxModel(departementsCombo));
    }

    private void remplirCentreCombobox() {
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        centres = metier.findAllCentresD1Departement(nomDepartementSelected);
        //on remplit la combobox des sous-centres
        centresCombo = new String[centres.size() + 1];
        centresCombo[0] = "---";
        int i = 1;
        for (Centre centre : centres) {
            centresCombo[i++] = centre.getNomcent();
        }
        jComboBoxCentre.setModel(new DefaultComboBoxModel(centresCombo));

    }

    private void validerNbjurytemoin(String nbreString) {
        try {
            nbjurytemoinSaisi = Integer.parseInt(nbreString);
            continuerNbjurytemoin = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de jurys temoins doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbjurytemoin = false;
        }
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    private boolean testSiCentre(Souscentre souscentre) {
        boolean result = false;
        centres = metier.findAllCentres();
        for (Centre centre : centres) {
            if (centre.getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                result = true;
                break;
            }
        }
        return result;
    }

}
