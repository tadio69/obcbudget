package couche_ui;

import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Ponderation;
import couche_jpa.Sousfamille;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 *
 * @author HP
 */
public class VuePonderation extends javax.swing.JFrame {

    DefaultTableModel model;

    public VuePonderation() {
        initComponents();
        model = (DefaultTableModel) jTable1.getModel();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jLabelExamen = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextFieldCoefficient = new javax.swing.JTextField();
        jLabelCoefficient = new javax.swing.JLabel();
        jTextFieldNbmatieres = new javax.swing.JTextField();
        jLabelNbmatieres = new javax.swing.JLabel();
        jLabelRegion = new javax.swing.JLabel();
        jComboBoxNature = new javax.swing.JComboBox<>();
        jLabelDepartement = new javax.swing.JLabel();
        jComboBoxSousfamille = new javax.swing.JComboBox<>();
        jButtonCréer = new javax.swing.JButton();
        jButtonRechercher = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jButtonVisualiser = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("COEFFICIENT DE PONDERATION");

        jPanel2.setBackground(new java.awt.Color(204, 255, 0));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Groupe d'examens", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addGap(13, 13, 13))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jTextFieldCoefficient.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldCoefficient.setText("0");

        jLabelCoefficient.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelCoefficient.setText("Coefficient de pondération :");

        jTextFieldNbmatieres.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelNbmatieres.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbmatieres.setText("Nombre matières :");

        jLabelRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegion.setText("Nature :");

        jComboBoxNature.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxNature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNatureActionPerformed(evt);
            }
        });

        jLabelDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartement.setText("Sous-famille :");

        jComboBoxSousfamille.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSousfamille.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSousfamilleActionPerformed(evt);
            }
        });

        jButtonCréer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCréer.setText("Créer");
        jButtonCréer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCréerActionPerformed(evt);
            }
        });

        jButtonRechercher.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonRechercher.setText("Rechercher");
        jButtonRechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRechercherActionPerformed(evt);
            }
        });

        jButtonModifier.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonModifier.setText("Modifier");
        jButtonModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierActionPerformed(evt);
            }
        });

        jButtonSupprimer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jButtonAnnuler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jButtonVisualiser.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiser.setText("Visualiser");
        jButtonVisualiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "N° Ordre", "Niveau d'examen", "Type d'examen", "Sous-famille", "Nature", "Nombre matières", "Coefficient de pondération", "Version"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(true);
        jTable1.setShowVerticalLines(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelDepartement, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelRegion, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboBoxNature, 0, 235, Short.MAX_VALUE)
                                    .addComponent(jComboBoxSousfamille, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabelCoefficient)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldCoefficient, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabelNbmatieres)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldNbmatieres, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonCréer)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonRechercher)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonModifier)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSupprimer)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnuler)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonFermer)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonVisualiser)
                        .addGap(62, 62, 62)))
                .addGap(22, 22, 22))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(198, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(149, 149, 149))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxNature, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxSousfamille, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelCoefficient, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldCoefficient, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelNbmatieres, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldNbmatieres, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonRechercher, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonModifier, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonCréer, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonSupprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonAnnuler, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonVisualiser, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
            remplirNatureCombobox();
            remplirSousfamilleCombox();
        } else {
            JOptionPane.showMessageDialog(this, "Le champ niveau est vide !");
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jComboBoxNatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNatureActionPerformed
        //
    }//GEN-LAST:event_jComboBoxNatureActionPerformed

    private void jComboBoxSousfamilleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSousfamilleActionPerformed
        //
    }//GEN-LAST:event_jComboBoxSousfamilleActionPerformed

    private void jButtonCréerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCréerActionPerformed
        model.setRowCount(0);//vide la jTable
        validateNbmatieres();
        validateCoefficient();
        if (continuerCoef && continuerNbmatieres) {
            if (nbMatieresSaisi <= 0 || coefSaisi < 0) {
                JOptionPane.showMessageDialog(this, " Le nombre de matières (non nul) et le coefficient de pondération doivent être des entiers positifs !");
            } else {
                infoSaisies();
                if (!typeSelected.equals("---") && !niveauSelected.equals("---") && !natureSelected.equals("---") && !sousfamilleSelected.equals("---")) {
                    try {
                        Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                        Sousfamille sousfamille = metier.findSousfamilleByTitre(sousfamilleSelected);
                        metier.creerPonderation(new Ponderation(coefSaisi, nbMatieresSaisi, natureSelected, groupe, sousfamille));
                        JOptionPane.showMessageDialog(this, "Ponderation créée avec succès !");
                        //videFrame();
                        ponderations = metier.findAllPonderationsD1Groupedexamens(niveauSelected, typeSelected);
                        int i = 1;
                        for (Ponderation p : ponderations) {
                            model.insertRow(model.getRowCount(), new Object[]{p.getIdpond(), i++, p.getGroupe().getNiveau(), p.getGroupe().getType(), p.getSousfamille().getTitre(), p.getNature(), p.getNbmat(), p.getCoef(), p.getVersion()});
                        }
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de créer la pondération souhaité\n raison:" + ex.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(this, " Tous les champs sont obligatoires !");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Nombre de matières ou coefficient de pondération incorrect ! ");
        }
    }//GEN-LAST:event_jButtonCréerActionPerformed

    private void jButtonRechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRechercherActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        if (!typeSelected.equals("---") && !niveauSelected.equals("---") && !natureSelected.equals("---") && !sousfamilleSelected.equals("---")) {
            try {
                unePonderation = metier.findPonderationD1GroupedexamensD1NatureEtD1Sousfamille(typeSelected, niveauSelected, natureSelected, sousfamilleSelected);
                model.insertRow(model.getRowCount(), new Object[]{unePonderation.getIdpond(), 1, unePonderation.getGroupe().getNiveau(), unePonderation.getGroupe().getType(), unePonderation.getSousfamille().getTitre(), unePonderation.getNature(), unePonderation.getNbmat(), unePonderation.getCoef(), unePonderation.getVersion()});
            } catch (ObcbudgetException ex) {
                JOptionPane.showMessageDialog(this, "La pondération recherchée n'existe pas\n raison:" + ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez sélectionner un groupe d'examens, une nature et une sous-famille");
        }
    }//GEN-LAST:event_jButtonRechercherActionPerformed

    private void jButtonModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierActionPerformed
        model.setRowCount(0);//vide la jTable
        validateNbmatieres();
        validateCoefficient();
        if (continuerCoef && continuerNbmatieres) {
            if (nbMatieresSaisi <= 0 || coefSaisi < 0) {
                JOptionPane.showMessageDialog(this, " Le nombre de matières (non nul) et le coefficient de pondération doivent être des entiers positifs !");
            } else {
                infoSaisies();
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier cette pondération?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    if (!typeSelected.equals("---") && !niveauSelected.equals("---") && !natureSelected.equals("---") && !sousfamilleSelected.equals("---")) {
                        unePonderation = metier.findPonderationById(idPonderationCliked);
                        Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                        Sousfamille sousfamille = metier.findSousfamilleByTitre(sousfamilleSelected);
                        unePonderation.setNature(natureSelected);
                        unePonderation.setSousfamille(sousfamille);
                        unePonderation.setGroupe(groupe);
                        unePonderation.setCoef(coefSaisi);//coefSaisi, nbMatieresSaisi
                        unePonderation.setNbmat(nbMatieresSaisi);
                        try {
                            metier.modifierPonderation(unePonderation);
                            JOptionPane.showMessageDialog(this, "Pondération modifiée avec succès !");
                            //videFrame();
                            int i = 1;
                            ponderations = metier.findAllPonderationsD1Groupedexamens(niveauSelected, typeSelected);
                            for (Ponderation p : ponderations) {
                                model.insertRow(model.getRowCount(), new Object[]{p.getIdpond(), i++, p.getGroupe().getNiveau(), p.getGroupe().getType(), p.getSousfamille().getTitre(), p.getNature(), p.getNbmat(), p.getCoef(), p.getVersion()});
                            }
                        } catch (ObcbudgetException ex) {
                            JOptionPane.showMessageDialog(this, "Impossible de modifier la pondération\n raison:" + ex.getMessage());
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Nombre de matières ou coefficient de pondération incorrect !");
        }
    }//GEN-LAST:event_jButtonModifierActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer cette pondération?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!typeSelected.equals("---") && !niveauSelected.equals("---") && !natureSelected.equals("---") && !sousfamilleSelected.equals("---")) {
                try {
                    metier.supprimerPonderation(metier.findPonderationById(idPonderationCliked));
                    JOptionPane.showMessageDialog(this, "Pondération supprimée avec succès !");
                    //videFrame();
                    int i = 1;
                    ponderations = metier.findAllPonderationsD1Groupedexamens(niveauSelected, typeSelected);
                    for (Ponderation p : ponderations) {
                        model.insertRow(model.getRowCount(), new Object[]{p.getIdpond(), i++, p.getGroupe().getNiveau(), p.getGroupe().getType(), p.getSousfamille().getTitre(), p.getNature(), p.getNbmat(), p.getCoef(), p.getVersion()});
                    }
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer la pondération souhaitée\n raison:" + ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
            }
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        videFrame();
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jButtonVisualiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserActionPerformed
        typeSelected = (String) jComboBoxType.getSelectedItem();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!typeSelected.equals("---") && !niveauSelected.equals("---")) {
            groupedexamensEnstring=jTextArea1.getText();
            ponderations = metier.findAllPonderationsD1Groupedexamens(niveauSelected, typeSelected);
            try {
                List<Map<String, Object>> datasource = new ArrayList<>();
                int i = 1;
                for (Ponderation ponderation : ponderations) {
                    Map<String, Object> row = new HashMap<>();
                    row.put("examen", groupedexamensEnstring);
                    row.put("num", i++);
                    row.put("sousfamille", ponderation.getSousfamille().getTitre());
                    row.put("nature", ponderation.getNature());
                    row.put("nbmat", ponderation.getNbmat());
                    row.put("coef", ponderation.getCoef());
                    datasource.add(row);
                }
                JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\ponderationReport.jrxml");
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                jasperViewer.setVisible(true);
            } catch (JRException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
        }
        else JOptionPane.showMessageDialog(this, "Aucun groupe d'examens choisi !");
    }//GEN-LAST:event_jButtonVisualiserActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        //remplit les champs
        int ligne = jTable1.getSelectedRow();
        idPonderationCliked = (int) model.getValueAt(ligne, 0);
        jComboBoxNiveau.setSelectedItem((String) model.getValueAt(ligne, 2));
        jComboBoxType.setSelectedItem((String) model.getValueAt(ligne, 3));
        jComboBoxSousfamille.setSelectedItem((String) model.getValueAt(ligne, 4));
        jComboBoxNature.setSelectedItem((String) model.getValueAt(ligne, 5));
        jTextFieldNbmatieres.setText("" + model.getValueAt(ligne, 6));
        jTextFieldCoefficient.setText("" + model.getValueAt(ligne, 7));
    }//GEN-LAST:event_jTable1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VuePonderation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VuePonderation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VuePonderation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VuePonderation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VuePonderation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonCréer;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonRechercher;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JButton jButtonVisualiser;
    private javax.swing.JComboBox<String> jComboBoxNature;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxSousfamille;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelCoefficient;
    private javax.swing.JLabel jLabelDepartement;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelNbmatieres;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelRegion;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldCoefficient;
    private javax.swing.JTextField jTextFieldNbmatieres;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private String natureSelected = "";
    private String sousfamilleSelected = "";
    private Ponderation unePonderation = null;
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String[] naturesINDCombo = null;
    private String[] naturesSTTCombo = null;
    private String niveauSelected = "";
    private int nbMatieresSaisi = 0;
    private double coefSaisi = 0.0;
    private List<Ponderation> ponderations = null;
    private int idPonderationCliked = 0;
    private boolean continuerCoef = false;
    private boolean continuerNbmatieres = false;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private List<Sousfamille> sousfamillesTI = null;
    private List<Sousfamille> sousfamillesSTT = null;
    private String[] sousfamillesCombo = null;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sousfamillesTI = metier.findAllSousfamillesTI();
        sousfamillesSTT = metier.findAllSousfamillesSTT();

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "IND", "IND PROF", "STT", "STT PROF"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        naturesINDCombo = new String[]{"---", "EP", "MECA", "REGL", "DESSIN MECA", "EG", "INFO", "EPS", "ALL", "CM", "ENTREPRENEURIAT", "MECA APPL", "PROJET", "TMH", "AUTO", "ECO ENTREPRISES", "CONST MECA", "ALL ENTRE", "EP+INFO", "HSE","MECA FLUIDE","TECHNO MECA","DESSIN TOPO" ,"DESSIN" ,"TOPO" ,"CONST. MECA. TECHNO."};
        naturesSTTCombo = new String[]{"---", "EP","EP+Courrier","ESPAGNOL","BIOLOGIE", "SC. ECO & JU", "MATHS GENE", "EG", "SEJ", "SC PHY BIO", "SC. PHY.", "PHILO", "MATHS APPL", "EPS", "2ème LANGUE"};

    }

    private void infoSaisies() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        natureSelected = (String) jComboBoxNature.getSelectedItem();
        sousfamilleSelected = (String) jComboBoxSousfamille.getSelectedItem();
    }

    private void videFrame() {
        model.setRowCount(0);//vide la jTable
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jComboBoxNature.setSelectedIndex(0);
        jComboBoxSousfamille.setSelectedIndex(0);
        jTextArea1.setText("");
        jTextFieldNbmatieres.setText("");
        jTextFieldCoefficient.setText("");
    }

    private void validateNbmatieres() {
        String chaine = jTextFieldNbmatieres.getText();
        try {
            int nombre = Integer.parseInt(chaine);
            nbMatieresSaisi = nombre;
            continuerNbmatieres = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de matières doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbmatieres = false;
        }
    }

    private void validateCoefficient() {
        String chaine = jTextFieldCoefficient.getText();
        try {
            double nombre = Double.parseDouble(chaine);
            coefSaisi = nombre;
            continuerCoef = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le coefficient doit être fourni !");
            continuerCoef = false;
        }
    }

    private void remplirExamensTextArea() {
        String examensSelectedEnchaine = "";
        typeSelected = (String) jComboBoxType.getSelectedItem();
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    private void remplirNatureCombobox() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            if (typeSelected.equals("IND") || typeSelected.equals("IND PROF")) {
                jComboBoxNature.setModel(new DefaultComboBoxModel(naturesINDCombo));
            }
            if (typeSelected.equals("STT") || typeSelected.equals("STT PROF")) {
                jComboBoxNature.setModel(new DefaultComboBoxModel(naturesSTTCombo));
            }
        }
    }

    private void remplirSousfamilleCombox() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            if (typeSelected.equals("IND") || typeSelected.equals("IND PROF")) {
                sousfamillesCombo = new String[sousfamillesTI.size() + 1];
                sousfamillesCombo[0] = "---";
                int l = 1;
                for (Sousfamille sousfamille : sousfamillesTI) {
                    sousfamillesCombo[l++] = sousfamille.getTitre();
                }
            }
            if (typeSelected.equals("STT") || typeSelected.equals("STT PROF")) {
                sousfamillesCombo = new String[sousfamillesSTT.size() + 1];
                sousfamillesCombo[0] = "---";
                int l = 1;
                for (Sousfamille sousfamille : sousfamillesSTT) {
                    sousfamillesCombo[l++] = sousfamille.getTitre();
                }
            }
            jComboBoxSousfamille.setModel(new DefaultComboBoxModel(sousfamillesCombo));
        }
    }
}
