package couche_ui;

import couche_jpa.Arrondissement;
import couche_jpa.Departement;
import couche_jpa.Examen;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Nbcartons;
import couche_jpa.Region;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueEtiquetteCarton extends javax.swing.JFrame {

    DefaultTableModel model;

    public VueEtiquetteCarton() {
        initComponents();
        model = (DefaultTableModel) jTable1.getModel();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButtonFermer = new javax.swing.JButton();
        jButtonVisualiserNombres = new javax.swing.JButton();
        jButtonCreer = new javax.swing.JButton();
        jButtonRechercher = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanelChoixExamen = new javax.swing.JPanel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixExamen = new javax.swing.JButton();
        jLabelNiveau = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelExamen = new javax.swing.JLabel();
        jLabelNumpratique = new javax.swing.JLabel();
        jComboBoxNumpratique = new javax.swing.JComboBox<>();
        jPanelChoixSouscentre = new javax.swing.JPanel();
        jComboBoxDepartement = new javax.swing.JComboBox<>();
        jLabelDepartement = new javax.swing.JLabel();
        jLabelSouscentre = new javax.swing.JLabel();
        jComboBoxArrondissement = new javax.swing.JComboBox<>();
        jComboBoxSouscentre = new javax.swing.JComboBox<>();
        jLabelArrondissement = new javax.swing.JLabel();
        jComboBoxRegion = new javax.swing.JComboBox<>();
        jLabelRegion = new javax.swing.JLabel();
        jButtonAnnulerChoixSouscentre = new javax.swing.JButton();
        jLabelNbcartons = new javax.swing.JLabel();
        jTextFieldNbcartons = new javax.swing.JTextField();
        jButtonVisualiserEtiquettes = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETIQUETTES DES CARTONS");

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jButtonVisualiserNombres.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserNombres.setText("Visualiser nombres saisis");
        jButtonVisualiserNombres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserNombresActionPerformed(evt);
            }
        });

        jButtonCreer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreer.setText("Créer");
        jButtonCreer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerActionPerformed(evt);
            }
        });

        jButtonRechercher.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonRechercher.setText("Rechercher");
        jButtonRechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRechercherActionPerformed(evt);
            }
        });

        jButtonModifier.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonModifier.setText("Modifier");
        jButtonModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierActionPerformed(evt);
            }
        });

        jButtonSupprimer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Région", "Département", "Arrondissement", "Sous-centre", "Session", "Niveau", "Type", "Pratique n°", "Nbre total cartons", "Version"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(true);
        jTable1.setShowVerticalLines(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanelChoixExamen.setBackground(new java.awt.Color(102, 255, 153));
        jPanelChoixExamen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un groupe d'examens et une session", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixExamen.setText("Annuler");
        jButtonAnnulerChoixExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixExamenActionPerformed(evt);
            }
        });

        jLabelNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveau.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        jLabelNumpratique.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNumpratique.setText("Pratique n° :");

        jComboBoxNumpratique.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxNumpratique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNumpratiqueActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixExamenLayout = new javax.swing.GroupLayout(jPanelChoixExamen);
        jPanelChoixExamen.setLayout(jPanelChoixExamenLayout);
        jPanelChoixExamenLayout.setHorizontalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveau))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabelSession)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabelNumpratique)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxNumpratique, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );
        jPanelChoixExamenLayout.setVerticalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 97, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelNumpratique, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxNumpratique, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(23, 23, 23))
        );

        jPanelChoixSouscentre.setBackground(new java.awt.Color(204, 255, 0));
        jPanelChoixSouscentre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un sous-centre", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jComboBoxDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementActionPerformed(evt);
            }
        });

        jLabelDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartement.setText("Département :");

        jLabelSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSouscentre.setText("Sous-centre :");

        jComboBoxArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementActionPerformed(evt);
            }
        });

        jComboBoxSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSouscentre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSouscentreActionPerformed(evt);
            }
        });

        jLabelArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissement.setText("Arrondissement :");

        jComboBoxRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionActionPerformed(evt);
            }
        });

        jLabelRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegion.setText("Région :");

        jButtonAnnulerChoixSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixSouscentre.setText("Annuler");
        jButtonAnnulerChoixSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixSouscentreActionPerformed(evt);
            }
        });

        jLabelNbcartons.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbcartons.setText("Nombre total decartons :");

        jTextFieldNbcartons.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldNbcartons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNbcartonsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixSouscentreLayout = new javax.swing.GroupLayout(jPanelChoixSouscentre);
        jPanelChoixSouscentre.setLayout(jPanelChoixSouscentreLayout);
        jPanelChoixSouscentreLayout.setHorizontalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelNbcartons)
                    .addComponent(jLabelDepartement)
                    .addComponent(jLabelArrondissement)
                    .addComponent(jLabelSouscentre)
                    .addComponent(jLabelRegion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxDepartement, 0, 458, Short.MAX_VALUE)
                            .addComponent(jComboBoxRegion, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(51, 51, 51)
                        .addComponent(jButtonAnnulerChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNbcartons, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixSouscentreLayout.setVerticalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonAnnulerChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNbcartons, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNbcartons, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jButtonVisualiserEtiquettes.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserEtiquettes.setText("Visualiser Etiquettes");
        jButtonVisualiserEtiquettes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserEtiquettesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(422, 422, 422)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(16, 16, 16))
            .addGroup(layout.createSequentialGroup()
                .addGap(206, 206, 206)
                .addComponent(jButtonCreer)
                .addGap(18, 18, 18)
                .addComponent(jButtonRechercher)
                .addGap(18, 18, 18)
                .addComponent(jButtonModifier)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimer)
                .addGap(18, 18, 18)
                .addComponent(jButtonFermer)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiserNombres)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiserEtiquettes)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonVisualiserNombres, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonVisualiserEtiquettes, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonCreer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonRechercher, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonModifier, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonSupprimer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(19, 19, 19)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldNbcartonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNbcartonsActionPerformed
        //
    }//GEN-LAST:event_jTextFieldNbcartonsActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jButtonVisualiserNombresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserNombresActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || numpratSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session et le numéro de pratique !");
        } else {
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            int numprat = Integer.parseInt(numpratSelected);
            anneeSelected = Integer.parseInt(anneeString);
            lesNbcartons = metier.findAllNbcartonsD1GroupedexamensDans1SessionD1Numprat(anneeSelected, niveauSelected, typeSelected, numprat);
            if (!lesNbcartons.isEmpty()) {
                try {
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    for (Region region : regions) {
                        for (Nbcartons nbcart : lesNbcartons) {
                            if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                Map<String, Object> row = new HashMap<>();
                                row.put("examen", groupedexamensEnstring);
                                row.put("session", nbcart.getSession().getAnnee());
                                row.put("region", region.getNomreg());
                                row.put("departement", nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getNomdepart());
                                row.put("arrondissement", nbcart.getSouscentre().getEtablissement().getArrondissement().getNomarr());
                                row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                row.put("nombre", nbcart.getNbcart());
                                datasource.add(row);
                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\nbcartonsReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Aucun nombre de cartons trouvé dans la base des données !");
            }
        }
    }//GEN-LAST:event_jButtonVisualiserNombresActionPerformed

    private void jButtonCreerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nbcartonsString.equals("") || numpratSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre, le numéro de pratique et donner le nombre total de cartons !");
        } else {
            model.setRowCount(0);//vide la jTable
            validerNbcartons(nbcartonsString);
            if (continuer && nbcartonsSaisi > 0) {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                int numprat = Integer.parseInt(numpratSelected);
                anneeSelected = Integer.parseInt(anneeString);
                for (Souscentre souscentre : souscentres) {
                    if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                        souscentreSelected = souscentre;
                        break;
                    }
                }

                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                try {
                    metier.creerNbcartons(new Nbcartons(groupe, sessionSelected, souscentreSelected, nbcartonsSaisi, numprat));
                    JOptionPane.showMessageDialog(this, "Nombre de cartons créée avec succès !");
                    jTextFieldNbcartons.setText("0");
                    nbcartons = metier.findNbcartonsD1SouscentreD1GroupedexamensDans1SessionD1Numprat(anneeSelected, nomSouscentreSelected, niveauSelected, typeSelected, numprat);
                    model.insertRow(model.getRowCount(), new Object[]{nbcartons.getIdnbcart(), nbcartons.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), nbcartons.getSouscentre().getEtablissement().getArrondissement().getDepartement().getNomdepart(), nbcartons.getSouscentre().getEtablissement().getArrondissement().getNomarr(), nbcartons.getSouscentre().getNomsouscent(), nbcartons.getSession().getAnnee(), nbcartons.getGroupe().getNiveau(), nbcartons.getGroupe().getType(), nbcartons.getNumprat(), nbcartons.getNbcart(), nbcartons.getVersion()});
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de créer le nombre de cartons souhaité \n raison:" + ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Le nombre de cartons doit être un entier positif !");
            }
        }
    }//GEN-LAST:event_jButtonCreerActionPerformed

    private void jButtonRechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRechercherActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || numpratSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre et le numéro de pratique !");
        } else {
            try {
                int numprat = Integer.parseInt(numpratSelected);
                anneeSelected = Integer.parseInt(anneeString);
                nbcartons = metier.findNbcartonsD1SouscentreD1GroupedexamensDans1SessionD1Numprat(anneeSelected, nomSouscentreSelected, niveauSelected, typeSelected, numprat);
                model.insertRow(model.getRowCount(), new Object[]{nbcartons.getIdnbcart(), nbcartons.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), nbcartons.getSouscentre().getEtablissement().getArrondissement().getDepartement().getNomdepart(), nbcartons.getSouscentre().getEtablissement().getArrondissement().getNomarr(), nbcartons.getSouscentre().getNomsouscent(), nbcartons.getSession().getAnnee(), nbcartons.getGroupe().getNiveau(), nbcartons.getGroupe().getType(), nbcartons.getNumprat(), nbcartons.getNbcart(), nbcartons.getVersion()});
            } catch (ObcbudgetException ex) {
                JOptionPane.showMessageDialog(this, "Le nombre de cartons recherché n'existe sans doute pas ! ");
            }
        }
    }//GEN-LAST:event_jButtonRechercherActionPerformed

    private void jButtonModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierActionPerformed
        infoSaisies();
        model.setRowCount(0);//vide la jTable
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nbcartonsString.equals("") || numpratSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre, le numéro de pratique et donner le nombre total de cartons !");
        } else {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier ce nombre de cartons?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                validerNbcartons(nbcartonsString);
                anneeSelected = Integer.parseInt(anneeString);
                if (continuer && nbcartonsSaisi > 0) {
                    nbcartonsCliked = metier.findNbcartonsById(idNbcartonsCliked);
                    for (Souscentre souscentre : souscentres) {
                        if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                            souscentreSelected = souscentre;
                            break;
                        }
                    }
                    nbcartonsCliked.setSouscentre(souscentreSelected);
                    Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                    nbcartonsCliked.setGroupe(groupe);

                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }
                    nbcartonsCliked.setSession(sessionSelected);

                    nbcartonsCliked.setNbcart(nbcartonsSaisi);
                    int numprat = Integer.parseInt(numpratSelected);
                    nbcartonsCliked.setNumprat(numprat);

                    try {
                        metier.modifierNbcartons(nbcartonsCliked);
                        JOptionPane.showMessageDialog(this, "Nombre de cartons modifié avec succès !");
                        jTextFieldNbcartons.setText("0");
                        nbcartons = metier.findNbcartonsD1SouscentreD1GroupedexamensDans1SessionD1Numprat(anneeSelected, nomSouscentreSelected, niveauSelected, typeSelected, numprat);
                        model.insertRow(model.getRowCount(), new Object[]{nbcartons.getIdnbcart(), nbcartons.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), nbcartons.getSouscentre().getEtablissement().getArrondissement().getDepartement().getNomdepart(), nbcartons.getSouscentre().getEtablissement().getArrondissement().getNomarr(), nbcartons.getSouscentre().getNomsouscent(), nbcartons.getSession().getAnnee(), nbcartons.getGroupe().getNiveau(), nbcartons.getGroupe().getType(), nbcartons.getNumprat(), nbcartons.getNbcart(), nbcartons.getVersion()});
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de modifier le nombre de cartons souhaité \n raison:" + ex.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Le nombre de cartons doit être un entier positif !");
                }
            }
        }
    }//GEN-LAST:event_jButtonModifierActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nbcartonsString.equals("") || numpratSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre, le numéro de pratique et donner le nombre total de cartons !");
        } else {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer ce nombre de cartons?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                validerNbcartons(nbcartonsString);
                anneeSelected = Integer.parseInt(anneeString);
                if (continuer && nbcartonsSaisi > 0) {
                    int numprat = Integer.parseInt(numpratSelected);
                    try {
                        metier.supprimerNbcartons(metier.findNbcartonsById(idNbcartonsCliked));
                        JOptionPane.showMessageDialog(this, "Nombre de cartons supprimé avec succès !");
                        jTextFieldNbcartons.setText("0");
                        nbcartons = metier.findNbcartonsD1SouscentreD1GroupedexamensDans1SessionD1Numprat(anneeSelected, nomSouscentreSelected, niveauSelected, typeSelected, numprat);
                        model.insertRow(model.getRowCount(), new Object[]{nbcartons.getIdnbcart(), nbcartons.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), nbcartons.getSouscentre().getEtablissement().getArrondissement().getDepartement().getNomdepart(), nbcartons.getSouscentre().getEtablissement().getArrondissement().getNomarr(), nbcartons.getSouscentre().getNomsouscent(), nbcartons.getSession().getAnnee(), nbcartons.getGroupe().getNiveau(), nbcartons.getGroupe().getType(), nbcartons.getNumprat(), nbcartons.getNbcart(), nbcartons.getVersion()});
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de supprimer le nombre de cartons souhaité \n raison:" + ex.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Le nombre de cartons doit doit être un entier positif !");
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        //remplit les champs
        int ligne = jTable1.getSelectedRow();
        idNbcartonsCliked = (int) model.getValueAt(ligne, 0);
        jComboBoxRegion.setSelectedItem((String) model.getValueAt(ligne, 1));
        jComboBoxDepartement.setSelectedItem((String) model.getValueAt(ligne, 2));
        jComboBoxArrondissement.setSelectedItem((String) model.getValueAt(ligne, 3));
        jComboBoxSouscentre.setSelectedItem((String) model.getValueAt(ligne, 4));
        jComboBoxSession.setSelectedItem("" + model.getValueAt(ligne, 5));
        jComboBoxNiveau.setSelectedItem((String) model.getValueAt(ligne, 6));
        jComboBoxType.setSelectedItem((String) model.getValueAt(ligne, 7));

        groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type((String) model.getValueAt(ligne, 6), (String) model.getValueAt(ligne, 7));
        int i = 0;
        String examensEnchaine = "";
        for (Groupedexamen g : groupedexamens) {
            if (i++ == 0) {
                examensEnchaine += g.getExamen().getSigle();
            } else {
                examensEnchaine += ", " + g.getExamen().getSigle();
            }
        }
        jTextArea1.setText(examensEnchaine);

        jComboBoxNumpratique.setSelectedItem((int) model.getValueAt(ligne, 8));

        jTextFieldNbcartons.setText("" + model.getValueAt(ligne, 9));
    }//GEN-LAST:event_jTable1MouseClicked

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonAnnulerChoixExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixExamenActionPerformed
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        jComboBoxSession.setSelectedIndex(0);
        jComboBoxNumpratique.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixExamenActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jComboBoxNumpratiqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNumpratiqueActionPerformed
        //
    }//GEN-LAST:event_jComboBoxNumpratiqueActionPerformed

    private void jComboBoxDepartementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementActionPerformed
        remplirArrondissementCombobox();
    }//GEN-LAST:event_jComboBoxDepartementActionPerformed

    private void jComboBoxArrondissementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementActionPerformed
        remplirSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementActionPerformed

    private void jComboBoxSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSouscentreActionPerformed
        //jTextField1.setText();
    }//GEN-LAST:event_jComboBoxSouscentreActionPerformed

    private void jComboBoxRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionActionPerformed
        remplirDepartementCombobox();
    }//GEN-LAST:event_jComboBoxRegionActionPerformed

    private void jButtonAnnulerChoixSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixSouscentreActionPerformed
        jComboBoxRegion.setSelectedIndex(0);
        jComboBoxDepartement.setSelectedIndex(0);
        jComboBoxArrondissement.setSelectedIndex(0);
        jComboBoxSouscentre.setSelectedIndex(0);
        jTextFieldNbcartons.setText("");
    }//GEN-LAST:event_jButtonAnnulerChoixSouscentreActionPerformed

    private void jButtonVisualiserEtiquettesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserEtiquettesActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || numpratSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session et le numéro de pratique !");
        } else {
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            int numprat = Integer.parseInt(numpratSelected);
            anneeSelected = Integer.parseInt(anneeString);
            lesNbcartons = metier.findAllNbcartonsD1GroupedexamensDans1SessionD1Numprat(anneeSelected, niveauSelected, typeSelected, numprat);
            if (!lesNbcartons.isEmpty()) {
                if (niveauSelected.equals("BACC") && typeSelected.equals("GEN")) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Nbcartons nbcart : lesNbcartons) {
                                if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    for (int i = 0; i < nbcart.getNbcart(); i++) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", nbcart.getSession().getAnnee());
                                        row.put("region", "AR/" + region.getNomreg());
                                        row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                        row.put("numcolis", (i + 1) + "/" + nbcart.getNbcart());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etiquettesBACCESGReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
                if (niveauSelected.equals("PROB") && typeSelected.equals("GEN")) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Nbcartons nbcart : lesNbcartons) {
                                if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    for (int i = 0; i < nbcart.getNbcart(); i++) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", nbcart.getSession().getAnnee());
                                        row.put("region", "AR/" + region.getNomreg());
                                        row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                        row.put("numcolis", (i + 1) + "/" + nbcart.getNbcart());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etiquettesPROBESGReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
                if (niveauSelected.equals("BACC") && typeSelected.equals("STT")) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Nbcartons nbcart : lesNbcartons) {
                                if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    for (int i = 0; i < nbcart.getNbcart(); i++) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", nbcart.getSession().getAnnee());
                                        row.put("region", "AR/" + region.getNomreg());
                                        row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                        row.put("numcolis", (i + 1) + "/" + nbcart.getNbcart());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etiquettesBACCSTTReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
                if (niveauSelected.equals("PROB") && typeSelected.equals("STT")) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Nbcartons nbcart : lesNbcartons) {
                                if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    for (int i = 0; i < nbcart.getNbcart(); i++) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", nbcart.getSession().getAnnee());
                                        row.put("region", "AR/" + region.getNomreg());
                                        row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                        row.put("numcolis", (i + 1) + "/" + nbcart.getNbcart());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etiquettesPROBSTTReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
                if (niveauSelected.equals("BACC") && typeSelected.equals("IND PROF")) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Nbcartons nbcart : lesNbcartons) {
                                if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    for (int i = 0; i < nbcart.getNbcart(); i++) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", nbcart.getSession().getAnnee());
                                        row.put("region", "AR/" + region.getNomreg());
                                        row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                        row.put("numcolis", (i + 1) + "/" + nbcart.getNbcart());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etiquettesBACCINDPROFReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
                if (niveauSelected.equals("BACC") && typeSelected.equals("STT PROF")) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Nbcartons nbcart : lesNbcartons) {
                                if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    for (int i = 0; i < nbcart.getNbcart(); i++) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", nbcart.getSession().getAnnee());
                                        row.put("region", "AR/" + region.getNomreg());
                                        row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                        row.put("numcolis", (i + 1) + "/" + nbcart.getNbcart());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etiquettesBACCSTTPROFReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
                if (niveauSelected.equals("PROB") && typeSelected.equals("IND PROF")) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Nbcartons nbcart : lesNbcartons) {
                                if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    for (int i = 0; i < nbcart.getNbcart(); i++) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", nbcart.getSession().getAnnee());
                                        row.put("region", "AR/" + region.getNomreg());
                                        row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                        row.put("numcolis", (i + 1) + "/" + nbcart.getNbcart());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etiquettesPROBINDPROFReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
                if (niveauSelected.equals("PROB") && typeSelected.equals("STT PROF")) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Nbcartons nbcart : lesNbcartons) {
                                if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    for (int i = 0; i < nbcart.getNbcart(); i++) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", nbcart.getSession().getAnnee());
                                        row.put("region", "AR/" + region.getNomreg());
                                        row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                        row.put("numcolis", (i + 1) + "/" + nbcart.getNbcart());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etiquettesPROBSTTPROFReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
                if (niveauSelected.equals("PROB") && typeSelected.equals("IND") && numpratSelected.equals("1")) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Nbcartons nbcart : lesNbcartons) {
                                if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    for (int i = 0; i < nbcart.getNbcart(); i++) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", nbcart.getSession().getAnnee());
                                        row.put("region", "AR/" + region.getNomreg());
                                        row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                        row.put("numcolis", (i + 1) + "/" + nbcart.getNbcart());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etiquettesPROBIND1Report.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
                if (niveauSelected.equals("PROB") && typeSelected.equals("IND") && numpratSelected.equals("2")) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Nbcartons nbcart : lesNbcartons) {
                                if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    for (int i = 0; i < nbcart.getNbcart(); i++) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", nbcart.getSession().getAnnee());
                                        row.put("region", "AR/" + region.getNomreg());
                                        row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                        row.put("numcolis", (i + 1) + "/" + nbcart.getNbcart());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etiquettesPROBIND2Report.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
                if (niveauSelected.equals("BACC") && typeSelected.equals("IND") && numpratSelected.equals("1")) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Nbcartons nbcart : lesNbcartons) {
                                if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    for (int i = 0; i < nbcart.getNbcart(); i++) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", nbcart.getSession().getAnnee());
                                        row.put("region", "AR/" + region.getNomreg());
                                        row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                        row.put("numcolis", (i + 1) + "/" + nbcart.getNbcart());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etiquettesBACCIND1Report.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
                if (niveauSelected.equals("BACC") && typeSelected.equals("IND") && numpratSelected.equals("2")) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Nbcartons nbcart : lesNbcartons) {
                                if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    for (int i = 0; i < nbcart.getNbcart(); i++) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", nbcart.getSession().getAnnee());
                                        row.put("region", "AR/" + region.getNomreg());
                                        row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                        row.put("numcolis", (i + 1) + "/" + nbcart.getNbcart());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etiquettesBACCIND2Report.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Aucun nombre de cartons trouvé dans la base des données !");
            }
        }
    }//GEN-LAST:event_jButtonVisualiserEtiquettesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtiquetteCarton.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtiquetteCarton.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtiquetteCarton.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtiquetteCarton.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtiquetteCarton().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnnulerChoixExamen;
    private javax.swing.JButton jButtonAnnulerChoixSouscentre;
    private javax.swing.JButton jButtonCreer;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonRechercher;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JButton jButtonVisualiserEtiquettes;
    private javax.swing.JButton jButtonVisualiserNombres;
    private javax.swing.JComboBox<String> jComboBoxArrondissement;
    private javax.swing.JComboBox<String> jComboBoxDepartement;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxNumpratique;
    private javax.swing.JComboBox<String> jComboBoxRegion;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxSouscentre;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelArrondissement;
    private javax.swing.JLabel jLabelDepartement;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelNbcartons;
    private javax.swing.JLabel jLabelNiveau;
    private javax.swing.JLabel jLabelNumpratique;
    private javax.swing.JLabel jLabelRegion;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelSouscentre;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanelChoixExamen;
    private javax.swing.JPanel jPanelChoixSouscentre;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldNbcartons;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Region> regions = null;
    private String[] regionsCombo = null;
    private List<Departement> departements = null;
    private List<Arrondissement> arrondissements = null;
    private List<Souscentre> souscentres = null;
    private List<Session> sessions = null;
    private List<Examen> examens = null;
    private String[] departementsCombo = null;
    private String[] arrondissementsCombo = null;
    private String[] sessionsCombo = null;
    private String[] souscentresCombo = null;
    private Departement departementSelected = null;
    private Arrondissement arrondissementSelected = null;
    private Souscentre souscentreSelected = null;
    private String nomRegionSelected = "";
    private String nomDepartementSelected = "";
    private String nomArrondissementSelected = "";
    private String nomSouscentreSelected = "";
    private int anneeSelected = 0;
    private Session sessionSelected = null;
    private int idNbcartonsCliked = 0;
    private Nbcartons nbcartonsCliked = null;
    private Nbcartons nbcartons = null;
    private List<Nbcartons> lesNbcartons = null;
    boolean continuer = false;
    private String anneeString = "";
    private String[] numpratCombo = null;
    private String numpratSelected = "";
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private String nbcartonsString = "";
    private int nbcartonsSaisi = 0;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        regions = metier.findAllRegions();
        souscentres = metier.findAllSouscentres();
        examens = metier.findAllExamens();

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int i = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[i++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des régions
        regionsCombo = new String[regions.size() + 1];
        regionsCombo[0] = "---";
        int j = 1;
        for (Region region : regions) {
            regionsCombo[j++] = region.getNomreg();
        }
        jComboBoxRegion.setModel(new DefaultComboBoxModel(regionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "GEN", "IND", "IND PROF", "STT", "STT PROF"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        //on remplit la combobox des numéros de pratique
        numpratCombo = new String[]{"---", "0", "1", "2"};
        jComboBoxNumpratique.setModel(new DefaultComboBoxModel(numpratCombo));

        jTextFieldNbcartons.setText("0");

        remplirDepartementCombobox();

        remplirArrondissementCombobox();

        remplirSouscentreCombobox();
    }

    private void infoSaisies() {
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        numpratSelected = (String) jComboBoxNumpratique.getSelectedItem();
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        nbcartonsString = jTextFieldNbcartons.getText();
    }

    private void remplirDepartementCombobox() {
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        departements = metier.findAllDepartementsD1Region(nomRegionSelected);
        //on remplit la combobox des départements
        departementsCombo = new String[departements.size() + 1];
        departementsCombo[0] = "---";
        int i = 1;
        for (Departement departement : departements) {
            departementsCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartement.setModel(new DefaultComboBoxModel(departementsCombo));
    }

    private void remplirArrondissementCombobox() {
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        arrondissements = metier.findAllArrondissementsD1Departement(nomDepartementSelected);
        //on remplit la combobox des arrondissements
        arrondissementsCombo = new String[arrondissements.size() + 1];
        arrondissementsCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissements) {
            arrondissementsCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissement.setModel(new DefaultComboBoxModel(arrondissementsCombo));
    }

    private void remplirSouscentreCombobox() {
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        souscentres = metier.findAllSouscentresD1Arrondissement(nomArrondissementSelected);
        //on remplit la combobox des sous-centres
        souscentresCombo = new String[souscentres.size() + 1];
        souscentresCombo[0] = "---";
        int i = 1;
        for (Souscentre souscentre : souscentres) {
            souscentresCombo[i++] = souscentre.getNomsouscent();
        }
        jComboBoxSouscentre.setModel(new DefaultComboBoxModel(souscentresCombo));
    }

    private void validerNbcartons(String nbreString) {
        try {
            nbcartonsSaisi = Integer.parseInt(nbreString);
            continuer = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de cartons doit être fourni et contenir uniquement des chiffres entiers!");
            continuer = false;
        }
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }
}
