package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Activite;
import couche_jpa.Arrondissement;
import couche_jpa.Caisse;
import couche_jpa.Centrebilletage;
import couche_jpa.Departement;
import couche_jpa.Examen;
import couche_jpa.Fmissprimchefcentre;
import couche_jpa.Fonction;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Intervenant;
import couche_jpa.Matiere;
import couche_jpa.Nature;
import couche_jpa.Option;
import couche_jpa.Personnel;
import couche_jpa.Qualite;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Secretariat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueEtatPriseEnChargeChefCentre extends javax.swing.JFrame {

    public VueEtatPriseEnChargeChefCentre() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButtonFermer = new javax.swing.JButton();
        jPanelPersonnels = new javax.swing.JPanel();
        jComboBoxDepartementListe = new javax.swing.JComboBox<>();
        jLabelDepartementListe = new javax.swing.JLabel();
        jComboBoxArrondissementListe = new javax.swing.JComboBox<>();
        jComboBoxNomsEtPrenoms = new javax.swing.JComboBox<>();
        jLabelArrondissementListe = new javax.swing.JLabel();
        jComboBoxRegionListe = new javax.swing.JComboBox<>();
        jLabelRegionListe = new javax.swing.JLabel();
        jButtonSupprimerPersonnel = new javax.swing.JButton();
        jButtonAnnulerPersonnel = new javax.swing.JButton();
        jButtonCreerPersonnel = new javax.swing.JButton();
        jButtonListerPersonnels = new javax.swing.JButton();
        jLabelResponsable = new javax.swing.JLabel();
        jPanelFraisMission = new javax.swing.JPanel();
        jCheckBoxLiaisonDres = new javax.swing.JCheckBox();
        jCheckBoxLiaisonCentrebil = new javax.swing.JCheckBox();
        jCheckBoxFraistrans = new javax.swing.JCheckBox();
        jPanelPrime = new javax.swing.JPanel();
        jLabelPrime = new javax.swing.JLabel();
        jComboBoxPrime = new javax.swing.JComboBox<>();
        jLabelMegacentre = new javax.swing.JLabel();
        jComboBoxMegacentre = new javax.swing.JComboBox<>();
        jCheckBoxAssistant = new javax.swing.JCheckBox();
        jButtonImporter = new javax.swing.JButton();
        jPanelChoixExamen = new javax.swing.JPanel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixExamen = new javax.swing.JButton();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelExamen = new javax.swing.JLabel();
        jPanelChoixSouscentre = new javax.swing.JPanel();
        jComboBoxDepartementSouscentre = new javax.swing.JComboBox<>();
        jLabelDepartementSouscentre = new javax.swing.JLabel();
        jLabelSouscentre = new javax.swing.JLabel();
        jComboBoxArrondissementSouscentre = new javax.swing.JComboBox<>();
        jComboBoxSouscentre = new javax.swing.JComboBox<>();
        jLabelArrondissementSouscentre = new javax.swing.JLabel();
        jComboBoxRegionSouscentre = new javax.swing.JComboBox<>();
        jLabelRegionSouscentre = new javax.swing.JLabel();
        jButtonAnnulerChoixSouscentre = new javax.swing.JButton();
        jPanelGestionEtat = new javax.swing.JPanel();
        jButtonCreerEtats = new javax.swing.JButton();
        jButtonMettreAjourEtats = new javax.swing.JButton();
        jButtonVisualiserEtats = new javax.swing.JButton();
        jButtonSupprimerEtats = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setText("ETAT DE PRISE EN CHARGE DES CHEFS DE CENTRES ET SOUS-CENTRES");

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jPanelPersonnels.setBackground(new java.awt.Color(255, 204, 0));
        jPanelPersonnels.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer la liste des chefs de centre ou sous-centre et assistants", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jComboBoxDepartementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartementListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementListeActionPerformed(evt);
            }
        });

        jLabelDepartementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartementListe.setText("Département :");

        jComboBoxArrondissementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissementListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementListeActionPerformed(evt);
            }
        });

        jComboBoxNomsEtPrenoms.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxNomsEtPrenoms.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxNomsEtPrenoms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNomsEtPrenomsActionPerformed(evt);
            }
        });

        jLabelArrondissementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissementListe.setText("Arrondissement :");

        jComboBoxRegionListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegionListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionListeActionPerformed(evt);
            }
        });

        jLabelRegionListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegionListe.setText("Région :");

        jButtonSupprimerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerPersonnel.setText("Supprimer");
        jButtonSupprimerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerPersonnelActionPerformed(evt);
            }
        });

        jButtonAnnulerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerPersonnel.setText("Annuler");
        jButtonAnnulerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerPersonnelActionPerformed(evt);
            }
        });

        jButtonCreerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerPersonnel.setText("Créer");
        jButtonCreerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerPersonnelActionPerformed(evt);
            }
        });

        jButtonListerPersonnels.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonListerPersonnels.setText("Lister");
        jButtonListerPersonnels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerPersonnelsActionPerformed(evt);
            }
        });

        jLabelResponsable.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelResponsable.setText("Noms et prénoms :");

        jPanelFraisMission.setBackground(new java.awt.Color(255, 204, 204));
        jPanelFraisMission.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bénéficie des frais de :", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jCheckBoxLiaisonDres.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jCheckBoxLiaisonDres.setText("Mission pour liaison avec la DDES/DRES");
        jCheckBoxLiaisonDres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxLiaisonDresActionPerformed(evt);
            }
        });

        jCheckBoxLiaisonCentrebil.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jCheckBoxLiaisonCentrebil.setText("Mission pour liaison avec le centre de billetage");

        jCheckBoxFraistrans.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jCheckBoxFraistrans.setText("Transport");
        jCheckBoxFraistrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxFraistransActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelFraisMissionLayout = new javax.swing.GroupLayout(jPanelFraisMission);
        jPanelFraisMission.setLayout(jPanelFraisMissionLayout);
        jPanelFraisMissionLayout.setHorizontalGroup(
            jPanelFraisMissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFraisMissionLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanelFraisMissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxFraistrans)
                    .addComponent(jCheckBoxLiaisonCentrebil)
                    .addComponent(jCheckBoxLiaisonDres))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelFraisMissionLayout.setVerticalGroup(
            jPanelFraisMissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFraisMissionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxLiaisonDres)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxLiaisonCentrebil)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxFraistrans)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelPrime.setBackground(new java.awt.Color(204, 204, 0));
        jPanelPrime.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bénéficie de la prime supplémentaire de mega centre", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabelPrime.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelPrime.setText("Montant prime :");

        jComboBoxPrime.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxPrime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPrimeActionPerformed(evt);
            }
        });

        jLabelMegacentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelMegacentre.setText("Mega centre :");

        jComboBoxMegacentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxMegacentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxMegacentreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelPrimeLayout = new javax.swing.GroupLayout(jPanelPrime);
        jPanelPrime.setLayout(jPanelPrimeLayout);
        jPanelPrimeLayout.setHorizontalGroup(
            jPanelPrimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelPrimeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelMegacentre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxMegacentre, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(jLabelPrime)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxPrime, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanelPrimeLayout.setVerticalGroup(
            jPanelPrimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPrimeLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanelPrimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPrimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxMegacentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelMegacentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelPrimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxPrime, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelPrime, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jCheckBoxAssistant.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jCheckBoxAssistant.setText("Assistant");
        jCheckBoxAssistant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAssistantActionPerformed(evt);
            }
        });

        jButtonImporter.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonImporter.setText("Importer");
        jButtonImporter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImporterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelPersonnelsLayout = new javax.swing.GroupLayout(jPanelPersonnels);
        jPanelPersonnels.setLayout(jPanelPersonnelsLayout);
        jPanelPersonnelsLayout.setHorizontalGroup(
            jPanelPersonnelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPersonnelsLayout.createSequentialGroup()
                .addGroup(jPanelPersonnelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPersonnelsLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(jPanelPersonnelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanelPersonnelsLayout.createSequentialGroup()
                                .addComponent(jLabelDepartementListe)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxDepartementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelPersonnelsLayout.createSequentialGroup()
                                .addComponent(jLabelArrondissementListe)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanelPersonnelsLayout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(jLabelRegionListe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxRegionListe, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelPersonnelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPersonnelsLayout.createSequentialGroup()
                        .addComponent(jPanelFraisMission, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanelPrime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelPersonnelsLayout.createSequentialGroup()
                        .addComponent(jLabelResponsable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxNomsEtPrenoms, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBoxAssistant)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelPersonnelsLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButtonCreerPersonnel)
                .addGap(18, 18, 18)
                .addComponent(jButtonListerPersonnels)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonAnnulerPersonnel)
                .addGap(18, 18, 18)
                .addComponent(jButtonImporter)
                .addGap(243, 243, 243))
        );
        jPanelPersonnelsLayout.setVerticalGroup(
            jPanelPersonnelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPersonnelsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPersonnelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelResponsable, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNomsEtPrenoms, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxRegionListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRegionListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxAssistant))
                .addGroup(jPanelPersonnelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPersonnelsLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanelPersonnelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelDepartementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxDepartementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelPersonnelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27))
                    .addGroup(jPanelPersonnelsLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanelPersonnelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelPrime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanelFraisMission, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanelPersonnelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCreerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonListerPersonnels, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSupprimerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonImporter, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanelChoixExamen.setBackground(new java.awt.Color(102, 255, 153));
        jPanelChoixExamen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un groupe d'examens et une session", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixExamen.setText("Annuler");
        jButtonAnnulerChoixExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixExamenActionPerformed(evt);
            }
        });

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        javax.swing.GroupLayout jPanelChoixExamenLayout = new javax.swing.GroupLayout(jPanelChoixExamen);
        jPanelChoixExamen.setLayout(jPanelChoixExamenLayout);
        jPanelChoixExamenLayout.setHorizontalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(0, 40, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabelSession)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixExamenLayout.setVerticalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17))
        );

        jPanelChoixSouscentre.setBackground(new java.awt.Color(204, 255, 0));
        jPanelChoixSouscentre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un sous-centre", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jComboBoxDepartementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartementSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementSouscentreActionPerformed(evt);
            }
        });

        jLabelDepartementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartementSouscentre.setText("Département :");

        jLabelSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSouscentre.setText("Sous-centre :");

        jComboBoxArrondissementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissementSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementSouscentreActionPerformed(evt);
            }
        });

        jComboBoxSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSouscentre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSouscentreActionPerformed(evt);
            }
        });

        jLabelArrondissementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissementSouscentre.setText("Arrondissement :");

        jComboBoxRegionSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegionSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionSouscentreActionPerformed(evt);
            }
        });

        jLabelRegionSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegionSouscentre.setText("Région :");

        jButtonAnnulerChoixSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixSouscentre.setText("Annuler");
        jButtonAnnulerChoixSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixSouscentreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixSouscentreLayout = new javax.swing.GroupLayout(jPanelChoixSouscentre);
        jPanelChoixSouscentre.setLayout(jPanelChoixSouscentreLayout);
        jPanelChoixSouscentreLayout.setHorizontalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelDepartementSouscentre)
                    .addComponent(jLabelArrondissementSouscentre)
                    .addComponent(jLabelSouscentre)
                    .addComponent(jLabelRegionSouscentre))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxDepartementSouscentre, 0, 458, Short.MAX_VALUE)
                            .addComponent(jComboBoxRegionSouscentre, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(51, 51, 51)
                        .addComponent(jButtonAnnulerChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jComboBoxArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixSouscentreLayout.setVerticalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxRegionSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRegionSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxDepartementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonAnnulerChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelDepartementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanelGestionEtat.setBackground(new java.awt.Color(0, 255, 255));
        jPanelGestionEtat.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer l'état", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 102, 255))); // NOI18N

        jButtonCreerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEtats.setText("Créer");
        jButtonCreerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEtatsActionPerformed(evt);
            }
        });

        jButtonMettreAjourEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjourEtats.setText("Mettre à jour");
        jButtonMettreAjourEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourEtatsActionPerformed(evt);
            }
        });

        jButtonVisualiserEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserEtats.setText("Visualiser");
        jButtonVisualiserEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserEtatsActionPerformed(evt);
            }
        });

        jButtonSupprimerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEtats.setText("Supprimer");
        jButtonSupprimerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEtatsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelGestionEtatLayout = new javax.swing.GroupLayout(jPanelGestionEtat);
        jPanelGestionEtat.setLayout(jPanelGestionEtatLayout);
        jPanelGestionEtatLayout.setHorizontalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jButtonCreerEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonMettreAjourEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiserEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerEtats)
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanelGestionEtatLayout.setVerticalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonMettreAjourEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCreerEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonSupprimerEtats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVisualiserEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(216, 216, 216)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(328, 328, 328)
                                .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(jButtonFermer))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jPanelPersonnels, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelPersonnels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVisualiserEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserEtatsActionPerformed
        infoSaisies();
        if (typeSelected.equals("GEN")) {
            Map<Souscentre, ArrayList<Character>> souscentrePhasesProbMap = new HashMap<>();//contient les sous-centres de probatoire ESG chacun avec le tableau de ses activités
            Map<Souscentre, ArrayList<Character>> souscentrePhasesBacMap = new HashMap<>();//contient les sous-centres de baccalauréat ESG chacun avec le tableau de ses activités
            Map<Souscentre, Intervenant> souscentreChefcentreMap = new HashMap<>();//contient chaque sous-centre et son chef de centre/sous-centre
            Map<Souscentre, Intervenant> souscentreAssistantMap = new HashMap<>();//contient chaque sous-centre et son chef de centre/sous-centre assistant
            List<Souscentre> souscentreAvecChefList = new ArrayList<>();//contient l'ensemble des sous-centres ayant un chef
            Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
            ArrayList<String> typesBruts = new ArrayList<>();
            ArrayList<String> typesAconsiderer = new ArrayList<>();
            ArrayList<String> niveauxAconsiderer = new ArrayList<>();
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES CHEFS DE CENTRE ET SOUS-CENTRE");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                boolean continuer = false;
                for (Caisse c : caisses) {
                    if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                        continuer = true;
                        break;
                    }
                }
                if (!continuer) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états de prise en charge des chefs de centre et sous-centre n'ont pas encore été créés pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    //recherche des types des examens à utiliser
                    for (Examen examen : examensSelected) {
                        System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                        if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                            typesBruts.add("ESG");
                        }
                        if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                            typesBruts.add("ESTP");
                        }
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 2) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    //recherche des niveaux des examens à utiliser
                    if (!niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add(niveauSelected);
                        niveauxAconsiderer.add("TOUT");
                    }
                    if (niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add("PROB");
                        niveauxAconsiderer.add("BACC");
                        niveauxAconsiderer.add("TOUT");
                    }
                    //recherche des centres de billetage
                    for (String niveau : niveauxAconsiderer) {
                        for (String type : typesAconsiderer) {
                            List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                            for (Centrebilletage centrebilletage : desCentrebilletages) {
                                ArrayList<Souscentre> souscentresList = new ArrayList<>();
                                if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                    List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                    for (Secteurcouv sect : secteurs) {
                                        if (!souscentresList.contains(sect.getSouscentre())) {
                                            souscentresList.add(sect.getSouscentre());
                                        }
                                    }
                                    centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                                }
                            }
                        }
                    }
                    chefcentres = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHEF DE CENTRE/SOUS-CENTRE");
                    assistants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHEF DE CENTRE/SOUS-CENTRE ASSISTANT");
                    fmissprimchefcentres = metier.findAllFmissprimchefcentresD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!chefcentres.isEmpty()) {//tant qu'il n'y a pas de chef de centre/sous-centre, il ne devrait pas avoir d'assistant
                        for (Intervenant intervenant : chefcentres) {
                            for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(intervenant.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(intervenant.getPersonnel().getPrenom())) {
                                    souscentreChefcentreMap.put(intervenant.getSouscentre(), intervenant);
                                    break;
                                }
                            }
                        }
                        if (!assistants.isEmpty()) {
                            for (Intervenant intervenant : assistants) {
                                for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                    if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(intervenant.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(intervenant.getPersonnel().getPrenom())) {
                                        souscentreAssistantMap.put(intervenant.getSouscentre(), intervenant);
                                        break;
                                    }
                                }
                            }
                        }

                        //on détermine la liste des souscentre avac des chefs
                        for (Souscentre scent : souscentreChefcentreMap.keySet()) {
                            souscentreAvecChefList.add(scent);
                        }

                        for (Examen e : examensSelected) {
                            List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                            for (int j = 0; j < souscentreAvecChefList.size(); j++) {
                                ArrayList<Character> phasesList = new ArrayList<>();
                                Souscentre s = souscentreAvecChefList.get(j);
                                for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                    if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                        if (!phasesList.contains(n.getActivite().getInitiale()) && !n.getActivite().getInitiale().equals('T')) {
                                            phasesList.add(n.getActivite().getInitiale());
                                        }
                                        //pas de break ici car on doit parcourir tous lesNats
                                    }
                                }
                                if (!souscentrePhasesProbMap.containsKey(s) && e.getNiveau().equals("PROB")) {
                                    if (phasesList != null) {
                                        souscentrePhasesProbMap.put(s, phasesList);
                                    }
                                }
                                if (!souscentrePhasesBacMap.containsKey(s) && e.getNiveau().equals("BACC")) {
                                    if (phasesList != null) {
                                        souscentrePhasesBacMap.put(s, phasesList);
                                    }
                                }
                            }
                        }
                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            for (Region region : regions) {
                                for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                    if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                        int totalMontant = 0;
                                        ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                        for (int i = 0; i < souscentresList.size(); i++) {
                                            Souscentre souscentre = souscentresList.get(i);
                                            if (souscentreAvecChefList.contains(souscentre)) {
                                                int num = 1;
                                                int indemforfait = 0, indemastre = 0, fraismiss = 0, fraistrans = 0, prime = 0, total = 0;
                                                int nbtours = 1;
                                                Intervenant intervenantAffiche = new Intervenant();
                                                Fmissprimchefcentre sonFmissprimchefcentre = new Fmissprimchefcentre();
                                                if (!souscentreAssistantMap.isEmpty() && souscentreAssistantMap.containsKey(souscentre)) {
                                                    nbtours = 2;
                                                }
                                                for (int j = 0; j < nbtours; j++) {
                                                    if (j == 0) {//traitement du chef
                                                        intervenantAffiche = souscentreChefcentreMap.get(souscentre);
                                                        for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                                            if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(intervenantAffiche.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(intervenantAffiche.getPersonnel().getPrenom())) {
                                                                sonFmissprimchefcentre = fmissprimchefcentre;
                                                                break;
                                                            }
                                                        }
                                                        souscentresEnclaves = metier.findAllSouscentresEnclaves();
                                                        ArrayList<Souscentre> souscentresEnclavesEnArrayList = new ArrayList<>();
                                                        for (Souscentre scentre : souscentresEnclaves) {
                                                            souscentresEnclavesEnArrayList.add(scentre);
                                                        }
                                                        determinerCoutChefESG(souscentresEnclavesEnArrayList, souscentre, sonFmissprimchefcentre, souscentrePhasesProbMap, souscentrePhasesBacMap);
                                                        indemforfait = indemforfaitChefESG;
                                                        indemastre = indemastreChefESG;
                                                        fraismiss = fraismissChefESG;
                                                        fraistrans = fraistransESG;
                                                        prime = primeChefESG;
                                                        total = totalChefESG;
                                                    }
                                                    if (nbtours == 2 && j == 1) {//traitement de l'assistant lorsqu'il existe
                                                        intervenantAffiche = souscentreAssistantMap.get(souscentre);
                                                        for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                                            if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(intervenantAffiche.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(intervenantAffiche.getPersonnel().getPrenom())) {
                                                                sonFmissprimchefcentre = fmissprimchefcentre;
                                                                break;
                                                            }
                                                        }
                                                        determinerCoutAssistantESG(souscentre, sonFmissprimchefcentre, souscentrePhasesProbMap, souscentrePhasesBacMap);
                                                        indemforfait = indemforfaitAssistantESG;
                                                        indemastre = indemastreAssistantESG;
                                                        fraismiss = 0;
                                                        fraistrans = fraistransESG;
                                                        prime = 0;
                                                        total = totalAssistantESG;
                                                    }

                                                    Map<String, Object> row = new HashMap<>();
                                                    row.put("examen", groupedexamensEnstring);
                                                    row.put("session", anneeSelected);
                                                    row.put("region", region.getNomreg());
                                                    row.put("reference", "obcbudget-v.3");
                                                    row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                    row.put("num", num++);
                                                    row.put("souscentre", souscentre.getNomsouscent());
                                                    String personnel = intervenantAffiche.getPersonnel().getNompers() + " " + intervenantAffiche.getPersonnel().getPrenom();
                                                    if (intervenantAffiche.getQualite().getTitre().equals("CHEF DE CENTRE/SOUS-CENTRE ASSISTANT")) {
                                                        personnel += " (Assistant)";
                                                    }
                                                    row.put("personnel", personnel);
                                                    String phasesProbEnchaine = "";
                                                    if (!souscentrePhasesProbMap.get(souscentre).isEmpty()) {
                                                        for (char c : souscentrePhasesProbMap.get(souscentre)) {
                                                            phasesProbEnchaine += c;
                                                        }
                                                    }
                                                    row.put("natureProb", phasesProbEnchaine);
                                                    String phasesBaccEnchaine = "";
                                                    if (!souscentrePhasesBacMap.get(souscentre).isEmpty()) {
                                                        for (char c : souscentrePhasesBacMap.get(souscentre)) {
                                                            phasesBaccEnchaine += c;
                                                        }
                                                    }

                                                    row.put("natureBacc", phasesBaccEnchaine);
                                                    row.put("indemforfait", indemforfait);
                                                    row.put("indemastre", indemastre);
                                                    row.put("fraismiss", fraismiss);
                                                    row.put("fraistrans", fraistrans);
                                                    row.put("prime", prime);
                                                    row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                    int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                    row.put("total", montantArrondi);
                                                    totalMontant += montantArrondi;//jasperreport prendra la dernière valeur de cout
                                                    row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                    datasource.add(row);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatPriseEnChargeChefCentreESGReport.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }

                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun Chef de centre ou sous-centre trouvé dans la base de données !");
                    }

                    souscentrePhasesProbMap.clear();
                    souscentrePhasesBacMap.clear();
                    examensSelected.clear();
                    souscentreAvecChefList.clear();
                }//fin else continuer
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
            }
        }
        if (typeSelected.equals("TOUT ESTP")) {
            Map<Souscentre, ArrayList<Character>> souscentrePhasesProbIndMap = new HashMap<>();//contient les sous-centres de probatoire Ind chacun avec le tableau de ses activités
            Map<Souscentre, ArrayList<Character>> souscentrePhasesBacIndMap = new HashMap<>();//contient les sous-centres de baccalauréat Ind chacun avec le tableau de ses activités
            Map<Souscentre, ArrayList<Character>> souscentrePhasesProbComMap = new HashMap<>();//contient les sous-centres de probatoire Com chacun avec le tableau de ses activités
            Map<Souscentre, ArrayList<Character>> souscentrePhasesBacComMap = new HashMap<>();//contient les sous-centres de baccalauréat Com chacun avec le tableau de ses activités
            Map<Souscentre, Intervenant> souscentreChefcentreMap = new HashMap<>();//contient chaque sous-centre et son chef de centre/sous-centre
            Map<Souscentre, Intervenant> souscentreAssistantMap = new HashMap<>();//contient chaque sous-centre et son chef de centre/sous-centre assistant
            List<Souscentre> souscentreAvecChefList = new ArrayList<>();//contient l'ensemble des sous-centres ayant un chef
            Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
            ArrayList<String> typesBruts = new ArrayList<>();
            ArrayList<String> typesAconsiderer = new ArrayList<>();
            ArrayList<String> niveauxAconsiderer = new ArrayList<>();
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES CHEFS DE CENTRE ET SOUS-CENTRE");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                boolean continuer = false;
                for (Caisse c : caisses) {
                    if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                        continuer = true;
                        break;
                    }
                }
                if (!continuer) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états de prise en charge des chefs de centre et sous-centre n'ont pas encore été créés pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    //recherche des types des examens à utiliser
                    for (Examen examen : examensSelected) {
                        if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                            typesBruts.add("ESG");
                        }
                        if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                            typesBruts.add("ESTP");
                        }
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 2) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    //recherche des niveaux des examens à utiliser
                    if (!niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add(niveauSelected);
                        niveauxAconsiderer.add("TOUT");
                    }
                    if (niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add("PROB");
                        niveauxAconsiderer.add("BACC");
                        niveauxAconsiderer.add("TOUT");
                    }
                    //recherche des centres de billetage
                    for (String niveau : niveauxAconsiderer) {
                        for (String type : typesAconsiderer) {
                            List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                            for (Centrebilletage centrebilletage : desCentrebilletages) {
                                ArrayList<Souscentre> souscentresList = new ArrayList<>();
                                if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                    List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                    for (Secteurcouv sect : secteurs) {
                                        if (!souscentresList.contains(sect.getSouscentre())) {
                                            souscentresList.add(sect.getSouscentre());
                                        }
                                    }
                                    centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                                }
                            }
                        }
                    }
                    chefcentres = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHEF DE CENTRE/SOUS-CENTRE");
                    assistants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHEF DE CENTRE/SOUS-CENTRE ASSISTANT");
                    fmissprimchefcentres = metier.findAllFmissprimchefcentresD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!chefcentres.isEmpty()) {//tant qu'il n'y a pas de chef de centre/sous-centre, il ne devrait pas avoir d'assistant
                        for (Intervenant intervenant : chefcentres) {
                            for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(intervenant.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(intervenant.getPersonnel().getPrenom())) {
                                    souscentreChefcentreMap.put(intervenant.getSouscentre(), intervenant);
                                    break;
                                }
                            }
                        }
                        if (!assistants.isEmpty()) {
                            for (Intervenant intervenant : assistants) {
                                for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                    if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(intervenant.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(intervenant.getPersonnel().getPrenom())) {
                                        souscentreAssistantMap.put(intervenant.getSouscentre(), intervenant);
                                        break;
                                    }
                                }
                            }
                        }

                        //on détermine la liste des souscentre avac des chefs
                        for (Souscentre scent : souscentreChefcentreMap.keySet()) {
                            souscentreAvecChefList.add(scent);
                        }

                        for (Examen e : examensSelected) {
                            List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                            for (int j = 0; j < souscentreAvecChefList.size(); j++) {
                                ArrayList<Character> phasesList = new ArrayList<>();
                                Souscentre s = souscentreAvecChefList.get(j);
                                for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                    if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                        if (!phasesList.contains(n.getActivite().getInitiale()) && !n.getActivite().getInitiale().equals('T')) {
                                            phasesList.add(n.getActivite().getInitiale());
                                        }
                                        //pas de break ici car on doit parcourir tous lesNats
                                    }
                                }
                                if (!souscentrePhasesProbIndMap.containsKey(s) && e.getNiveau().equals("PROB") && (e.getType().equals("IND") || e.getType().equals("IND PROF"))) {
                                    if (phasesList != null) {
                                        souscentrePhasesProbIndMap.put(s, phasesList);
                                    }
                                }
                                if (souscentrePhasesProbIndMap.containsKey(s) && e.getNiveau().equals("PROB") && (e.getType().equals("IND") || e.getType().equals("IND PROF"))) {
                                    if (phasesList != null) {
                                        ArrayList<Character> phasesListInit = souscentrePhasesProbIndMap.get(s);
                                        for (int k = 0; k < phasesList.size(); k++) {
                                            if (!phasesListInit.contains(phasesList.get(k))) {
                                                phasesListInit.add(phasesList.get(k));
                                            }
                                        }
                                        souscentrePhasesProbIndMap.put(s, phasesListInit);
                                    }
                                }
                                if (!souscentrePhasesBacIndMap.containsKey(s) && e.getNiveau().equals("BACC") && (e.getType().equals("IND") || e.getType().equals("IND PROF"))) {
                                    if (phasesList != null) {
                                        souscentrePhasesBacIndMap.put(s, phasesList);
                                    }
                                }
                                if (souscentrePhasesBacIndMap.containsKey(s) && e.getNiveau().equals("BACC") && (e.getType().equals("IND") || e.getType().equals("IND PROF"))) {
                                    if (phasesList != null) {
                                        ArrayList<Character> phasesListInit = souscentrePhasesBacIndMap.get(s);
                                        for (int k = 0; k < phasesList.size(); k++) {
                                            if (!phasesListInit.contains(phasesList.get(k))) {
                                                phasesListInit.add(phasesList.get(k));
                                            }
                                        }
                                        souscentrePhasesBacIndMap.put(s, phasesListInit);
                                    }
                                }
                                if (!souscentrePhasesProbComMap.containsKey(s) && e.getNiveau().equals("PROB") && (e.getType().equals("STT") || e.getType().equals("STT PROF"))) {
                                    if (phasesList != null) {
                                        souscentrePhasesProbComMap.put(s, phasesList);
                                    }
                                }
                                if (souscentrePhasesProbComMap.containsKey(s) && e.getNiveau().equals("PROB") && (e.getType().equals("STT") || e.getType().equals("STT PROF"))) {
                                    if (phasesList != null) {
                                        ArrayList<Character> phasesListInit = souscentrePhasesProbComMap.get(s);
                                        for (int k = 0; k < phasesList.size(); k++) {
                                            if (!phasesListInit.contains(phasesList.get(k))) {
                                                phasesListInit.add(phasesList.get(k));
                                            }
                                        }
                                        souscentrePhasesProbComMap.put(s, phasesListInit);
                                    }
                                }
                                if (!souscentrePhasesBacComMap.containsKey(s) && e.getNiveau().equals("BACC") && (e.getType().equals("STT") || e.getType().equals("STT PROF"))) {
                                    if (phasesList != null) {
                                        souscentrePhasesBacComMap.put(s, phasesList);
                                    }
                                }
                                if (souscentrePhasesBacComMap.containsKey(s) && e.getNiveau().equals("BACC") && (e.getType().equals("STT") || e.getType().equals("STT PROF"))) {
                                    if (phasesList != null) {
                                        ArrayList<Character> phasesListInit = souscentrePhasesBacComMap.get(s);
                                        for (int k = 0; k < phasesList.size(); k++) {
                                            if (!phasesListInit.contains(phasesList.get(k))) {
                                                phasesListInit.add(phasesList.get(k));
                                            }
                                        }
                                        souscentrePhasesBacComMap.put(s, phasesListInit);
                                    }
                                }
                            }
                        }
                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            for (Region region : regions) {
                                for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                    if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                        int totalMontant = 0;
                                        ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                        for (int i = 0; i < souscentresList.size(); i++) {
                                            Souscentre souscentre = souscentresList.get(i);
                                            if (souscentreAvecChefList.contains(souscentre)) {
                                                int num = 1;
                                                int indemforfait = 0, indemastre = 0, fraismiss = 0, fraistrans = 0, prime = 0, total = 0;
                                                int nbtours = 1;
                                                Intervenant intervenantAffiche = new Intervenant();
                                                Fmissprimchefcentre sonFmissprimchefcentre = new Fmissprimchefcentre();
                                                if (!souscentreAssistantMap.isEmpty() && souscentreAssistantMap.containsKey(souscentre)) {
                                                    nbtours = 2;
                                                }
                                                for (int j = 0; j < nbtours; j++) {
                                                    if (j == 0) {//traitement du chef
                                                        intervenantAffiche = souscentreChefcentreMap.get(souscentre);
                                                        for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                                            if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(intervenantAffiche.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(intervenantAffiche.getPersonnel().getPrenom())) {
                                                                sonFmissprimchefcentre = fmissprimchefcentre;
                                                                break;
                                                            }
                                                        }
                                                        souscentresEnclaves = metier.findAllSouscentresEnclaves();
                                                        ArrayList<Souscentre> souscentresEnclavesEnArrayList = new ArrayList<>();
                                                        for (Souscentre scentre : souscentresEnclaves) {
                                                            souscentresEnclavesEnArrayList.add(scentre);
                                                        }
                                                        determinerCoutChefESTP(souscentresEnclavesEnArrayList, souscentre, sonFmissprimchefcentre, souscentrePhasesProbIndMap, souscentrePhasesBacIndMap, souscentrePhasesProbComMap, souscentrePhasesBacComMap);
                                                        indemforfait = indemforfaitChefESTP;
                                                        indemastre = indemastreChefESTP;
                                                        fraismiss = fraismissChefESTP;
                                                        fraistrans = fraistransESTP;
                                                        prime = primeChefESTP;
                                                        total = totalChefESTP;
                                                    }
                                                    if (nbtours == 2 && j == 1) {//traitement de l'assistant lorsqu'il existe
                                                        intervenantAffiche = souscentreAssistantMap.get(souscentre);
                                                        for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                                            if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(intervenantAffiche.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(intervenantAffiche.getPersonnel().getPrenom())) {
                                                                sonFmissprimchefcentre = fmissprimchefcentre;
                                                                break;
                                                            }
                                                        }
                                                        determinerCoutAssistantESTP(souscentre, sonFmissprimchefcentre, souscentrePhasesProbIndMap, souscentrePhasesBacIndMap, souscentrePhasesProbComMap, souscentrePhasesBacComMap);
                                                        indemforfait = indemforfaitAssistantESTP;
                                                        indemastre = indemastreAssistantESTP;
                                                        fraismiss = 0;
                                                        fraistrans = fraistransESTP;
                                                        prime = 0;
                                                        total = totalAssistantESTP;
                                                    }

                                                    Map<String, Object> row = new HashMap<>();
                                                    row.put("examen", groupedexamensEnstring);
                                                    row.put("session", anneeSelected);
                                                    row.put("region", region.getNomreg());
                                                    row.put("reference", "obcbudget-v.3");
                                                    row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                    row.put("num", num++);
                                                    row.put("souscentre", souscentre.getNomsouscent());
                                                    String personnel = intervenantAffiche.getPersonnel().getNompers() + " " + intervenantAffiche.getPersonnel().getPrenom();
                                                    if (intervenantAffiche.getQualite().getTitre().equals("CHEF DE CENTRE/SOUS-CENTRE ASSISTANT")) {
                                                        personnel += " (Assistant)";
                                                    }
                                                    row.put("personnel", personnel);
                                                    String phasesProbindEnchaine = "";
                                                    if (souscentrePhasesProbIndMap.get(souscentre) != null) {
                                                        for (char c : souscentrePhasesProbIndMap.get(souscentre)) {
                                                            phasesProbindEnchaine += c;
                                                        }
                                                    }
                                                    row.put("natureProbind", phasesProbindEnchaine);
                                                    String phasesBacindEnchaine = "";
                                                    if (souscentrePhasesBacIndMap.get(souscentre) != null) {
                                                        for (char c : souscentrePhasesBacIndMap.get(souscentre)) {
                                                            phasesBacindEnchaine += c;
                                                        }
                                                    }
                                                    row.put("natureBacind", phasesBacindEnchaine);
                                                    String phasesProbcomEnchaine = "";
                                                    if (souscentrePhasesProbComMap.get(souscentre) != null) {
                                                        for (char c : souscentrePhasesProbComMap.get(souscentre)) {
                                                            phasesProbcomEnchaine += c;
                                                        }
                                                    }
                                                    row.put("natureProbcom", phasesProbcomEnchaine);
                                                    String phasesBaccomEnchaine = "";
                                                    if (souscentrePhasesBacComMap.get(souscentre) != null) {
                                                        for (char c : souscentrePhasesBacComMap.get(souscentre)) {
                                                            phasesBaccomEnchaine += c;
                                                        }
                                                    }
                                                    row.put("natureBaccom", phasesBaccomEnchaine);
                                                    row.put("indemforfait", indemforfait);
                                                    row.put("indemastre", indemastre);
                                                    row.put("fraismiss", fraismiss);
                                                    row.put("fraistrans", fraistrans);
                                                    row.put("prime", prime);
                                                    row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                    int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                    row.put("total", montantArrondi);
                                                    totalMontant += montantArrondi;//jasperreport prendra la dernière valeur de cout
                                                    row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                    datasource.add(row);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatPriseEnChargeChefCentreESTPReport.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }

                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun Chef de centre ou sous-centre trouvé dans la base de données !");
                    }

                    souscentreChefcentreMap.clear();
                    souscentreAssistantMap.clear();
                    souscentrePhasesProbIndMap.clear();
                    souscentrePhasesBacIndMap.clear();
                    souscentrePhasesProbComMap.clear();
                    souscentrePhasesBacComMap.clear();
                    examensSelected.clear();
                    souscentreAvecChefList.clear();
                }//fin else continuer
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
            }
        }
    }//GEN-LAST:event_jButtonVisualiserEtatsActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonCreerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEtatsActionPerformed
        infoSaisies();
        if (typeSelected.equals("GEN")) {
            Map<Souscentre, ArrayList<Character>> souscentrePhasesProbMap = new HashMap<>();//contient les sous-centres de probatoire ESG chacun avec le tableau de ses activités
            Map<Souscentre, ArrayList<Character>> souscentrePhasesBacMap = new HashMap<>();//contient les sous-centres de baccalauréat ESG chacun avec le tableau de ses activités
            Map<Souscentre, Intervenant> souscentreChefcentreMap = new HashMap<>();//contient chaque sous-centre et son chef de centre/sous-centre
            Map<Souscentre, Intervenant> souscentreAssistantMap = new HashMap<>();//contient chaque sous-centre et son chef de centre/sous-centre assistant
            List<Souscentre> souscentreAvecChefList = new ArrayList<>();//contient l'ensemble des sous-centres ayant un chef 
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES CHEFS DE CENTRE ET SOUS-CENTRE");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (!caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états de prise en charge des chefs de centre et sous-centre existent déjà pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    chefcentres = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHEF DE CENTRE/SOUS-CENTRE");
                    assistants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHEF DE CENTRE/SOUS-CENTRE ASSISTANT");
                    fmissprimchefcentres = metier.findAllFmissprimchefcentresD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!chefcentres.isEmpty()) {//tant qu'il n'y a pas de chef de centre/sous-centre, il ne devrait pas avoir d'assistant
                        for (Intervenant intervenant : chefcentres) {
                            for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(intervenant.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(intervenant.getPersonnel().getPrenom())) {
                                    souscentreChefcentreMap.put(intervenant.getSouscentre(), intervenant);
                                    break;
                                }
                            }
                        }
                        if (!assistants.isEmpty()) {
                            for (Intervenant intervenant : assistants) {
                                for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                    if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(intervenant.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(intervenant.getPersonnel().getPrenom())) {
                                        souscentreAssistantMap.put(intervenant.getSouscentre(), intervenant);
                                        break;
                                    }
                                }
                            }
                        }

                        //on détermine la liste des souscentre avac des chefs
                        for (Souscentre scent : souscentreChefcentreMap.keySet()) {
                            souscentreAvecChefList.add(scent);
                        }

                        for (Examen e : examensSelected) {
                            List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                            for (int j = 0; j < souscentreAvecChefList.size(); j++) {
                                ArrayList<Character> phasesList = new ArrayList<>();
                                Souscentre s = souscentreAvecChefList.get(j);
                                for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                    if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                        if (!phasesList.contains(n.getActivite().getInitiale()) && !n.getActivite().getInitiale().equals('T')) {
                                            phasesList.add(n.getActivite().getInitiale());
                                        }
                                        //pas de break ici car on doit parcourir tous lesNats
                                    }
                                }
                                if (!souscentrePhasesProbMap.containsKey(s) && e.getNiveau().equals("PROB")) {
                                    if (phasesList != null) {
                                        souscentrePhasesProbMap.put(s, phasesList);
                                    }
                                }
                                if (!souscentrePhasesBacMap.containsKey(s) && e.getNiveau().equals("BACC")) {
                                    if (phasesList != null) {
                                        souscentrePhasesBacMap.put(s, phasesList);
                                    }
                                }
                            }
                        }

                        boolean testSicreer = false;
                        try {
                            for (Souscentre souscentre : souscentreChefcentreMap.keySet()) {
                                int net = 0;
                                Intervenant chefcentre = souscentreChefcentreMap.get(souscentre);
                                Fmissprimchefcentre sonFmissprimchefcentre = new Fmissprimchefcentre();
                                for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                    if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(chefcentre.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(chefcentre.getPersonnel().getPrenom())) {
                                        sonFmissprimchefcentre = fmissprimchefcentre;
                                        break;
                                    }
                                }
                                souscentresEnclaves = metier.findAllSouscentresEnclaves();
                                ArrayList<Souscentre> souscentresEnclavesEnArrayList = new ArrayList<>();
                                for (Souscentre scentre : souscentresEnclaves) {
                                    souscentresEnclavesEnArrayList.add(scentre);
                                }
                                determinerCoutChefESG(souscentresEnclavesEnArrayList, souscentre, sonFmissprimchefcentre, souscentrePhasesProbMap, souscentrePhasesBacMap);
                                int montantArrondiChefESG = (int) Math.ceil((double) totalChefESG / (double) 1000) * 1000;
                                net += montantArrondiChefESG;
                                if (souscentreAssistantMap.containsKey(souscentre)) {
                                    Intervenant assistant = souscentreAssistantMap.get(souscentre);
                                    Fmissprimchefcentre fmissprimAssistant = new Fmissprimchefcentre();
                                    for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                        if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(assistant.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(assistant.getPersonnel().getPrenom())) {
                                            fmissprimAssistant = fmissprimchefcentre;
                                            break;
                                        }
                                    }
                                    determinerCoutAssistantESG(souscentre, fmissprimAssistant, souscentrePhasesProbMap, souscentrePhasesBacMap);
                                    int montantArrondiAssistantESG = (int) Math.ceil((double) totalAssistantESG / (double) 1000) * 1000;
                                    net += montantArrondiAssistantESG;
                                }
                                metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                testSicreer = true;
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testSicreer) {
                            JOptionPane.showMessageDialog(this, "Etats de prise en charge des chefs de centre et sous-centre créés avec succès pour ce groupe d'examens !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun Chef de centre ou sous-centre trouvé dans la base de données !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
            }

            souscentreChefcentreMap.clear();
            souscentreAssistantMap.clear();
            souscentrePhasesProbMap.clear();
            souscentrePhasesBacMap.clear();
        }
        if (typeSelected.equals("TOUT ESTP")) {
            Map<Souscentre, ArrayList<Character>> souscentrePhasesProbIndMap = new HashMap<>();//contient les sous-centres de probatoire Ind chacun avec le tableau de ses activités
            Map<Souscentre, ArrayList<Character>> souscentrePhasesBacIndMap = new HashMap<>();//contient les sous-centres de baccalauréat Ind chacun avec le tableau de ses activités
            Map<Souscentre, ArrayList<Character>> souscentrePhasesProbComMap = new HashMap<>();//contient les sous-centres de probatoire Com chacun avec le tableau de ses activités
            Map<Souscentre, ArrayList<Character>> souscentrePhasesBacComMap = new HashMap<>();//contient les sous-centres de baccalauréat Com chacun avec le tableau de ses activités
            Map<Souscentre, Intervenant> souscentreChefcentreMap = new HashMap<>();//contient chaque sous-centre et son chef de centre/sous-centre
            Map<Souscentre, Intervenant> souscentreAssistantMap = new HashMap<>();//contient chaque sous-centre et son chef de centre/sous-centre assistant
            List<Souscentre> souscentreAvecChefList = new ArrayList<>();//contient l'ensemble des sous-centres ayant un chef 
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES CHEFS DE CENTRE ET SOUS-CENTRE");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (!caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états de prise en charge des chefs de centre et sous-centre existent déjà pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    chefcentres = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHEF DE CENTRE/SOUS-CENTRE");
                    assistants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHEF DE CENTRE/SOUS-CENTRE ASSISTANT");
                    fmissprimchefcentres = metier.findAllFmissprimchefcentresD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!chefcentres.isEmpty()) {//tant qu'il n'y a pas de chef de centre/sous-centre, il ne devrait pas avoir d'assistant
                        for (Intervenant intervenant : chefcentres) {
                            for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(intervenant.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(intervenant.getPersonnel().getPrenom())) {
                                    souscentreChefcentreMap.put(intervenant.getSouscentre(), intervenant);
                                    break;
                                }
                            }
                        }
                        if (!assistants.isEmpty()) {
                            for (Intervenant intervenant : assistants) {
                                for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                    if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(intervenant.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(intervenant.getPersonnel().getPrenom())) {
                                        souscentreAssistantMap.put(intervenant.getSouscentre(), intervenant);
                                        break;
                                    }
                                }
                            }
                        }

                        //on détermine la liste des souscentre avac des chefs
                        for (Souscentre scent : souscentreChefcentreMap.keySet()) {
                            souscentreAvecChefList.add(scent);
                        }

                        for (Examen e : examensSelected) {
                            List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                            for (int j = 0; j < souscentreAvecChefList.size(); j++) {
                                ArrayList<Character> phasesList = new ArrayList<>();
                                Souscentre s = souscentreAvecChefList.get(j);
                                for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                    if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                        if (!phasesList.contains(n.getActivite().getInitiale()) && !n.getActivite().getInitiale().equals('T')) {
                                            phasesList.add(n.getActivite().getInitiale());
                                        }
                                        //pas de break ici car on doit parcourir tous lesNats
                                    }
                                }
                                if (!souscentrePhasesProbIndMap.containsKey(s) && e.getNiveau().equals("PROB") && (e.getType().equals("IND") || e.getType().equals("IND PROF"))) {
                                    if (phasesList != null) {
                                        souscentrePhasesProbIndMap.put(s, phasesList);
                                    }
                                }
                                if (souscentrePhasesProbIndMap.containsKey(s) && e.getNiveau().equals("PROB") && (e.getType().equals("IND") || e.getType().equals("IND PROF"))) {
                                    if (phasesList != null) {
                                        ArrayList<Character> phasesListInit = souscentrePhasesProbIndMap.get(s);
                                        for (int k = 0; k < phasesList.size(); k++) {
                                            if (!phasesListInit.contains(phasesList.get(k))) {
                                                phasesListInit.add(phasesList.get(k));
                                            }
                                        }
                                        souscentrePhasesProbIndMap.put(s, phasesListInit);
                                    }
                                }
                                if (!souscentrePhasesBacIndMap.containsKey(s) && e.getNiveau().equals("BACC") && (e.getType().equals("IND") || e.getType().equals("IND PROF"))) {
                                    if (phasesList != null) {
                                        souscentrePhasesBacIndMap.put(s, phasesList);
                                    }
                                }
                                if (souscentrePhasesBacIndMap.containsKey(s) && e.getNiveau().equals("BACC") && (e.getType().equals("IND") || e.getType().equals("IND PROF"))) {
                                    if (phasesList != null) {
                                        ArrayList<Character> phasesListInit = souscentrePhasesBacIndMap.get(s);
                                        for (int k = 0; k < phasesList.size(); k++) {
                                            if (!phasesListInit.contains(phasesList.get(k))) {
                                                phasesListInit.add(phasesList.get(k));
                                            }
                                        }
                                        souscentrePhasesBacIndMap.put(s, phasesListInit);
                                    }
                                }
                                if (!souscentrePhasesProbComMap.containsKey(s) && e.getNiveau().equals("PROB") && (e.getType().equals("STT") || e.getType().equals("STT PROF"))) {
                                    if (phasesList != null) {
                                        souscentrePhasesProbComMap.put(s, phasesList);
                                    }
                                }
                                if (souscentrePhasesProbComMap.containsKey(s) && e.getNiveau().equals("PROB") && (e.getType().equals("STT") || e.getType().equals("STT PROF"))) {
                                    if (phasesList != null) {
                                        ArrayList<Character> phasesListInit = souscentrePhasesProbComMap.get(s);
                                        for (int k = 0; k < phasesList.size(); k++) {
                                            if (!phasesListInit.contains(phasesList.get(k))) {
                                                phasesListInit.add(phasesList.get(k));
                                            }
                                        }
                                        souscentrePhasesProbComMap.put(s, phasesListInit);
                                    }
                                }
                                if (!souscentrePhasesBacComMap.containsKey(s) && e.getNiveau().equals("BACC") && (e.getType().equals("STT") || e.getType().equals("STT PROF"))) {
                                    if (phasesList != null) {
                                        souscentrePhasesBacComMap.put(s, phasesList);
                                    }
                                }
                                if (souscentrePhasesBacComMap.containsKey(s) && e.getNiveau().equals("BACC") && (e.getType().equals("STT") || e.getType().equals("STT PROF"))) {
                                    if (phasesList != null) {
                                        ArrayList<Character> phasesListInit = souscentrePhasesBacComMap.get(s);
                                        for (int k = 0; k < phasesList.size(); k++) {
                                            if (!phasesListInit.contains(phasesList.get(k))) {
                                                phasesListInit.add(phasesList.get(k));
                                            }
                                        }
                                        souscentrePhasesBacComMap.put(s, phasesListInit);
                                    }
                                }
                            }
                        }

                        boolean testSicreer = false;
                        try {
                            for (Souscentre souscentre : souscentreChefcentreMap.keySet()) {
                                int net = 0;
                                Intervenant chefcentre = souscentreChefcentreMap.get(souscentre);
                                Fmissprimchefcentre sonFmissprimchefcentre = new Fmissprimchefcentre();
                                for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                    if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(chefcentre.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(chefcentre.getPersonnel().getPrenom())) {
                                        sonFmissprimchefcentre = fmissprimchefcentre;
                                        break;
                                    }
                                }
                                souscentresEnclaves = metier.findAllSouscentresEnclaves();
                                ArrayList<Souscentre> souscentresEnclavesEnArrayList = new ArrayList<>();
                                for (Souscentre scentre : souscentresEnclaves) {
                                    souscentresEnclavesEnArrayList.add(scentre);
                                }
                                determinerCoutChefESTP(souscentresEnclavesEnArrayList, souscentre, sonFmissprimchefcentre, souscentrePhasesProbIndMap, souscentrePhasesBacIndMap, souscentrePhasesProbComMap, souscentrePhasesBacComMap);
                                int montantArrondiChefESTP = (int) Math.ceil((double) totalChefESTP / (double) 1000) * 1000;
                                net += montantArrondiChefESTP;
                                if (souscentreAssistantMap.containsKey(souscentre)) {
                                    Intervenant assistant = souscentreAssistantMap.get(souscentre);
                                    Fmissprimchefcentre fmissprimAssistant = new Fmissprimchefcentre();
                                    for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                        if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(assistant.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(assistant.getPersonnel().getPrenom())) {
                                            fmissprimAssistant = fmissprimchefcentre;
                                            break;
                                        }
                                    }
                                    determinerCoutAssistantESTP(souscentre, fmissprimAssistant, souscentrePhasesProbIndMap, souscentrePhasesBacIndMap, souscentrePhasesProbComMap, souscentrePhasesBacComMap);
                                    int montantArrondiAssistantESTP = (int) Math.ceil((double) totalAssistantESTP / (double) 1000) * 1000;
                                    net += montantArrondiAssistantESTP;
                                }
                                metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                testSicreer = true;
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testSicreer) {
                            JOptionPane.showMessageDialog(this, "Etats de prise en charge des chefs de centre et sous-centre créés avec succès pour ce groupe d'examens !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun Chef de centre ou sous-centre trouvé dans la base de données !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
            }

            souscentreChefcentreMap.clear();
            souscentreAssistantMap.clear();
            souscentrePhasesProbIndMap.clear();
            souscentrePhasesBacIndMap.clear();
            souscentrePhasesProbComMap.clear();
            souscentrePhasesBacComMap.clear();
        }
    }//GEN-LAST:event_jButtonCreerEtatsActionPerformed

    private void jButtonMettreAjourEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourEtatsActionPerformed
        infoSaisies();
        if (typeSelected.equals("GEN")) {
            Map<Souscentre, ArrayList<Character>> souscentrePhasesProbMap = new HashMap<>();//contient les sous-centres de probatoire ESG chacun avec le tableau de ses activités
            Map<Souscentre, ArrayList<Character>> souscentrePhasesBacMap = new HashMap<>();//contient les sous-centres de baccalauréat ESG chacun avec le tableau de ses activités
            Map<Souscentre, Intervenant> souscentreChefcentreMap = new HashMap<>();//contient chaque sous-centre et son chef de centre/sous-centre
            Map<Souscentre, Intervenant> souscentreAssistantMap = new HashMap<>();//contient chaque sous-centre et son chef de centre/sous-centre assistant
            List<Souscentre> souscentreAvecChefList = new ArrayList<>();//contient l'ensemble des sous-centres ayant un chef 
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de prise en charge des chefs de centre et sous-centre pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES CHEFS DE CENTRE ET SOUS-CENTRE");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état de prise en charge des chefs de centre et sous-centre n'existe pour ce groupe d'examens !");
                    } else {
                        String separateur = ", ";
                        examensList = groupedexamensEnstring.split(separateur);
                        for (int i = 0; i < examensList.length; i++) {
                            for (Examen e : examens) {
                                if (e.getSigle().equals(examensList[i])) {
                                    examensSelected.add(e);
                                    break;
                                }
                            }
                        }
                        //on conserve quelques info de ces anciennes caisses
                        Groupe groupe = caisses.get(0).getGroupe();
                        sessionSelected = caisses.get(0).getSession();
                        //on supprime toutes les anciennes caisses du groupe d'examens
                        for (Caisse c : caisses) {
                            metier.supprimerCaisse(c);
                        }
                        //on va les recréer

                        chefcentres = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHEF DE CENTRE/SOUS-CENTRE");
                        assistants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHEF DE CENTRE/SOUS-CENTRE ASSISTANT");
                        fmissprimchefcentres = metier.findAllFmissprimchefcentresD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                        if (!chefcentres.isEmpty()) {//tant qu'il n'y a pas de chef de centre/sous-centre, il ne devrait pas avoir d'assistant
                            for (Intervenant intervenant : chefcentres) {
                                for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                    if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(intervenant.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(intervenant.getPersonnel().getPrenom())) {
                                        souscentreChefcentreMap.put(intervenant.getSouscentre(), intervenant);
                                        break;
                                    }
                                }
                            }
                            if (!assistants.isEmpty()) {
                                for (Intervenant intervenant : assistants) {
                                    for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                        if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(intervenant.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(intervenant.getPersonnel().getPrenom())) {
                                            souscentreAssistantMap.put(intervenant.getSouscentre(), intervenant);
                                            break;
                                        }
                                    }
                                }
                            }

                            //on détermine la liste des souscentre avac des chefs
                            for (Souscentre scent : souscentreChefcentreMap.keySet()) {
                                souscentreAvecChefList.add(scent);
                            }

                            for (Examen e : examensSelected) {
                                List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                                for (int j = 0; j < souscentreAvecChefList.size(); j++) {
                                    ArrayList<Character> phasesList = new ArrayList<>();
                                    Souscentre s = souscentreAvecChefList.get(j);
                                    for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                        if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                            if (!phasesList.contains(n.getActivite().getInitiale()) && !n.getActivite().getInitiale().equals('T')) {
                                                phasesList.add(n.getActivite().getInitiale());
                                            }
                                            //pas de break ici car on doit parcourir tous lesNats
                                        }
                                    }
                                    if (!souscentrePhasesProbMap.containsKey(s) && e.getNiveau().equals("PROB")) {
                                        if (phasesList != null) {
                                            souscentrePhasesProbMap.put(s, phasesList);
                                        }
                                    }
                                    if (!souscentrePhasesBacMap.containsKey(s) && e.getNiveau().equals("BACC")) {
                                        if (phasesList != null) {
                                            souscentrePhasesBacMap.put(s, phasesList);
                                        }
                                    }
                                }
                            }

                            boolean testSicreer = false;
                            try {
                                for (Souscentre souscentre : souscentreChefcentreMap.keySet()) {
                                    int net = 0;
                                    Intervenant chefcentre = souscentreChefcentreMap.get(souscentre);
                                    Fmissprimchefcentre sonFmissprimchefcentre = new Fmissprimchefcentre();
                                    for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                        if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(chefcentre.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(chefcentre.getPersonnel().getPrenom())) {
                                            sonFmissprimchefcentre = fmissprimchefcentre;
                                            break;
                                        }
                                    }
                                    souscentresEnclaves = metier.findAllSouscentresEnclaves();
                                    ArrayList<Souscentre> souscentresEnclavesEnArrayList = new ArrayList<>();
                                    for (Souscentre scentre : souscentresEnclaves) {
                                        souscentresEnclavesEnArrayList.add(scentre);
                                    }
                                    determinerCoutChefESG(souscentresEnclavesEnArrayList, souscentre, sonFmissprimchefcentre, souscentrePhasesProbMap, souscentrePhasesBacMap);
                                    int montantArrondiChefESG = (int) Math.ceil((double) totalChefESG / (double) 1000) * 1000;
                                    net += montantArrondiChefESG;
                                    if (souscentreAssistantMap.containsKey(souscentre)) {
                                        Intervenant assistant = souscentreAssistantMap.get(souscentre);
                                        Fmissprimchefcentre fmissprimAssistant = new Fmissprimchefcentre();
                                        for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                            if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(assistant.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(assistant.getPersonnel().getPrenom())) {
                                                fmissprimAssistant = fmissprimchefcentre;
                                                break;
                                            }
                                        }
                                        determinerCoutAssistantESG(souscentre, fmissprimAssistant, souscentrePhasesProbMap, souscentrePhasesBacMap);
                                        int montantArrondiAssistantESG = (int) Math.ceil((double) totalAssistantESG / (double) 1000) * 1000;
                                        net += montantArrondiAssistantESG;
                                    }
                                    metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                    testSicreer = true;
                                }
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                            if (testSicreer) {
                                JOptionPane.showMessageDialog(this, "Etats de prise en charge des chefs de centre et sous-centre mis à jour avec succès pour ce groupe d'examens !");
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Aucun Chef de centre ou sous-centre trouvé dans la base de données !");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
                }
                souscentreChefcentreMap.clear();
                souscentreAssistantMap.clear();
                souscentrePhasesProbMap.clear();
                souscentrePhasesBacMap.clear();
            }//fin if result
        }
        if (typeSelected.equals("TOUT ESTP")) {
            Map<Souscentre, ArrayList<Character>> souscentrePhasesProbIndMap = new HashMap<>();//contient les sous-centres de probatoire Ind chacun avec le tableau de ses activités
            Map<Souscentre, ArrayList<Character>> souscentrePhasesBacIndMap = new HashMap<>();//contient les sous-centres de baccalauréat Ind chacun avec le tableau de ses activités
            Map<Souscentre, ArrayList<Character>> souscentrePhasesProbComMap = new HashMap<>();//contient les sous-centres de probatoire Com chacun avec le tableau de ses activités
            Map<Souscentre, ArrayList<Character>> souscentrePhasesBacComMap = new HashMap<>();//contient les sous-centres de baccalauréat Com chacun avec le tableau de ses activités
            Map<Souscentre, Intervenant> souscentreChefcentreMap = new HashMap<>();//contient chaque sous-centre et son chef de centre/sous-centre
            Map<Souscentre, Intervenant> souscentreAssistantMap = new HashMap<>();//contient chaque sous-centre et son chef de centre/sous-centre assistant
            List<Souscentre> souscentreAvecChefList = new ArrayList<>();//contient l'ensemble des sous-centres ayant un chef 
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de prise en charge des chefs de centre et sous-centre pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES CHEFS DE CENTRE ET SOUS-CENTRE");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état de prise en charge des chefs de centre et sous-centre n'existe pour ce groupe d'examens !");
                    } else {
                        String separateur = ", ";
                        examensList = groupedexamensEnstring.split(separateur);
                        for (int i = 0; i < examensList.length; i++) {
                            for (Examen e : examens) {
                                if (e.getSigle().equals(examensList[i])) {
                                    examensSelected.add(e);
                                    break;
                                }
                            }
                        }
                        //on conserve quelques info de ces anciennes caisses
                        Groupe groupe = caisses.get(0).getGroupe();
                        sessionSelected = caisses.get(0).getSession();
                        //on supprime toutes les anciennes caisses du groupe d'examens
                        for (Caisse c : caisses) {
                            metier.supprimerCaisse(c);
                        }
                        //on va les recréer

                        chefcentres = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHEF DE CENTRE/SOUS-CENTRE");
                        assistants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHEF DE CENTRE/SOUS-CENTRE ASSISTANT");
                        fmissprimchefcentres = metier.findAllFmissprimchefcentresD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                        if (!chefcentres.isEmpty()) {//tant qu'il n'y a pas de chef de centre/sous-centre, il ne devrait pas avoir d'assistant
                            for (Intervenant intervenant : chefcentres) {
                                for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                    if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(intervenant.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(intervenant.getPersonnel().getPrenom())) {
                                        souscentreChefcentreMap.put(intervenant.getSouscentre(), intervenant);
                                        break;
                                    }
                                }
                            }
                            if (!assistants.isEmpty()) {
                                for (Intervenant intervenant : assistants) {
                                    for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                        if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(intervenant.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(intervenant.getPersonnel().getPrenom())) {
                                            souscentreAssistantMap.put(intervenant.getSouscentre(), intervenant);
                                            break;
                                        }
                                    }
                                }
                            }

                            //on détermine la liste des souscentre avac des chefs
                            for (Souscentre scent : souscentreChefcentreMap.keySet()) {
                                souscentreAvecChefList.add(scent);
                            }

                            for (Examen e : examensSelected) {
                                List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                                for (int j = 0; j < souscentreAvecChefList.size(); j++) {
                                    ArrayList<Character> phasesList = new ArrayList<>();
                                    Souscentre s = souscentreAvecChefList.get(j);
                                    for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                        if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                            if (!phasesList.contains(n.getActivite().getInitiale()) && !n.getActivite().getInitiale().equals('T')) {
                                                phasesList.add(n.getActivite().getInitiale());
                                            }
                                            //pas de break ici car on doit parcourir tous lesNats
                                        }
                                    }
                                    if (!souscentrePhasesProbIndMap.containsKey(s) && e.getNiveau().equals("PROB") && (e.getType().equals("IND") || e.getType().equals("IND PROF"))) {
                                        if (phasesList != null) {
                                            souscentrePhasesProbIndMap.put(s, phasesList);
                                        }
                                    }
                                    if (souscentrePhasesProbIndMap.containsKey(s) && e.getNiveau().equals("PROB") && (e.getType().equals("IND") || e.getType().equals("IND PROF"))) {
                                        if (phasesList != null) {
                                            ArrayList<Character> phasesListInit = souscentrePhasesProbIndMap.get(s);
                                            for (int k = 0; k < phasesList.size(); k++) {
                                                if (!phasesListInit.contains(phasesList.get(k))) {
                                                    phasesListInit.add(phasesList.get(k));
                                                }
                                            }
                                            souscentrePhasesProbIndMap.put(s, phasesListInit);
                                        }
                                    }
                                    if (!souscentrePhasesBacIndMap.containsKey(s) && e.getNiveau().equals("BACC") && (e.getType().equals("IND") || e.getType().equals("IND PROF"))) {
                                        if (phasesList != null) {
                                            souscentrePhasesBacIndMap.put(s, phasesList);
                                        }
                                    }
                                    if (souscentrePhasesBacIndMap.containsKey(s) && e.getNiveau().equals("BACC") && (e.getType().equals("IND") || e.getType().equals("IND PROF"))) {
                                        if (phasesList != null) {
                                            ArrayList<Character> phasesListInit = souscentrePhasesBacIndMap.get(s);
                                            for (int k = 0; k < phasesList.size(); k++) {
                                                if (!phasesListInit.contains(phasesList.get(k))) {
                                                    phasesListInit.add(phasesList.get(k));
                                                }
                                            }
                                            souscentrePhasesBacIndMap.put(s, phasesListInit);
                                        }
                                    }
                                    if (!souscentrePhasesProbComMap.containsKey(s) && e.getNiveau().equals("PROB") && (e.getType().equals("STT") || e.getType().equals("STT PROF"))) {
                                        if (phasesList != null) {
                                            souscentrePhasesProbComMap.put(s, phasesList);
                                        }
                                    }
                                    if (souscentrePhasesProbComMap.containsKey(s) && e.getNiveau().equals("PROB") && (e.getType().equals("STT") || e.getType().equals("STT PROF"))) {
                                        if (phasesList != null) {
                                            ArrayList<Character> phasesListInit = souscentrePhasesProbComMap.get(s);
                                            for (int k = 0; k < phasesList.size(); k++) {
                                                if (!phasesListInit.contains(phasesList.get(k))) {
                                                    phasesListInit.add(phasesList.get(k));
                                                }
                                            }
                                            souscentrePhasesProbComMap.put(s, phasesListInit);
                                        }
                                    }
                                    if (!souscentrePhasesBacComMap.containsKey(s) && e.getNiveau().equals("BACC") && (e.getType().equals("STT") || e.getType().equals("STT PROF"))) {
                                        if (phasesList != null) {
                                            souscentrePhasesBacComMap.put(s, phasesList);
                                        }
                                    }
                                    if (souscentrePhasesBacComMap.containsKey(s) && e.getNiveau().equals("BACC") && (e.getType().equals("STT") || e.getType().equals("STT PROF"))) {
                                        if (phasesList != null) {
                                            ArrayList<Character> phasesListInit = souscentrePhasesBacComMap.get(s);
                                            for (int k = 0; k < phasesList.size(); k++) {
                                                if (!phasesListInit.contains(phasesList.get(k))) {
                                                    phasesListInit.add(phasesList.get(k));
                                                }
                                            }
                                            souscentrePhasesBacComMap.put(s, phasesListInit);
                                        }
                                    }
                                }
                            }

                            boolean testSicreer = false;
                            try {
                                for (Souscentre souscentre : souscentreChefcentreMap.keySet()) {
                                    int net = 0;
                                    Intervenant chefcentre = souscentreChefcentreMap.get(souscentre);
                                    Fmissprimchefcentre sonFmissprimchefcentre = new Fmissprimchefcentre();
                                    for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                        if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(chefcentre.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(chefcentre.getPersonnel().getPrenom())) {
                                            sonFmissprimchefcentre = fmissprimchefcentre;
                                            break;
                                        }
                                    }
                                    souscentresEnclaves = metier.findAllSouscentresEnclaves();
                                    ArrayList<Souscentre> souscentresEnclavesEnArrayList = new ArrayList<>();
                                    for (Souscentre scentre : souscentresEnclaves) {
                                        souscentresEnclavesEnArrayList.add(scentre);
                                    }
                                    determinerCoutChefESTP(souscentresEnclavesEnArrayList, souscentre, sonFmissprimchefcentre, souscentrePhasesProbIndMap, souscentrePhasesBacIndMap, souscentrePhasesProbComMap, souscentrePhasesBacComMap);
                                    int montantArrondiChefESTP = (int) Math.ceil((double) totalChefESTP / (double) 1000) * 1000;
                                    net += montantArrondiChefESTP;
                                    if (souscentreAssistantMap.containsKey(souscentre)) {
                                        Intervenant assistant = souscentreAssistantMap.get(souscentre);
                                        Fmissprimchefcentre fmissprimAssistant = new Fmissprimchefcentre();
                                        for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                            if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(assistant.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(assistant.getPersonnel().getPrenom())) {
                                                fmissprimAssistant = fmissprimchefcentre;
                                                break;
                                            }
                                        }
                                        determinerCoutAssistantESTP(souscentre, fmissprimAssistant, souscentrePhasesProbIndMap, souscentrePhasesBacIndMap, souscentrePhasesProbComMap, souscentrePhasesBacComMap);
                                        int montantArrondiAssistantESTP = (int) Math.ceil((double) totalAssistantESTP / (double) 1000) * 1000;
                                        net += montantArrondiAssistantESTP;
                                    }
                                    metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                    testSicreer = true;
                                }
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                            if (testSicreer) {
                                JOptionPane.showMessageDialog(this, "Etats de prise en charge des chefs de centre et sous-centre mis à jour avec succès pour ce groupe d'examens !");
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Aucun Chef de centre ou sous-centre trouvé dans la base de données !");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
                }
                souscentreChefcentreMap.clear();
                souscentreAssistantMap.clear();
                souscentrePhasesProbIndMap.clear();
                souscentrePhasesBacIndMap.clear();
                souscentrePhasesProbComMap.clear();
                souscentrePhasesBacComMap.clear();
            }//fin if result
        }
    }//GEN-LAST:event_jButtonMettreAjourEtatsActionPerformed

    private void jButtonSupprimerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEtatsActionPerformed
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de prise en charge des chefs de centre et sous-centre pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES CHEFS DE CENTRE ET SOUS-CENTRE");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de prise en charge des chefs de centre et sous-centre n'existe pour ce groupe d'examens !");
                } else {
                    try {
                        for (Caisse caisse : caisses) {
                            metier.supprimerCaisse(caisse);
                        }
                        JOptionPane.showMessageDialog(this, "Etats de prise en charge des chefs de centre et sous-centre supprimés avec succès pour ce groupe d'examens !");
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
            }
        }
    }//GEN-LAST:event_jButtonSupprimerEtatsActionPerformed

    private void jComboBoxDepartementSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementSouscentreActionPerformed
        remplirArrondissementSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxDepartementSouscentreActionPerformed

    private void jComboBoxArrondissementSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementSouscentreActionPerformed
        remplirSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementSouscentreActionPerformed

    private void jComboBoxSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSouscentreActionPerformed
        //jTextField1.setText();
    }//GEN-LAST:event_jComboBoxSouscentreActionPerformed

    private void jComboBoxRegionSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionSouscentreActionPerformed
        remplirDepartementSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxRegionSouscentreActionPerformed

    private void jComboBoxDepartementListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementListeActionPerformed
        remplirArrondissementListeCombobox();
        remplirPersonnelsDuDepartementCombobox();
    }//GEN-LAST:event_jComboBoxDepartementListeActionPerformed

    private void jComboBoxArrondissementListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementListeActionPerformed
        remplirPersonnelsDelArrondissementCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementListeActionPerformed

    private void jComboBoxNomsEtPrenomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNomsEtPrenomsActionPerformed
        nomsEtPrenomsSelected = (String) jComboBoxNomsEtPrenoms.getSelectedItem();
        if (!nomsEtPrenomsSelected.equals("---")) {
            for (Personnel p : personnels) {
                if ((p.getNompers() + " " + p.getPrenom()).equals(nomsEtPrenomsSelected)) {
                    personnelSelected = p;
                    break;
                }
            }
        }
    }//GEN-LAST:event_jComboBoxNomsEtPrenomsActionPerformed

    private void jComboBoxRegionListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionListeActionPerformed
        remplirDepartementListeCombobox();
    }//GEN-LAST:event_jComboBoxRegionListeActionPerformed

    private void jButtonSupprimerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerPersonnelActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nomsEtPrenomsSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre et un personnel !");
        } else {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer ce chef de centre/sous-centre ou assistant du sous-centre [" + nomSouscentreSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                anneeSelected = Integer.parseInt(anneeString);
                fmissprimchefcentres = metier.findAllFmissprimchefcentresD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                try {
                    String qualite = "CHEF DE CENTRE/SOUS-CENTRE";
                    if (jCheckBoxAssistant.isSelected()) {
                        qualite = "CHEF DE CENTRE/SOUS-CENTRE ASSISTANT";
                    }
                    Intervenant intervenant = metier.findIntervenantByNomEtPrenomD1GroupeDexamensD1SessionD1SouscentreD1ActiviteEt1Qualite(personnelSelected.getNompers(), personnelSelected.getPrenom(), anneeSelected, nomSouscentreSelected, niveauSelected, typeSelected, phase, qualite);
                    Fmissprimchefcentre sonFmissprimchefcentre = new Fmissprimchefcentre();
                    for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                        if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(intervenant.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(intervenant.getPersonnel().getPrenom())) {
                            sonFmissprimchefcentre = fmissprimchefcentre;
                        }
                    }
                    metier.supprimerFmissprimchefcentre(sonFmissprimchefcentre);
                    metier.supprimerIntervenant(intervenant);
                    JOptionPane.showMessageDialog(this, "Chef de centre/sous-centre ou assistant supprimé avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer ce chef de centre/sous-centre ou assistant du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerPersonnelActionPerformed

    private void jButtonAnnulerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerPersonnelActionPerformed
        jComboBoxRegionListe.setSelectedIndex(0);
        jComboBoxDepartementListe.setSelectedIndex(0);
        jComboBoxArrondissementListe.setSelectedIndex(0);
        jComboBoxNomsEtPrenoms.setSelectedIndex(0);
        jCheckBoxLiaisonDres.setSelected(false);
        jCheckBoxLiaisonCentrebil.setSelected(false);
        jCheckBoxFraistrans.setSelected(false);
        jComboBoxMegacentre.setSelectedIndex(0);
        jComboBoxPrime.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerPersonnelActionPerformed

    private void jButtonCreerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerPersonnelActionPerformed
        infoSaisies();
        if (!jCheckBoxAssistant.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nomsEtPrenomsSelected.equals("---") || megacentreSelected.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre, un personnel, choisir s'il s'agit oui ou non d'un mega centre !");
            } else {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                Intervenant intervenantCreated = null;
                boolean testSiCreerIntervenant = false;
                boolean testSiCreerFmissprimchefcentre = false;
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                for (Souscentre souscentre : souscentres) {
                    if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                        souscentreSelected = souscentre;
                        break;
                    }
                }

                try {
                    //personnelSelected est déterminé au moment du clic sur sa jcombobox
                    Activite activite = metier.findActiviteByNom(phase);
                    Qualite qualite = metier.findQualiteByTitre("CHEF DE CENTRE/SOUS-CENTRE");
                    boolean resident = false;
                    intervenantCreated = new Intervenant(groupe, sessionSelected, personnelSelected, souscentreSelected, activite, qualite, resident);
                    metier.creerIntervenant(intervenantCreated);
                    testSiCreerIntervenant = true;
                } catch (ObcbudgetException ex) {
                    testSiCreerIntervenant = false;
                }

                liaisonDresBool = false;
                liaisonCentrebilBool = false;
                fraistransBool = false;
                megacentreBool = false;

                if (jCheckBoxLiaisonDres.isSelected()) {
                    liaisonDresBool = true;
                }
                if (jCheckBoxLiaisonCentrebil.isSelected()) {
                    liaisonCentrebilBool = true;
                }
                if (jCheckBoxFraistrans.isSelected()) {
                    fraistransBool = true;
                }
                if (megacentreSelected.equals("OUI")) {
                    primeSaisie = Integer.parseInt(primeString);
                    megacentreBool = true;
                } else {
                    primeSaisie = 0;
                    megacentreBool = false;
                }
                if (testSiCreerIntervenant) {
                    System.out.println("------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
                    System.out.println("intervenant créé:" + intervenantCreated.getPersonnel().getNompers() + " " + intervenantCreated.getPersonnel().getPrenom());
                    try {
                        metier.creerFmissprimchefcentre(new Fmissprimchefcentre(intervenantCreated, liaisonDresBool, liaisonCentrebilBool, fraistransBool, megacentreBool, primeSaisie));
                        testSiCreerFmissprimchefcentre = true;
                    } catch (ObcbudgetException ex) {
                        testSiCreerFmissprimchefcentre = false;
                    }
                }
                if (!testSiCreerFmissprimchefcentre) {
                    JOptionPane.showMessageDialog(this, "Impossible de créer le chef de centre/sous-centre pour le centre/sous-centre [" + nomSouscentreSelected + "]");
                } else {
                    JOptionPane.showMessageDialog(this, "Chef de centre/sous-centre créé avec succès !");
                }
            }
        }
        if (jCheckBoxAssistant.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nomsEtPrenomsSelected.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre et un personnel !");
            } else {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                Intervenant intervenantCreated = null;
                boolean testSiCreerIntervenant = false;
                boolean testSiCreerFmissprimchefcentre = false;
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                for (Souscentre souscentre : souscentres) {
                    if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                        souscentreSelected = souscentre;
                        break;
                    }
                }

                try {
                    //personnelSelected est déterminé au moment du clic sur sa jcombobox
                    Activite activite = metier.findActiviteByNom(phase);
                    Qualite qualite = metier.findQualiteByTitre("CHEF DE CENTRE/SOUS-CENTRE ASSISTANT");

                    boolean resident = false;
                    intervenantCreated = new Intervenant(groupe, sessionSelected, personnelSelected, souscentreSelected, activite, qualite, resident);
                    metier.creerIntervenant(intervenantCreated);
                    testSiCreerIntervenant = true;
                } catch (ObcbudgetException ex) {
                    testSiCreerIntervenant = false;
                }

                liaisonDresBool = false;
                liaisonCentrebilBool = false;
                fraistransBool = false;
                if (jCheckBoxFraistrans.isSelected()) {
                    fraistransBool = true;
                }
                megacentreBool = false;

                if (testSiCreerIntervenant) {
                    try {
                        metier.creerFmissprimchefcentre(new Fmissprimchefcentre(intervenantCreated, liaisonDresBool, liaisonCentrebilBool, fraistransBool, megacentreBool, primeSaisie));
                        testSiCreerFmissprimchefcentre = true;
                    } catch (ObcbudgetException ex) {
                        testSiCreerFmissprimchefcentre = false;
                    }
                }
                if (!testSiCreerFmissprimchefcentre) {
                    JOptionPane.showMessageDialog(this, "Impossible de créer le chef de centre/sous-centre assistant pour le centre/sous-centre [" + nomSouscentreSelected + "]");
                } else {
                    JOptionPane.showMessageDialog(this, "Chef de centre/sous-centre assistant créé avec succès !");
                }
            }
        }
    }//GEN-LAST:event_jButtonCreerPersonnelActionPerformed

    private void jButtonListerPersonnelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerPersonnelsActionPerformed
        infoSaisies();
        Map<Souscentre, Intervenant> souscentreChefcentreMap = new HashMap<>();//contient chaque sous-centre et son chef de centre/sous-centre
        Map<Souscentre, Intervenant> souscentreAssistantMap = new HashMap<>();//contient chaque sous-centre et son chef de centre/sous-centre assistant
        if (groupedexamensEnstring.equals("") || anneeString.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens et une session !");
        } else {
            anneeSelected = Integer.parseInt(anneeString);
            chefcentres = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHEF DE CENTRE/SOUS-CENTRE");
            assistants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHEF DE CENTRE/SOUS-CENTRE ASSISTANT");
            fmissprimchefcentres = metier.findAllFmissprimchefcentresD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
            if (!chefcentres.isEmpty()) {//tant qu'il n'y a pas de chef de centre/sous-centre, il ne devrait pas avoir d'assistant
                for (Intervenant intervenant : chefcentres) {
                    for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                        if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(intervenant.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(intervenant.getPersonnel().getPrenom())) {
                            souscentreChefcentreMap.put(intervenant.getSouscentre(), intervenant);
                            break;
                        }
                    }
                }
                if (!assistants.isEmpty()) {
                    for (Intervenant intervenant : assistants) {
                        for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                            if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(intervenant.getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(intervenant.getPersonnel().getPrenom())) {
                                souscentreAssistantMap.put(intervenant.getSouscentre(), intervenant);
                                break;
                            }
                        }
                    }
                }
                try {
                    List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                    for (Region region : regions) {
                        int i = 1;
                        for (Souscentre souscentre : souscentreChefcentreMap.keySet()) {
                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                                int nbtours = 1;
                                String person = "";
                                int prime = 0;
                                if (!souscentreAssistantMap.isEmpty() && souscentreAssistantMap.containsKey(souscentre)) {
                                    nbtours = 2;
                                }
                                for (int j = 0; j < nbtours; j++) {
                                    liaisonDresBool = false;
                                    liaisonCentrebilBool = false;
                                    fraistransBool = false;
                                    megacentreBool = false;
                                    prime = 0;
                                    if (j == 0) {//traitement du chef
                                        person = souscentreChefcentreMap.get(souscentre).getPersonnel().getNompers() + " " + souscentreChefcentreMap.get(souscentre).getPersonnel().getPrenom();
                                        for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                            if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(souscentreChefcentreMap.get(souscentre).getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(souscentreChefcentreMap.get(souscentre).getPersonnel().getPrenom())) {
                                                liaisonDresBool = fmissprimchefcentre.getLiaisondres();
                                                liaisonCentrebilBool = fmissprimchefcentre.getLiaisoncentrebil();
                                                fraistransBool = fmissprimchefcentre.getFraistrans();
                                                megacentreBool = fmissprimchefcentre.getMegacentre();
                                                prime = fmissprimchefcentre.getPrime();
                                                break;
                                            }
                                        }
                                    }
                                    if (nbtours == 2 && j == 1) {//traitement de l'assistant lorsqu'il existe
                                        person = souscentreAssistantMap.get(souscentre).getPersonnel().getNompers() + " " + souscentreAssistantMap.get(souscentre).getPersonnel().getPrenom() + "(Assistant)";
                                        for (Fmissprimchefcentre fmissprimchefcentre : fmissprimchefcentres) {
                                            if (fmissprimchefcentre.getIntervenant().getPersonnel().getNompers().equals(souscentreAssistantMap.get(souscentre).getPersonnel().getNompers()) && fmissprimchefcentre.getIntervenant().getPersonnel().getPrenom().equals(souscentreAssistantMap.get(souscentre).getPersonnel().getPrenom())) {
                                                liaisonDresBool = fmissprimchefcentre.getLiaisondres();
                                                liaisonCentrebilBool = fmissprimchefcentre.getLiaisoncentrebil();
                                                fraistransBool = fmissprimchefcentre.getFraistrans();
                                                megacentreBool = fmissprimchefcentre.getMegacentre();
                                                prime = fmissprimchefcentre.getPrime();
                                                break;
                                            }
                                        }
                                    }
                                    Map<String, Object> row = new HashMap<>();
                                    row.put("session", anneeSelected);
                                    row.put("examen", groupedexamensEnstring);
                                    row.put("region", region.getNomreg());
                                    row.put("num", i++);
                                    row.put("souscentre", souscentre.getNomsouscent());
                                    row.put("personnel", person);
                                    row.put("liaisonDresBool", liaisonDresBool);
                                    row.put("liaisonCentrebilBool", liaisonCentrebilBool);
                                    row.put("fraistransBool", fraistransBool);
                                    row.put("megacentreBool", megacentreBool);
                                    row.put("prime", prime);
                                    datasource.add(row);
                                }
                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeChefscentreEtAssistantsReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Aucun Chef de centre/sous-centre ou assistant trouvé dans la base de données !");
            }
        }
        souscentreChefcentreMap.clear();
        souscentreAssistantMap.clear();
    }//GEN-LAST:event_jButtonListerPersonnelsActionPerformed

    private void jButtonAnnulerChoixExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixExamenActionPerformed
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        jComboBoxSession.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixExamenActionPerformed

    private void jButtonAnnulerChoixSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixSouscentreActionPerformed
        jComboBoxRegionSouscentre.setSelectedIndex(0);
        jComboBoxDepartementSouscentre.setSelectedIndex(0);
        jComboBoxArrondissementSouscentre.setSelectedIndex(0);
        jComboBoxSouscentre.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixSouscentreActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jCheckBoxLiaisonDresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxLiaisonDresActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxLiaisonDresActionPerformed

    private void jComboBoxMegacentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxMegacentreActionPerformed
        megacentreSelected = (String) jComboBoxMegacentre.getSelectedItem();
        if (megacentreSelected.equals("NON")) {
            jComboBoxPrime.setEnabled(false);
            jComboBoxPrime.setSelectedIndex(0);
        }
        if (megacentreSelected.equals("OUI")) {
            jComboBoxPrime.setEnabled(true);
        }
    }//GEN-LAST:event_jComboBoxMegacentreActionPerformed

    private void jCheckBoxFraistransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxFraistransActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxFraistransActionPerformed

    private void jCheckBoxAssistantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAssistantActionPerformed
        if (jCheckBoxAssistant.isSelected()) {
            jPanelFraisMission.setEnabled(false);
            jCheckBoxLiaisonDres.setEnabled(false);
            jCheckBoxLiaisonCentrebil.setEnabled(false);
            jPanelPrime.setEnabled(false);
            jComboBoxPrime.setEnabled(false);
            jComboBoxMegacentre.setEnabled(false);
            jCheckBoxLiaisonDres.setSelected(false);
            jCheckBoxLiaisonCentrebil.setSelected(false);
            jCheckBoxFraistrans.setEnabled(true);
            jCheckBoxFraistrans.setSelected(false);
            jComboBoxMegacentre.setSelectedIndex(0);
        } else {
            jPanelFraisMission.setEnabled(true);
            jCheckBoxLiaisonDres.setEnabled(true);
            jCheckBoxLiaisonCentrebil.setEnabled(true);
            jCheckBoxFraistrans.setEnabled(true);
            jPanelPrime.setEnabled(true);
            jComboBoxPrime.setEnabled(true);
            jComboBoxMegacentre.setEnabled(true);
        }

    }//GEN-LAST:event_jCheckBoxAssistantActionPerformed

    private void jComboBoxPrimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPrimeActionPerformed
        megacentreSelected = (String) jComboBoxMegacentre.getSelectedItem();
        if (megacentreSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Veuillez recommencer svp. Le champ mega centre n'est pas sélectionné !");
            jComboBoxPrime.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jComboBoxPrimeActionPerformed

    private void jButtonImporterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImporterActionPerformed
        anneeString = (String) jComboBoxSession.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        if (!anneeString.equals("---") && !groupedexamensEnstring.equals("")) {
            class donneesNonSave {//classe interne devant contenir un personnel et ses paramètres non sauvegardés dans la BD

                String nom;
                String prenom;
                String fonction;
                String structure;
                String arrondissement;
                String nomScentre;
                String testAssistant;
                String testLiaisonDres;
                String testLiaisonBil;
                String testFraisTrans;
                String testMegacentre;
                int prime;

                public donneesNonSave(String nom, String prenom, String fonction, String structure, String arrondissement, String nomScentre, String testAssistant, String testLiaisonDres, String testLiaisonBil, String testFraisTrans, String testMegacentre, int prime) {
                    this.nom = nom;
                    this.prenom = prenom;
                    this.fonction = fonction;
                    this.structure = structure;
                    this.arrondissement = arrondissement;
                    this.nomScentre = nomScentre;
                    this.testAssistant = testAssistant;
                    this.testLiaisonDres = testLiaisonDres;
                    this.testLiaisonBil = testLiaisonBil;
                    this.testFraisTrans = testFraisTrans;
                    this.testMegacentre = testMegacentre;
                    this.prime = prime;
                }

            }
            ArrayList<donneesNonSave> donneesNonSaveList = new ArrayList<>();//liste de tous les personnels et leurs paramètres non sauvegardés dans la BD
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            anneeSelected = Integer.parseInt(anneeString);
            for (Session s : sessions) {
                if (s.getAnnee() == anneeSelected) {
                    sessionSelected = s;
                    break;
                }
            }

            JFileChooser choix = new JFileChooser();
            int retour = choix.showOpenDialog(this);
            if (retour == JFileChooser.APPROVE_OPTION) {
                // un fichier a été choisi (sortie par OK)
                // nom du fichier  choisi 
                //String nomFichier = choix.getSelectedFile().getName();
                // chemin absolu du fichier choisi
                String cheminFichier = choix.getSelectedFile().getAbsolutePath();
                //JOptionPane.showMessageDialog(this, "Nom du fichier choisi:" + nomFichier+" \n Chemin du fichier:"+cheminFichier);

                try {
                    //long start = System.currentTimeMillis();

                    FileInputStream inputStream = new FileInputStream(cheminFichier);

                    XSSFWorkbook workbook = new XSSFWorkbook(inputStream);//XSSFWorkbook pour windows 2007 d'extension xlsx; HSSFWorkbook pour excel 97 et 2003 d'extension xls

                    Sheet firstSheet = workbook.getSheetAt(0);
                    Iterator<Row> rowIterator = firstSheet.iterator();

                    rowIterator.next(); // skip the header row

                    while (rowIterator.hasNext()) {
                        boolean continuerFonction = true;
                        boolean continuerArrond = true;
                        boolean continuerScentre = true;
                        Row nextRow = rowIterator.next();
                        Iterator<Cell> cellIterator = nextRow.cellIterator();
                        Fonction fonct = new Fonction();
                        Arrondissement arrond = new Arrondissement();
                        Souscentre souscentre = new Souscentre();
                        Personnel pers = new Personnel();
                        Intervenant intervenantCreated = null;
                        String nompers = "";
                        String prenompers = "";
                        String nomstruct = "";
                        String nomfonct = "";
                        String nomarrond = "";
                        String scentre = "";
                        String valAssistant = "";
                        String valLiaisonDres = "";
                        String valLiaisonBil = "";
                        String valFraisTrans = "";
                        String valMegacentre = "";
                        int prime = 0;
                        while (cellIterator.hasNext()) {
                            Cell nextCell = cellIterator.next();
                            int columnIndex = nextCell.getColumnIndex();

                            switch (columnIndex) {
                                case 0:
                                    nompers = nextCell.getStringCellValue();
                                    break;
                                case 1:
                                    prenompers = nextCell.getStringCellValue();
                                    break;
                                case 2:
                                    nomfonct = nextCell.getStringCellValue();
                                    try {
                                        fonct = metier.findFonctionByTitre(nomfonct);
                                    } catch (Exception e) {
                                        continuerFonction = false;
                                    }
                                    break;
                                case 3:
                                    nomstruct = nextCell.getStringCellValue();
                                    break;
                                case 4:
                                    nomarrond = nextCell.getStringCellValue();
                                    try {
                                        arrond = metier.findArrondissementByName(nomarrond);
                                    } catch (Exception e) {
                                        continuerArrond = false;
                                    }
                                    break;
                                case 5:
                                    scentre = nextCell.getStringCellValue();
                                    try {
                                        souscentre = metier.findSouscentreByName(scentre);
                                    } catch (Exception e) {
                                        continuerScentre = false;
                                    }
                                    break;

                                case 6:
                                    valAssistant = nextCell.getStringCellValue();
                                    break;
                                case 7:
                                    valLiaisonDres = nextCell.getStringCellValue();
                                    break;
                                case 8:
                                    valLiaisonBil = nextCell.getStringCellValue();
                                    break;
                                case 9:
                                    valFraisTrans = nextCell.getStringCellValue();
                                    break;
                                case 10:
                                    valMegacentre = nextCell.getStringCellValue();
                                    break;
                                case 11:
                                    prime = (int) nextCell.getNumericCellValue();
                                    break;
                            }
                        }

                        Activite activite = metier.findActiviteByNom("SUPERVISION DU CENTRE/SOUS-CENTRE");
                        if (continuerScentre && continuerFonction && continuerArrond) {
                            pers = metier.creerPersonnel(new Personnel(nompers.toUpperCase(), prenompers.toUpperCase(), nomstruct.toUpperCase(), fonct, arrond));
                            boolean resident = false;
                            Qualite qualite = metier.findQualiteByTitre("CHEF DE CENTRE/SOUS-CENTRE");
                            if (valAssistant.equals("OUI")) {
                                qualite = metier.findQualiteByTitre("CHEF DE CENTRE/SOUS-CENTRE ASSISTANT");
                            }
                            intervenantCreated = metier.creerIntervenant(new Intervenant(groupe, sessionSelected, pers, souscentre, activite, qualite, resident));
                            boolean liaisonDres = false;
                            if (valLiaisonDres.equals("OUI")) {
                                liaisonDres = true;
                            }
                            boolean liaisonBil = false;
                            if (valLiaisonBil.equals("OUI")) {
                                liaisonBil = true;
                            }
                            boolean fraisTrans = false;
                            if (valFraisTrans.equals("OUI")) {
                                fraisTrans = true;
                            }
                            boolean megaCentre = false;
                            if (valMegacentre.equals("OUI")) {
                                megaCentre = true;
                            }
                            metier.creerFmissprimchefcentre(new Fmissprimchefcentre(intervenantCreated, liaisonDres, liaisonBil, fraisTrans, megaCentre, prime));

                        } else {
                            donneesNonSaveList.add(new donneesNonSave(nompers, prenompers, nomfonct, nomstruct, nomarrond, scentre, valAssistant, valLiaisonDres, valLiaisonBil, valFraisTrans, valMegacentre, prime));//impossible de sauvegarder personnel et intervenant et Fmissprimchefcentre
                        }
                    }

                    workbook.close();

                } catch (IOException ex1) {
                    System.out.println("Error reading file");
                    ex1.printStackTrace();
                }

                if (donneesNonSaveList.size() > 0) {
                    JOptionPane.showMessageDialog(this, "Attention ! Attention ! Plusieurs données n'ont pas été importées dans la base des données !");
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        int i = 1;
                        for (donneesNonSave donnee : donneesNonSaveList) {
                            Map<String, Object> row = new HashMap<>();
                            row.put("examen", groupedexamensEnstring);
                            row.put("session", sessionSelected.getAnnee());
                            row.put("num", i++);
                            row.put("nom", donnee.nom);
                            row.put("prenom", donnee.prenom);
                            row.put("nomfonct", donnee.fonction);
                            row.put("nomstruct", donnee.structure);
                            row.put("nomarrond", donnee.arrondissement);
                            row.put("souscentre", donnee.nomScentre);
                            row.put("assistant", donnee.testAssistant);
                            row.put("liaisondres", donnee.testLiaisonDres);
                            row.put("liaisonbil", donnee.testLiaisonBil);
                            row.put("transport", donnee.testFraisTrans);
                            row.put("megacentre", donnee.testMegacentre);
                            row.put("prime", donnee.prime);
                            datasource.add(row);
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\chefsCentreNonSauvegardesReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Importation effectuée avec succès !");
                }
            } else {
                //... ;// pas de fichier choisi
                JOptionPane.showMessageDialog(this, "Aucun choix effectué !");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencer svp. Vous devez choisir un groupe d'examens et une session !");
        }
    }//GEN-LAST:event_jButtonImporterActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatPriseEnChargeChefCentre.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatPriseEnChargeChefCentre.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatPriseEnChargeChefCentre.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatPriseEnChargeChefCentre.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatPriseEnChargeChefCentre().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonAnnulerChoixExamen;
    private javax.swing.JButton jButtonAnnulerChoixSouscentre;
    private javax.swing.JButton jButtonAnnulerPersonnel;
    private javax.swing.JButton jButtonCreerEtats;
    private javax.swing.JButton jButtonCreerPersonnel;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonImporter;
    private javax.swing.JButton jButtonListerPersonnels;
    private javax.swing.JButton jButtonMettreAjourEtats;
    private javax.swing.JButton jButtonSupprimerEtats;
    private javax.swing.JButton jButtonSupprimerPersonnel;
    private javax.swing.JButton jButtonVisualiserEtats;
    private javax.swing.JCheckBox jCheckBoxAssistant;
    private javax.swing.JCheckBox jCheckBoxFraistrans;
    private javax.swing.JCheckBox jCheckBoxLiaisonCentrebil;
    private javax.swing.JCheckBox jCheckBoxLiaisonDres;
    private javax.swing.JComboBox<String> jComboBoxArrondissementListe;
    private javax.swing.JComboBox<String> jComboBoxArrondissementSouscentre;
    private javax.swing.JComboBox<String> jComboBoxDepartementListe;
    private javax.swing.JComboBox<String> jComboBoxDepartementSouscentre;
    private javax.swing.JComboBox<String> jComboBoxMegacentre;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxNomsEtPrenoms;
    private javax.swing.JComboBox<String> jComboBoxPrime;
    private javax.swing.JComboBox<String> jComboBoxRegionListe;
    private javax.swing.JComboBox<String> jComboBoxRegionSouscentre;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxSouscentre;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelArrondissementListe;
    private javax.swing.JLabel jLabelArrondissementSouscentre;
    private javax.swing.JLabel jLabelDepartementListe;
    private javax.swing.JLabel jLabelDepartementSouscentre;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelMegacentre;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelPrime;
    private javax.swing.JLabel jLabelRegionListe;
    private javax.swing.JLabel jLabelRegionSouscentre;
    private javax.swing.JLabel jLabelResponsable;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelSouscentre;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanelChoixExamen;
    private javax.swing.JPanel jPanelChoixSouscentre;
    private javax.swing.JPanel jPanelFraisMission;
    private javax.swing.JPanel jPanelGestionEtat;
    private javax.swing.JPanel jPanelPersonnels;
    private javax.swing.JPanel jPanelPrime;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Region> regions = null;
    private List<Examen> examens = null;
    private List<Option> options = null;
    private List<Matiere> matieres = null;
    private Examen examenSelected = null;
    private String[] examensList = null;
    private List<Examen> examensSelected = new ArrayList<>();
    private List<Departement> departementsSouscentre = null;
    private List<Arrondissement> arrondissementsSouscentre = null;
    private List<Departement> departementsListe = null;
    private List<Arrondissement> arrondissementsListe = null;
    private List<Souscentre> souscentres = null;
    private Souscentre souscentreSelected = null;
    private String[] sessionsCombo = null;
    private String[] regionsSouscentreCombo = null;
    private String[] departementsSouscentreCombo = null;
    private String[] arrondissementsSouscentreCombo = null;
    private String[] souscentresCombo = null;
    private String[] regionsListeCombo = null;
    private String[] departementsListeCombo = null;
    private String[] arrondissementsListeCombo = null;
    private String[] optionsCombo = null;
    private String[] matieresCombo = null;
    private String nomRegionSouscentreSelected = "";
    private String nomDepartementSouscentreSelected = "";
    private String nomArrondissementSouscentreSelected = "";
    private String nomRegionListeSelected = "";
    private String nomDepartementListeSelected = "";
    private String nomArrondissementListeSelected = "";
    private String nomSouscentreSelected = "";
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private String phase = "SUPERVISION DU CENTRE/SOUS-CENTRE";
    private List<Caisse> caisses = null;
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String[] primeCombo = null;
    private String primeSelected = "";
    private String[] megacentreCombo = null;
    private String megacentreSelected = "";
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private int fraismissChefESG = 0, fraismissChefESTP = 0, fraistransESG = 50000, fraistransESTP = 50000, primeChefESG = 0, primeChefESTP = 0, indemforfaitChefESG = 0, indemforfaitChefESTP = 0, indemastreChefESG = 0, indemastreChefESTP = 0, indemforfaitAssistantESG = 0, indemastreAssistantESG = 0, indemforfaitAssistantESTP = 0, indemastreAssistantESTP = 0, totalAssistantESG = 0, totalAssistantESTP = 0, totalChefESG = 0, totalChefESTP = 0, nbexams = 0, misdres = 0, miscentrebil = 0, txjour = 25000, nbjoursdres = 0, nbjourscentrebil = 0;
    private String nomsEtPrenomsSelected = "";
    private Personnel personnelSelected = null;
    private List<Personnel> personnels = null;
    private String[] personnelsCombo = null;
    private List<Intervenant> chefcentres = null;
    private List<Intervenant> assistants = null;
    private String primeString = "";
    private int primeSaisie = 0;
    private boolean liaisonDresBool = false, liaisonCentrebilBool = false, fraistransBool = false, megacentreBool = false;
    private Fmissprimchefcentre fmissprimchefcentre = null;
    private List<Fmissprimchefcentre> fmissprimchefcentres = null;
    private List<Souscentre> souscentresEnclaves = null;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        regions = metier.findAllRegions();
        souscentres = metier.findAllSouscentres();
        examens = metier.findAllExamens();

        //on remplit la combobox des régions du sous-centre
        regionsSouscentreCombo = new String[regions.size() + 1];
        regionsSouscentreCombo[0] = "---";
        int i = 1;
        for (Region region : regions) {
            regionsSouscentreCombo[i++] = region.getNomreg();
        }
        jComboBoxRegionSouscentre.setModel(new DefaultComboBoxModel(regionsSouscentreCombo));

        //on remplit la combobox des régions des examinateurs
        regionsListeCombo = new String[regions.size() + 1];
        regionsListeCombo[0] = "---";
        int j = 1;
        for (Region region : regions) {
            regionsListeCombo[j++] = region.getNomreg();
        }
        jComboBoxRegionListe.setModel(new DefaultComboBoxModel(regionsListeCombo));

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int k = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[k++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "GEN", "TOUT ESTP"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "TOUT"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        //on remplit la combobox des primes
        primeCombo = new String[]{"---", "60000", "70000", "80000", "90000", "100000", "110000", "120000"};
        jComboBoxPrime.setModel(new DefaultComboBoxModel(primeCombo));

        //on remplit la combobox des mega centres
        megacentreCombo = new String[]{"---", "OUI", "NON"};
        jComboBoxMegacentre.setModel(new DefaultComboBoxModel(megacentreCombo));

        remplirDepartementSouscentreCombobox();
        remplirArrondissementSouscentreCombobox();
        remplirSouscentreCombobox();
        remplirDepartementListeCombobox();
        remplirArrondissementListeCombobox();
        remplirPersonnelsDelArrondissementCombobox();
        remplirPersonnelsDuDepartementCombobox();
    }

    private void infoSaisies() {
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        nomsEtPrenomsSelected = (String) jComboBoxNomsEtPrenoms.getSelectedItem();
        megacentreSelected = (String) jComboBoxMegacentre.getSelectedItem();
        primeString = (String) jComboBoxPrime.getSelectedItem();
    }

    private void remplirDepartementSouscentreCombobox() {
        nomRegionSouscentreSelected = (String) jComboBoxRegionSouscentre.getSelectedItem();
        departementsSouscentre = metier.findAllDepartementsD1Region(nomRegionSouscentreSelected);
        //on remplit la combobox des départements du sous-centre
        departementsSouscentreCombo = new String[departementsSouscentre.size() + 1];
        departementsSouscentreCombo[0] = "---";
        int i = 1;
        for (Departement departement : departementsSouscentre) {
            departementsSouscentreCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartementSouscentre.setModel(new DefaultComboBoxModel(departementsSouscentreCombo));
    }

    private void remplirArrondissementSouscentreCombobox() {
        nomDepartementSouscentreSelected = (String) jComboBoxDepartementSouscentre.getSelectedItem();
        arrondissementsSouscentre = metier.findAllArrondissementsD1Departement(nomDepartementSouscentreSelected);
        //on remplit la combobox des arrondissements
        arrondissementsSouscentreCombo = new String[arrondissementsSouscentre.size() + 1];
        arrondissementsSouscentreCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissementsSouscentre) {
            arrondissementsSouscentreCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissementSouscentre.setModel(new DefaultComboBoxModel(arrondissementsSouscentreCombo));
    }

    private void remplirSouscentreCombobox() {
        nomArrondissementSouscentreSelected = (String) jComboBoxArrondissementSouscentre.getSelectedItem();
        souscentres = metier.findAllSouscentresD1Arrondissement(nomArrondissementSouscentreSelected);
        //on remplit la combobox des sous-centres
        souscentresCombo = new String[souscentres.size() + 1];
        souscentresCombo[0] = "---";
        int i = 1;
        for (Souscentre souscentre : souscentres) {
            souscentresCombo[i++] = souscentre.getNomsouscent();
        }
        jComboBoxSouscentre.setModel(new DefaultComboBoxModel(souscentresCombo));
    }

    private void remplirDepartementListeCombobox() {
        nomRegionListeSelected = (String) jComboBoxRegionListe.getSelectedItem();
        departementsListe = metier.findAllDepartementsD1Region(nomRegionListeSelected);
        //on remplit la combobox des départements des examinateurs
        departementsListeCombo = new String[departementsListe.size() + 1];
        departementsListeCombo[0] = "---";
        int i = 1;
        for (Departement departement : departementsListe) {
            departementsListeCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartementListe.setModel(new DefaultComboBoxModel(departementsListeCombo));
    }

    private void remplirArrondissementListeCombobox() {
        nomDepartementListeSelected = (String) jComboBoxDepartementListe.getSelectedItem();
        arrondissementsListe = metier.findAllArrondissementsD1Departement(nomDepartementListeSelected);
        //on remplit la combobox des arrondissements des examinateurs
        arrondissementsListeCombo = new String[arrondissementsListe.size() + 1];
        arrondissementsListeCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissementsListe) {
            arrondissementsListeCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissementListe.setModel(new DefaultComboBoxModel(arrondissementsListeCombo));
    }

    private void remplirPersonnelsDelArrondissementCombobox() {
        nomArrondissementListeSelected = (String) jComboBoxArrondissementListe.getSelectedItem();
        personnels = metier.findAllPersonnelsD1Arrondissement(nomArrondissementListeSelected);
        //on remplit les combobox des responsables et des membres
        personnelsCombo = new String[personnels.size() + 1];
        personnelsCombo[0] = "---";
        int i = 1;
        for (Personnel personnel : personnels) {
            personnelsCombo[i] = personnel.getNompers() + " " + personnel.getPrenom();
            i++;
        }
        jComboBoxNomsEtPrenoms.setModel(new DefaultComboBoxModel(personnelsCombo));
    }

    private void remplirPersonnelsDuDepartementCombobox() {
        nomDepartementListeSelected = (String) jComboBoxDepartementListe.getSelectedItem();
        personnels = metier.findAllPersonnelsD1Departement(nomDepartementListeSelected);
        //on remplit les combobox des personnels       
        personnelsCombo = new String[personnels.size() + 1];
        personnelsCombo[0] = "---";
        int i = 1;
        for (Personnel personnel : personnels) {
            personnelsCombo[i] = personnel.getNompers() + " " + personnel.getPrenom();
            i++;
        }
        jComboBoxNomsEtPrenoms.setModel(new DefaultComboBoxModel(personnelsCombo));
    }

    private void determinerCoutChefESG(ArrayList<Souscentre> souscentresEnclavesEnArrayList, Souscentre souscentre, Fmissprimchefcentre fmissprimchefcentre, Map<Souscentre, ArrayList<Character>> souscentrePhasesProbMap, Map<Souscentre, ArrayList<Character>> souscentrePhasesBacMap) {
        indemforfaitChefESG = 0;
        indemastreChefESG = 0;
        totalChefESG = 0;
        nbexams = 0;
        fraistransESG = 50000;
        ArrayList<Character> phasesProbList = souscentrePhasesProbMap.get(souscentre);
        ArrayList<Character> phasesBacList = souscentrePhasesBacMap.get(souscentre);

        if (!phasesProbList.isEmpty() && !phasesBacList.isEmpty()) {
            nbexams = 2;
        }
        if ((phasesProbList.isEmpty() && !phasesBacList.isEmpty()) || (!phasesProbList.isEmpty() && phasesBacList.isEmpty())) {
            nbexams = 1;
        }
        if (nbexams == 1) {
            if ((phasesProbList.isEmpty() && phasesBacList.size() == 1) || (phasesProbList.size() == 1 && phasesBacList.isEmpty())) {
                indemforfaitChefESG = 40000;
                indemastreChefESG = 50000;
            }
            if ((phasesProbList.isEmpty() && phasesBacList.size() == 2) || (phasesProbList.size() == 2 && phasesBacList.isEmpty())) {
                indemforfaitChefESG = 60000;
                indemastreChefESG = 50000;
            }
            if ((phasesProbList.isEmpty() && phasesBacList.size() == 3) || (phasesProbList.size() == 3 && phasesBacList.isEmpty())) {
                indemforfaitChefESG = 80000;
                indemastreChefESG = 50000;
            }
        }
        if (nbexams == 2) {
            if (phasesProbList.size() == 1 && phasesBacList.size() == 1) {
                indemforfaitChefESG = 40000;
                indemastreChefESG = 100000;
            }
            if ((phasesProbList.size() == 1 && phasesBacList.size() == 2) || (phasesProbList.size() == 2 && phasesBacList.size() == 1)) {
                indemforfaitChefESG = 60000;
                indemastreChefESG = 100000;
            }
            if ((phasesProbList.size() == 1 && phasesBacList.size() == 3) || (phasesProbList.size() == 3 && phasesBacList.size() == 1)) {
                indemforfaitChefESG = 120000;
                indemastreChefESG = 100000;
            }
            if (phasesProbList.size() == 2 && phasesBacList.size() == 2) {
                indemforfaitChefESG = 60000;
                indemastreChefESG = 100000;
            }
            if ((phasesProbList.size() == 2 && phasesBacList.size() == 3) || (phasesProbList.size() == 3 && phasesBacList.size() == 2)) {
                indemforfaitChefESG = 120000;
                indemastreChefESG = 100000;
            }
            if (phasesProbList.size() == 3 && phasesBacList.size() == 3) {
                indemforfaitChefESG = 120000;
                indemastreChefESG = 100000;
            }
        }
        //calcul nbjoursdres de mission à la DRES/DDES
        misdres = 0;
        nbjoursdres = 0;
        if (fmissprimchefcentre.getLiaisondres()) {
            if (nbexams == 1) {
                if ((phasesProbList.isEmpty() && phasesBacList.size() == 1) || (phasesProbList.size() == 1 && phasesBacList.isEmpty())) {
                    nbjoursdres = 4;
                }
                if ((phasesProbList.isEmpty() && phasesBacList.size() == 2) || (phasesProbList.size() == 2 && phasesBacList.isEmpty())) {
                    nbjoursdres = 5;
                }
                if ((phasesProbList.isEmpty() && phasesBacList.size() == 3) || (phasesProbList.size() == 3 && phasesBacList.isEmpty())) {
                    nbjoursdres = 6;
                }
            }
            if (nbexams == 2) {
                if (phasesProbList.size() == 1 && phasesBacList.size() == 1) {
                    nbjoursdres = 5;
                }
                if ((phasesProbList.size() == 1 && phasesBacList.size() == 2) || (phasesProbList.size() == 2 && phasesBacList.size() == 1) || (phasesProbList.size() == 2 && phasesBacList.size() == 2)) {
                    nbjoursdres = 6;
                }
                if ((phasesProbList.size() == 1 && phasesBacList.size() == 3) || (phasesProbList.size() == 3 && phasesBacList.size() == 1) || (phasesProbList.size() == 3 && phasesBacList.size() == 2) || (phasesProbList.size() == 2 && phasesBacList.size() == 3) || (phasesProbList.size() == 3 && phasesBacList.size() == 3)) {
                    nbjoursdres = 7;
                }
            }
        }

        //calcul nbjourscentrebil de mission au centre de billetage
        miscentrebil = 0;
        nbjourscentrebil = 0;
        if (fmissprimchefcentre.getLiaisoncentrebil()) {
            if ((phasesProbList.isEmpty() && phasesBacList.size() == 1) || (phasesProbList.size() == 1 && phasesBacList.isEmpty()) || (phasesProbList.size() == 1 && phasesBacList.size() == 1)) {
                nbjourscentrebil = 1;
            }
            if ((phasesProbList.isEmpty() && phasesBacList.size() == 2) || (phasesProbList.size() == 2 && phasesBacList.isEmpty()) || (phasesProbList.size() == 2 && phasesBacList.size() == 2) || (phasesProbList.size() == 2 && phasesBacList.size() == 1) || (phasesProbList.size() == 1 && phasesBacList.size() == 2)) {
                nbjourscentrebil = 2;
            }
            if ((phasesProbList.isEmpty() && phasesBacList.size() == 3) || (phasesProbList.size() == 3 && phasesBacList.isEmpty()) || (phasesProbList.size() == 3 && phasesBacList.size() == 1) || (phasesProbList.size() == 1 && phasesBacList.size() == 3) || (phasesProbList.size() == 2 && phasesBacList.size() == 3) || (phasesProbList.size() == 3 && phasesBacList.size() == 2) || (phasesProbList.size() == 3 && phasesBacList.size() == 3)) {
                nbjourscentrebil = 3;
            }
        }

        //calcul prime de mega centre
        primeChefESG = fmissprimchefcentre.getPrime();

        //cas frais transport
        if (!fmissprimchefcentre.getFraistrans()) {
            fraistransESG = 0;
        }

        if (testSouscentreEnclave(souscentresEnclavesEnArrayList, souscentre)) {
            nbjoursdres += 1;
        }

        misdres = nbjoursdres * txjour;
        miscentrebil = nbjourscentrebil * txjour;

        fraismissChefESG = misdres + miscentrebil;
        totalChefESG = indemforfaitChefESG + indemastreChefESG + fraismissChefESG + primeChefESG + fraistransESG;
    }

    private void determinerCoutChefESTP(ArrayList<Souscentre> souscentresEnclavesEnArrayList, Souscentre souscentre, Fmissprimchefcentre fmissprimchefcentre, Map<Souscentre, ArrayList<Character>> souscentrePhasesProbIndMap, Map<Souscentre, ArrayList<Character>> souscentrePhasesBacIndMap, Map<Souscentre, ArrayList<Character>> souscentrePhasesProbComMap, Map<Souscentre, ArrayList<Character>> souscentrePhasesBacComMap) {
        indemforfaitChefESTP = 0;
        indemastreChefESTP = 0;
        totalChefESTP = 0;
        nbexams = 0;
        fraistransESTP = 50000;
        //détermination de phasesList
        ArrayList<Character> phasesList = new ArrayList<>();//toutes les phases du souscentre
        ArrayList<Character> phasesList1 = souscentrePhasesProbIndMap.get(souscentre);
        if (!phasesList1.isEmpty()) {
            for (char c : phasesList1) {
                if (!phasesList.contains(c)) {
                    phasesList.add(c);
                }
            }
        }
        ArrayList<Character> phasesList2 = souscentrePhasesBacIndMap.get(souscentre);
        if (!phasesList2.isEmpty()) {
            for (char c : phasesList2) {
                if (!phasesList.contains(c)) {
                    phasesList.add(c);
                }
            }
        }
        ArrayList<Character> phasesList3 = souscentrePhasesProbComMap.get(souscentre);
        if (!phasesList3.isEmpty()) {
            for (char c : phasesList3) {
                if (!phasesList.contains(c)) {
                    phasesList.add(c);
                }
            }
        }
        ArrayList<Character> phasesList4 = souscentrePhasesBacComMap.get(souscentre);
        if (!phasesList4.isEmpty()) {
            for (char c : phasesList4) {
                if (!phasesList.contains(c)) {
                    phasesList.add(c);
                }
            }
        }

        //détermination du nbexams
        if (!phasesList1.isEmpty() && !phasesList2.isEmpty() && !phasesList3.isEmpty() && !phasesList4.isEmpty()) {
            nbexams = 4;
        }
        if ((!phasesList1.isEmpty() && !phasesList2.isEmpty() && !phasesList3.isEmpty() && phasesList4.isEmpty()) || (!phasesList1.isEmpty() && !phasesList2.isEmpty() && phasesList3.isEmpty() && !phasesList4.isEmpty()) || (!phasesList1.isEmpty() && phasesList2.isEmpty() && !phasesList3.isEmpty() && !phasesList4.isEmpty()) || (phasesList1.isEmpty() && !phasesList2.isEmpty() && !phasesList3.isEmpty() && !phasesList4.isEmpty())) {
            nbexams = 3;
        }
        if ((!phasesList1.isEmpty() && !phasesList2.isEmpty() && phasesList3.isEmpty() && phasesList4.isEmpty()) || (phasesList1.isEmpty() && phasesList2.isEmpty() && !phasesList3.isEmpty() && !phasesList4.isEmpty()) || (!phasesList1.isEmpty() && phasesList2.isEmpty() && phasesList3.isEmpty() && !phasesList4.isEmpty()) || (phasesList1.isEmpty() && !phasesList2.isEmpty() && !phasesList3.isEmpty() && phasesList4.isEmpty()) || (phasesList1.isEmpty() && !phasesList2.isEmpty() && phasesList3.isEmpty() && !phasesList4.isEmpty()) || (!phasesList1.isEmpty() && phasesList2.isEmpty() && !phasesList3.isEmpty() && phasesList4.isEmpty())) {
            nbexams = 2;
        }
        if ((!phasesList1.isEmpty() && phasesList2.isEmpty() && phasesList3.isEmpty() && phasesList4.isEmpty()) || (phasesList1.isEmpty() && !phasesList2.isEmpty() && phasesList3.isEmpty() && phasesList4.isEmpty()) || (phasesList1.isEmpty() && phasesList2.isEmpty() && !phasesList3.isEmpty() && phasesList4.isEmpty()) || (phasesList1.isEmpty() && phasesList2.isEmpty() && phasesList3.isEmpty() && !phasesList4.isEmpty())) {
            nbexams = 1;
        }

        if (nbexams == 1) {
            indemforfaitChefESTP = 60000;
            indemastreChefESTP = 50000;
        }
        if (nbexams == 2) {
            indemforfaitChefESTP = 60000;
            if (phasesList.size() > 2) {
                indemforfaitChefESTP = 150000;
            }
            indemastreChefESTP = 100000;
        }
        if (nbexams >= 3) {
            indemforfaitChefESTP = 60000;
            if (phasesList.size() > 2) {
                indemforfaitChefESTP = 150000;
            }
            indemastreChefESTP = 150000;
        }

        //calcul nbjoursdres de mission à la DRES/DDES
        misdres = 0;
        nbjoursdres = 0;

        if (fmissprimchefcentre.getLiaisondres()) {
            if (phasesList.size() == 2) {
                nbjoursdres = 6;
            }
            if (phasesList.size() == 1 && phasesList.contains('P')) {
                nbjoursdres = 2;
            }
            if (phasesList.size() == 4) {
                nbjoursdres = 8;
            }
        }

        //calcul nbjourscentrebil de mission au centre de billetage
        miscentrebil = 0;
        nbjourscentrebil = 0;
        if (fmissprimchefcentre.getLiaisoncentrebil()) {
            if (phasesList.size() == 2) {
                nbjourscentrebil = 2;
            }
            if (phasesList.size() == 1 && phasesList.contains('P')) {
                nbjourscentrebil = 1;
            }
            if (phasesList.size() == 4) {
                nbjourscentrebil = 3;
            }
        }

        //calcul prime de mega centre
        primeChefESTP = fmissprimchefcentre.getPrime();

        //cas frais transport
        if (!fmissprimchefcentre.getFraistrans()) {
            fraistransESTP = 0;
        }
        
        if (testSouscentreEnclave(souscentresEnclavesEnArrayList, souscentre)) {
            nbjoursdres += 1;
        }

        misdres = nbjoursdres * txjour;
        miscentrebil = nbjourscentrebil * txjour;
        
        fraismissChefESTP = misdres + miscentrebil;
        totalChefESTP = indemforfaitChefESTP + indemastreChefESTP + fraismissChefESTP + primeChefESTP + fraistransESTP;
    }

    private void determinerCoutAssistantESG(Souscentre souscentre, Fmissprimchefcentre fmissprimchefcentre, Map<Souscentre, ArrayList<Character>> souscentrePhasesProbMap, Map<Souscentre, ArrayList<Character>> souscentrePhasesBacMap) {
        indemforfaitAssistantESG = 0;
        indemastreAssistantESG = 0;
        totalAssistantESG = 0;
        nbexams = 0;
        fraistransESG = 50000;
        ArrayList<Character> phasesProbList = souscentrePhasesProbMap.get(souscentre);
        ArrayList<Character> phasesBacList = souscentrePhasesBacMap.get(souscentre);
        if (!phasesProbList.isEmpty() && !phasesBacList.isEmpty()) {
            nbexams = 2;
        }
        if ((phasesProbList.isEmpty() && !phasesBacList.isEmpty()) || (!phasesProbList.isEmpty() && phasesBacList.isEmpty())) {
            nbexams = 1;
        }

        if (nbexams == 1) {
            if ((phasesProbList.isEmpty() && phasesBacList.size() == 1) || (phasesProbList.size() == 1 && phasesBacList.isEmpty())) {
                indemforfaitAssistantESG = 40000;
                indemastreAssistantESG = 50000;
            }
            if ((phasesProbList.isEmpty() && phasesBacList.size() == 2) || (phasesProbList.size() == 2 && phasesBacList.isEmpty())) {
                indemforfaitAssistantESG = 60000;
                indemastreAssistantESG = 50000;
            }
            if ((phasesProbList.isEmpty() && phasesBacList.size() == 3) || (phasesProbList.size() == 3 && phasesBacList.isEmpty())) {
                indemforfaitAssistantESG = 60000;
                indemastreAssistantESG = 50000;
            }
        }
        if (nbexams == 2) {
            if (phasesProbList.size() == 1 && phasesBacList.size() == 1) {
                indemforfaitAssistantESG = 40000;
                indemastreAssistantESG = 100000;
            }
            if ((phasesProbList.size() == 1 && phasesBacList.size() == 2) || (phasesProbList.size() == 2 && phasesBacList.size() == 1)) {
                indemforfaitAssistantESG = 60000;
                indemastreAssistantESG = 100000;
            }
            if ((phasesProbList.size() == 1 && phasesBacList.size() == 3) || (phasesProbList.size() == 3 && phasesBacList.size() == 1)) {
                indemforfaitAssistantESG = 60000;
                indemastreAssistantESG = 100000;
            }
            if (phasesProbList.size() == 2 && phasesBacList.size() == 2) {
                indemforfaitAssistantESG = 60000;
                indemastreAssistantESG = 100000;
            }
            if ((phasesProbList.size() == 2 && phasesBacList.size() == 3) || (phasesProbList.size() == 3 && phasesBacList.size() == 2)) {
                indemforfaitAssistantESG = 60000;
                indemastreAssistantESG = 100000;
            }
            if (phasesProbList.size() == 3 && phasesBacList.size() == 3) {
                indemforfaitAssistantESG = 60000;
                indemastreAssistantESG = 100000;
            }
        }

        //cas frais transport       
        if (!fmissprimchefcentre.getFraistrans()) {
            fraistransESG = 0;
        }
        totalAssistantESG = indemforfaitAssistantESG + indemastreAssistantESG + fraistransESG;
    }

    private void determinerCoutAssistantESTP(Souscentre souscentre, Fmissprimchefcentre fmissprimchefcentre, Map<Souscentre, ArrayList<Character>> souscentrePhasesProbIndMap, Map<Souscentre, ArrayList<Character>> souscentrePhasesBacIndMap, Map<Souscentre, ArrayList<Character>> souscentrePhasesProbComMap, Map<Souscentre, ArrayList<Character>> souscentrePhasesBacComMap) {
        indemforfaitAssistantESTP = 0;
        indemastreAssistantESTP = 0;
        totalAssistantESTP = 0;
        nbexams = 0;
        fraistransESTP = 50000;
        //détermination de phasesList
        ArrayList<Character> phasesList1 = souscentrePhasesProbIndMap.get(souscentre);
        ArrayList<Character> phasesList2 = souscentrePhasesBacIndMap.get(souscentre);
        ArrayList<Character> phasesList3 = souscentrePhasesProbComMap.get(souscentre);
        ArrayList<Character> phasesList4 = souscentrePhasesBacComMap.get(souscentre);

        //détermination du nbexams
        if (!phasesList1.isEmpty() && !phasesList2.isEmpty() && !phasesList3.isEmpty() && !phasesList4.isEmpty()) {
            nbexams = 4;
        }
        if ((!phasesList1.isEmpty() && !phasesList2.isEmpty() && !phasesList3.isEmpty() && phasesList4.isEmpty()) || (!phasesList1.isEmpty() && !phasesList2.isEmpty() && phasesList3.isEmpty() && !phasesList4.isEmpty()) || (!phasesList1.isEmpty() && phasesList2.isEmpty() && !phasesList3.isEmpty() && !phasesList4.isEmpty()) || (phasesList1.isEmpty() && !phasesList2.isEmpty() && !phasesList3.isEmpty() && !phasesList4.isEmpty())) {
            nbexams = 3;
        }
        if ((!phasesList1.isEmpty() && !phasesList2.isEmpty() && phasesList3.isEmpty() && phasesList4.isEmpty()) || (phasesList1.isEmpty() && phasesList2.isEmpty() && !phasesList3.isEmpty() && !phasesList4.isEmpty()) || (!phasesList1.isEmpty() && phasesList2.isEmpty() && phasesList3.isEmpty() && !phasesList4.isEmpty()) || (phasesList1.isEmpty() && !phasesList2.isEmpty() && !phasesList3.isEmpty() && phasesList4.isEmpty()) || (phasesList1.isEmpty() && !phasesList2.isEmpty() && phasesList3.isEmpty() && !phasesList4.isEmpty()) || (!phasesList1.isEmpty() && phasesList2.isEmpty() && !phasesList3.isEmpty() && phasesList4.isEmpty())) {
            nbexams = 2;
        }
        if ((!phasesList1.isEmpty() && phasesList2.isEmpty() && phasesList3.isEmpty() && phasesList4.isEmpty()) || (phasesList1.isEmpty() && !phasesList2.isEmpty() && phasesList3.isEmpty() && phasesList4.isEmpty()) || (phasesList1.isEmpty() && phasesList2.isEmpty() && !phasesList3.isEmpty() && phasesList4.isEmpty()) || (phasesList1.isEmpty() && phasesList2.isEmpty() && phasesList3.isEmpty() && !phasesList4.isEmpty())) {
            nbexams = 1;
        }

        if (nbexams == 1) {
            indemforfaitAssistantESTP = 60000;
            indemastreAssistantESTP = 50000;
        }
        if (nbexams == 2) {
            indemforfaitAssistantESTP = 60000;
            indemastreAssistantESTP = 100000;
        }
        if (nbexams >= 3) {
            indemforfaitAssistantESTP = 150000;
            indemastreAssistantESTP = 100000;
        }
        //cas frais transport
        if (!fmissprimchefcentre.getFraistrans()) {
            fraistransESTP = 0;
        }

        totalAssistantESTP = indemforfaitAssistantESTP + indemastreAssistantESTP + fraistransESTP;
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    private boolean testSouscentreEnclave(ArrayList<Souscentre> souscentresEnclavesEnArrayList, Souscentre souscentre) {
        boolean result = false;
        if (souscentresEnclavesEnArrayList.contains(souscentre)) {
            result = true;
        }
        return result;
    }
}
