package couche_ui;


import couche_jpa.Examen;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;


public class VueExamen extends javax.swing.JFrame {

    DefaultTableModel model;
    
    public VueExamen() {
        initComponents();
        model=(DefaultTableModel) jTable1.getModel();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabelNom = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldNom = new javax.swing.JTextField();
        jTextFieldSigle = new javax.swing.JTextField();
        jTextFieldNombreEpreuve = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonCréer = new javax.swing.JButton();
        jButtonRechercher = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButtonVisualiser = new javax.swing.JButton();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jLabelNiveau = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("EXAMEN");

        jLabelNom.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNom.setText("Nom :");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Sigle :");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("Nombre d'épreuves communes :");

        jTextFieldNom.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jTextFieldSigle.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jTextFieldNombreEpreuve.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldNombreEpreuve.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextFieldNombreEpreuveCaretUpdate(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "N° Ordre", "Examen", "Sigle", "Type", "Niveau", "Nombre d'épreuves communes", "Version"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(true);
        jTable1.setShowVerticalLines(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButtonCréer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCréer.setText("Créer");
        jButtonCréer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCréerActionPerformed(evt);
            }
        });

        jButtonRechercher.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonRechercher.setText("Rechercher");
        jButtonRechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRechercherActionPerformed(evt);
            }
        });

        jButtonModifier.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonModifier.setText("Modifier");
        jButtonModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierActionPerformed(evt);
            }
        });

        jButtonSupprimer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jButtonAnnuler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(225, 0, 0));
        jLabel4.setText("(compris entre 1 et 20 inclus)");

        jButtonVisualiser.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiser.setText("Visualiser");
        jButtonVisualiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserActionPerformed(evt);
            }
        });

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveau.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 931, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(377, 377, 377)
                            .addComponent(jLabel1))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(114, 114, 114)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel4))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldNombreEpreuve, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(jLabelType)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelNiveau)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(106, 106, 106)
                                .addComponent(jButtonCréer)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonRechercher)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonModifier)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonSupprimer)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonAnnuler)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonFermer)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonVisualiser))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(298, 298, 298)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabelNom))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldSigle, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldNom, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelNom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldNom, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldSigle, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldNombreEpreuve, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel4)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonRechercher, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonModifier, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonCréer, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonSupprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonAnnuler, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonVisualiser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        videFrame();
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jButtonCréerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCréerActionPerformed
        model.setRowCount(0);//vide la jTable
        validateNbEpreuve();
        if(continuer){
            if(nbepreuvecomSaisi<=0 || nbepreuvecomSaisi>20) JOptionPane.showMessageDialog(this, " Le nombre d'épreuves communes doit être un entier positif inférieur ou égal à 20 !");
            else{
                infoSaisies();           
                if(!nomSaisi.equals("") && !sigleSaisi.equals("") && !typeSelected.equals("---") && !niveauSelected.equals("---")){
                    try{
                        metier.creerExamen(new Examen(nomSaisi.toUpperCase(),sigleSaisi.toUpperCase(),nbepreuvecomSaisi,typeSelected,niveauSelected));
                        JOptionPane.showMessageDialog(this, " Examen créée avec succès !"); 
                        //videFrame();
                        examens=metier.findAllExamens();
                        int i=1;
                        for(Examen e:examens){
                            model.insertRow(model.getRowCount(),new Object[]{e.getIdexam(), i++,e.getNomexam(), e.getSigle(),e.getType(),e.getNiveau(),e.getNbepreuvecom(),e.getVersion()});
                        }
                    }catch(ObcbudgetException ex){
                        JOptionPane.showMessageDialog(this, "Impossible de créer l'examen de nom ["+nomSaisi+"] \n raison:"+ex.getMessage());
                    }
                }
                else JOptionPane.showMessageDialog(this, " Tous les champs sont obligatoires !");    
            }
        }
        else JOptionPane.showMessageDialog(this, " Nombre d'épreuves communes rejeté ! "); 
    }//GEN-LAST:event_jButtonCréerActionPerformed

    private void jButtonRechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRechercherActionPerformed
        model.setRowCount(0);//vide la jTable
        nomSaisi=jTextFieldNom.getText();    
        if(!nomSaisi.equals("") && !nomSaisi.equalsIgnoreCase("tous")){
            try{
                examensRecherches=metier.findAllExamensLikeName(nomSaisi.toUpperCase());
                int i=1;
                for(Examen e:examensRecherches){
                    model.insertRow(model.getRowCount(),new Object[]{e.getIdexam(), i++,e.getNomexam(), e.getSigle(),e.getType(),e.getNiveau(),e.getNbepreuvecom(),e.getVersion()});
                } 
            }catch(ObcbudgetException ex){
                    JOptionPane.showMessageDialog(this, "Impossible de trouver des examens de nom proche de ["+nomSaisi+"] \n raison:"+ex.getMessage()); 
            } 
        }
        else{
            if(nomSaisi.equals("")) JOptionPane.showMessageDialog(this, " Le champ nom est obligatoire !");
            else{
                examens=metier.findAllExamens();
                int i=1;
                for(Examen e:examens){
                    model.insertRow(model.getRowCount(),new Object[]{e.getIdexam(), i++,e.getNomexam(), e.getSigle(),e.getType(),e.getNiveau(),e.getNbepreuvecom(),e.getVersion()});
                } 
            }
        }         
    }//GEN-LAST:event_jButtonRechercherActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        //remplit les champs
        int ligne=jTable1.getSelectedRow();
        idExamenCliked=(int) model.getValueAt(ligne,0);
        jTextFieldNom.setText((String) model.getValueAt(ligne,2));
        jTextFieldSigle.setText((String) model.getValueAt(ligne,3));
        jComboBoxType.setSelectedItem((String) model.getValueAt(ligne,4));
        jComboBoxNiveau.setSelectedItem((String) model.getValueAt(ligne,5));
        jTextFieldNombreEpreuve.setText(""+ model.getValueAt(ligne,6));
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButtonModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierActionPerformed
        model.setRowCount(0);//vide la jTable
        validateNbEpreuve();
        if(continuer){
            if(nbepreuvecomSaisi<=0 || nbepreuvecomSaisi>20) JOptionPane.showMessageDialog(this, " Le nombre d'épreuves communes doit être un entier positif inférieur ou égal à 20 !");
            else{
                infoSaisies();
                int result = JOptionPane.showConfirmDialog(this,"Voulez-vous vraiment modifier ce centre?", "confirmation de modification",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                if(result == JOptionPane.YES_OPTION){
                    if(!nomSaisi.equals("") && !sigleSaisi.equals("")){
                        examenCliked=metier.findExamenById(idExamenCliked);
                        examenCliked.setNomexam(nomSaisi.toUpperCase());
                        examenCliked.setSigle(sigleSaisi.toUpperCase());
                        examenCliked.setNbepreuvecom(nbepreuvecomSaisi);
                        examenCliked.setType(typeSelected);
                        examenCliked.setNiveau(niveauSelected);
                        try{
                            metier.modifierExamen(examenCliked);
                            JOptionPane.showMessageDialog(this, " Examen modifié avec succès !"); 
                            //videFrame();
                            int i=1;
                            examens=metier.findAllExamens();
                            for(Examen e:examens){
                                model.insertRow(model.getRowCount(),new Object[]{e.getIdexam(), i++,e.getNomexam(), e.getSigle(),e.getType(),e.getNiveau(),e.getNbepreuvecom(),e.getVersion()});
                            } 
                        }catch(ObcbudgetException ex){
                            JOptionPane.showMessageDialog(this, "Impossible de modifier l'examen de nom ["+nomSaisi+"] \n raison:"+ex.getMessage()); 
                        }                        
                    }
                    else JOptionPane.showMessageDialog(this, " Tous les champs sont obligatoires !");                
                }
                /*
                else if (result == JOptionPane.NO_OPTION){
                       label.setText("You selected: No");
                    }
                */    
            }
        }
        else JOptionPane.showMessageDialog(this, " Nombre d'épreuves communes rejeté ! "); 
    }//GEN-LAST:event_jButtonModifierActionPerformed

    private void jTextFieldNombreEpreuveCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextFieldNombreEpreuveCaretUpdate
               
    }//GEN-LAST:event_jTextFieldNombreEpreuveCaretUpdate

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        //model.setRowCount(0);//vide la jTable
        infoSaisies();  
        int result = JOptionPane.showConfirmDialog(this,"Voulez-vous vraiment supprimer cet examen?", "confirmation de suppression",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if(result == JOptionPane.YES_OPTION){
            if(!nomSaisi.equals("") && !sigleSaisi.equals("")){                
                try{
                    metier.supprimerExamen(metier.findExamenById(idExamenCliked));
                    JOptionPane.showMessageDialog(this, " Examen supprimé avec succès !"); 
                    //videFrame();
                    examens=metier.findAllExamens();
                    int i=1;
                    for(Examen e:examens){
                        model.insertRow(model.getRowCount(),new Object[]{e.getIdexam(), i++,e.getNomexam(), e.getSigle(),e.getType(),e.getNiveau(),e.getNbepreuvecom(),e.getVersion()});
                    }
                }catch(ObcbudgetException ex){
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer le centre de nom ["+nomSaisi+"] \n raison:"+ex.getMessage()); 
                }                        
            }
            else JOptionPane.showMessageDialog(this, " Tous les champs sont obligatoires !"); 
        }
        /*
        else if (result == JOptionPane.NO_OPTION){
               label.setText("You selected: No");
            }
        */
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jButtonVisualiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserActionPerformed
        examens=metier.findAllExamens();
        try{
            List<Map<String, Object>> datasource=new ArrayList<>();
            int i=1;
            for(Examen examen:examens){               
                Map<String, Object> row=new HashMap<>();
                row.put("numero",i++);
                row.put("nom",examen.getNomexam());
                row.put("sigle",examen.getSigle());
                row.put("type",examen.getType());
                row.put("niveau",examen.getNiveau());
                row.put("nbepreuvecom",examen.getNbepreuvecom());                
                datasource.add(row);                                  
            }            
            JRDataSource jRDataSource=new JRBeanCollectionDataSource(datasource);
            JasperReport jasperReport=JasperCompileManager.compileReport("src\\main\\java\\reports\\examenReport.jrxml");
            JasperPrint jasperPrint=JasperFillManager.fillReport(jasperReport,null, jRDataSource);                                            
            JasperViewer jasperViewer=new JasperViewer(jasperPrint,false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
            jasperViewer.setVisible(true);
        }catch(JRException e){
            JOptionPane.showMessageDialog(this, e.getMessage()); 
        }
    }//GEN-LAST:event_jButtonVisualiserActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueExamen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueExamen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueExamen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueExamen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueExamen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonCréer;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonRechercher;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JButton jButtonVisualiser;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelNiveau;
    private javax.swing.JLabel jLabelNom;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldNom;
    private javax.swing.JTextField jTextFieldNombreEpreuve;
    private javax.swing.JTextField jTextFieldSigle;
    // End of variables declaration//GEN-END:variables

   // variables d'instance
    private IMetier metier=null;
    private String nomSaisi="";
    private List<Examen> examensRecherches=null;
    private String sigleSaisi="";
    private String typeSelected="";
    private String[] typesCombo=null;
    private String[] niveauxCombo=null;
    private String niveauSelected="";
    private int nbepreuvecomSaisi=0;
    private List<Examen> examens=null;
    private int idExamenCliked=0;
    private Examen examenCliked=null;
    private boolean continuer=false;
    
    
    private void doMyInit(){
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        
        //on remplit la combobox des types
        typesCombo=new String[]{"---","GEN", "IND", "IND PROF","STT","STT PROF"};       
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));
        
        //on remplit la combobox des niveaux
        niveauxCombo=new String[]{"---","PROB","BACC"};       
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));
    }
    
    private void infoSaisies(){
        nomSaisi=jTextFieldNom.getText();
        sigleSaisi=jTextFieldSigle.getText();
        typeSelected=(String) jComboBoxType.getSelectedItem();
        niveauSelected=(String) jComboBoxNiveau.getSelectedItem();
    }
    private void videFrame(){
        jTextFieldNom.setText("");
        jTextFieldSigle.setText("");
        jTextFieldNombreEpreuve.setText("");
        jComboBoxType.setSelectedItem("---");
        jComboBoxNiveau.setSelectedItem("---");
        model.setRowCount(0);//vide la jTable
    } 
    
    private void validateNbEpreuve(){
        String chaine=jTextFieldNombreEpreuve.getText();
        try {
                int nombre = Integer.parseInt(chaine);
                nbepreuvecomSaisi=nombre;
                continuer=true;
            }catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, " Le nombre d'épreuves communes doit être fourni et contenir uniquement des chiffres entiers!");
                continuer=false;
            }
    }
}
