package couche_ui;

import couche_jpa.Arrondissement;
import couche_jpa.Centre;
import couche_jpa.Centrebilletage;
import couche_jpa.Departement;
import couche_jpa.Region;
import couche_jpa.Secteurcouv;
import couche_jpa.Souscentre;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueSecteurcouverture extends javax.swing.JFrame {

    DefaultTableModel model;

    public VueSecteurcouverture() {
        initComponents();
        model = (DefaultTableModel) jTable1.getModel();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonCreer = new javax.swing.JButton();
        jButtonRechercher = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jPanelCentreDeliberation = new javax.swing.JPanel();
        jLabeNomSouscentre = new javax.swing.JLabel();
        jComboBoxSouscentre = new javax.swing.JComboBox<>();
        jLabelArrondissementSouscentre = new javax.swing.JLabel();
        jComboBoxArrondissementSouscentre = new javax.swing.JComboBox<>();
        jLabelDepartementSouscentre = new javax.swing.JLabel();
        jComboBoxDepartementSouscentre = new javax.swing.JComboBox<>();
        jComboBoxRegionSouscentre = new javax.swing.JComboBox<>();
        jLabelRegionSouscentre = new javax.swing.JLabel();
        jPanelCentrebilletage = new javax.swing.JPanel();
        jLabelNiveau = new javax.swing.JLabel();
        jLabelType = new javax.swing.JLabel();
        jLabelNomCentrebilletage = new javax.swing.JLabel();
        jTextFieldNiveau = new javax.swing.JTextField();
        jTextFieldType = new javax.swing.JTextField();
        jLabelDepartementBilletage = new javax.swing.JLabel();
        jComboBoxDepartementBilletage = new javax.swing.JComboBox<>();
        jLabelArrondissementBilletage = new javax.swing.JLabel();
        jComboBoxArrondissementBilletage = new javax.swing.JComboBox<>();
        jComboBoxCentrebilletage = new javax.swing.JComboBox<>();
        jLabelRegionCentreBilletage = new javax.swing.JLabel();
        jComboBoxRegionCentreBilletage = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jPanelEtats = new javax.swing.JPanel();
        jButtonRattaches = new javax.swing.JButton();
        jButtonNonRattaches = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 30)); // NOI18N
        jLabel1.setText("RATTACHEMENT DES SOUS-CENTRES D'EXAMEN");

        jTable1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "N° Ordre", "Région centre billetage", "Départ. centre billetage", "Arrond. centre billetage", "Centre de billetage", "Région sous-centre", "Départ. sous-centre", "Arrond. sous-centre", "Sous-centre"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(true);
        jTable1.setShowVerticalLines(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButtonCreer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreer.setText("Créer");
        jButtonCreer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerActionPerformed(evt);
            }
        });

        jButtonRechercher.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonRechercher.setText("Rechercher");
        jButtonRechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRechercherActionPerformed(evt);
            }
        });

        jButtonSupprimer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jButtonAnnuler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jPanelCentreDeliberation.setBackground(new java.awt.Color(255, 204, 255));
        jPanelCentreDeliberation.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sous-centre d'examen", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(51, 0, 204))); // NOI18N

        jLabeNomSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabeNomSouscentre.setText("Nom du sous-centre:");

        jComboBoxSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSouscentreActionPerformed(evt);
            }
        });

        jLabelArrondissementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissementSouscentre.setText("Arrondissement :");

        jComboBoxArrondissementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissementSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementSouscentreActionPerformed(evt);
            }
        });

        jLabelDepartementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartementSouscentre.setText("Département :");

        jComboBoxDepartementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartementSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementSouscentreActionPerformed(evt);
            }
        });

        jComboBoxRegionSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegionSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionSouscentreActionPerformed(evt);
            }
        });

        jLabelRegionSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegionSouscentre.setText("Région :");

        javax.swing.GroupLayout jPanelCentreDeliberationLayout = new javax.swing.GroupLayout(jPanelCentreDeliberation);
        jPanelCentreDeliberation.setLayout(jPanelCentreDeliberationLayout);
        jPanelCentreDeliberationLayout.setHorizontalGroup(
            jPanelCentreDeliberationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCentreDeliberationLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelCentreDeliberationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelDepartementSouscentre, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelArrondissementSouscentre, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabeNomSouscentre, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelRegionSouscentre, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCentreDeliberationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxRegionSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelCentreDeliberationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jComboBoxDepartementSouscentre, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBoxArrondissementSouscentre, 0, 342, Short.MAX_VALUE)
                        .addComponent(jComboBoxSouscentre, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(23, 23, 23))
        );
        jPanelCentreDeliberationLayout.setVerticalGroup(
            jPanelCentreDeliberationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCentreDeliberationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCentreDeliberationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxRegionSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRegionSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelCentreDeliberationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDepartementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxDepartementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelCentreDeliberationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelCentreDeliberationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabeNomSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelCentrebilletage.setBackground(new java.awt.Color(153, 255, 153));
        jPanelCentrebilletage.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Centre de billetage", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(51, 0, 204))); // NOI18N

        jLabelNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveau.setText("Niveau :");

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jLabelNomCentrebilletage.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNomCentrebilletage.setText("Nom du centre :");

        jTextFieldNiveau.setEditable(false);
        jTextFieldNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldNiveau.setEnabled(false);

        jTextFieldType.setEditable(false);
        jTextFieldType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldType.setEnabled(false);
        jTextFieldType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldTypeActionPerformed(evt);
            }
        });

        jLabelDepartementBilletage.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartementBilletage.setText("Département :");

        jComboBoxDepartementBilletage.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartementBilletage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementBilletageActionPerformed(evt);
            }
        });

        jLabelArrondissementBilletage.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissementBilletage.setText("Arrondissement :");

        jComboBoxArrondissementBilletage.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissementBilletage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementBilletageActionPerformed(evt);
            }
        });

        jComboBoxCentrebilletage.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxCentrebilletage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCentrebilletageActionPerformed(evt);
            }
        });

        jLabelRegionCentreBilletage.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegionCentreBilletage.setText("Région :");

        jComboBoxRegionCentreBilletage.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegionCentreBilletage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionCentreBilletageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelCentrebilletageLayout = new javax.swing.GroupLayout(jPanelCentrebilletage);
        jPanelCentrebilletage.setLayout(jPanelCentrebilletageLayout);
        jPanelCentrebilletageLayout.setHorizontalGroup(
            jPanelCentrebilletageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCentrebilletageLayout.createSequentialGroup()
                .addGroup(jPanelCentrebilletageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCentrebilletageLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabelNiveau)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldType, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelCentrebilletageLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPanelCentrebilletageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelDepartementBilletage)
                            .addComponent(jLabelArrondissementBilletage)
                            .addComponent(jLabelNomCentrebilletage)
                            .addComponent(jLabelRegionCentreBilletage))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelCentrebilletageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxArrondissementBilletage, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxDepartementBilletage, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxCentrebilletage, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxRegionCentreBilletage, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanelCentrebilletageLayout.setVerticalGroup(
            jPanelCentrebilletageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCentrebilletageLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanelCentrebilletageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelRegionCentreBilletage, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxRegionCentreBilletage, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelCentrebilletageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxDepartementBilletage, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDepartementBilletage, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelCentrebilletageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelArrondissementBilletage, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxArrondissementBilletage, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelCentrebilletageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNomCentrebilletage, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxCentrebilletage, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanelCentrebilletageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldType, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Arial", 1, 30)); // NOI18N
        jLabel2.setText("AUX CENTRES DE BILLETAGE (SECTEURS DE COUVERTURE)");

        jPanelEtats.setBackground(new java.awt.Color(0, 255, 51));
        jPanelEtats.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Visualiser/imprimer les sous-centres", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jButtonRattaches.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonRattaches.setText("Rattachés");
        jButtonRattaches.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRattachesActionPerformed(evt);
            }
        });

        jButtonNonRattaches.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonNonRattaches.setText("Non rattachés");
        jButtonNonRattaches.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNonRattachesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelEtatsLayout = new javax.swing.GroupLayout(jPanelEtats);
        jPanelEtats.setLayout(jPanelEtatsLayout);
        jPanelEtatsLayout.setHorizontalGroup(
            jPanelEtatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEtatsLayout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addComponent(jButtonRattaches)
                .addGap(108, 108, 108)
                .addComponent(jButtonNonRattaches)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelEtatsLayout.setVerticalGroup(
            jPanelEtatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEtatsLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanelEtatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButtonNonRattaches, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(jButtonRattaches, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(192, 192, 192)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(109, 109, 109)
                                .addComponent(jLabel2)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jPanelCentrebilletage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButtonCreer)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButtonRechercher)
                                        .addGap(19, 19, 19)
                                        .addComponent(jButtonSupprimer)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButtonAnnuler)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButtonFermer)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanelCentreDeliberation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanelEtats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(14, 14, 14))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelCentrebilletage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonCreer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonRechercher, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonSupprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonAnnuler, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelCentreDeliberation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanelEtats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        videFrame();
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jComboBoxRegionCentreBilletageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionCentreBilletageActionPerformed
        remplirDepartementBilletageCombobox();
    }//GEN-LAST:event_jComboBoxRegionCentreBilletageActionPerformed

    private void jComboBoxDepartementBilletageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementBilletageActionPerformed
        remplirArrondissementBilletageCombobox();
    }//GEN-LAST:event_jComboBoxDepartementBilletageActionPerformed

    private void jComboBoxArrondissementBilletageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementBilletageActionPerformed
        remplirCentrebilletageCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementBilletageActionPerformed

    private void jButtonCreerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        if (!nomCentrebilletageSelected.equals("---") && !nomSouscentreSelected.equals("---")) {
            for (Centrebilletage centrebill : centrebilletages) {
                if (centrebill.getEtablissement().getAbreviation().equals(nomCentrebilletageSelected)) {
                    centrebilletageSelected = centrebill;
                    break;
                }
            }
            for (Souscentre souscentre : souscentres) {
                if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                    souscentreSelected = souscentre;
                    break;
                }
            }
            try {
                metier.creerSecteurcouv(new Secteurcouv(centrebilletageSelected, souscentreSelected));
                JOptionPane.showMessageDialog(this, "Secteur de couverture créé avec succès !");
                //videFrame();
                int i = 1;
                secteurscouv = metier.findAllSecteurscouvD1Centrebilletage(nomCentrebilletageSelected);
                for (Secteurcouv sect : secteurscouv) {
                    model.insertRow(model.getRowCount(), new Object[]{sect.getIdsecteurcouv(), i++, sect.getCentrebilletage().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), sect.getCentrebilletage().getEtablissement().getArrondissement().getDepartement().getNomdepart(), sect.getCentrebilletage().getEtablissement().getArrondissement().getNomarr(), sect.getCentrebilletage().getEtablissement().getAbreviation(), sect.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), sect.getSouscentre().getEtablissement().getArrondissement().getDepartement().getNomdepart(), sect.getSouscentre().getEtablissement().getArrondissement().getNomarr(), sect.getSouscentre().getNomsouscent()});
                }
            } catch (ObcbudgetException ex) {
                JOptionPane.showMessageDialog(this, "Impossible d'extraire les secteurs de couverture du centre de billetage [" + nomCentrebilletageSelected + "] \n raison:" + ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
        }
        secteurscouv.clear();
    }//GEN-LAST:event_jButtonCreerActionPerformed

    private void jButtonRechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRechercherActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        if (!nomCentrebilletageSelected.equals("---")) {
            try {
                secteurscouv = metier.findAllSecteurscouvD1Centrebilletage(nomCentrebilletageSelected);
                int i = 0;
                for (Secteurcouv sect : secteurscouv) {
                    model.insertRow(model.getRowCount(), new Object[]{sect.getIdsecteurcouv(), i++, sect.getCentrebilletage().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), sect.getCentrebilletage().getEtablissement().getArrondissement().getDepartement().getNomdepart(), sect.getCentrebilletage().getEtablissement().getArrondissement().getNomarr(), sect.getCentrebilletage().getEtablissement().getAbreviation(), sect.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), sect.getSouscentre().getEtablissement().getArrondissement().getDepartement().getNomdepart(), sect.getSouscentre().getEtablissement().getArrondissement().getNomarr(), sect.getSouscentre().getNomsouscent()});
                }
            } catch (ObcbudgetException ex) {
                JOptionPane.showMessageDialog(this, "Impossible d'extraire les secteurs de couverture du centre de billetage [" + nomCentrebilletageSelected + "] \n raison:" + ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Le champ nom centre de billetage est obligatoire. !");
        }
        secteurscouv.clear();
    }//GEN-LAST:event_jButtonRechercherActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        //remplit les champs
        int ligne = jTable1.getSelectedRow();
        idSecteurcouvCliked = (int) model.getValueAt(ligne, 0);
        jComboBoxRegionCentreBilletage.setSelectedItem((String) model.getValueAt(ligne, 2));
        jComboBoxDepartementBilletage.setSelectedItem((String) model.getValueAt(ligne, 3));
        jComboBoxArrondissementBilletage.setSelectedItem((String) model.getValueAt(ligne, 4));
        jComboBoxCentrebilletage.setSelectedItem((String) model.getValueAt(ligne, 5));
        jComboBoxRegionSouscentre.setSelectedItem((String) model.getValueAt(ligne, 6));
        jComboBoxDepartementSouscentre.setSelectedItem((String) model.getValueAt(ligne, 7));
        jComboBoxArrondissementSouscentre.setSelectedItem((String) model.getValueAt(ligne, 8));
        jComboBoxSouscentre.setSelectedItem((String) model.getValueAt(ligne, 9));
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer ce secteur de couverture du centre de billetage [" + nomCentrebilletageSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!nomCentrebilletageSelected.equals("---") && !nomSouscentreSelected.equals("---")) {
                try {
                    metier.supprimerSecteurcouv(metier.findSecteurcouvById(idSecteurcouvCliked));
                    JOptionPane.showMessageDialog(this, "Secteur de couverture du centre de billetage [" + nomCentrebilletageSelected + " supprimé avec succès !");
                    secteurscouv = metier.findAllSecteurscouvD1Centrebilletage(nomCentrebilletageSelected);
                    int i = 0;
                    for (Secteurcouv sect : secteurscouv) {
                        model.insertRow(model.getRowCount(), new Object[]{sect.getIdsecteurcouv(), i++, sect.getCentrebilletage().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), sect.getCentrebilletage().getEtablissement().getArrondissement().getDepartement().getNomdepart(), sect.getCentrebilletage().getEtablissement().getArrondissement().getNomarr(), sect.getCentrebilletage().getEtablissement().getAbreviation(), sect.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), sect.getSouscentre().getEtablissement().getArrondissement().getDepartement().getNomdepart(), sect.getSouscentre().getEtablissement().getArrondissement().getNomarr(), sect.getSouscentre().getNomsouscent()});
                    }
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer le secteur de couverture [" + nomSouscentreSelected + "] du centre de billetage [" + nomCentrebilletageSelected + "] \n raison:" + ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
            }
        }
        secteurscouv.clear();
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jComboBoxSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSouscentreActionPerformed
        //
    }//GEN-LAST:event_jComboBoxSouscentreActionPerformed

    private void jComboBoxCentrebilletageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCentrebilletageActionPerformed
        nomCentrebilletageSelected = (String) jComboBoxCentrebilletage.getSelectedItem();
        if (!nomCentrebilletageSelected.equals("---")) {
            centrebilletage = metier.findCentrebilletageD1Etablissement(nomCentrebilletageSelected);
            jTextFieldNiveau.setText(centrebilletage.getNiveau());
            jTextFieldType.setText(centrebilletage.getType());
        }
    }//GEN-LAST:event_jComboBoxCentrebilletageActionPerformed

    private void jComboBoxArrondissementSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementSouscentreActionPerformed
        remplirSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementSouscentreActionPerformed

    private void jComboBoxDepartementSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementSouscentreActionPerformed
        remplirArrondissementSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxDepartementSouscentreActionPerformed

    private void jTextFieldTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldTypeActionPerformed

    private void jComboBoxRegionSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionSouscentreActionPerformed
        remplirDepartementSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxRegionSouscentreActionPerformed

    private void jButtonRattachesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRattachesActionPerformed
        secteurscouv = metier.findAllSecteurscouv();
        Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centrebilletage et la liste de ses sous-centres
        ArrayList<Centrebilletage> centrebilletagesList = new ArrayList<>();//liste des centres de billetage
        for (Secteurcouv secteur : secteurscouv) {
            if (!centrebilletagesList.contains(secteur.getCentrebilletage())) {
                centrebilletagesList.add(secteur.getCentrebilletage());
            }
        }
        //remplissage de centrebilletageSouscentresMap
        for (Centrebilletage centrebil : centrebilletagesList) {
            ArrayList<Souscentre> SouscentresD1CentrebilletageList = new ArrayList<>();//liste des sous-centres du centre de billetage courant
            for (Secteurcouv secteur : secteurscouv) {
                if (secteur.getCentrebilletage().getEtablissement().getAbreviation().equals(centrebil.getEtablissement().getAbreviation())) {
                    SouscentresD1CentrebilletageList.add(secteur.getSouscentre());
                }
            }
            if (!SouscentresD1CentrebilletageList.isEmpty()) {
                centrebilletageSouscentresMap.put(centrebil, SouscentresD1CentrebilletageList);
            }
        }
        try {
            List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
            for (Region region : regions) {
                int num = 1;
                for (Centrebilletage centrebil : centrebilletagesList) {
                    if (centrebil.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                        for (Souscentre souscentre : centrebilletageSouscentresMap.get(centrebil)) {
                            Map<String, Object> row = new HashMap<>();
                            row.put("region", region.getNomreg());
                            row.put("centrebilletage", centrebil.getEtablissement().getAbreviation());
                            row.put("num", num++);
                            row.put("souscentre", souscentre.getNomsouscent());
                            datasource.add(row);
                        }
                    }
                }
            }
            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\souscentresRattachesAuxCentrebilletagesReport.jrxml");
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
            jasperViewer.setVisible(true);
        } catch (JRException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_jButtonRattachesActionPerformed

    private void jButtonNonRattachesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNonRattachesActionPerformed
        souscentres = metier.findAllSouscentres();
        secteurscouv = metier.findAllSecteurscouv();
        ArrayList<Souscentre> souscentresNonRattachesList = new ArrayList<>();
        try {
            List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
            int num = 1;
            for (Souscentre souscentre : souscentres) {
                boolean trouver = false;
                for (Secteurcouv secteur : secteurscouv) {
                    if (secteur.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                        trouver = true;
                        break;
                    }
                }

                if (!trouver) {
                    souscentresNonRattachesList.add(souscentre);
                }
            }

            if (souscentresNonRattachesList.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Aucun sous-centre non rattaché dans la base de données !");
            } else {
                for (Souscentre souscentre : souscentresNonRattachesList) {
                    Map<String, Object> row = new HashMap<>();
                    row.put("region", souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                    row.put("departement", souscentre.getEtablissement().getArrondissement().getDepartement().getNomdepart());
                    row.put("num", num++);
                    row.put("souscentre", souscentre.getNomsouscent());
                    datasource.add(row);
                }
            }
            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\souscentresNonRattachesAuxCentrebilletagesReport.jrxml");
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
            jasperViewer.setVisible(true);
        } catch (JRException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_jButtonNonRattachesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueSecteurcouverture.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueSecteurcouverture.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueSecteurcouverture.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueSecteurcouverture.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueSecteurcouverture().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonCreer;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonNonRattaches;
    private javax.swing.JButton jButtonRattaches;
    private javax.swing.JButton jButtonRechercher;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JComboBox<String> jComboBoxArrondissementBilletage;
    private javax.swing.JComboBox<String> jComboBoxArrondissementSouscentre;
    private javax.swing.JComboBox<String> jComboBoxCentrebilletage;
    private javax.swing.JComboBox<String> jComboBoxDepartementBilletage;
    private javax.swing.JComboBox<String> jComboBoxDepartementSouscentre;
    private javax.swing.JComboBox<String> jComboBoxRegionCentreBilletage;
    private javax.swing.JComboBox<String> jComboBoxRegionSouscentre;
    private javax.swing.JComboBox<String> jComboBoxSouscentre;
    private javax.swing.JLabel jLabeNomSouscentre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelArrondissementBilletage;
    private javax.swing.JLabel jLabelArrondissementSouscentre;
    private javax.swing.JLabel jLabelDepartementBilletage;
    private javax.swing.JLabel jLabelDepartementSouscentre;
    private javax.swing.JLabel jLabelNiveau;
    private javax.swing.JLabel jLabelNomCentrebilletage;
    private javax.swing.JLabel jLabelRegionCentreBilletage;
    private javax.swing.JLabel jLabelRegionSouscentre;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanelCentreDeliberation;
    private javax.swing.JPanel jPanelCentrebilletage;
    private javax.swing.JPanel jPanelEtats;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldNiveau;
    private javax.swing.JTextField jTextFieldType;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Region> regions = null;
    private String[] regionsCentrebilletageCombo = null;
    private String[] regionsSouscentreCombo = null;
    private List<Departement> departementsCentrebilletage = null;
    private List<Arrondissement> arrondissementsCentrebilletage = null;
    private List<Departement> departementsSouscentre = null;
    private List<Arrondissement> arrondissementsSouscentre = null;
    private String[] departementsBilletageCombo = null;
    private String[] departementsSouscentreCombo = null;
    private String[] arrondissementsBilletageCombo = null;
    private String[] arrondissementsSouscentreCombo = null;
    private String[] centrebilletagesCombo = null;
    private String[] souscentresCombo = null;
    private List<Centrebilletage> centrebilletages = null;
    private List<Souscentre> souscentres = null;
    private Departement departementBilletageSelected = null;
    private Arrondissement arrondissementBilletageSelected = null;
    private Departement departementSouscentreSelected = null;
    private Arrondissement arrondissementSouscentreSelected = null;
    private Centrebilletage centrebilletageSelected = null;
    private String nomCentrebilletageSelected = "";
    private String nomRegionCentrebilletageSelected = "";
    private String nomRegionSouscentreSelected = "";
    private String nomDepartementBilletageSelected = "";
    private String nomArrondissementBilletageSelected = "";
    private String nomDepartementSouscentreSelected = "";
    private String nomArrondissementSouscentreSelected = "";
    private List<Secteurcouv> secteurscouv = null;
    private Souscentre souscentreSelected = null;
    private String nomSouscentreSelected = "";
    private Centrebilletage centrebilletage = null;
    private int idSecteurcouvCliked = 0;
    private Secteurcouv secteurcouvCliked = null;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        regions = metier.findAllRegions();
        centrebilletages = metier.findAllCentrebilletages();
        souscentres = metier.findAllSouscentres();

        //on remplit la combobox des régions du centre de billetage
        regionsCentrebilletageCombo = new String[regions.size() + 1];
        regionsCentrebilletageCombo[0] = "---";
        int i = 1;
        for (Region region : regions) {
            regionsCentrebilletageCombo[i++] = region.getNomreg();
        }
        jComboBoxRegionCentreBilletage.setModel(new DefaultComboBoxModel(regionsCentrebilletageCombo));

        //on remplit la combobox des régions du centre de billetage
        regionsSouscentreCombo = new String[regions.size() + 1];
        regionsSouscentreCombo[0] = "---";
        int j = 1;
        for (Region region : regions) {
            regionsSouscentreCombo[j++] = region.getNomreg();
        }
        jComboBoxRegionSouscentre.setModel(new DefaultComboBoxModel(regionsSouscentreCombo));

        remplirDepartementBilletageCombobox();
        remplirArrondissementBilletageCombobox();
        remplirCentrebilletageCombobox();
        remplirDepartementSouscentreCombobox();
        remplirArrondissementSouscentreCombobox();
        remplirSouscentreCombobox();
    }

    private void infoSaisies() {
        nomRegionCentrebilletageSelected = (String) jComboBoxRegionCentreBilletage.getSelectedItem();
        nomDepartementBilletageSelected = (String) jComboBoxDepartementBilletage.getSelectedItem();
        nomArrondissementBilletageSelected = (String) jComboBoxArrondissementBilletage.getSelectedItem();
        nomCentrebilletageSelected = (String) jComboBoxCentrebilletage.getSelectedItem();
        nomRegionSouscentreSelected = (String) jComboBoxRegionSouscentre.getSelectedItem();
        nomDepartementSouscentreSelected = (String) jComboBoxDepartementSouscentre.getSelectedItem();
        nomArrondissementSouscentreSelected = (String) jComboBoxArrondissementSouscentre.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
    }

    private void videFrame() {
        jComboBoxRegionCentreBilletage.setSelectedIndex(0);
        jComboBoxDepartementBilletage.setSelectedIndex(0);
        jComboBoxArrondissementBilletage.setSelectedIndex(0);
        jComboBoxCentrebilletage.setSelectedIndex(0);
        jComboBoxRegionSouscentre.setSelectedIndex(0);
        jComboBoxDepartementSouscentre.setSelectedIndex(0);
        jComboBoxArrondissementSouscentre.setSelectedIndex(0);
        jComboBoxSouscentre.setSelectedIndex(0);
        jTextFieldNiveau.setText("");
        jTextFieldType.setText("");
        model.setRowCount(0);//vide la jTable       

    }

    private void remplirDepartementBilletageCombobox() {
        nomRegionCentrebilletageSelected = (String) jComboBoxRegionCentreBilletage.getSelectedItem();
        departementsCentrebilletage = metier.findAllDepartementsD1Region(nomRegionCentrebilletageSelected);
        //on remplit la combobox des départements du centre de billetage
        departementsBilletageCombo = new String[departementsCentrebilletage.size() + 1];
        departementsBilletageCombo[0] = "---";
        int i = 1;
        for (Departement departement : departementsCentrebilletage) {
            departementsBilletageCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartementBilletage.setModel(new DefaultComboBoxModel(departementsBilletageCombo));
    }

    private void remplirDepartementSouscentreCombobox() {
        nomRegionSouscentreSelected = (String) jComboBoxRegionSouscentre.getSelectedItem();
        departementsSouscentre = metier.findAllDepartementsD1Region(nomRegionSouscentreSelected);
        //on remplit la combobox des départements du sous-centre
        departementsSouscentreCombo = new String[departementsSouscentre.size() + 1];
        departementsSouscentreCombo[0] = "---";
        int j = 1;
        for (Departement departement : departementsSouscentre) {
            departementsSouscentreCombo[j++] = departement.getNomdepart();
        }
        jComboBoxDepartementSouscentre.setModel(new DefaultComboBoxModel(departementsSouscentreCombo));
    }

    private void remplirArrondissementSouscentreCombobox() {
        nomDepartementSouscentreSelected = (String) jComboBoxDepartementSouscentre.getSelectedItem();
        arrondissementsSouscentre = metier.findAllArrondissementsD1Departement(nomDepartementSouscentreSelected);
        //on remplit la combobox des arrondissements du souscentre
        arrondissementsSouscentreCombo = new String[arrondissementsSouscentre.size() + 1];
        arrondissementsSouscentreCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissementsSouscentre) {
            arrondissementsSouscentreCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissementSouscentre.setModel(new DefaultComboBoxModel(arrondissementsSouscentreCombo));
    }

    private void remplirArrondissementBilletageCombobox() {
        nomDepartementBilletageSelected = (String) jComboBoxDepartementBilletage.getSelectedItem();
        arrondissementsCentrebilletage = metier.findAllArrondissementsD1Departement(nomDepartementBilletageSelected);
        //on remplit la combobox des arrondissements du centre de billetage
        arrondissementsBilletageCombo = new String[arrondissementsCentrebilletage.size() + 1];
        arrondissementsBilletageCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissementsCentrebilletage) {
            arrondissementsBilletageCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissementBilletage.setModel(new DefaultComboBoxModel(arrondissementsBilletageCombo));
    }

    private void remplirCentrebilletageCombobox() {
        nomArrondissementBilletageSelected = (String) jComboBoxArrondissementBilletage.getSelectedItem();
        centrebilletages = metier.findAllCentrebilletagesD1Arrondissement(nomArrondissementBilletageSelected);
        //on remplit la combobox des centrebilletages
        centrebilletagesCombo = new String[centrebilletages.size() + 1];
        centrebilletagesCombo[0] = "---";
        int i = 1;
        for (Centrebilletage centrebill : centrebilletages) {
            centrebilletagesCombo[i++] = centrebill.getEtablissement().getAbreviation();
        }
        jComboBoxCentrebilletage.setModel(new DefaultComboBoxModel(centrebilletagesCombo));
    }

    private void remplirSouscentreCombobox() {
        nomArrondissementSouscentreSelected = (String) jComboBoxArrondissementSouscentre.getSelectedItem();
        souscentres = metier.findAllSouscentresD1Arrondissement(nomArrondissementSouscentreSelected);
        //on remplit la combobox des sous-centres
        souscentresCombo = new String[souscentres.size() + 1];
        souscentresCombo[0] = "---";
        int i = 1;
        for (Souscentre souscentre : souscentres) {
            souscentresCombo[i++] = souscentre.getNomsouscent();
        }
        jComboBoxSouscentre.setModel(new DefaultComboBoxModel(souscentresCombo));
    }
}
