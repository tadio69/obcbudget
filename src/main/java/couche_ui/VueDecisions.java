package couche_ui;

import couche_jpa.Activite;
import couche_jpa.Arrondissement;
import couche_jpa.Departement;
import couche_jpa.Examen;
import couche_jpa.Fonction;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Intervenant;
import couche_jpa.Intervenantsecret;
import couche_jpa.Nature;
import couche_jpa.Personnel;
import couche_jpa.Qualite;
import couche_jpa.Region;
import couche_jpa.Secretariat;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueDecisions extends javax.swing.JFrame {

    DefaultTableModel model;

    public VueDecisions() {
        initComponents();
        model = (DefaultTableModel) jTable1.getModel();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        buttonGroup7 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanelChoixSouscentre = new javax.swing.JPanel();
        jComboBoxDepartementSouscentre = new javax.swing.JComboBox<>();
        jLabelDepartementSouscentre = new javax.swing.JLabel();
        jLabelSouscentre = new javax.swing.JLabel();
        jComboBoxArrondissementSouscentre = new javax.swing.JComboBox<>();
        jComboBoxSouscentre = new javax.swing.JComboBox<>();
        jLabelArrondissementSouscentre = new javax.swing.JLabel();
        jComboBoxRegionSouscentre = new javax.swing.JComboBox<>();
        jLabelRegionSouscentre = new javax.swing.JLabel();
        jButtonAnnulerChoixSouscentre = new javax.swing.JButton();
        jLabelExamen1 = new javax.swing.JLabel();
        jComboBoxNumsec = new javax.swing.JComboBox<>();
        jTextFieldEtablissement = new javax.swing.JTextField();
        jPanelChoixExamen1 = new javax.swing.JPanel();
        jLabelCritere = new javax.swing.JLabel();
        jTextFieldCritere = new javax.swing.JTextField();
        jButtonRechercherPersonnel = new javax.swing.JButton();
        jLabelPersonnel = new javax.swing.JLabel();
        jComboBoxPersonnel = new javax.swing.JComboBox<>();
        jLabelNomPersonnel = new javax.swing.JLabel();
        jTextFieldNomPersonnel = new javax.swing.JTextField();
        jLabelPrenom = new javax.swing.JLabel();
        jTextFieldPrenom = new javax.swing.JTextField();
        jLabelFonction = new javax.swing.JLabel();
        jComboBoxFonction = new javax.swing.JComboBox<>();
        jButtonAnnulerPersonnel = new javax.swing.JButton();
        jButtonCreerPersonnel = new javax.swing.JButton();
        jButtonModifierPersonnel = new javax.swing.JButton();
        jButtonSupprimerPersonnel = new javax.swing.JButton();
        jPanelDateNaissance = new javax.swing.JPanel();
        jLabelRégionStructure = new javax.swing.JLabel();
        jComboBoxRegionStructure = new javax.swing.JComboBox<>();
        jLabelDepartementStructure = new javax.swing.JLabel();
        jComboBoxDepartementStructure = new javax.swing.JComboBox<>();
        jLabelArrondissementStructure = new javax.swing.JLabel();
        jComboBoxArrondissementStructure = new javax.swing.JComboBox<>();
        jLabelStructure = new javax.swing.JLabel();
        jTextFieldStructure = new javax.swing.JTextField();
        jButtonVisualiserTousPersonnels = new javax.swing.JButton();
        jPanelChoixExamen = new javax.swing.JPanel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixExamen = new javax.swing.JButton();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelExamen = new javax.swing.JLabel();
        jPanelGestionEtat = new javax.swing.JPanel();
        jButtonCreerEtAffecterPersonnel = new javax.swing.JButton();
        jButtonRechercherAffectation = new javax.swing.JButton();
        jButtonSupprimerAffectation = new javax.swing.JButton();
        jLabelQualite = new javax.swing.JLabel();
        jComboBoxQualite = new javax.swing.JComboBox<>();
        jLabelTypeResidence = new javax.swing.JLabel();
        jComboBoxTypeResidence = new javax.swing.JComboBox<>();
        jButtonAffecterPersonnel = new javax.swing.JButton();
        jButtonModifierAffectation = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jButtonVisualiser = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("DESIGNATION DU PERSONNEL");

        jTable1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "N° Ordre", "Nom", "Prénom", "Fonction", "Structure d'attache", "Région struct.", "Département struct.", "Arrondissement struct.", "Niveau exam.", "Type exam.", "Session", "Sous-centre", "Secrétariat", "Etablissement", "Qualité", "Résident/Périphérique"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(true);
        jTable1.setShowVerticalLines(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
        }

        jPanelChoixSouscentre.setBackground(new java.awt.Color(204, 255, 0));
        jPanelChoixSouscentre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un sous-centre d'examen", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jComboBoxDepartementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartementSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementSouscentreActionPerformed(evt);
            }
        });

        jLabelDepartementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartementSouscentre.setText("Département :");

        jLabelSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSouscentre.setText("Sous-centre :");

        jComboBoxArrondissementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissementSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementSouscentreActionPerformed(evt);
            }
        });

        jComboBoxSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSouscentre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSouscentreActionPerformed(evt);
            }
        });

        jLabelArrondissementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissementSouscentre.setText("Arrondissement :");

        jComboBoxRegionSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegionSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionSouscentreActionPerformed(evt);
            }
        });

        jLabelRegionSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegionSouscentre.setText("Région :");

        jButtonAnnulerChoixSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixSouscentre.setText("Annuler");
        jButtonAnnulerChoixSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixSouscentreActionPerformed(evt);
            }
        });

        jLabelExamen1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen1.setText("Secrétariat N° :");

        jComboBoxNumsec.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxNumsec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNumsecActionPerformed(evt);
            }
        });

        jTextFieldEtablissement.setEditable(false);
        jTextFieldEtablissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldEtablissement.setEnabled(false);

        javax.swing.GroupLayout jPanelChoixSouscentreLayout = new javax.swing.GroupLayout(jPanelChoixSouscentre);
        jPanelChoixSouscentre.setLayout(jPanelChoixSouscentreLayout);
        jPanelChoixSouscentreLayout.setHorizontalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelDepartementSouscentre)
                            .addComponent(jLabelArrondissementSouscentre)
                            .addComponent(jLabelSouscentre)
                            .addComponent(jLabelRegionSouscentre))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jComboBoxDepartementSouscentre, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBoxRegionSouscentre, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBoxArrondissementSouscentre, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(jButtonAnnulerChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jComboBoxSouscentre, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(12, 12, 12))
                    .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addGap(0, 16, Short.MAX_VALUE)
                        .addComponent(jLabelExamen1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxNumsec, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldEtablissement, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanelChoixSouscentreLayout.setVerticalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxRegionSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRegionSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxDepartementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonAnnulerChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelDepartementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelExamen1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNumsec, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldEtablissement, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanelChoixExamen1.setBackground(new java.awt.Color(102, 255, 153));
        jPanelChoixExamen1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Créer ou modifier un personnel", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelCritere.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelCritere.setText("Critère :");

        jTextFieldCritere.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonRechercherPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonRechercherPersonnel.setText("Rechercher");
        jButtonRechercherPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRechercherPersonnelActionPerformed(evt);
            }
        });

        jLabelPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelPersonnel.setText("Personnel :");

        jComboBoxPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPersonnelActionPerformed(evt);
            }
        });

        jLabelNomPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNomPersonnel.setText("Nom :");

        jTextFieldNomPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelPrenom.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelPrenom.setText("Prénom :");

        jTextFieldPrenom.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelFonction.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelFonction.setText("Fonction :");

        jComboBoxFonction.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonAnnulerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerPersonnel.setText("Annuler");
        jButtonAnnulerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerPersonnelActionPerformed(evt);
            }
        });

        jButtonCreerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerPersonnel.setText("Créer personnel");
        jButtonCreerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerPersonnelActionPerformed(evt);
            }
        });

        jButtonModifierPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonModifierPersonnel.setText("Modifier personnel");
        jButtonModifierPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierPersonnelActionPerformed(evt);
            }
        });

        jButtonSupprimerPersonnel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonSupprimerPersonnel.setText("Supprimer personnel");
        jButtonSupprimerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerPersonnelActionPerformed(evt);
            }
        });

        jPanelDateNaissance.setBackground(new java.awt.Color(204, 204, 0));
        jPanelDateNaissance.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Structure d'attache", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 225))); // NOI18N

        jLabelRégionStructure.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRégionStructure.setText("Région :");

        jComboBoxRegionStructure.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegionStructure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionStructureActionPerformed(evt);
            }
        });

        jLabelDepartementStructure.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartementStructure.setText("Département :");

        jComboBoxDepartementStructure.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartementStructure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementStructureActionPerformed(evt);
            }
        });

        jLabelArrondissementStructure.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissementStructure.setText("Arrondissement :");

        jComboBoxArrondissementStructure.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelStructure.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelStructure.setText("Nom :");

        jTextFieldStructure.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanelDateNaissanceLayout = new javax.swing.GroupLayout(jPanelDateNaissance);
        jPanelDateNaissance.setLayout(jPanelDateNaissanceLayout);
        jPanelDateNaissanceLayout.setHorizontalGroup(
            jPanelDateNaissanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDateNaissanceLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanelDateNaissanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelRégionStructure, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelStructure, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDateNaissanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldStructure, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxRegionStructure, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelDateNaissanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelDateNaissanceLayout.createSequentialGroup()
                        .addComponent(jLabelArrondissementStructure)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxArrondissementStructure, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelDateNaissanceLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabelDepartementStructure)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxDepartementStructure, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelDateNaissanceLayout.setVerticalGroup(
            jPanelDateNaissanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDateNaissanceLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanelDateNaissanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldStructure, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelStructure, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDepartementStructure, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxDepartementStructure, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanelDateNaissanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxRegionStructure, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRégionStructure, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelArrondissementStructure, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxArrondissementStructure, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );

        jButtonVisualiserTousPersonnels.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserTousPersonnels.setText("Visualiser tous personnels");
        jButtonVisualiserTousPersonnels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserTousPersonnelsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixExamen1Layout = new javax.swing.GroupLayout(jPanelChoixExamen1);
        jPanelChoixExamen1.setLayout(jPanelChoixExamen1Layout);
        jPanelChoixExamen1Layout.setHorizontalGroup(
            jPanelChoixExamen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamen1Layout.createSequentialGroup()
                .addGroup(jPanelChoixExamen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixExamen1Layout.createSequentialGroup()
                        .addGroup(jPanelChoixExamen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelChoixExamen1Layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(jPanelChoixExamen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelPersonnel)
                                    .addComponent(jLabelCritere)
                                    .addComponent(jLabelNomPersonnel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelChoixExamen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelChoixExamen1Layout.createSequentialGroup()
                                        .addComponent(jTextFieldCritere, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButtonRechercherPersonnel))
                                    .addComponent(jComboBoxPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldNomPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanelChoixExamen1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabelPrenom)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldPrenom, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanelChoixExamen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelChoixExamen1Layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(jLabelFonction)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxFonction, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelChoixExamen1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanelDateNaissance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanelChoixExamen1Layout.createSequentialGroup()
                        .addGap(304, 304, 304)
                        .addComponent(jButtonCreerPersonnel)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonModifierPersonnel)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSupprimerPersonnel)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnulerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonVisualiserTousPersonnels)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanelChoixExamen1Layout.setVerticalGroup(
            jPanelChoixExamen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelChoixExamen1Layout.createSequentialGroup()
                .addGroup(jPanelChoixExamen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixExamen1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelChoixExamen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelCritere, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldCritere, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonRechercherPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelChoixExamen1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanelChoixExamen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelFonction, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxFonction, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanelChoixExamen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelDateNaissance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelChoixExamen1Layout.createSequentialGroup()
                        .addGroup(jPanelChoixExamen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelChoixExamen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelNomPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldNomPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelChoixExamen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelPrenom, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldPrenom, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(9, 9, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixExamen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonSupprimerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonAnnulerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonVisualiserTousPersonnels, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelChoixExamen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonCreerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonModifierPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelChoixExamen.setBackground(new java.awt.Color(102, 255, 153));
        jPanelChoixExamen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un groupe d'examens et une session", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixExamen.setText("Annuler");
        jButtonAnnulerChoixExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixExamenActionPerformed(evt);
            }
        });

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        javax.swing.GroupLayout jPanelChoixExamenLayout = new javax.swing.GroupLayout(jPanelChoixExamen);
        jPanelChoixExamen.setLayout(jPanelChoixExamenLayout);
        jPanelChoixExamenLayout.setHorizontalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabelSession)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixExamenLayout.setVerticalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 70, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addGap(21, 21, 21)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        jPanelGestionEtat.setBackground(new java.awt.Color(0, 255, 255));
        jPanelGestionEtat.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer la désignation d'un personnel dans un sous-centre", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 102, 255))); // NOI18N

        jButtonCreerEtAffecterPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEtAffecterPersonnel.setText("Créer et affecter");
        jButtonCreerEtAffecterPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEtAffecterPersonnelActionPerformed(evt);
            }
        });

        jButtonRechercherAffectation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonRechercherAffectation.setText("Rechercher affect.");
        jButtonRechercherAffectation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRechercherAffectationActionPerformed(evt);
            }
        });

        jButtonSupprimerAffectation.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonSupprimerAffectation.setText("Supprimer affect.");
        jButtonSupprimerAffectation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerAffectationActionPerformed(evt);
            }
        });

        jLabelQualite.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelQualite.setText("Qualité :");

        jComboBoxQualite.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelTypeResidence.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelTypeResidence.setText("Type résidence :");

        jComboBoxTypeResidence.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonAffecterPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAffecterPersonnel.setText("Affecter");
        jButtonAffecterPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAffecterPersonnelActionPerformed(evt);
            }
        });

        jButtonModifierAffectation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonModifierAffectation.setText("Modifier affect.");
        jButtonModifierAffectation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierAffectationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelGestionEtatLayout = new javax.swing.GroupLayout(jPanelGestionEtat);
        jPanelGestionEtat.setLayout(jPanelGestionEtatLayout);
        jPanelGestionEtatLayout.setHorizontalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                                .addComponent(jButtonAffecterPersonnel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonModifierAffectation)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonRechercherAffectation))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelGestionEtatLayout.createSequentialGroup()
                                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelTypeResidence)
                                    .addComponent(jLabelQualite))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBoxQualite, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxTypeResidence, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelGestionEtatLayout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jButtonCreerEtAffecterPersonnel)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSupprimerAffectation)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanelGestionEtatLayout.setVerticalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelQualite, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxQualite, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTypeResidence, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxTypeResidence, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRechercherAffectation, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAffecterPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonModifierAffectation, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSupprimerAffectation, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCreerEtAffecterPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jButtonVisualiser.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiser.setText("Visualiser la décision");
        jButtonVisualiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(88, 88, 88)
                                        .addComponent(jButtonVisualiser)
                                        .addGap(35, 35, 35)
                                        .addComponent(jButtonFermer)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jPanelChoixExamen1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(481, 481, 481)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelChoixExamen1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonVisualiser, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jButtonCreerEtAffecterPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEtAffecterPersonnelActionPerformed
        model.setRowCount(0);//vide la jTable     
        infoIntervenantSaisies();
        infoPersonnelSaisies();
        if (!nomPersonnelSaisi.equals("") && !structureSaisie.equals("") && !titreFonctionSelected.equals("---") && !nomArrondissementSouscentreSelected.equals("---") || groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || titreQualiteSelected.equals("---") || typeResidenceSelected.equals("---")) {
            List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats 
            for (Arrondissement a : arrondissements) {
                if (a.getNomarr().equals(nomArrondissementSouscentreSelected)) {
                    arrondissementSelected = a;
                    break;
                }
            }
            for (Fonction f : fonctions) {
                if (f.getTitre().equals(titreFonctionSelected)) {
                    fonctionSelected = f;
                    break;
                }
            }
            String typeReel = typeSelected;
            String phase = "";
            if (typeSelected.equals("GEN Série E") || typeSelected.equals("IND Pratique 2")) {
                phase = "PRATIQUE";
            } else {
                phase = "ECRIT";
            }
            if (typeSelected.equals("GEN Série E")) {
                typeReel = "GEN";
            }
            if (typeSelected.equals("IND Pratique 2")) {
                typeReel = "IND";
            }

            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeReel);
            anneeSelected = Integer.parseInt(anneeString);
            Personnel personnelCreated = null;
            boolean testSiCreerPersonnel = false;

            for (Session s : sessions) {
                if (s.getAnnee() == anneeSelected) {
                    sessionSelected = s;
                    break;
                }
            }
            for (Souscentre souscentre : souscentres) {
                if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                    souscentreSelected = souscentre;
                    break;
                }
            }
            Activite activite = metier.findActiviteByNom(phase);
            Qualite qualite = metier.findQualiteByTitre(titreQualiteSelected);
            boolean resident = false;
            if (typeResidenceSelected.equals("RESIDENT")) {
                resident = true;
            }

            //remplissage souscentreAsecretariatsDemultipliesList
            secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
            if (!secretariats.isEmpty()) {
                for (Secretariat sec : secretariats) {
                    if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                        souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                    }
                }
            }

            try {
                personnelCreated = new Personnel(nomPersonnelSaisi.toUpperCase(), prenomSaisi.toUpperCase(), structureSaisie.toUpperCase(), fonctionSelected, arrondissementSelected);
                metier.creerPersonnel(personnelCreated);
                testSiCreerPersonnel = true;
            } catch (ObcbudgetException ex) {
                testSiCreerPersonnel = false;
                JOptionPane.showMessageDialog(this, "Impossible de créer et d'affecter le " + titreQualiteSelected + "\n raison:" + ex.getMessage());
            }
            if (testSiCreerPersonnel) {
                if (souscentreAsecretariatsDemultipliesList.contains(souscentreSelected)) {//sous-centre à plusieurs secrétariats                                        
                    if (numsecString.equals("---")) {
                        JOptionPane.showMessageDialog(this, "Veuillez sélectionner un numéro de secrétariat svp.");
                    } else {//l'affectation se fait dans secretariatSelected déterminé lors du clic sur numsecCombobox

                        try {
                            metier.creerIntervenantsecret(new Intervenantsecret(groupe, sessionSelected, personnelCreated, secretariatSelected, activite, qualite, resident));
                            JOptionPane.showMessageDialog(this, titreQualiteSelected + " créé et affecté avec succès !");
                            desIntervenantsecret = metier.findAllIntervenantsecretD1GroupedexamensD1SouscentreA1SessionD1ActiviteEt1Qualite(anneeSelected, nomSouscentreSelected, niveauSelected, typeReel, phase, titreQualiteSelected);
                            int i = 1;
                            for (Intervenantsecret intersec : desIntervenantsecret) {
                                model.insertRow(model.getRowCount(), new Object[]{intersec.getIdintersec(), i++, intersec.getPersonnel().getNompers(), intersec.getPersonnel().getPrenom(), intersec.getPersonnel().getFonction().getTitre(), intersec.getPersonnel().getStructure(), intersec.getPersonnel().getArrondissement().getDepartement().getRegion().getNomreg(), intersec.getPersonnel().getArrondissement().getDepartement().getNomdepart(), intersec.getPersonnel().getArrondissement().getNomarr(), niveauSelected, typeSelected, intersec.getSession().getAnnee(), intersec.getSecretariat().getSouscentre().getNomsouscent(), intersec.getSecretariat().getNumsec(), intersec.getSecretariat().getEtablissement().getAbreviation(), intersec.getQualite().getTitre(), intersec.getResident()});
                            }
                        } catch (ObcbudgetException ex) {
                            JOptionPane.showMessageDialog(this, "Impossible de créer et d'affecter le " + titreQualiteSelected + " au secretariat " + secretariatSelected.getNumsec() + " du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                        }
                    }
                } else {//sous-centre sans secretariats démultipliés
                    try {
                        metier.creerIntervenant(new Intervenant(groupe, sessionSelected, personnelCreated, souscentreSelected, activite, qualite, resident));
                        JOptionPane.showMessageDialog(this, titreQualiteSelected + " créé et affecté avec succès !");
                        intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SouscentreD1SessionD1ActiviteEt1Qualite(anneeSelected, nomSouscentreSelected, niveauSelected, typeReel, phase, titreQualiteSelected);
                        int i = 1;
                        for (Intervenant interv : intervenants) {
                            model.insertRow(model.getRowCount(), new Object[]{interv.getIdinterv(), i++, interv.getPersonnel().getNompers(), interv.getPersonnel().getPrenom(), interv.getPersonnel().getFonction().getTitre(), interv.getPersonnel().getStructure(), interv.getPersonnel().getArrondissement().getDepartement().getRegion().getNomreg(), interv.getPersonnel().getArrondissement().getDepartement().getNomdepart(), interv.getPersonnel().getArrondissement().getNomarr(), niveauSelected, typeSelected, interv.getSession().getAnnee(), interv.getSouscentre().getNomsouscent(), "", "", interv.getQualite().getTitre(), interv.getResident()});
                        }
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de créer et d'affecter le " + titreQualiteSelected + " pour le sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, " Tous les champs sont obligatoires sauf le prénom!");
        }
    }//GEN-LAST:event_jButtonCreerEtAffecterPersonnelActionPerformed

    private void jButtonRechercherAffectationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRechercherAffectationActionPerformed
        model.setRowCount(0);//vide la jTable
        infoIntervenantSaisies();
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---") && !nomSouscentreSelected.equals("---") && !titreQualiteSelected.equals("---")) {

            anneeSelected = Integer.parseInt(anneeString);
            trouverSouscentre = false;
            secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
            for (Secretariat sec : secretariats) {
                if (sec.getSouscentre().getNomsouscent().equals(nomSouscentreSelected)) {
                    trouverSouscentre = true;
                    break;
                }
            }
            String typeReel = typeSelected;
            String phase = "";
            if (typeSelected.equals("GEN Série E") || typeSelected.equals("IND Pratique 2")) {
                phase = "PRATIQUE";
            } else {
                phase = "ECRIT";
            }
            if (typeSelected.equals("GEN Série E")) {
                typeReel = "GEN";
            }
            if (typeSelected.equals("IND Pratique 2")) {
                typeReel = "IND";
            }
            if (trouverSouscentre) {
                intervenantsecretsRecherches = metier.findAllIntervenantsecretD1GroupedexamensD1SouscentreA1SessionD1ActiviteEt1Qualite(anneeSelected, nomSouscentreSelected, niveauSelected, typeReel, phase, titreQualiteSelected);
                int i = 1;
                for (Intervenantsecret intersec : intervenantsecretsRecherches) {
                    model.insertRow(model.getRowCount(), new Object[]{intersec.getIdintersec(), i++, intersec.getPersonnel().getNompers(), intersec.getPersonnel().getPrenom(), intersec.getPersonnel().getFonction().getTitre(), intersec.getPersonnel().getStructure(), intersec.getPersonnel().getArrondissement().getDepartement().getRegion().getNomreg(), intersec.getPersonnel().getArrondissement().getDepartement().getNomdepart(), intersec.getPersonnel().getArrondissement().getNomarr(), niveauSelected, typeSelected, intersec.getSession().getAnnee(), intersec.getSecretariat().getSouscentre().getNomsouscent(), intersec.getSecretariat().getNumsec(), intersec.getSecretariat().getEtablissement().getAbreviation(), intersec.getQualite().getTitre(), intersec.getResident()});
                }
            } else {

                intervenantsRecherches = metier.findAllIntervenantsD1GroupeDexamensD1SouscentreD1SessionD1ActiviteEt1Qualite(anneeSelected, nomSouscentreSelected, niveauSelected, typeReel, phase, titreQualiteSelected);
                int i = 1;
                for (Intervenant interv : intervenantsRecherches) {
                    model.insertRow(model.getRowCount(), new Object[]{interv.getIdinterv(), i++, interv.getPersonnel().getNompers(), interv.getPersonnel().getPrenom(), interv.getPersonnel().getFonction().getTitre(), interv.getPersonnel().getStructure(), interv.getPersonnel().getArrondissement().getDepartement().getRegion().getNomreg(), interv.getPersonnel().getArrondissement().getDepartement().getNomdepart(), interv.getPersonnel().getArrondissement().getNomarr(), niveauSelected, typeSelected, interv.getSession().getAnnee(), interv.getSouscentre().getNomsouscent(), "", "", interv.getQualite().getTitre(), interv.getResident()});
                }
            }
        } else
            JOptionPane.showMessageDialog(this, "Les champs examen(s), session, sous-centre et qualité sont obligatoires !");
    }//GEN-LAST:event_jButtonRechercherAffectationActionPerformed

    private void jComboBoxRegionStructureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionStructureActionPerformed
        remplirDepartementStructureCombobox();
    }//GEN-LAST:event_jComboBoxRegionStructureActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        //remplit les champs
        int ligne = jTable1.getSelectedRow();
        if (((String) model.getValueAt(ligne, 14)).equals("")) {//si la colonne etablissement ne contient rien
            testSiIntervenantsecret = false;
            testSiIntervenant = true;
        } else {
            testSiIntervenantsecret = true;
            testSiIntervenant = false;
        }

        jTextFieldCritere.setText("");

        personnelsCombo = new String[0];
        jComboBoxPersonnel.setModel(new DefaultComboBoxModel(personnelsCombo));

        jTextFieldNomPersonnel.setText((String) model.getValueAt(ligne, 2));
        jTextFieldPrenom.setText((String) model.getValueAt(ligne, 3));
        jComboBoxFonction.setSelectedItem((String) model.getValueAt(ligne, 4));
        jTextFieldStructure.setText((String) model.getValueAt(ligne, 5));
        jComboBoxRegionStructure.setSelectedItem((String) model.getValueAt(ligne, 6));
        jComboBoxDepartementStructure.setSelectedItem((String) model.getValueAt(ligne, 7));
        jComboBoxArrondissementStructure.setSelectedItem((String) model.getValueAt(ligne, 8));
        jComboBoxNiveau.setSelectedItem((String) model.getValueAt(ligne, 9));
        jComboBoxType.setSelectedItem((String) model.getValueAt(ligne, 10));
        remplirExamensTextArea();
        jComboBoxSession.setSelectedItem(model.getValueAt(ligne, 11));
        jComboBoxSouscentre.setSelectedItem((String) model.getValueAt(ligne, 12));

        if (testSiIntervenant) {
            idIntervenantCliked = (int) model.getValueAt(ligne, 0);
            numsecCombo = new String[0];
            jComboBoxNumsec.setModel(new DefaultComboBoxModel(numsecCombo));
            jTextFieldEtablissement.setText("");
        }

        if (testSiIntervenantsecret) {
            idIntervenantsecretCliked = (int) model.getValueAt(ligne, 0);
            remplirNumeroSecretariatCombobox();
            jComboBoxNumsec.setSelectedItem("" + model.getValueAt(ligne, 13));
            jTextFieldEtablissement.setText((String) model.getValueAt(ligne, 14));
        }
        jComboBoxQualite.setSelectedItem((String) model.getValueAt(ligne, 15));
        boolean resid = (boolean) model.getValueAt(ligne, 16);
        if (resid)
            jComboBoxTypeResidence.setSelectedIndex(1);
        else
            jComboBoxTypeResidence.setSelectedIndex(2);
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButtonModifierAffectationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierAffectationActionPerformed
        model.setRowCount(0);//vide la jTable
        infoIntervenantSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier cette affectation?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nomPersonnelSaisi.equals("") || titreQualiteSelected.equals("---") || typeResidenceSelected.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez enter le nom d'un personnel, un groupe d'examens, une session, un sous-centre et/ou un secrétariat, une qualité et un type de résidence !");
            } else {
                List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats 
                String typeReel = typeSelected;
                String phase = "";
                if (typeSelected.equals("GEN Série E") || typeSelected.equals("IND Pratique 2")) {
                    phase = "PRATIQUE";
                } else {
                    phase = "ECRIT";
                }
                if (typeSelected.equals("GEN Série E")) {
                    typeReel = "GEN";
                }
                if (typeSelected.equals("IND Pratique 2")) {
                    typeReel = "IND";
                }
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeReel);
                anneeSelected = Integer.parseInt(anneeString);

                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                for (Souscentre souscentre : souscentres) {
                    if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                        souscentreSelected = souscentre;
                        break;
                    }
                }
                Activite activite = metier.findActiviteByNom(phase);
                Qualite qualite = metier.findQualiteByTitre(titreQualiteSelected);
                boolean resident = false;
                if (typeResidenceSelected.equals("RESIDENT")) {
                    resident = true;
                }

               //remplissage souscentreAsecretariatsDemultipliesList
                secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                if (!secretariats.isEmpty()) {
                    for (Secretariat sec : secretariats) {
                        if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                            souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                        }
                    }
                }
                if (souscentreAsecretariatsDemultipliesList.contains(souscentreSelected)) {//sous-centre à plusieurs secrétariats
                    if (numsecString.equals("---")) {
                        JOptionPane.showMessageDialog(this, "Veuillez sélectionner un numéro de secrétariat svp.");
                    } else {//l'affectation se fait dans secretariatSelected déterminé lors du clic sur numsecCombobox
                        Intervenantsecret intervenantsecretCliked = metier.findIntervenantsecretById(idIntervenantsecretCliked);
                        intervenantsecretCliked.setGroupe(groupe);
                        intervenantsecretCliked.setSession(sessionSelected);
                        intervenantsecretCliked.setSecretariat(secretariatSelected);
                        //personnel ne change pas
                        intervenantsecretCliked.setActivite(activite);
                        intervenantsecretCliked.setQualite(qualite);
                        intervenantsecretCliked.setResident(resident);
                        try {
                            metier.modifierIntervenantsecret(intervenantsecretCliked);
                            JOptionPane.showMessageDialog(this, "Affectation du " + titreQualiteSelected + " modifié avec succès !");
                            desIntervenantsecret = metier.findAllIntervenantsecretD1GroupedexamensD1SouscentreA1SessionD1ActiviteEt1Qualite(anneeSelected, nomSouscentreSelected, niveauSelected, typeReel, phase, titreQualiteSelected);
                            int i = 1;
                            for (Intervenantsecret intersec : desIntervenantsecret) {
                                model.insertRow(model.getRowCount(), new Object[]{intersec.getIdintersec(), i++, intersec.getPersonnel().getNompers(), intersec.getPersonnel().getPrenom(), intersec.getPersonnel().getFonction().getTitre(), intersec.getPersonnel().getStructure(), intersec.getPersonnel().getArrondissement().getDepartement().getRegion().getNomreg(), intersec.getPersonnel().getArrondissement().getDepartement().getNomdepart(), intersec.getPersonnel().getArrondissement().getNomarr(), niveauSelected, typeSelected, intersec.getSession().getAnnee(), intersec.getSecretariat().getSouscentre().getNomsouscent(), intersec.getSecretariat().getNumsec(), intersec.getSecretariat().getEtablissement().getAbreviation(), intersec.getQualite().getTitre(), intersec.getResident()});
                            }
                        } catch (ObcbudgetException ex) {
                            JOptionPane.showMessageDialog(this, "Impossible de modifierer l'affectation du " + titreQualiteSelected + " au secretariat " + secretariatSelected.getNumsec() + " du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                        }
                    }
                } else {//sous-centre sans secretariats démultipliés
                    Intervenant intervenantCliked = metier.findIntervenantById(idIntervenantCliked);
                    intervenantCliked.setGroupe(groupe);
                    intervenantCliked.setSession(sessionSelected);
                    intervenantCliked.setSouscentre(souscentreSelected);
                    //personnel ne change pas
                    intervenantCliked.setActivite(activite);
                    intervenantCliked.setQualite(qualite);
                    intervenantCliked.setResident(resident);
                    try {

                        metier.modifierIntervenant(intervenantCliked);
                        JOptionPane.showMessageDialog(this, "Affectation du " + titreQualiteSelected + " modifié avec succès !");
                        intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SouscentreD1SessionD1ActiviteEt1Qualite(anneeSelected, nomSouscentreSelected, niveauSelected, typeReel, phase, titreQualiteSelected);
                        int i = 1;
                        for (Intervenant interv : intervenants) {
                            model.insertRow(model.getRowCount(), new Object[]{interv.getIdinterv(), i++, interv.getPersonnel().getNompers(), interv.getPersonnel().getPrenom(), interv.getPersonnel().getFonction().getTitre(), interv.getPersonnel().getStructure(), interv.getPersonnel().getArrondissement().getDepartement().getRegion().getNomreg(), interv.getPersonnel().getArrondissement().getDepartement().getNomdepart(), interv.getPersonnel().getArrondissement().getNomarr(), niveauSelected, typeSelected, interv.getSession().getAnnee(), interv.getSouscentre().getNomsouscent(), "", "", interv.getQualite().getTitre(), interv.getResident()});
                        }
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de modifier l'affectation du " + titreQualiteSelected + " pour le sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonModifierAffectationActionPerformed

    private void jButtonSupprimerAffectationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerAffectationActionPerformed
        model.setRowCount(0);//vide la jTable
        infoIntervenantSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer cette affectation?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nomPersonnelSaisi.equals("") || titreQualiteSelected.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez entrer le nom d'un personnel, un groupe d'examens, une session, un sous-centre et/ou un secrétariat et une qualité !");
            } else {
                List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats 
                anneeSelected = Integer.parseInt(anneeString);

                for (Souscentre souscentre : souscentres) {
                    if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                        souscentreSelected = souscentre;
                        break;
                    }
                }
                String typeReel = typeSelected;
                String phase = "";
                if (typeSelected.equals("GEN Série E") || typeSelected.equals("IND Pratique 2")) {
                    phase = "PRATIQUE";
                } else {
                    phase = "ECRIT";
                }
                if (typeSelected.equals("GEN Série E")) {
                    typeReel = "GEN";
                }
                if (typeSelected.equals("IND Pratique 2")) {
                    typeReel = "IND";
                }
                
                //remplissage souscentreAsecretariatsDemultipliesList
                secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                if (!secretariats.isEmpty()) {
                    for (Secretariat sec : secretariats) {
                        if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                            souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                        }
                    }
                }
                
                
                if (souscentreAsecretariatsDemultipliesList.contains(souscentreSelected)) {//sous-centre à plusieurs secrétariats
                    if (numsecString.equals("---")) {
                        JOptionPane.showMessageDialog(this, "Veuillez sélectionner un numéro de secrétariat svp.");
                    } else {//la suppression se fait dans un secretariat déterminé lors du clic sur numsecCombobox
                        try {
                            metier.supprimerIntervenantsecret(metier.findIntervenantsecretById(idIntervenantsecretCliked));
                            JOptionPane.showMessageDialog(this, "Affectation du " + titreQualiteSelected + " supprimée avec succès !");
                            desIntervenantsecret = metier.findAllIntervenantsecretD1GroupedexamensD1SouscentreA1SessionD1ActiviteEt1Qualite(anneeSelected, nomSouscentreSelected, niveauSelected, typeReel, phase, titreQualiteSelected);
                            int i = 1;
                            for (Intervenantsecret intersec : desIntervenantsecret) {
                                model.insertRow(model.getRowCount(), new Object[]{intersec.getIdintersec(), i++, intersec.getPersonnel().getNompers(), intersec.getPersonnel().getPrenom(), intersec.getPersonnel().getFonction().getTitre(), intersec.getPersonnel().getStructure(), intersec.getPersonnel().getArrondissement().getDepartement().getRegion().getNomreg(), intersec.getPersonnel().getArrondissement().getDepartement().getNomdepart(), intersec.getPersonnel().getArrondissement().getNomarr(), niveauSelected, typeSelected, intersec.getSession().getAnnee(), intersec.getSecretariat().getSouscentre().getNomsouscent(), intersec.getSecretariat().getNumsec(), intersec.getSecretariat().getEtablissement().getAbreviation(), intersec.getQualite().getTitre(), intersec.getResident()});
                            }
                        } catch (ObcbudgetException ex) {
                            JOptionPane.showMessageDialog(this, "Impossible de supprimer l'affectation du " + titreQualiteSelected + " au secretariat " + secretariatSelected.getNumsec() + " du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                        }
                    }
                } else {//sous-centre sans secretariats démultipliés
                    try {
                        metier.supprimerIntervenant(metier.findIntervenantById(idIntervenantCliked));
                        JOptionPane.showMessageDialog(this, "Affectation du " + titreQualiteSelected + " supprimé avec succès !");
                        intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SouscentreD1SessionD1ActiviteEt1Qualite(anneeSelected, nomSouscentreSelected, niveauSelected, typeReel, phase, titreQualiteSelected);
                        int i = 1;
                        for (Intervenant interv : intervenants) {
                            model.insertRow(model.getRowCount(), new Object[]{interv.getIdinterv(), i++, interv.getPersonnel().getNompers(), interv.getPersonnel().getPrenom(), interv.getPersonnel().getFonction().getTitre(), interv.getPersonnel().getStructure(), interv.getPersonnel().getArrondissement().getDepartement().getRegion().getNomreg(), interv.getPersonnel().getArrondissement().getDepartement().getNomdepart(), interv.getPersonnel().getArrondissement().getNomarr(), niveauSelected, typeSelected, interv.getSession().getAnnee(), interv.getSouscentre().getNomsouscent(), "", "", interv.getQualite().getTitre(), interv.getResident()});
                        }
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de supprimer l'affectation du  " + titreQualiteSelected + " pour le sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerAffectationActionPerformed

    private void jComboBoxDepartementStructureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementStructureActionPerformed
        remplirArrodissementStructureCombobox();
    }//GEN-LAST:event_jComboBoxDepartementStructureActionPerformed

    private void jButtonVisualiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserActionPerformed
        infoIntervenantSaisies();
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---") && !titreQualiteSelected.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            souscentres = metier.findAllSouscentres();
            ArrayList<Souscentre> souscentresIntervenantsList = new ArrayList<>();//liste de tous les sous-centres ayant des intervenants de titreQualiteSelected dans le groupedexamensEnstring dans la session considérée
            ArrayList<Souscentre> souscentresIntervenantsecretsList = new ArrayList<>();//liste de tous les sous-centres ayant des intervenantsecrets de titreQualiteSelected dans le groupedexamensEnstring dans la session considérée
            ArrayList<Souscentre> souscentresList = new ArrayList<>();//liste de tous les sous-centres ayant des intervenants et intervenantsecrets de titreQualiteSelected dans le groupedexamensEnstring dans la session considérée
            List<Souscentre> souscentresRattachesList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session 
            Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
            String typeReel = typeSelected;
            String phase = "";
            if (typeSelected.equals("GEN Série E") || typeSelected.equals("IND Pratique 2")) {
                phase = "PRATIQUE";
            } else {
                phase = "ECRIT";
            }
            if (typeSelected.equals("GEN Série E")) {
                typeReel = "GEN";
            }
            if (typeSelected.equals("IND Pratique 2")) {
                typeReel = "IND";
            }
            intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeReel, phase, titreQualiteSelected);
            desIntervenantsecret = metier.findAllIntervenantsecretD1GroupedexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeReel, phase, titreQualiteSelected);
            Map<Souscentre, ArrayList<Intervenantsecret>> souscentreIntervenantsecretMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses Intervenantsecret
            Map<Souscentre, Intervenant> souscentreIntervenantMap = new HashMap<>();//contient les sous-centres chacun avec son Intervenant
            for (Souscentre scentre : souscentres) {
                for (Intervenant interv : intervenants) {
                    if (!souscentresIntervenantsList.contains(scentre) && interv.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                        souscentresIntervenantsList.add(scentre);
                    }
                }
                for (Intervenantsecret intersec : desIntervenantsecret) {
                    if (!souscentresIntervenantsecretsList.contains(scentre) && intersec.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                        souscentresIntervenantsecretsList.add(scentre);
                    }
                }
            }

            for (Souscentre scentre : souscentresIntervenantsecretsList) {
                ArrayList<Intervenantsecret> intervenantsecretsList = new ArrayList<>();
                for (Intervenantsecret intersec : desIntervenantsecret) {
                    if (intersec.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                        intervenantsecretsList.add(intersec);
                    }
                }
                souscentreIntervenantsecretMap.put(scentre, intervenantsecretsList);
            }

            for (Souscentre scentre : souscentresIntervenantsList) {
                for (Intervenant inter : intervenants) {
                    if (inter.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                        souscentreIntervenantMap.put(scentre, inter);
                        break;
                    }
                }
            }

            //on met tous les sous-centres dans souscentresList
            for (Souscentre scentre : souscentresIntervenantsList) {
                if (!souscentresList.contains(scentre)) {
                    souscentresList.add(scentre);
                }
            }
            for (Souscentre scentre : souscentresIntervenantsecretsList) {
                if (!souscentresList.contains(scentre)) {
                    souscentresList.add(scentre);
                }
            }

            String separateur = ", ";
            examensList = groupedexamensEnstring.split(separateur);
            for (int i = 0; i < examensList.length; i++) {
                for (Examen e : examens) {
                    if (e.getSigle().equals(examensList[i])) {
                        examensSelected.add(e);
                        break;
                    }
                }
            }

            for (Examen e : examensSelected) {
                List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                for (Nature n : lesNats) {
                    Souscentre unSouscentre = n.getSouscentre();
                    if (!souscentresRattachesList.contains(unSouscentre)) {
                        souscentresRattachesList.add(unSouscentre);
                    }
                }
                for (int j = 0; j < souscentresRattachesList.size(); j++) {
                    ArrayList<Character> phasesList = new ArrayList<>();
                    Souscentre s = souscentresRattachesList.get(j);
                    for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                        if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                            if (!phasesList.contains(n.getActivite().getInitiale())) {
                                phasesList.add(n.getActivite().getInitiale());
                            }
                            //pas de break ici car on doit parcourir tous lesNats
                        }
                    }
                    if (!souscentrePhasesMap.containsKey(s)) {
                        souscentrePhasesMap.put(s, phasesList);
                    } else {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                        ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                        for (int k = 0; k < phasesList.size(); k++) {
                            if (!phasesList1.contains(phasesList.get(k))) {
                                phasesList1.add(phasesList.get(k));
                            }
                        }
                        Collections.sort(phasesList1);
                        souscentrePhasesMap.put(s, phasesList1);
                    }
                }
            }

            if (typeSelected.equals("GEN") && titreQualiteSelected.equals("CHARGÉ DE MISSION")) {
                try {
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    int numreg = 1;
                    for (Region region : regions) {
                        int numsc = 1;
                        for (Souscentre souscentre : souscentresList) {
                            if (region.getNomreg().equals(souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                ArrayList<Character> phasesSouscentreList = souscentrePhasesMap.get(souscentre);
                                String phasesEnchaine = "";
                                if (!phasesSouscentreList.isEmpty()) {
                                    for (char c : phasesSouscentreList) {
                                        if (c != 'T') {
                                            phasesEnchaine += c;
                                        }
                                    }
                                }

                                int nbsec = nombreSecretariatsD1Souscentre(souscentre);
                                int nbtours = nbsec;
                                if (nbsec == 0) {
                                    nbtours = 1;
                                }
                                String scentreAffiche = "";
                                String numsec = "";
                                String pers = "";
                                String fonctprov = "";

                                for (int i = 0; i < nbtours; i++) {
                                    if (souscentreIntervenantMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "";
                                        pers = souscentreIntervenantMap.get(souscentre).getPersonnel().getNompers() + " " + souscentreIntervenantMap.get(souscentre).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantMap.get(souscentre).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantMap.get(souscentre).getPersonnel().getStructure();
                                    }
                                    if (souscentreIntervenantsecretMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "" + souscentreIntervenantsecretMap.get(souscentre).get(i).getSecretariat().getNumsec();
                                        pers = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getNompers() + " " + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getStructure();
                                    }

                                    //pour CM uniquement
                                    Map<String, Object> row = new HashMap<>();
                                    String examAffiche = "";
                                    if (niveauSelected.equals("PROB")) {
                                        examAffiche = "PROBATOIRE DE L'ENSEIGNEMENT SECONDAIRE GENERAL";
                                    }
                                    if (niveauSelected.equals("BACC")) {
                                        examAffiche = "BACCALAUREAT DE L'ENSEIGNEMENT SECONDAIRE GENERAL";
                                    }
                                    row.put("examen", "à l'examen " + examAffiche);
                                    String qualite = "Chargés de mission";
                                    String pied = "CM/" + groupedexamensEnstring + "/" + anneeSelected;
                                    row.put("qualite", "portant nommination des " + qualite);
                                    row.put("session", anneeSelected);
                                    row.put("numreg", numreg);
                                    row.put("article1", "- Sont nommés " + qualite + " à l'examen " + examAffiche + " de la session " + anneeSelected + ".");
                                    row.put("region", region.getNomreg());
                                    if (nbsec > 0 && i > 0) {
                                        numsc--;
                                    }
                                    row.put("numscentre", numreg + "." + numsc++);
                                    row.put("souscentre", scentreAffiche + "----->(" + phasesEnchaine + ")");
                                    row.put("numsec", numsec);
                                    row.put("pers", pers);
                                    row.put("fonctprov", fonctprov);
                                    row.put("pied", pied);
                                    datasource.add(row);
                                }
                            }
                            //
                        }
                        numreg++;
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\decisionCMEsgReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }
            if (typeSelected.equals("GEN") && titreQualiteSelected.equals("CHARGÉ DE MISSION AUXILIAIRE")) {
                try {
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    int numreg = 1;
                    for (Region region : regions) {
                        int numsc = 1;
                        for (Souscentre souscentre : souscentresList) {
                            if (region.getNomreg().equals(souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                ArrayList<Character> phasesSouscentreList = souscentrePhasesMap.get(souscentre);
                                String phasesEnchaine = "";
                                if (!phasesSouscentreList.isEmpty()) {
                                    for (char c : phasesSouscentreList) {
                                        if (c != 'T') {
                                            phasesEnchaine += c;
                                        }
                                    }
                                }

                                int nbsec = nombreSecretariatsD1Souscentre(souscentre);
                                int nbtours = nbsec;
                                if (nbsec == 0) {
                                    nbtours = 1;
                                }
                                String scentreAffiche = "";
                                String numsec = "";
                                String pers = "";
                                String fonctprov = "";

                                for (int i = 0; i < nbtours; i++) {
                                    if (souscentreIntervenantMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "";
                                        pers = souscentreIntervenantMap.get(souscentre).getPersonnel().getNompers() + " " + souscentreIntervenantMap.get(souscentre).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantMap.get(souscentre).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantMap.get(souscentre).getPersonnel().getStructure();
                                    }
                                    if (souscentreIntervenantsecretMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "" + souscentreIntervenantsecretMap.get(souscentre).get(i).getSecretariat().getNumsec();
                                        pers = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getNompers() + " " + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getStructure();
                                    }

                                    //pour CM uniquement
                                    Map<String, Object> row = new HashMap<>();
                                    String examAffiche = "";
                                    if (niveauSelected.equals("PROB")) {
                                        examAffiche = "PROBATOIRE DE L'ENSEIGNEMENT SECONDAIRE GENERAL";
                                    }
                                    if (niveauSelected.equals("BACC")) {
                                        examAffiche = "BACCALAUREAT DE L'ENSEIGNEMENT SECONDAIRE GENERAL";
                                    }
                                    row.put("examen", "à l'examen " + examAffiche);
                                    String qualite = "Auxiliaires";
                                    String pied = "ACM/" + groupedexamensEnstring + "/" + anneeSelected;
                                    row.put("qualite", "portant nommination des " + qualite + " aux Chargés de Mission");
                                    row.put("session", anneeSelected);
                                    row.put("numreg", numreg);
                                    row.put("article1", "- Sont nommés " + qualite + " à l'examen " + examAffiche + " de la session " + anneeSelected + ".");
                                    row.put("region", region.getNomreg());
                                    if (nbsec > 0 && i > 0) {
                                        numsc--;
                                    }
                                    row.put("numscentre", numreg + "." + numsc++);
                                    row.put("souscentre", scentreAffiche + "----->(" + phasesEnchaine + ")");
                                    row.put("numsec", numsec);
                                    row.put("pers", pers);
                                    row.put("fonctprov", fonctprov);
                                    row.put("pied", pied);
                                    datasource.add(row);
                                }
                            }
                            //
                        }
                        numreg++;
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\decisionACMEsgReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }
            if (niveauSelected.equals("PROB") && typeSelected.equals("GEN Série E") && titreQualiteSelected.equals("CHARGÉ DE MISSION")) {
                //????? intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, titreQualiteSelected);
                try {
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    int numreg = 1;
                    for (Region region : regions) {
                        int numsc = 1;
                        for (Souscentre souscentre : souscentresList) {
                            if (region.getNomreg().equals(souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                int nbsec = nombreSecretariatsD1Souscentre(souscentre);
                                int nbtours = nbsec;
                                if (nbsec == 0) {
                                    nbtours = 1;
                                }
                                String scentreAffiche = "";
                                String numsec = "";
                                String pers = "";
                                String fonctprov = "";

                                for (int i = 0; i < nbtours; i++) {
                                    if (souscentreIntervenantMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "";
                                        pers = souscentreIntervenantMap.get(souscentre).getPersonnel().getNompers() + " " + souscentreIntervenantMap.get(souscentre).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantMap.get(souscentre).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantMap.get(souscentre).getPersonnel().getStructure();
                                    }
                                    if (souscentreIntervenantsecretMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "" + souscentreIntervenantsecretMap.get(souscentre).get(i).getSecretariat().getNumsec();
                                        pers = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getNompers() + " " + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getStructure();
                                    }

                                    //pour CM uniquement
                                    Map<String, Object> row = new HashMap<>();
                                    String examAffiche = "PROBATOIRE DE L'ENSEIGNEMENT SECONDAIRE GENERAL";

                                    row.put("examen", "à l'examen " + examAffiche + ", série E");
                                    String qualite = "Chargés de mission";
                                    String pied = "CM/" + groupedexamensEnstring + ", série E/" + anneeSelected;
                                    row.put("qualite", "portant nommination des " + qualite);
                                    row.put("session", anneeSelected);
                                    row.put("numreg", numreg);
                                    row.put("article1", "- Sont nommés " + qualite + " à l'examen " + examAffiche + ", série E" + " de la session " + anneeSelected + ".");
                                    row.put("region", region.getNomreg());
                                    if (nbsec > 0 && i > 0) {
                                        numsc--;
                                    }
                                    row.put("numscentre", numreg + "." + numsc++);
                                    row.put("souscentre", scentreAffiche);
                                    row.put("numsec", numsec);
                                    row.put("pers", pers);
                                    row.put("fonctprov", fonctprov);
                                    row.put("pied", pied);
                                    datasource.add(row);
                                }
                            }
                            //
                        }
                        numreg++;
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\decisionCMPratiqueProbSerieEReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }
            if (niveauSelected.equals("BACC") && typeSelected.equals("GEN Série E") && titreQualiteSelected.equals("CHARGÉ DE MISSION")) {
                //????? intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, titreQualiteSelected);
                try {
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    int numreg = 1;
                    for (Region region : regions) {
                        int numsc = 1;
                        for (Souscentre souscentre : souscentresList) {
                            if (region.getNomreg().equals(souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                int nbsec = nombreSecretariatsD1Souscentre(souscentre);
                                int nbtours = nbsec;
                                if (nbsec == 0) {
                                    nbtours = 1;
                                }
                                String scentreAffiche = "";
                                String numsec = "";
                                String pers = "";
                                String fonctprov = "";

                                for (int i = 0; i < nbtours; i++) {
                                    if (souscentreIntervenantMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "";
                                        pers = souscentreIntervenantMap.get(souscentre).getPersonnel().getNompers() + " " + souscentreIntervenantMap.get(souscentre).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantMap.get(souscentre).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantMap.get(souscentre).getPersonnel().getStructure();
                                    }
                                    if (souscentreIntervenantsecretMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "" + souscentreIntervenantsecretMap.get(souscentre).get(i).getSecretariat().getNumsec();
                                        pers = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getNompers() + " " + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getStructure();
                                    }

                                    //pour CM uniquement
                                    Map<String, Object> row = new HashMap<>();
                                    String examAffiche = "BACCALAUREAT DE L'ENSEIGNEMENT SECONDAIRE GENERAL";

                                    row.put("examen", "à l'examen " + examAffiche + ", série E");
                                    String qualite = "Chargés de mission";
                                    String pied = "CM/" + groupedexamensEnstring + ", série E/" + anneeSelected;
                                    row.put("qualite", "portant nommination des " + qualite);
                                    row.put("session", anneeSelected);
                                    row.put("numreg", numreg);
                                    row.put("article1", "- Sont nommés " + qualite + " à l'examen " + examAffiche + ", série E" + " de la session " + anneeSelected + ".");
                                    row.put("region", region.getNomreg());
                                    if (nbsec > 0 && i > 0) {
                                        numsc--;
                                    }
                                    row.put("numscentre", numreg + "." + numsc++);
                                    row.put("souscentre", scentreAffiche);
                                    row.put("numsec", numsec);
                                    row.put("pers", pers);
                                    row.put("fonctprov", fonctprov);
                                    row.put("pied", pied);
                                    datasource.add(row);
                                }
                            }
                            //
                        }
                        numreg++;
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\decisionCMPratiqueBacSerieEReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }
            if (niveauSelected.equals("PROB") && typeSelected.equals("IND") && titreQualiteSelected.equals("CHARGÉ DE MISSION")) {
                try {
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    int numreg = 1;
                    for (Region region : regions) {
                        int numsc = 1;
                        for (Souscentre souscentre : souscentresList) {
                            if (region.getNomreg().equals(souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                ArrayList<Character> phasesSouscentreList = souscentrePhasesMap.get(souscentre);
                                String phasesEnchaine = "";
                                if (!phasesSouscentreList.isEmpty()) {
                                    for (char c : phasesSouscentreList) {
                                        if (c != 'T') {
                                            phasesEnchaine += c;
                                        }
                                    }
                                }

                                int nbsec = nombreSecretariatsD1Souscentre(souscentre);
                                int nbtours = nbsec;
                                if (nbsec == 0) {
                                    nbtours = 1;
                                }
                                String scentreAffiche = "";
                                String numsec = "";
                                String pers = "";
                                String fonctprov = "";

                                for (int i = 0; i < nbtours; i++) {
                                    if (souscentreIntervenantMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "";
                                        pers = souscentreIntervenantMap.get(souscentre).getPersonnel().getNompers() + " " + souscentreIntervenantMap.get(souscentre).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantMap.get(souscentre).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantMap.get(souscentre).getPersonnel().getStructure();
                                    }
                                    if (souscentreIntervenantsecretMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "" + souscentreIntervenantsecretMap.get(souscentre).get(i).getSecretariat().getNumsec();
                                        pers = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getNompers() + " " + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getStructure();
                                    }

                                    //pour CM uniquement
                                    Map<String, Object> row = new HashMap<>();
                                    String examAffiche = "Probatoire de l’Enseignement Secondaire Technique Industriel";

                                    row.put("examen", "à l'examen " + examAffiche);
                                    String qualite = "Chargés de mission (phases écrite, pratique 1 et délibération d’admissibilité)";
                                    String pied = "CM/" + groupedexamensEnstring + "/" + anneeSelected;
                                    row.put("qualite", "portant nommination des " + qualite);
                                    row.put("session", anneeSelected);
                                    row.put("numreg", numreg);
                                    row.put("article1", "- Sont nommés " + qualite + " à l'examen " + examAffiche + " de la session " + anneeSelected + ".");
                                    row.put("region", region.getNomreg());
                                    if (nbsec > 0 && i > 0) {
                                        numsc--;
                                    }
                                    row.put("numscentre", numreg + "." + numsc++);
                                    row.put("souscentre", scentreAffiche + "----->(" + phasesEnchaine + ")");
                                    row.put("numsec", numsec);
                                    row.put("pers", pers);
                                    row.put("fonctprov", fonctprov);
                                    row.put("pied", pied);
                                    datasource.add(row);
                                }
                            }
                            //
                        }
                        numreg++;
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\decisionCMProbIndReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }
            if (niveauSelected.equals("BACC") && typeSelected.equals("IND") && titreQualiteSelected.equals("CHARGÉ DE MISSION")) {
                try {
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    int numreg = 1;
                    for (Region region : regions) {
                        int numsc = 1;
                        for (Souscentre souscentre : souscentresList) {
                            if (region.getNomreg().equals(souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                ArrayList<Character> phasesSouscentreList = souscentrePhasesMap.get(souscentre);
                                String phasesEnchaine = "";
                                if (!phasesSouscentreList.isEmpty()) {
                                    for (char c : phasesSouscentreList) {
                                        if (c != 'T') {
                                            phasesEnchaine += c;
                                        }
                                    }
                                }

                                int nbsec = nombreSecretariatsD1Souscentre(souscentre);
                                int nbtours = nbsec;
                                if (nbsec == 0) {
                                    nbtours = 1;
                                }
                                String scentreAffiche = "";
                                String numsec = "";
                                String pers = "";
                                String fonctprov = "";

                                for (int i = 0; i < nbtours; i++) {
                                    if (souscentreIntervenantMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "";
                                        pers = souscentreIntervenantMap.get(souscentre).getPersonnel().getNompers() + " " + souscentreIntervenantMap.get(souscentre).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantMap.get(souscentre).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantMap.get(souscentre).getPersonnel().getStructure();
                                    }
                                    if (souscentreIntervenantsecretMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "" + souscentreIntervenantsecretMap.get(souscentre).get(i).getSecretariat().getNumsec();
                                        pers = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getNompers() + " " + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getStructure();
                                    }

                                    //pour CM uniquement
                                    Map<String, Object> row = new HashMap<>();
                                    String examAffiche = "BACCALAUREAT DE L'ENSEIGNEMENT SECONDAIRE GENERAL";

                                    row.put("examen", "à l'examen " + examAffiche);
                                    String qualite = "Chargés de mission";
                                    String pied = "CM/" + groupedexamensEnstring + "/" + anneeSelected;
                                    row.put("qualite", "portant nommination des " + qualite);
                                    row.put("session", anneeSelected);
                                    row.put("numreg", numreg);
                                    row.put("article1", "- Sont nommés " + qualite + " à l'examen " + examAffiche + " de la session " + anneeSelected + ".");
                                    row.put("region", region.getNomreg());
                                    if (nbsec > 0 && i > 0) {
                                        numsc--;
                                    }
                                    row.put("numscentre", numreg + "." + numsc++);
                                    row.put("souscentre", scentreAffiche + "----->(" + phasesEnchaine + ")");
                                    row.put("numsec", numsec);
                                    row.put("pers", pers);
                                    row.put("fonctprov", fonctprov);
                                    row.put("pied", pied);
                                    datasource.add(row);
                                }
                            }
                            //
                        }
                        numreg++;
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\decisionCMBaccIndReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }
            if (niveauSelected.equals("PROB") && typeSelected.equals("STT") && titreQualiteSelected.equals("CHARGÉ DE MISSION")) {
                try {
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    int numreg = 1;
                    for (Region region : regions) {
                        int numsc = 1;
                        for (Souscentre souscentre : souscentresList) {
                            if (region.getNomreg().equals(souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                ArrayList<Character> phasesSouscentreList = souscentrePhasesMap.get(souscentre);
                                String phasesEnchaine = "";
                                if (!phasesSouscentreList.isEmpty()) {
                                    for (char c : phasesSouscentreList) {
                                        if (c != 'T') {
                                            phasesEnchaine += c;
                                        }
                                    }
                                }

                                int nbsec = nombreSecretariatsD1Souscentre(souscentre);
                                int nbtours = nbsec;
                                if (nbsec == 0) {
                                    nbtours = 1;
                                }
                                String scentreAffiche = "";
                                String numsec = "";
                                String pers = "";
                                String fonctprov = "";

                                for (int i = 0; i < nbtours; i++) {
                                    if (souscentreIntervenantMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "";
                                        pers = souscentreIntervenantMap.get(souscentre).getPersonnel().getNompers() + " " + souscentreIntervenantMap.get(souscentre).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantMap.get(souscentre).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantMap.get(souscentre).getPersonnel().getStructure();
                                    }
                                    if (souscentreIntervenantsecretMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "" + souscentreIntervenantsecretMap.get(souscentre).get(i).getSecretariat().getNumsec();
                                        pers = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getNompers() + " " + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getStructure();
                                    }

                                    //pour CM uniquement
                                    Map<String, Object> row = new HashMap<>();
                                    String examAffiche = "Probatoire de l’Enseignement Secondaire Technique Commercial, Probatoire de Brevet de Technicien, spécialités Economie Sociale et Familiale, Hôtellerie et Tourisme";

                                    row.put("examen", "à l'examen " + examAffiche);
                                    String qualite = "Chargés de mission";
                                    String pied = "CM/" + groupedexamensEnstring + "/" + anneeSelected;
                                    row.put("qualite", "portant nommination des " + qualite);
                                    row.put("session", anneeSelected);
                                    row.put("numreg", numreg);
                                    row.put("article1", "- Sont nommés " + qualite + " à l'examen " + examAffiche + " de la session " + anneeSelected + ".");
                                    row.put("region", region.getNomreg());
                                    if (nbsec > 0 && i > 0) {
                                        numsc--;
                                    }
                                    row.put("numscentre", numreg + "." + numsc++);
                                    row.put("souscentre", scentreAffiche + "----->(" + phasesEnchaine + ")");
                                    row.put("numsec", numsec);
                                    row.put("pers", pers);
                                    row.put("fonctprov", fonctprov);
                                    row.put("pied", pied);
                                    datasource.add(row);
                                }
                            }
                            //
                        }
                        numreg++;
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\decisionCMProbSTTReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }
            if (niveauSelected.equals("BACC") && typeSelected.equals("STT") && titreQualiteSelected.equals("CHARGÉ DE MISSION")) {
                try {
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    int numreg = 1;
                    for (Region region : regions) {
                        int numsc = 1;
                        for (Souscentre souscentre : souscentresList) {
                            if (region.getNomreg().equals(souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                ArrayList<Character> phasesSouscentreList = souscentrePhasesMap.get(souscentre);
                                String phasesEnchaine = "";
                                if (!phasesSouscentreList.isEmpty()) {
                                    for (char c : phasesSouscentreList) {
                                        if (c != 'T') {
                                            phasesEnchaine += c;
                                        }
                                    }
                                }

                                int nbsec = nombreSecretariatsD1Souscentre(souscentre);
                                int nbtours = nbsec;
                                if (nbsec == 0) {
                                    nbtours = 1;
                                }
                                String scentreAffiche = "";
                                String numsec = "";
                                String pers = "";
                                String fonctprov = "";

                                for (int i = 0; i < nbtours; i++) {
                                    if (souscentreIntervenantMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "";
                                        pers = souscentreIntervenantMap.get(souscentre).getPersonnel().getNompers() + " " + souscentreIntervenantMap.get(souscentre).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantMap.get(souscentre).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantMap.get(souscentre).getPersonnel().getStructure();
                                    }
                                    if (souscentreIntervenantsecretMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "" + souscentreIntervenantsecretMap.get(souscentre).get(i).getSecretariat().getNumsec();
                                        pers = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getNompers() + " " + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getStructure();
                                    }

                                    //pour CM uniquement
                                    Map<String, Object> row = new HashMap<>();
                                    String examAffiche = "Baccalauréat de l’Enseignement Secondaire Technique Commercial, du Brevet de Technicien, spécialités Economie Sociale et Familiale & Hôtellerie – Tourisme et aux Brevets Professionnels Commerciaux";

                                    row.put("examen", "à l'examen " + examAffiche);
                                    String qualite = "Chargés de mission";
                                    String pied = "CM/" + groupedexamensEnstring + "/" + anneeSelected;
                                    row.put("qualite", "portant nommination des " + qualite);
                                    row.put("session", anneeSelected);
                                    row.put("numreg", numreg);
                                    row.put("article1", "- Sont nommés " + qualite + " à l'examen " + examAffiche + " de la session " + anneeSelected + ".");
                                    row.put("region", region.getNomreg());
                                    if (nbsec > 0 && i > 0) {
                                        numsc--;
                                    }
                                    row.put("numscentre", numreg + "." + numsc++);
                                    row.put("souscentre", scentreAffiche + "----->(" + phasesEnchaine + ")");
                                    row.put("numsec", numsec);
                                    row.put("pers", pers);
                                    row.put("fonctprov", fonctprov);
                                    row.put("pied", pied);
                                    datasource.add(row);
                                }
                            }
                            //
                        }
                        numreg++;
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\decisionCMBaccSTTReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }
            if (niveauSelected.equals("PROB") && typeSelected.equals("IND") && titreQualiteSelected.equals("CHARGÉ DE MISSION AUXILIAIRE")) {
                try {
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    int numreg = 1;
                    for (Region region : regions) {
                        int numsc = 1;
                        for (Souscentre souscentre : souscentresList) {
                            if (region.getNomreg().equals(souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                ArrayList<Character> phasesSouscentreList = souscentrePhasesMap.get(souscentre);
                                String phasesEnchaine = "";
                                if (!phasesSouscentreList.isEmpty()) {
                                    for (char c : phasesSouscentreList) {
                                        if (c != 'T') {
                                            phasesEnchaine += c;
                                        }
                                    }
                                }

                                int nbsec = nombreSecretariatsD1Souscentre(souscentre);
                                int nbtours = nbsec;
                                if (nbsec == 0) {
                                    nbtours = 1;
                                }
                                String scentreAffiche = "";
                                String numsec = "";
                                String pers = "";
                                String fonctprov = "";

                                for (int i = 0; i < nbtours; i++) {
                                    if (souscentreIntervenantMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "";
                                        pers = souscentreIntervenantMap.get(souscentre).getPersonnel().getNompers() + " " + souscentreIntervenantMap.get(souscentre).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantMap.get(souscentre).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantMap.get(souscentre).getPersonnel().getStructure();
                                    }
                                    if (souscentreIntervenantsecretMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "" + souscentreIntervenantsecretMap.get(souscentre).get(i).getSecretariat().getNumsec();
                                        pers = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getNompers() + " " + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getStructure();
                                    }

                                    //pour CM uniquement
                                    Map<String, Object> row = new HashMap<>();
                                    String examAffiche = "Probatoire de l’Enseignement Secondaire Technique Industriel";

                                    row.put("examen", "à l'examen " + examAffiche);
                                    String qualite = "Auxiliaires aux Chargés de Mission (phases écrite et de correction)";
                                    String pied = "ACM/" + groupedexamensEnstring + "/" + anneeSelected;
                                    row.put("qualite", "portant nommination des " + qualite);
                                    row.put("session", anneeSelected);
                                    row.put("numreg", numreg);
                                    row.put("article1", "- Sont nommés " + qualite + " à l'examen " + examAffiche + " de la session " + anneeSelected + ".");
                                    row.put("region", region.getNomreg());
                                    if (nbsec > 0 && i > 0) {
                                        numsc--;
                                    }
                                    row.put("numscentre", numreg + "." + numsc++);
                                    row.put("souscentre", scentreAffiche + "----->(" + phasesEnchaine + ")");
                                    row.put("numsec", numsec);
                                    row.put("pers", pers);
                                    row.put("fonctprov", fonctprov);
                                    row.put("pied", pied);
                                    datasource.add(row);
                                }
                            }
                            //
                        }
                        numreg++;
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\decisionACMProbIndReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }
            if (niveauSelected.equals("BACC") && typeSelected.equals("IND") && titreQualiteSelected.equals("CHARGÉ DE MISSION AUXILIAIRE")) {
                try {
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    int numreg = 1;
                    for (Region region : regions) {
                        int numsc = 1;
                        for (Souscentre souscentre : souscentresList) {
                            if (region.getNomreg().equals(souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                ArrayList<Character> phasesSouscentreList = souscentrePhasesMap.get(souscentre);
                                String phasesEnchaine = "";
                                if (!phasesSouscentreList.isEmpty()) {
                                    for (char c : phasesSouscentreList) {
                                        if (c != 'T') {
                                            phasesEnchaine += c;
                                        }
                                    }
                                }

                                int nbsec = nombreSecretariatsD1Souscentre(souscentre);
                                int nbtours = nbsec;
                                if (nbsec == 0) {
                                    nbtours = 1;
                                }
                                String scentreAffiche = "";
                                String numsec = "";
                                String pers = "";
                                String fonctprov = "";

                                for (int i = 0; i < nbtours; i++) {
                                    if (souscentreIntervenantMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "";
                                        pers = souscentreIntervenantMap.get(souscentre).getPersonnel().getNompers() + " " + souscentreIntervenantMap.get(souscentre).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantMap.get(souscentre).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantMap.get(souscentre).getPersonnel().getStructure();
                                    }
                                    if (souscentreIntervenantsecretMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "" + souscentreIntervenantsecretMap.get(souscentre).get(i).getSecretariat().getNumsec();
                                        pers = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getNompers() + " " + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getStructure();
                                    }

                                    //pour CM uniquement
                                    Map<String, Object> row = new HashMap<>();
                                    String examAffiche = "Baccalauréat de l’Enseignement Secondaire Technique (séries AF et F), au Brevet de Technicien et aux Brevets Professionnels";

                                    row.put("examen", "à l'examen " + examAffiche);
                                    String qualite = "Auxiliaires aux Chargés de Mission (phases écrite et de correction) ";
                                    String pied = "ACM/" + groupedexamensEnstring + "/" + anneeSelected;
                                    row.put("qualite", "portant nommination des " + qualite);
                                    row.put("session", anneeSelected);
                                    row.put("numreg", numreg);
                                    row.put("article1", "- Sont nommés " + qualite + " à l'examen " + examAffiche + " de la session " + anneeSelected + ".");
                                    row.put("region", region.getNomreg());
                                    if (nbsec > 0 && i > 0) {
                                        numsc--;
                                    }
                                    row.put("numscentre", numreg + "." + numsc++);
                                    row.put("souscentre", scentreAffiche + "----->(" + phasesEnchaine + ")");
                                    row.put("numsec", numsec);
                                    row.put("pers", pers);
                                    row.put("fonctprov", fonctprov);
                                    row.put("pied", pied);
                                    datasource.add(row);
                                }
                            }
                            //
                        }
                        numreg++;
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\decisionACMBaccIndReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }
            if (niveauSelected.equals("PROB") && typeSelected.equals("STT") && titreQualiteSelected.equals("CHARGÉ DE MISSION AUXILIAIRE")) {
                try {
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    int numreg = 1;
                    for (Region region : regions) {
                        int numsc = 1;
                        for (Souscentre souscentre : souscentresList) {
                            if (region.getNomreg().equals(souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                ArrayList<Character> phasesSouscentreList = souscentrePhasesMap.get(souscentre);
                                String phasesEnchaine = "";
                                if (!phasesSouscentreList.isEmpty()) {
                                    for (char c : phasesSouscentreList) {
                                        if (c != 'T') {
                                            phasesEnchaine += c;
                                        }
                                    }
                                }

                                int nbsec = nombreSecretariatsD1Souscentre(souscentre);
                                int nbtours = nbsec;
                                if (nbsec == 0) {
                                    nbtours = 1;
                                }
                                String scentreAffiche = "";
                                String numsec = "";
                                String pers = "";
                                String fonctprov = "";

                                for (int i = 0; i < nbtours; i++) {
                                    if (souscentreIntervenantMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "";
                                        pers = souscentreIntervenantMap.get(souscentre).getPersonnel().getNompers() + " " + souscentreIntervenantMap.get(souscentre).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantMap.get(souscentre).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantMap.get(souscentre).getPersonnel().getStructure();
                                    }
                                    if (souscentreIntervenantsecretMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "" + souscentreIntervenantsecretMap.get(souscentre).get(i).getSecretariat().getNumsec();
                                        pers = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getNompers() + " " + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getStructure();
                                    }

                                    //pour CM uniquement
                                    Map<String, Object> row = new HashMap<>();
                                    String examAffiche = "Probatoire de l’Enseignement Secondaire Technique Commercial, Probatoire de Brevet de Technicien, spécialités Economie Sociale et Familiale, Hôtellerie et Tourisme";

                                    row.put("examen", "à l'examen " + examAffiche);
                                    String qualite = "Auxiliaires aux Chargés de Mission";
                                    String pied = "ACM/" + groupedexamensEnstring + "/" + anneeSelected;
                                    row.put("qualite", "portant nommination des " + qualite);
                                    row.put("session", anneeSelected);
                                    row.put("numreg", numreg);
                                    row.put("article1", "- Sont nommés " + qualite + " à l'examen " + examAffiche + " de la session " + anneeSelected + ".");
                                    row.put("region", region.getNomreg());
                                    if (nbsec > 0 && i > 0) {
                                        numsc--;
                                    }
                                    row.put("numscentre", numreg + "." + numsc++);
                                    row.put("souscentre", scentreAffiche + "----->(" + phasesEnchaine + ")");
                                    row.put("numsec", numsec);
                                    row.put("pers", pers);
                                    row.put("fonctprov", fonctprov);
                                    row.put("pied", pied);
                                    datasource.add(row);
                                }
                            }
                            //
                        }
                        numreg++;
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\decisionACMProbSTTReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }
            if (niveauSelected.equals("BACC") && typeSelected.equals("STT") && titreQualiteSelected.equals("CHARGÉ DE MISSION AUXILIAIRE")) {
                try {
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    int numreg = 1;
                    for (Region region : regions) {
                        int numsc = 1;
                        for (Souscentre souscentre : souscentresList) {
                            if (region.getNomreg().equals(souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                ArrayList<Character> phasesSouscentreList = souscentrePhasesMap.get(souscentre);
                                String phasesEnchaine = "";
                                if (!phasesSouscentreList.isEmpty()) {
                                    for (char c : phasesSouscentreList) {
                                        if (c != 'T') {
                                            phasesEnchaine += c;
                                        }
                                    }
                                }

                                int nbsec = nombreSecretariatsD1Souscentre(souscentre);
                                int nbtours = nbsec;
                                if (nbsec == 0) {
                                    nbtours = 1;
                                }
                                String scentreAffiche = "";
                                String numsec = "";
                                String pers = "";
                                String fonctprov = "";

                                for (int i = 0; i < nbtours; i++) {
                                    if (souscentreIntervenantMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "";
                                        pers = souscentreIntervenantMap.get(souscentre).getPersonnel().getNompers() + " " + souscentreIntervenantMap.get(souscentre).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantMap.get(souscentre).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantMap.get(souscentre).getPersonnel().getStructure();
                                    }
                                    if (souscentreIntervenantsecretMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "" + souscentreIntervenantsecretMap.get(souscentre).get(i).getSecretariat().getNumsec();
                                        pers = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getNompers() + " " + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getStructure();
                                    }

                                    //pour CM uniquement
                                    Map<String, Object> row = new HashMap<>();
                                    String examAffiche = "Baccalauréat de l’Enseignement Secondaire Technique Commercial  et du Brevet de Technicien, spécialités Economie Sociale et Familiale & Hôtellerie - Tourisme";

                                    row.put("examen", "à l'examen " + examAffiche);
                                    String qualite = "Auxiliaires aux Chargés de Mission";
                                    String pied = "ACM/" + groupedexamensEnstring + "/" + anneeSelected;
                                    row.put("qualite", "portant nommination des " + qualite);
                                    row.put("session", anneeSelected);
                                    row.put("numreg", numreg);
                                    row.put("article1", "- Sont nommés " + qualite + " à l'examen " + examAffiche + " de la session " + anneeSelected + ".");
                                    row.put("region", region.getNomreg());
                                    if (nbsec > 0 && i > 0) {
                                        numsc--;
                                    }
                                    row.put("numscentre", numreg + "." + numsc++);
                                    row.put("souscentre", scentreAffiche + "----->(" + phasesEnchaine + ")");
                                    row.put("numsec", numsec);
                                    row.put("pers", pers);
                                    row.put("fonctprov", fonctprov);
                                    row.put("pied", pied);
                                    datasource.add(row);
                                }
                            }
                            //
                        }
                        numreg++;
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\decisionACMBaccSTTReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }
            if (niveauSelected.equals("PROB") && typeSelected.equals("IND Pratique 2") && titreQualiteSelected.equals("CHARGÉ DE MISSION")) {
                //????? intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, titreQualiteSelected);
                try {
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    int numreg = 1;
                    for (Region region : regions) {
                        int numsc = 1;
                        for (Souscentre souscentre : souscentresList) {
                            if (region.getNomreg().equals(souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                int nbsec = nombreSecretariatsD1Souscentre(souscentre);
                                int nbtours = nbsec;
                                if (nbsec == 0) {
                                    nbtours = 1;
                                }
                                String scentreAffiche = "";
                                String numsec = "";
                                String pers = "";
                                String fonctprov = "";

                                for (int i = 0; i < nbtours; i++) {
                                    if (souscentreIntervenantMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "";
                                        pers = souscentreIntervenantMap.get(souscentre).getPersonnel().getNompers() + " " + souscentreIntervenantMap.get(souscentre).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantMap.get(souscentre).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantMap.get(souscentre).getPersonnel().getStructure();
                                    }
                                    if (souscentreIntervenantsecretMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "" + souscentreIntervenantsecretMap.get(souscentre).get(i).getSecretariat().getNumsec();
                                        pers = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getNompers() + " " + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getStructure();
                                    }

                                    //pour CM uniquement
                                    Map<String, Object> row = new HashMap<>();
                                    String examAffiche = "Probatoire de l’Enseignement Secondaire Technique Industriel";

                                    row.put("examen", "à l'examen " + examAffiche);
                                    String qualite = "Chargés de mission (phases pratique 2 et délibération d’admission)";
                                    String pied = "CM/" + groupedexamensEnstring + anneeSelected;
                                    row.put("qualite", "portant nommination des " + qualite);
                                    row.put("session", anneeSelected);
                                    row.put("numreg", numreg);
                                    row.put("article1", "- Sont nommés " + qualite + " à l'examen " + examAffiche + " de la session " + anneeSelected + ".");
                                    row.put("region", region.getNomreg());
                                    if (nbsec > 0 && i > 0) {
                                        numsc--;
                                    }
                                    row.put("numscentre", numreg + "." + numsc++);
                                    row.put("souscentre", scentreAffiche);
                                    row.put("numsec", numsec);
                                    row.put("pers", pers);
                                    row.put("fonctprov", fonctprov);
                                    row.put("pied", pied);
                                    datasource.add(row);
                                }
                            }
                            //
                        }
                        numreg++;
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\decisionCMPratique2ProbReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }
            if (niveauSelected.equals("BACC") && typeSelected.equals("IND Pratique 2") && titreQualiteSelected.equals("CHARGÉ DE MISSION")) {
                //????? intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, titreQualiteSelected);
                try {
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    int numreg = 1;
                    for (Region region : regions) {
                        int numsc = 1;
                        for (Souscentre souscentre : souscentresList) {
                            if (region.getNomreg().equals(souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                int nbsec = nombreSecretariatsD1Souscentre(souscentre);
                                int nbtours = nbsec;
                                if (nbsec == 0) {
                                    nbtours = 1;
                                }
                                String scentreAffiche = "";
                                String numsec = "";
                                String pers = "";
                                String fonctprov = "";

                                for (int i = 0; i < nbtours; i++) {
                                    if (souscentreIntervenantMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "";
                                        pers = souscentreIntervenantMap.get(souscentre).getPersonnel().getNompers() + " " + souscentreIntervenantMap.get(souscentre).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantMap.get(souscentre).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantMap.get(souscentre).getPersonnel().getStructure();
                                    }
                                    if (souscentreIntervenantsecretMap.containsKey(souscentre)) {
                                        scentreAffiche = souscentre.getNomsouscent();
                                        numsec = "" + souscentreIntervenantsecretMap.get(souscentre).get(i).getSecretariat().getNumsec();
                                        pers = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getNompers() + " " + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getPrenom();
                                        fonctprov = souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getFonction().getTitre() + "/" + souscentreIntervenantsecretMap.get(souscentre).get(i).getPersonnel().getStructure();
                                    }

                                    //pour CM uniquement
                                    Map<String, Object> row = new HashMap<>();
                                    String examAffiche = "Baccalauréat de l’Enseignement Secondaire Technique (séries AF & F) et au Brevet de Technicien";

                                    row.put("examen", "à l'examen " + examAffiche);
                                    String qualite = "Chargés de mission (phase pratique 2 et délibération d’admission) ";
                                    String pied = "CM/" + groupedexamensEnstring + anneeSelected;
                                    row.put("qualite", "portant nommination des " + qualite);
                                    row.put("session", anneeSelected);
                                    row.put("numreg", numreg);
                                    row.put("article1", "- Sont nommés " + qualite + " à l'examen " + examAffiche + " de la session " + anneeSelected + ".");
                                    row.put("region", region.getNomreg());
                                    if (nbsec > 0 && i > 0) {
                                        numsc--;
                                    }
                                    row.put("numscentre", numreg + "." + numsc++);
                                    row.put("souscentre", scentreAffiche);
                                    row.put("numsec", numsec);
                                    row.put("pers", pers);
                                    row.put("fonctprov", fonctprov);
                                    row.put("pied", pied);
                                    datasource.add(row);
                                }
                            }
                            //
                        }
                        numreg++;
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\decisionCMPratique2BacReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }
        } else
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session et une qualité !");
    }//GEN-LAST:event_jButtonVisualiserActionPerformed

    private void jComboBoxDepartementSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementSouscentreActionPerformed
        remplirArrondissementSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxDepartementSouscentreActionPerformed

    private void jComboBoxArrondissementSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementSouscentreActionPerformed
        remplirSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementSouscentreActionPerformed

    private void jComboBoxSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSouscentreActionPerformed
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        trouverSouscentre = false;
        if (!groupedexamensEnstring.equals("") && !nomSouscentreSelected.equals("---") && !anneeString.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            jTextFieldEtablissement.setText("");
            secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
            for (Secretariat sec : secretariats) {
                if (sec.getSouscentre().getNomsouscent().equals(nomSouscentreSelected) && sec.getSession().getAnnee() == anneeSelected) {
                    trouverSouscentre = true;
                    break;
                }
            }
            if (trouverSouscentre) {
                remplirNumeroSecretariatCombobox();
            } else {
                numsecCombo = new String[0];
                jComboBoxNumsec.setModel(new DefaultComboBoxModel(numsecCombo));
            }
        }
    }//GEN-LAST:event_jComboBoxSouscentreActionPerformed

    private void jComboBoxRegionSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionSouscentreActionPerformed
        remplirDepartementSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxRegionSouscentreActionPerformed

    private void jButtonAnnulerChoixSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixSouscentreActionPerformed
        jComboBoxRegionSouscentre.setSelectedIndex(0);
        jComboBoxDepartementSouscentre.setSelectedIndex(0);
        jComboBoxArrondissementSouscentre.setSelectedIndex(0);
        jComboBoxSouscentre.setSelectedIndex(0);
        jTextFieldEtablissement.setText("");
        jComboBoxNumsec.setSelectedIndex(0);
        numsecCombo = new String[0];
        jComboBoxNumsec.setModel(new DefaultComboBoxModel(numsecCombo));
    }//GEN-LAST:event_jButtonAnnulerChoixSouscentreActionPerformed

    private void jButtonAnnulerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerPersonnelActionPerformed
        jComboBoxPersonnel.setSelectedIndex(0);
        jTextFieldNomPersonnel.setText("");
        jTextFieldPrenom.setText("");
        jComboBoxFonction.setSelectedIndex(0);
        jComboBoxRegionStructure.setSelectedIndex(0);
        jComboBoxDepartementStructure.setSelectedIndex(0);
        jComboBoxArrondissementStructure.setSelectedIndex(0);
        jTextFieldStructure.setText("");
        jTextFieldCritere.setText("");
    }//GEN-LAST:event_jButtonAnnulerPersonnelActionPerformed

    private void jButtonRechercherPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRechercherPersonnelActionPerformed
        critereSaisi = jTextFieldCritere.getText();
        if (critereSaisi.equals("")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez donner un critère de recherche !");
        } else {
            personnels = metier.findAllPersonnelsLikeName(critereSaisi.toUpperCase());
            //on remplit la combobox des personnels
            personnelsCombo = new String[personnels.size() + 1];
            personnelsCombo[0] = "---";
            int j = 1;
            for (Personnel pers : personnels) {
                personnelsCombo[j++] = pers.getNompers() + " " + pers.getPrenom();
            }
            jComboBoxPersonnel.setModel(new DefaultComboBoxModel(personnelsCombo));
        }
    }//GEN-LAST:event_jButtonRechercherPersonnelActionPerformed

    private void jComboBoxPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPersonnelActionPerformed
        nomEtprenomSelected = (String) jComboBoxPersonnel.getSelectedItem();
        if (!nomEtprenomSelected.equals("---")) {
            for (Personnel pers : personnels) {
                String str = pers.getNompers() + " " + pers.getPrenom();
                if (str.equals(nomEtprenomSelected)) {
                    idPersonnelCliked = pers.getIdpers();
                    jTextFieldNomPersonnel.setText(pers.getNompers());
                    jTextFieldPrenom.setText(pers.getPrenom());
                    jComboBoxFonction.setSelectedItem(pers.getFonction().getTitre());
                    jTextFieldStructure.setText(pers.getStructure());
                    jComboBoxRegionStructure.setSelectedItem(pers.getArrondissement().getDepartement().getRegion().getNomreg());
                    jComboBoxDepartementStructure.setSelectedItem(pers.getArrondissement().getDepartement().getNomdepart());
                    jComboBoxArrondissementStructure.setSelectedItem(pers.getArrondissement().getNomarr());
                    break;
                }
            }
        }
    }//GEN-LAST:event_jComboBoxPersonnelActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonAnnulerChoixExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixExamenActionPerformed
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        jComboBoxSession.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixExamenActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jButtonCreerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerPersonnelActionPerformed
        infoPersonnelSaisies();
        if (!nomPersonnelSaisi.equals("") && !structureSaisie.equals("") && !titreFonctionSelected.equals("---") && !nomArrondissementStructureSelected.equals("---")) {
            for (Arrondissement a : arrondissements) {
                if (a.getNomarr().equals(nomArrondissementStructureSelected)) {
                    arrondissementSelected = a;
                    break;
                }
            }
            for (Fonction f : fonctions) {
                if (f.getTitre().equals(titreFonctionSelected)) {
                    fonctionSelected = f;
                    break;
                }
            }
            try {
                metier.creerPersonnel(new Personnel(nomPersonnelSaisi.toUpperCase(), prenomSaisi.toUpperCase(), structureSaisie.toUpperCase(), fonctionSelected, arrondissementSelected));
                JOptionPane.showMessageDialog(this, " Personnel créé avec succès !");
            } catch (ObcbudgetException ex) {
                JOptionPane.showMessageDialog(this, "Impossible de créer le personnel de nom [" + nomPersonnelSaisi.toUpperCase() + " " + prenomSaisi.toUpperCase() + "] \n raison:" + ex.getMessage());
            }

        } else {
            JOptionPane.showMessageDialog(this, " Tous les champs sont obligatoires sauf le prénom!");
        }
    }//GEN-LAST:event_jButtonCreerPersonnelActionPerformed

    private void jButtonModifierPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierPersonnelActionPerformed
        infoPersonnelSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier ce personnel?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!nomPersonnelSaisi.equals("") && !structureSaisie.equals("") && !titreFonctionSelected.equals("---") && !nomArrondissementStructureSelected.equals("---")) {
                personnelCliked = metier.findPersonnelById(idPersonnelCliked);
                for (Arrondissement a : arrondissements) {
                    if (a.getNomarr().equals(nomArrondissementStructureSelected)) {
                        arrondissementSelected = a;
                        break;
                    }
                }
                for (Fonction f : fonctions) {
                    if (f.getTitre().equals(titreFonctionSelected)) {
                        fonctionSelected = f;
                        break;
                    }
                }
                personnelCliked.setNompers(nomPersonnelSaisi.toUpperCase());
                personnelCliked.setPrenom(prenomSaisi.toUpperCase());
                personnelCliked.setStructure(structureSaisie.toUpperCase());
                personnelCliked.setFonction(fonctionSelected);
                personnelCliked.setArrondissement(arrondissementSelected);
                try {
                    metier.modifierPersonnel(personnelCliked);
                    JOptionPane.showMessageDialog(this, " Personnel modifié avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de modifier le personnel de nom [" + nomPersonnelSaisi.toUpperCase() + " " + prenomSaisi.toUpperCase() + "] \n raison:" + ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, " Tous les champs sont obligatoires sauf le prénom!");
            }
        }
    }//GEN-LAST:event_jButtonModifierPersonnelActionPerformed

    private void jButtonSupprimerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerPersonnelActionPerformed
        infoPersonnelSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer ce personnel?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!nomPersonnelSaisi.equals("") && !structureSaisie.equals("") && !titreFonctionSelected.equals("---") && !nomArrondissementStructureSelected.equals("---")) {
                try {
                    metier.supprimerPersonnel(metier.findPersonnelById(idPersonnelCliked));
                    JOptionPane.showMessageDialog(this, " Personnel supprimé avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer le personnel de nom [" + nomPersonnelSaisi + " " + prenomSaisi + "] \n raison:" + ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, " Tous les champs sont obligatoires sauf le prénom!");
            }
        }
    }//GEN-LAST:event_jButtonSupprimerPersonnelActionPerformed

    private void jButtonVisualiserTousPersonnelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserTousPersonnelsActionPerformed
        personnels = metier.findAllPersonnels();
        try {
            List<Map<String, Object>> datasource = new ArrayList<>();
            int i = 1;
            for (Personnel p : personnels) {
                Map<String, Object> row = new HashMap<>();
                String numero = "" + i++;
                row.put("numero", numero);
                row.put("region", p.getArrondissement().getDepartement().getRegion().getNomreg());
                row.put("departement", p.getArrondissement().getDepartement().getNomdepart());
                row.put("arrondissement", p.getArrondissement().getNomarr());
                row.put("nom", p.getNompers());
                row.put("prenom", p.getPrenom());
                row.put("structure", p.getStructure());
                row.put("fonction", p.getFonction().getTitre());
                datasource.add(row);
            }
            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\personnelReport.jrxml");
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
            jasperViewer.setVisible(true);
        } catch (JRException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_jButtonVisualiserTousPersonnelsActionPerformed

    private void jComboBoxNumsecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNumsecActionPerformed
        numsecString = (String) jComboBoxNumsec.getSelectedItem();
        if (!numsecString.equals("---")) {
            //nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
            numsecSelected = Integer.parseInt(numsecString);
            for (Secretariat sec : secretariatsD1Souscentre) {
                if (sec.getNumsec() == numsecSelected) {
                    jTextFieldEtablissement.setText(sec.getEtablissement().getAbreviation());
                    secretariatSelected = sec;
                    break;
                }
            }
        }

    }//GEN-LAST:event_jComboBoxNumsecActionPerformed

    private void jButtonAffecterPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAffecterPersonnelActionPerformed
        model.setRowCount(0);//vide la jTable
        infoIntervenantSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nomsEtPrenomsSelected.equals("---") || titreQualiteSelected.equals("---") || typeResidenceSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un personnel, un groupe d'examens, une session, un sous-centre et/ou un secrétariat, une qualité et un type de résidence !");
        } else {
            List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats
            String typeReel = typeSelected;
            String phase = "";
            if (typeSelected.equals("GEN Série E") || typeSelected.equals("IND Pratique 2")) {
                phase = "PRATIQUE";
            } else {
                phase = "ECRIT";
            }
            if (typeSelected.equals("GEN Série E")) {
                typeReel = "GEN";
            }
            if (typeSelected.equals("IND Pratique 2")) {
                typeReel = "IND";
            }

            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeReel);
            anneeSelected = Integer.parseInt(anneeString);

            for (Session s : sessions) {
                if (s.getAnnee() == anneeSelected) {
                    sessionSelected = s;
                    break;
                }
            }
            for (Souscentre souscentre : souscentres) {
                if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                    souscentreSelected = souscentre;
                    break;
                }
            }
            //idPersonnelCliked est déterminé au moment du clic sur la jComboBoxPersonnel
            personnelCliked = metier.findPersonnelById(idPersonnelCliked);
            Activite activite = metier.findActiviteByNom(phase);
            Qualite qualite = metier.findQualiteByTitre(titreQualiteSelected);
            boolean resident = false;
            if (typeResidenceSelected.equals("RESIDENT")) {
                resident = true;
            }

            //remplissage souscentreAsecretariatsDemultipliesList
            secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
            if (!secretariats.isEmpty()) {
                for (Secretariat sec : secretariats) {
                    if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                        souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                    }
                }
            }
            if (souscentreAsecretariatsDemultipliesList.contains(souscentreSelected)) {//sous-centre à plusieurs secrétariats
                if (numsecString.equals("---")) {
                    JOptionPane.showMessageDialog(this, "Veuillez sélectionner un numéro de secrétariat svp.");
                } else {//l'affectation se fait dans secretariatSelected déterminé lors du clic sur numsecCombobox
                    try {
                        metier.creerIntervenantsecret(new Intervenantsecret(groupe, sessionSelected, personnelCliked, secretariatSelected, activite, qualite, resident));
                        JOptionPane.showMessageDialog(this, titreQualiteSelected + " affecté avec succès !");
                        desIntervenantsecret = metier.findAllIntervenantsecretD1GroupedexamensD1SouscentreA1SessionD1ActiviteEt1Qualite(anneeSelected, nomSouscentreSelected, niveauSelected, typeReel, phase, titreQualiteSelected);
                        int i = 1;
                        for (Intervenantsecret intersec : desIntervenantsecret) {
                            model.insertRow(model.getRowCount(), new Object[]{intersec.getIdintersec(), i++, intersec.getPersonnel().getNompers(), intersec.getPersonnel().getPrenom(), intersec.getPersonnel().getFonction().getTitre(), intersec.getPersonnel().getStructure(), intersec.getPersonnel().getArrondissement().getDepartement().getRegion().getNomreg(), intersec.getPersonnel().getArrondissement().getDepartement().getNomdepart(), intersec.getPersonnel().getArrondissement().getNomarr(), niveauSelected, typeReel, intersec.getSession().getAnnee(), intersec.getSecretariat().getSouscentre().getNomsouscent(), intersec.getSecretariat().getNumsec(), intersec.getSecretariat().getEtablissement().getAbreviation(), intersec.getQualite().getTitre(), intersec.getResident()});
                        }
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible d'affecter le " + titreQualiteSelected + " au secretariat " + secretariatSelected.getNumsec() + " du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                    }
                }
            } else {//sous-centre sans secretariats démultipliés
                try {
                    metier.creerIntervenant(new Intervenant(groupe, sessionSelected, personnelCliked, souscentreSelected, activite, qualite, resident));
                    JOptionPane.showMessageDialog(this, titreQualiteSelected + " affecté avec succès !");
                    intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SouscentreD1SessionD1ActiviteEt1Qualite(anneeSelected, nomSouscentreSelected, niveauSelected, typeReel, phase, titreQualiteSelected);
                    int i = 1;
                    for (Intervenant interv : intervenants) {
                        model.insertRow(model.getRowCount(), new Object[]{interv.getIdinterv(), i++, interv.getPersonnel().getNompers(), interv.getPersonnel().getPrenom(), interv.getPersonnel().getFonction().getTitre(), interv.getPersonnel().getStructure(), interv.getPersonnel().getArrondissement().getDepartement().getRegion().getNomreg(), interv.getPersonnel().getArrondissement().getDepartement().getNomdepart(), interv.getPersonnel().getArrondissement().getNomarr(), niveauSelected, typeSelected, interv.getSession().getAnnee(), interv.getSouscentre().getNomsouscent(), "", "", interv.getQualite().getTitre(), interv.getResident()});
                    }
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible d'affecter le " + titreQualiteSelected + " pour le sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonAffecterPersonnelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueDecisions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueDecisions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueDecisions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueDecisions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueDecisions().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.ButtonGroup buttonGroup7;
    private javax.swing.JButton jButtonAffecterPersonnel;
    private javax.swing.JButton jButtonAnnulerChoixExamen;
    private javax.swing.JButton jButtonAnnulerChoixSouscentre;
    private javax.swing.JButton jButtonAnnulerPersonnel;
    private javax.swing.JButton jButtonCreerEtAffecterPersonnel;
    private javax.swing.JButton jButtonCreerPersonnel;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonModifierAffectation;
    private javax.swing.JButton jButtonModifierPersonnel;
    private javax.swing.JButton jButtonRechercherAffectation;
    private javax.swing.JButton jButtonRechercherPersonnel;
    private javax.swing.JButton jButtonSupprimerAffectation;
    private javax.swing.JButton jButtonSupprimerPersonnel;
    private javax.swing.JButton jButtonVisualiser;
    private javax.swing.JButton jButtonVisualiserTousPersonnels;
    private javax.swing.JComboBox<String> jComboBoxArrondissementSouscentre;
    private javax.swing.JComboBox<String> jComboBoxArrondissementStructure;
    private javax.swing.JComboBox<String> jComboBoxDepartementSouscentre;
    private javax.swing.JComboBox<String> jComboBoxDepartementStructure;
    private javax.swing.JComboBox<String> jComboBoxFonction;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxNumsec;
    private javax.swing.JComboBox<String> jComboBoxPersonnel;
    private javax.swing.JComboBox<String> jComboBoxQualite;
    private javax.swing.JComboBox<String> jComboBoxRegionSouscentre;
    private javax.swing.JComboBox<String> jComboBoxRegionStructure;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxSouscentre;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JComboBox<String> jComboBoxTypeResidence;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelArrondissementSouscentre;
    private javax.swing.JLabel jLabelArrondissementStructure;
    private javax.swing.JLabel jLabelCritere;
    private javax.swing.JLabel jLabelDepartementSouscentre;
    private javax.swing.JLabel jLabelDepartementStructure;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelExamen1;
    private javax.swing.JLabel jLabelFonction;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelNomPersonnel;
    private javax.swing.JLabel jLabelPersonnel;
    private javax.swing.JLabel jLabelPrenom;
    private javax.swing.JLabel jLabelQualite;
    private javax.swing.JLabel jLabelRegionSouscentre;
    private javax.swing.JLabel jLabelRégionStructure;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelSouscentre;
    private javax.swing.JLabel jLabelStructure;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JLabel jLabelTypeResidence;
    private javax.swing.JPanel jPanelChoixExamen;
    private javax.swing.JPanel jPanelChoixExamen1;
    private javax.swing.JPanel jPanelChoixSouscentre;
    private javax.swing.JPanel jPanelDateNaissance;
    private javax.swing.JPanel jPanelGestionEtat;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldCritere;
    private javax.swing.JTextField jTextFieldEtablissement;
    private javax.swing.JTextField jTextFieldNomPersonnel;
    private javax.swing.JTextField jTextFieldPrenom;
    private javax.swing.JTextField jTextFieldStructure;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private String[] fonctionsCombo = null;
    private String[] regionsStructureCombo = null;
    private String[] departementsStructureCombo = null;
    private String[] arrondissementsStructureCombo = null;
    private String[] regionsSouscentreCombo = null;
    private String[] departementsSouscentreCombo = null;
    private String[] arrondissementsSouscentreCombo = null;
    private String[] souscentresCombo = null;
    private Souscentre souscentreSelected = null;
    private List<Session> sessions = null;
    private List<Souscentre> souscentres = null;
    private Examen examenSelected = null;
    private String[] examensList = null;
    private List<Examen> examensSelected = new ArrayList<>();
    private List<Examen> examens = null;
    private String[] sessionsCombo = null;
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String[] typeResidencesCombo = null;
    private String[] numsecCombo = null;
    private String typeResidenceSelected = "";
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private String[] personnelsCombo = null;
    private String nomPersonnelSaisi = "";
    private String prenomSaisi = "";
    private String titreFonctionSelected = "";
    private String structureSaisie = "";
    private String critereSaisi = "";
    private String nomEtprenomSelected = "";
    private int idPersonnelCliked = 0;
    private int idIntervenantCliked = 0;
    private int idIntervenantsecretCliked = 0;
    private List<Intervenant> intervenantsRecherches = null;
    private List<Intervenantsecret> intervenantsecretsRecherches = null;
    private List<Personnel> personnels = null;
    private Personnel personnelCliked = null;
    private String nomsEtPrenomsSelected = "";
    private List<Departement> departements = null;
    private Departement departementSelected = null;
    private List<Fonction> fonctions = null;
    private Fonction fonctionSelected = null;
    private Arrondissement arrondissementSelected = null;
    private List<Arrondissement> arrondissements = null;
    private List<Region> regions = null;
    private List<Qualite> qualites = null;
    private List<Secretariat> secretariats = null;
    private List<Secretariat> desSecretariats = null;
    private Secretariat secretariatSelected = null;
    private List<Secretariat> secretariatsD1Souscentre = new ArrayList<>();
    private String[] qualitesCombo = null;
    private String nomRegionStructureSelected = "";
    private String nomDepartementStructureSelected = "";
    private String nomArrondissementStructureSelected = "";
    private String nomRegionSouscentreSelected = "";
    private String nomDepartementSouscentreSelected = "";
    private String nomArrondissementSouscentreSelected = "";
    private String nomSouscentreSelected = "";
    private int numsecSelected = 0;
    private String numsecString = "";
    private boolean trouverSouscentre = false;
    private boolean trouverExamen = false;
    private boolean testSiIntervenant = false;
    private boolean testSiIntervenantsecret = false;
    private String titreQualiteSelected = "";
    private List<Intervenant> intervenants = null;
    private List<Intervenantsecret> desIntervenantsecret = null;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        regions = metier.findAllRegions();
        fonctions = metier.findAllFonctions();
        sessions = metier.findAllSessions();
        qualites = metier.findAllQualites();       
        examens = metier.findAllExamens();
        intervenants = metier.findAllIntervenants();
        souscentres = metier.findAllSouscentres();

        //on remplit la combobox des fonctions       
        fonctionsCombo = new String[fonctions.size() + 1];
        fonctionsCombo[0] = "---";
        int j = 1;
        for (Fonction fonction : fonctions) {
            fonctionsCombo[j++] = fonction.getTitre();
        }
        jComboBoxFonction.setModel(new DefaultComboBoxModel(fonctionsCombo));

        //on remplit la combobox des régions de structure
        regionsStructureCombo = new String[regions.size() + 1];
        regionsStructureCombo[0] = "---";
        int i = 1;
        for (Region region : regions) {
            regionsStructureCombo[i++] = region.getNomreg();
        }
        jComboBoxRegionStructure.setModel(new DefaultComboBoxModel(regionsStructureCombo));

        //on remplit la combobox des régions de Souscentre
        regionsSouscentreCombo = new String[regions.size() + 1];
        regionsSouscentreCombo[0] = "---";
        int k = 1;
        for (Region region : regions) {
            regionsSouscentreCombo[k++] = region.getNomreg();
        }
        jComboBoxRegionSouscentre.setModel(new DefaultComboBoxModel(regionsSouscentreCombo));

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int l = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[l++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des qualites
        qualitesCombo = new String[]{"---", "CHARGÉ DE MISSION", "CHARGÉ DE MISSION AUXILIAIRE"};
        jComboBoxQualite.setModel(new DefaultComboBoxModel(qualitesCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "GEN", "GEN Série E", "IND", "IND Pratique 2", "STT"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        //on remplit la combobox des types de déplacement
        typeResidencesCombo = new String[]{"---", "RESIDENT", "PERIPHERIQUE"};
        jComboBoxTypeResidence.setModel(new DefaultComboBoxModel(typeResidencesCombo));

        remplirDepartementStructureCombobox();
        remplirArrodissementStructureCombobox();
        remplirDepartementSouscentreCombobox();
        remplirArrondissementSouscentreCombobox();
        remplirSouscentreCombobox();
    }

    private void infoPersonnelSaisies() {
        nomPersonnelSaisi = (String) jTextFieldNomPersonnel.getText();
        prenomSaisi = (String) jTextFieldPrenom.getText();
        structureSaisie = jTextFieldStructure.getText();
        titreFonctionSelected = (String) jComboBoxFonction.getSelectedItem();
        nomDepartementStructureSelected = (String) jComboBoxDepartementStructure.getSelectedItem();
        nomArrondissementStructureSelected = (String) jComboBoxArrondissementStructure.getSelectedItem();
    }

    private void infoIntervenantSaisies() {
        nomsEtPrenomsSelected = (String) jComboBoxPersonnel.getSelectedItem();
        nomPersonnelSaisi = jTextFieldNomPersonnel.getText();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        numsecString = (String) jComboBoxNumsec.getSelectedItem();
        typeResidenceSelected = (String) jComboBoxTypeResidence.getSelectedItem();
        titreQualiteSelected = (String) jComboBoxQualite.getSelectedItem();
    }

    private void remplirDepartementStructureCombobox() {
        nomRegionStructureSelected = (String) jComboBoxRegionStructure.getSelectedItem();
        departements = metier.findAllDepartementsD1Region(nomRegionStructureSelected);
        //on remplit la combobox des départements
        departementsStructureCombo = new String[departements.size() + 1];
        departementsStructureCombo[0] = "---";
        int i = 1;
        for (Departement departement : departements) {
            departementsStructureCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartementStructure.setModel(new DefaultComboBoxModel(departementsStructureCombo));
    }

    private void remplirArrodissementStructureCombobox() {
        nomDepartementStructureSelected = (String) jComboBoxDepartementStructure.getSelectedItem();
        arrondissements = metier.findAllArrondissementsD1Departement(nomDepartementStructureSelected);
        //on remplit la combobox des départements
        arrondissementsStructureCombo = new String[arrondissements.size() + 1];
        arrondissementsStructureCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissements) {
            arrondissementsStructureCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissementStructure.setModel(new DefaultComboBoxModel(arrondissementsStructureCombo));
    }

    private void remplirDepartementSouscentreCombobox() {
        nomRegionSouscentreSelected = (String) jComboBoxRegionSouscentre.getSelectedItem();
        departements = metier.findAllDepartementsD1Region(nomRegionSouscentreSelected);
        //on remplit la combobox des départements du sous-centre
        departementsSouscentreCombo = new String[departements.size() + 1];
        departementsSouscentreCombo[0] = "---";
        int i = 1;
        for (Departement departement : departements) {
            departementsSouscentreCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartementSouscentre.setModel(new DefaultComboBoxModel(departementsSouscentreCombo));
    }

    private void remplirArrondissementSouscentreCombobox() {
        nomDepartementSouscentreSelected = (String) jComboBoxDepartementSouscentre.getSelectedItem();
        arrondissements = metier.findAllArrondissementsD1Departement(nomDepartementSouscentreSelected);
        //on remplit la combobox des arrondissements
        arrondissementsSouscentreCombo = new String[arrondissements.size() + 1];
        arrondissementsSouscentreCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissements) {
            arrondissementsSouscentreCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissementSouscentre.setModel(new DefaultComboBoxModel(arrondissementsSouscentreCombo));
    }

    private void remplirSouscentreCombobox() {
        nomArrondissementSouscentreSelected = (String) jComboBoxArrondissementSouscentre.getSelectedItem();
        souscentres = metier.findAllSouscentresD1Arrondissement(nomArrondissementSouscentreSelected);
        //on remplit la combobox des sous-centres
        souscentresCombo = new String[souscentres.size() + 1];
        souscentresCombo[0] = "---";
        int i = 1;
        for (Souscentre souscentre : souscentres) {
            souscentresCombo[i++] = souscentre.getNomsouscent();
        }
        jComboBoxSouscentre.setModel(new DefaultComboBoxModel(souscentresCombo));
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String typeReel = typeSelected;
        if (typeSelected.equals("GEN Série E")) {
            typeReel = "GEN";
        }
        if (typeSelected.equals("IND Pratique 2")) {
            typeReel = "IND";
        }
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeReel);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    private void remplirNumeroSecretariatCombobox() {
        trouverExamen = false;
        String separateur = ", ";
        examensList = groupedexamensEnstring.split(separateur);
        for (int i = 0; i < examensList.length; i++) {
            for (Examen e : examens) {
                if (e.getSigle().equals(examensList[i])) {
                    examensSelected.add(e);
                    break;
                }
            }
        }
        /*      
        for (Examen e : examensSelected) {
            for (Secretariat sec : secretariats) {
                if (sec.getExamen().getNomexam().equals(e.getNomexam())) {
                    trouverExamen = true;
                    break;
                }
            }

            if (trouverExamen) {
                desSecretariats = metier.findAllSecretariatsD1SouscentreA1SessionEt1Examen(nomSouscentreSelected, anneeSelected, e.getSigle());
                secretariatsD1Souscentre.clear();
                for (Secretariat sec : desSecretariats) {
                    secretariatsD1Souscentre.add(sec);
                }

            }
        }
        */
        numsecCombo = new String[secretariatsD1Souscentre.size() + 1];
        numsecCombo[0] = "---";
        int i = 1;
        for (Secretariat s : secretariatsD1Souscentre) {
            numsecCombo[i++] = "" + s.getNumsec();

        }
        jComboBoxNumsec.setModel(new DefaultComboBoxModel(numsecCombo));
    }

    private int nombreSecretariatsD1Souscentre(Souscentre scentre) {
        int nb = 0;
        secretariats = metier.findAllSecretariats();
        trouverExamen = false;
        String separateur = ", ";
        examensList = groupedexamensEnstring.split(separateur);
        for (int i = 0; i < examensList.length; i++) {
            for (Examen e : examens) {
                if (e.getSigle().equals(examensList[i])) {
                    examensSelected.add(e);
                    break;
                }
            }
        }
        /*
        for (Examen e : examensSelected) {
            for (Secretariat sec : secretariats) {
                if (sec.getExamen().getNomexam().equals(e.getNomexam())) {
                    trouverExamen = true;
                    break;
                }
            }

            if (trouverExamen) {
                desSecretariats = metier.findAllSecretariatsD1SouscentreA1SessionEt1Examen(scentre.getNomsouscent(), anneeSelected, e.getSigle());
                secretariatsD1Souscentre.clear();
                for (Secretariat sec : desSecretariats) {
                    secretariatsD1Souscentre.add(sec);
                }
            }
        }
        */
        nb = secretariatsD1Souscentre.size();
        return nb;
    }
}
