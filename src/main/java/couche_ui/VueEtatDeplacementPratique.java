package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Activite;
import couche_jpa.Arrondissement;
import couche_jpa.Caisse;
import couche_jpa.Centrebilletage;
import couche_jpa.Departement;
import couche_jpa.Deplacepratique;
import couche_jpa.Dureepratique;
import couche_jpa.Examen;
import couche_jpa.Fonction;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Intervenant;
import couche_jpa.Matiere;
import couche_jpa.Option;
import couche_jpa.Personnel;
import couche_jpa.Qualite;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueEtatDeplacementPratique extends javax.swing.JFrame {

    public VueEtatDeplacementPratique() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButtonFermer = new javax.swing.JButton();
        jPanelCorrecteurs = new javax.swing.JPanel();
        jComboBoxDepartementListe = new javax.swing.JComboBox<>();
        jLabelDepartementListe = new javax.swing.JLabel();
        jComboBoxArrondissementListe = new javax.swing.JComboBox<>();
        jComboBoxNomsEtPrenoms = new javax.swing.JComboBox<>();
        jLabelArrondissementListe = new javax.swing.JLabel();
        jComboBoxRegionListe = new javax.swing.JComboBox<>();
        jLabelRegionListe = new javax.swing.JLabel();
        jButtonSupprimerPersonnel = new javax.swing.JButton();
        jButtonAnnulerPersonnel = new javax.swing.JButton();
        jButtonCreerPersonnel = new javax.swing.JButton();
        jButtonListerPersonnels = new javax.swing.JButton();
        jLabelSpecialiteListe = new javax.swing.JLabel();
        jComboBoxSpecialiteListe = new javax.swing.JComboBox<>();
        jLabelCoutposte = new javax.swing.JLabel();
        jTextFieldEffectif = new javax.swing.JTextField();
        jLabelMatiere = new javax.swing.JLabel();
        jComboBoxMatiere = new javax.swing.JComboBox<>();
        jLabelTypeDeplacement = new javax.swing.JLabel();
        jComboBoxTypeDeplacement = new javax.swing.JComboBox<>();
        jLabelResponsable = new javax.swing.JLabel();
        jButtonImporter = new javax.swing.JButton();
        jCheckBoxSansfrais = new javax.swing.JCheckBox();
        jPanelChoixExamen = new javax.swing.JPanel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixExamen = new javax.swing.JButton();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelExamen = new javax.swing.JLabel();
        jLabelNumpratique = new javax.swing.JLabel();
        jComboBoxNumpratique = new javax.swing.JComboBox<>();
        jPanelChoixSouscentre = new javax.swing.JPanel();
        jComboBoxDepartementSouscentre = new javax.swing.JComboBox<>();
        jLabelDepartementSouscentre = new javax.swing.JLabel();
        jLabelSouscentre = new javax.swing.JLabel();
        jComboBoxArrondissementSouscentre = new javax.swing.JComboBox<>();
        jComboBoxSouscentre = new javax.swing.JComboBox<>();
        jLabelArrondissementSouscentre = new javax.swing.JLabel();
        jComboBoxRegionSouscentre = new javax.swing.JComboBox<>();
        jLabelRegionSouscentre = new javax.swing.JLabel();
        jButtonAnnulerChoixSouscentre = new javax.swing.JButton();
        jPanelGestionEtat = new javax.swing.JPanel();
        jButtonCreerEtats = new javax.swing.JButton();
        jButtonMettreAjourEtats = new javax.swing.JButton();
        jButtonVisualiserEtats = new javax.swing.JButton();
        jButtonSupprimerEtats = new javax.swing.JButton();
        jCheckBoxProfessionnel = new javax.swing.JCheckBox();
        jPanelDuree = new javax.swing.JPanel();
        jButtonCreerDuree = new javax.swing.JButton();
        jButtonListerDuree = new javax.swing.JButton();
        jButtonAnnulerDuree = new javax.swing.JButton();
        jLabelJours = new javax.swing.JLabel();
        jComboBoxSpecialiteDuree = new javax.swing.JComboBox<>();
        jLabelDuree = new javax.swing.JLabel();
        jTextFieldDuree = new javax.swing.JTextField();
        jButtonSupprimerDuree = new javax.swing.JButton();
        jLabelSpecialiteDuree = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 28)); // NOI18N
        jLabel1.setText("ETAT DEPLACEMENT DES CORRECTEURS POUR EPREUVES PRATIQUES");

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jPanelCorrecteurs.setBackground(new java.awt.Color(255, 204, 0));
        jPanelCorrecteurs.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer la liste des correcteurs déplacés", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jComboBoxDepartementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartementListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementListeActionPerformed(evt);
            }
        });

        jLabelDepartementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartementListe.setText("Département :");

        jComboBoxArrondissementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissementListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementListeActionPerformed(evt);
            }
        });

        jComboBoxNomsEtPrenoms.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxNomsEtPrenoms.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxNomsEtPrenoms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNomsEtPrenomsActionPerformed(evt);
            }
        });

        jLabelArrondissementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissementListe.setText("Arrondissement :");

        jComboBoxRegionListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegionListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionListeActionPerformed(evt);
            }
        });

        jLabelRegionListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegionListe.setText("Région :");

        jButtonSupprimerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerPersonnel.setText("Supprimer");
        jButtonSupprimerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerPersonnelActionPerformed(evt);
            }
        });

        jButtonAnnulerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerPersonnel.setText("Annuler");
        jButtonAnnulerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerPersonnelActionPerformed(evt);
            }
        });

        jButtonCreerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerPersonnel.setText("Créer");
        jButtonCreerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerPersonnelActionPerformed(evt);
            }
        });

        jButtonListerPersonnels.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonListerPersonnels.setText("Lister");
        jButtonListerPersonnels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerPersonnelsActionPerformed(evt);
            }
        });

        jLabelSpecialiteListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSpecialiteListe.setText("Spécialité :");

        jComboBoxSpecialiteListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelCoutposte.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelCoutposte.setText("Effectif ou ratio :");

        jTextFieldEffectif.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelMatiere.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelMatiere.setText("Matière :");

        jComboBoxMatiere.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelTypeDeplacement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelTypeDeplacement.setText("Type déplacement :");

        jComboBoxTypeDeplacement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxTypeDeplacement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeDeplacementActionPerformed(evt);
            }
        });

        jLabelResponsable.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelResponsable.setText("Noms et prénoms :");

        jButtonImporter.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonImporter.setText("Importer");
        jButtonImporter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImporterActionPerformed(evt);
            }
        });

        jCheckBoxSansfrais.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jCheckBoxSansfrais.setText("Sans forfait");

        javax.swing.GroupLayout jPanelCorrecteursLayout = new javax.swing.GroupLayout(jPanelCorrecteurs);
        jPanelCorrecteurs.setLayout(jPanelCorrecteursLayout);
        jPanelCorrecteursLayout.setHorizontalGroup(
            jPanelCorrecteursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCorrecteursLayout.createSequentialGroup()
                .addGroup(jPanelCorrecteursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCorrecteursLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanelCorrecteursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanelCorrecteursLayout.createSequentialGroup()
                                .addComponent(jLabelDepartementListe)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxDepartementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelCorrecteursLayout.createSequentialGroup()
                                .addComponent(jLabelRegionListe)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxRegionListe, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelCorrecteursLayout.createSequentialGroup()
                                .addComponent(jLabelArrondissementListe)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanelCorrecteursLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelResponsable)
                        .addGroup(jPanelCorrecteursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelCorrecteursLayout.createSequentialGroup()
                                .addGap(305, 305, 305)
                                .addComponent(jLabelMatiere)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxMatiere, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelCorrecteursLayout.createSequentialGroup()
                                .addGroup(jPanelCorrecteursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanelCorrecteursLayout.createSequentialGroup()
                                        .addGap(287, 287, 287)
                                        .addComponent(jLabelSpecialiteListe)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBoxSpecialiteListe, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(174, 174, 174))
                                    .addGroup(jPanelCorrecteursLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBoxNomsEtPrenoms, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButtonCreerPersonnel)
                                        .addGap(20, 20, 20)
                                        .addComponent(jButtonListerPersonnels)
                                        .addGap(18, 18, 18)))
                                .addComponent(jButtonSupprimerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonAnnulerPersonnel)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonImporter))
                            .addGroup(jPanelCorrecteursLayout.createSequentialGroup()
                                .addGap(228, 228, 228)
                                .addComponent(jLabelTypeDeplacement)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxTypeDeplacement, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBoxSansfrais)
                                .addGap(36, 36, 36)
                                .addComponent(jLabelCoutposte)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldEffectif, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelCorrecteursLayout.setVerticalGroup(
            jPanelCorrecteursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCorrecteursLayout.createSequentialGroup()
                .addGroup(jPanelCorrecteursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelCorrecteursLayout.createSequentialGroup()
                        .addContainerGap(14, Short.MAX_VALUE)
                        .addGroup(jPanelCorrecteursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelRegionListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxRegionListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelCorrecteursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelDepartementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxDepartementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelCorrecteursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelCorrecteursLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanelCorrecteursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxMatiere, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelMatiere, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelCorrecteursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxTypeDeplacement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelTypeDeplacement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelCoutposte, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldEffectif, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxSansfrais))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelCorrecteursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxSpecialiteListe, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelSpecialiteListe, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(14, 14, 14)
                .addGroup(jPanelCorrecteursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelResponsable, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNomsEtPrenoms, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCreerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonListerPersonnels, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSupprimerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonImporter, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        jPanelChoixExamen.setBackground(new java.awt.Color(102, 255, 153));
        jPanelChoixExamen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un groupe d'examens et une session", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixExamen.setText("Annuler");
        jButtonAnnulerChoixExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixExamenActionPerformed(evt);
            }
        });

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        jLabelNumpratique.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNumpratique.setText("Pratique n° :");

        jComboBoxNumpratique.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxNumpratique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNumpratiqueActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixExamenLayout = new javax.swing.GroupLayout(jPanelChoixExamen);
        jPanelChoixExamen.setLayout(jPanelChoixExamenLayout);
        jPanelChoixExamenLayout.setHorizontalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabelSession)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabelNumpratique)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxNumpratique, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixExamenLayout.setVerticalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelNumpratique, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxNumpratique, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(17, 17, 17))
        );

        jPanelChoixSouscentre.setBackground(new java.awt.Color(204, 255, 0));
        jPanelChoixSouscentre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un sous-centre", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jComboBoxDepartementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartementSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementSouscentreActionPerformed(evt);
            }
        });

        jLabelDepartementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartementSouscentre.setText("Département :");

        jLabelSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSouscentre.setText("Sous-centre :");

        jComboBoxArrondissementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissementSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementSouscentreActionPerformed(evt);
            }
        });

        jComboBoxSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSouscentre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSouscentreActionPerformed(evt);
            }
        });

        jLabelArrondissementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissementSouscentre.setText("Arrondissement :");

        jComboBoxRegionSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegionSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionSouscentreActionPerformed(evt);
            }
        });

        jLabelRegionSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegionSouscentre.setText("Région :");

        jButtonAnnulerChoixSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixSouscentre.setText("Annuler");
        jButtonAnnulerChoixSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixSouscentreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixSouscentreLayout = new javax.swing.GroupLayout(jPanelChoixSouscentre);
        jPanelChoixSouscentre.setLayout(jPanelChoixSouscentreLayout);
        jPanelChoixSouscentreLayout.setHorizontalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelDepartementSouscentre)
                    .addComponent(jLabelArrondissementSouscentre)
                    .addComponent(jLabelSouscentre)
                    .addComponent(jLabelRegionSouscentre))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxDepartementSouscentre, 0, 458, Short.MAX_VALUE)
                            .addComponent(jComboBoxRegionSouscentre, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(51, 51, 51)
                        .addComponent(jButtonAnnulerChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jComboBoxArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixSouscentreLayout.setVerticalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxRegionSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRegionSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxDepartementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonAnnulerChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelDepartementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelGestionEtat.setBackground(new java.awt.Color(0, 255, 255));
        jPanelGestionEtat.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer l'état", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 102, 255))); // NOI18N

        jButtonCreerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEtats.setText("Créer");
        jButtonCreerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEtatsActionPerformed(evt);
            }
        });

        jButtonMettreAjourEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjourEtats.setText("Mettre à jour");
        jButtonMettreAjourEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourEtatsActionPerformed(evt);
            }
        });

        jButtonVisualiserEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserEtats.setText("Visualiser");
        jButtonVisualiserEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserEtatsActionPerformed(evt);
            }
        });

        jButtonSupprimerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEtats.setText("Supprimer");
        jButtonSupprimerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEtatsActionPerformed(evt);
            }
        });

        jCheckBoxProfessionnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jCheckBoxProfessionnel.setText("Professionnel");

        javax.swing.GroupLayout jPanelGestionEtatLayout = new javax.swing.GroupLayout(jPanelGestionEtat);
        jPanelGestionEtat.setLayout(jPanelGestionEtatLayout);
        jPanelGestionEtatLayout.setHorizontalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jCheckBoxProfessionnel, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jButtonCreerEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonMettreAjourEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiserEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerEtats)
                .addContainerGap())
        );
        jPanelGestionEtatLayout.setVerticalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jCheckBoxProfessionnel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonMettreAjourEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCreerEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonSupprimerEtats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVisualiserEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelDuree.setBackground(new java.awt.Color(255, 204, 204));
        jPanelDuree.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Durée de pratique 1 ou 2", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jButtonCreerDuree.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerDuree.setText("Créer");
        jButtonCreerDuree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerDureeActionPerformed(evt);
            }
        });

        jButtonListerDuree.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonListerDuree.setText("Lister");
        jButtonListerDuree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerDureeActionPerformed(evt);
            }
        });

        jButtonAnnulerDuree.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerDuree.setText("Annuler");
        jButtonAnnulerDuree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerDureeActionPerformed(evt);
            }
        });

        jLabelJours.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelJours.setText("(Jours)");

        jComboBoxSpecialiteDuree.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelDuree.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDuree.setText("Durée :");

        jTextFieldDuree.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonSupprimerDuree.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerDuree.setText("Supprimer");
        jButtonSupprimerDuree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerDureeActionPerformed(evt);
            }
        });

        jLabelSpecialiteDuree.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSpecialiteDuree.setText("Spécialité :");

        javax.swing.GroupLayout jPanelDureeLayout = new javax.swing.GroupLayout(jPanelDuree);
        jPanelDuree.setLayout(jPanelDureeLayout);
        jPanelDureeLayout.setHorizontalGroup(
            jPanelDureeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDureeLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanelDureeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelDureeLayout.createSequentialGroup()
                        .addGroup(jPanelDureeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelDuree)
                            .addComponent(jLabelSpecialiteDuree)
                            .addComponent(jButtonCreerDuree))
                        .addGroup(jPanelDureeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelDureeLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelDureeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBoxSpecialiteDuree, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanelDureeLayout.createSequentialGroup()
                                        .addComponent(jTextFieldDuree, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelJours))))
                            .addGroup(jPanelDureeLayout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(jButtonListerDuree))))
                    .addGroup(jPanelDureeLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jButtonAnnulerDuree)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSupprimerDuree)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanelDureeLayout.setVerticalGroup(
            jPanelDureeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDureeLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanelDureeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSpecialiteDuree, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSpecialiteDuree, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelDureeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDuree, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldDuree, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelJours, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelDureeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCreerDuree, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonListerDuree, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelDureeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSupprimerDuree, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerDuree, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(153, 153, 153)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanelDuree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanelCorrecteurs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27)
                                        .addComponent(jButtonFermer)
                                        .addGap(296, 296, 296)))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelDuree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelCorrecteurs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVisualiserEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserEtatsActionPerformed
        infoSaisies();
        if (!jCheckBoxProfessionnel.isSelected()) {
            List<Souscentre> souscentreAvecCorrecteursList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des correcteurs
            Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
            ArrayList<String> typesBruts = new ArrayList<>();
            ArrayList<String> typesAconsiderer = new ArrayList<>();
            ArrayList<String> niveauxAconsiderer = new ArrayList<>();
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---") && !numpratSelected.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                int numprat = Integer.parseInt(numpratSelected);
                String rubrique = "DEPLACEMENT POUR PRATIQUE " + numprat;
                Rubriquetat rubetat = metier.findRubriquetatByDesignation(rubrique);
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                boolean continuer = false;
                for (Caisse c : caisses) {
                    if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                        continuer = true;
                        break;
                    }
                }
                if (!continuer) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états de déplacement de correcteurs pour pratique " + numprat + " n'ont pas encore été créés pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    //recherche des types des examens à utiliser
                    for (Examen examen : examensSelected) {
                        System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                        if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                            typesBruts.add("ESG");
                        }
                        if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                            typesBruts.add("ESTP");
                        }
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 2) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    //recherche des niveaux des examens à utiliser
                    if (!niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add(niveauSelected);
                        niveauxAconsiderer.add("TOUT");
                    }
                    if (niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add("PROB");
                        niveauxAconsiderer.add("BACC");
                        niveauxAconsiderer.add("TOUT");
                    }
                    //recherche des centres de billetage
                    for (String niveau : niveauxAconsiderer) {
                        for (String type : typesAconsiderer) {
                            List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                            for (Centrebilletage centrebilletage : desCentrebilletages) {
                                ArrayList<Souscentre> souscentresList = new ArrayList<>();
                                if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                    List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                    for (Secteurcouv sect : secteurs) {
                                        if (!souscentresList.contains(sect.getSouscentre())) {
                                            souscentresList.add(sect.getSouscentre());
                                        }
                                    }
                                    centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                                }
                            }
                        }
                    }

                    intervenants = metier.findAllIntervenantsNonProfessionnelsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CORRECTEUR");
                    deplacepratiques = metier.findAllDeplacepratiquesNonProfessionnelsD1GroupeDexamensD1SessionD1Pratique(anneeSelected, niveauSelected, typeSelected, numprat);
                    if (typeSelected.equals("IND") || typeSelected.equals("IND PROF") || typeSelected.equals("GEN")) {
                        lesDureespratique = metier.findAllDureepratiqueD1GroupeDexamensD1SessionD1Pratique(anneeSelected, niveauSelected, typeSelected, numprat);
                    }
                    if (!deplacepratiques.isEmpty()) {
                        //sous-centres ayant des correcteurs
                        for (Deplacepratique deplacepratique : deplacepratiques) {
                            if (!souscentreAvecCorrecteursList.contains(deplacepratique.getIntervenant().getSouscentre())) {
                                souscentreAvecCorrecteursList.add(deplacepratique.getIntervenant().getSouscentre());
                            }
                        }

                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            for (Region region : regions) {
                                for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                    if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                        int totalMontant = 0;
                                        ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                        for (int i = 0; i < souscentresList.size(); i++) {
                                            Souscentre souscentre = souscentresList.get(i);
                                            if (souscentreAvecCorrecteursList.contains(souscentre)) {
                                                int num = 1;
                                                for (Intervenant correcteur : intervenants) {
                                                    if (testSiRattacher(correcteur, deplacepratiques, numprat)) {
                                                        if (correcteur.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                                            Deplacepratique sonDeplacepratique = new Deplacepratique();
                                                            for (Deplacepratique deplacepratique : deplacepratiques) {
                                                                if (deplacepratique.getIntervenant().getPersonnel().getNompers().equals(correcteur.getPersonnel().getNompers()) && deplacepratique.getIntervenant().getPersonnel().getPrenom().equals(correcteur.getPersonnel().getPrenom())) {
                                                                    sonDeplacepratique = deplacepratique;
                                                                    break;
                                                                }
                                                            }

                                                            if (typeSelected.equals("STT")) {
                                                                determinerCoutCorrecteurPratiqueSTT(correcteur, sonDeplacepratique);
                                                            }
                                                            if ((typeSelected.equals("IND") || typeSelected.equals("IND PROF") || typeSelected.equals("GEN")) && !lesDureespratique.isEmpty()) {
                                                                determinerCoutCorrecteurPratiqueIND(correcteur, sonDeplacepratique, lesDureespratique);
                                                            }

                                                            Map<String, Object> row = new HashMap<>();
                                                            String examenAffiche = groupedexamensEnstring;
                                                            if (typeSelected.equals("GEN")) {
                                                                examenAffiche += " série E";
                                                            }
                                                            row.put("examen", examenAffiche);
                                                            row.put("session", anneeSelected);                                                            
                                                            row.put("region", region.getNomreg());
                                                            row.put("reference", "obcbudget-v.3");
                                                            row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                            row.put("num", num++);
                                                            row.put("souscentre", souscentre.getNomsouscent());
                                                            row.put("personnel", correcteur.getPersonnel().getNompers() + " " + correcteur.getPersonnel().getPrenom());
                                                            row.put("provenance", correcteur.getPersonnel().getStructure());
                                                            row.put("effectif", sonDeplacepratique.getEffectif());
                                                            row.put("specialite", sonDeplacepratique.getOption().getSigle());
                                                            row.put("matiere", sonDeplacepratique.getMatiere().getNom().toLowerCase());
                                                            String numpratAffiche = "";
                                                            if (typeSelected.equals("IND")) {
                                                                numpratAffiche = "" + numprat;
                                                            }
                                                            row.put("numprat", numpratAffiche);
                                                            row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                            int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                            row.put("total", montantArrondi);
                                                            totalMontant += montantArrondi;//jasperreport prendra la dernière valeur de cout
                                                            row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                            datasource.add(row);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatDeplacementCorrecteurPratiqueReport.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun Correcteur trouvé dans la base de données !");
                    }
                    souscentreAvecCorrecteursList.clear();
                    examensSelected.clear();
                }//fin else continuer
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s), session et n°pratique sont obligatoires !");
            }
        }
        if (jCheckBoxProfessionnel.isSelected()) {
            List<Souscentre> souscentreAvecCorrecteursList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des correcteurs professionnels
            Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
            ArrayList<String> typesBruts = new ArrayList<>();
            ArrayList<String> typesAconsiderer = new ArrayList<>();
            ArrayList<String> niveauxAconsiderer = new ArrayList<>();
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---") && !numpratSelected.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                int numprat = Integer.parseInt(numpratSelected);
                if (numprat == 2) {
                    JOptionPane.showMessageDialog(this, "Erreur, Il n'existe pas de correcteurs professionnels à la pratique 2 !");
                } else {
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES CORRECTEURS PROFESSIONNELS POUR PRATIQUE 1");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    boolean continuer = false;
                    for (Caisse c : caisses) {
                        if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                            continuer = true;
                            break;
                        }
                    }
                    if (!continuer) {
                        JOptionPane.showMessageDialog(this, "Erreur, les états de prise en charge de correcteurs professionnels pour pratique 1 n'ont pas encore été créés pour ce groupe d'examens !");
                    } else {
                        String separateur = ", ";
                        examensList = groupedexamensEnstring.split(separateur);
                        for (int i = 0; i < examensList.length; i++) {
                            for (Examen e : examens) {
                                if (e.getSigle().equals(examensList[i])) {
                                    examensSelected.add(e);
                                    break;
                                }
                            }
                        }
                        for (Session s : sessions) {
                            if (s.getAnnee() == anneeSelected) {
                                sessionSelected = s;
                                break;
                            }
                        }

                        //recherche des types des examens à utiliser
                        for (Examen examen : examensSelected) {
                            System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                            if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                                typesBruts.add("ESG");
                            }
                            if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                                typesBruts.add("ESTP");
                            }
                        }
                        if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                            typesAconsiderer.add("ESG");
                            typesAconsiderer.add("TOUT");
                        }
                        if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                            typesAconsiderer.add("ESTP");
                            typesAconsiderer.add("TOUT");
                        }
                        if (typesBruts.size() == 2) {
                            typesAconsiderer.add("ESG");
                            typesAconsiderer.add("ESTP");
                            typesAconsiderer.add("TOUT");
                        }
                        //recherche des niveaux des examens à utiliser
                        if (!niveauSelected.equals("TOUT")) {
                            niveauxAconsiderer.add(niveauSelected);
                            niveauxAconsiderer.add("TOUT");
                        }
                        if (niveauSelected.equals("TOUT")) {
                            niveauxAconsiderer.add("PROB");
                            niveauxAconsiderer.add("BACC");
                            niveauxAconsiderer.add("TOUT");
                        }
                        //recherche des centres de billetage
                        for (String niveau : niveauxAconsiderer) {
                            for (String type : typesAconsiderer) {
                                List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                                for (Centrebilletage centrebilletage : desCentrebilletages) {
                                    ArrayList<Souscentre> souscentresList = new ArrayList<>();
                                    if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                        List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                        for (Secteurcouv sect : secteurs) {
                                            if (!souscentresList.contains(sect.getSouscentre())) {
                                                souscentresList.add(sect.getSouscentre());
                                            }
                                        }
                                        centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                                    }
                                }
                            }
                        }

                        intervenants = metier.findAllIntervenantsProfessionnelsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CORRECTEUR");
                        deplacepratiques = metier.findAllDeplacepratiquesProfessionnelsD1GroupeDexamensD1SessionD1Pratique(anneeSelected, niveauSelected, typeSelected, 1);
                        if (niveauSelected.equals("PROB") && typeSelected.equals("IND")) {
                            durees = metier.findAllDureepratiqueD1GroupeDexamensD1SessionD1Pratique(anneeSelected, "PROB", "IND", 1);//1=numpratique                       
                        }
                        if (niveauSelected.equals("BACC") && typeSelected.equals("IND")) {
                            durees = metier.findAllDureepratiqueD1GroupeDexamensD1SessionD1Pratique(anneeSelected, "BACC", "IND", 1);//1=numpratique  
                        }
                        if (niveauSelected.equals("PROB") && typeSelected.equals("IND PROF")) {
                            durees = metier.findAllDureepratiqueD1GroupeDexamensD1SessionD1Pratique(anneeSelected, "PROB", "IND PROF", 1);//1=numpratique
                        }
                        if (niveauSelected.equals("BACC") && typeSelected.equals("IND PROF")) {
                            durees = metier.findAllDureepratiqueD1GroupeDexamensD1SessionD1Pratique(anneeSelected, "BACC", "IND PROF", 1);//1=numpratique
                        }
                        if (typeSelected.equals("GEN")) {
                            durees1 = metier.findAllDureepratiqueD1GroupeDexamensD1SessionD1Pratique(anneeSelected, "PROB", "GEN", 1);//1=numpratique                       
                            durees2 = metier.findAllDureepratiqueD1GroupeDexamensD1SessionD1Pratique(anneeSelected, "BACC", "GEN", 1);
                        }

                        //remplissage de lesDureespratique qui contient toutes les durées
                        ArrayList<Dureepratique> dureespratiqueProf = new ArrayList<Dureepratique>();
                        if (typeSelected.equals("GEN")) {
                            if (!durees1.isEmpty()) {
                                for (Dureepratique duree : durees1) {
                                    dureespratiqueProf.add(duree);
                                }
                            }
                            if (!durees2.isEmpty()) {
                                for (Dureepratique duree : durees2) {
                                    dureespratiqueProf.add(duree);
                                }
                            }
                        }
                        if (typeSelected.equals("IND") || typeSelected.equals("IND PROF")) {
                            if (!durees.isEmpty()) {
                                for (Dureepratique duree : durees) {
                                    dureespratiqueProf.add(duree);
                                }
                            }
                        }

                        if (!deplacepratiques.isEmpty()) {
                            //sous-centres ayant des correcteurs professionnels
                            for (Deplacepratique deplacepratique : deplacepratiques) {
                                if (!souscentreAvecCorrecteursList.contains(deplacepratique.getIntervenant().getSouscentre())) {
                                    souscentreAvecCorrecteursList.add(deplacepratique.getIntervenant().getSouscentre());
                                }
                            }

                            try {
                                List<Map<String, Object>> datasource = new ArrayList<>();
                                for (Region region : regions) {
                                    for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                        if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                            int totalMontant = 0;
                                            ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                            for (int i = 0; i < souscentresList.size(); i++) {
                                                Souscentre souscentre = souscentresList.get(i);
                                                if (souscentreAvecCorrecteursList.contains(souscentre)) {
                                                    int num = 1;
                                                    for (Intervenant correcteur : intervenants) {
                                                        if (testSiRattacher(correcteur, deplacepratiques, numprat)) {
                                                            if (correcteur.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                                                Deplacepratique sonDeplacepratique = new Deplacepratique();
                                                                for (Deplacepratique deplacepratique : deplacepratiques) {
                                                                    if (deplacepratique.getIntervenant().getPersonnel().getNompers().equals(correcteur.getPersonnel().getNompers()) && deplacepratique.getIntervenant().getPersonnel().getPrenom().equals(correcteur.getPersonnel().getPrenom())) {
                                                                        sonDeplacepratique = deplacepratique;
                                                                        break;
                                                                    }
                                                                }

                                                                if (typeSelected.equals("TOUT STT")) {
                                                                    determinerCoutCorrecteurProfessionnelPratiqueSTT(sonDeplacepratique);
                                                                }
                                                                if ((typeSelected.equals("IND") || typeSelected.equals("IND PROF") || typeSelected.equals("GEN")) && !dureespratiqueProf.isEmpty()) {
                                                                    determinerCoutCorrecteurProfessionnelPratiqueIND(correcteur, sonDeplacepratique, dureespratiqueProf);
                                                                }

                                                                Map<String, Object> row = new HashMap<>();
                                                                String examenAffiche = groupedexamensEnstring;
                                                                if (typeSelected.equals("GEN")) {
                                                                    examenAffiche += " série E";
                                                                }
                                                                row.put("examen", examenAffiche);
                                                                row.put("session", anneeSelected);
                                                                row.put("region", region.getNomreg());
                                                                row.put("reference", "obcbudget-v.3");
                                                                row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                                row.put("num", num++);
                                                                row.put("souscentre", souscentre.getNomsouscent());
                                                                row.put("personnel", correcteur.getPersonnel().getNompers() + " " + correcteur.getPersonnel().getPrenom());
                                                                row.put("provenance", correcteur.getPersonnel().getStructure());
                                                                row.put("effectif", sonDeplacepratique.getEffectif());
                                                                row.put("specialite", sonDeplacepratique.getOption().getSigle());
                                                                row.put("matiere", sonDeplacepratique.getMatiere().getNom().toLowerCase());
                                                                row.put("indemforfait", indemforfait);
                                                                row.put("primexpert", primexpert);
                                                                row.put("primeconfid", primeconfid);
                                                                row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                                int montantArrondi = (int) Math.ceil((double) totalProf / (double) 1000) * 1000;
                                                                row.put("total", montantArrondi);
                                                                totalMontant += montantArrondi;//jasperreport prendra la dernière valeur de cout
                                                                row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                                datasource.add(row);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                                JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatDeplacementCorrecteurProfessionnelPratiqueReport.jrxml");
                                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                                JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                                jasperViewer.setVisible(true);
                            } catch (JRException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Aucun Correcteur professeur trouvé dans la base de données !");
                        }
                        souscentreAvecCorrecteursList.clear();
                        examensSelected.clear();
                    }//fin else continuer
                }
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s), session et n°pratique sont obligatoires !");
            }
        }
    }//GEN-LAST:event_jButtonVisualiserEtatsActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonCreerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEtatsActionPerformed
        infoSaisies();
        if (!jCheckBoxProfessionnel.isSelected()) {
            List<Souscentre> souscentreAvecCorrecteursList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des correcteurs
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---") && !numpratSelected.equals("---")) {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                int numprat = Integer.parseInt(numpratSelected);
                String rubrique = "DEPLACEMENT POUR PRATIQUE " + numprat;
                Rubriquetat rubetat = metier.findRubriquetatByDesignation(rubrique);
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (!caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états de déplacement de correcteurs pour pratique " + numprat + " existent déjà pour ce groupe d'examens !");
                } else {
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    intervenants = metier.findAllIntervenantsNonProfessionnelsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CORRECTEUR");
                    deplacepratiques = metier.findAllDeplacepratiquesNonProfessionnelsD1GroupeDexamensD1SessionD1Pratique(anneeSelected, niveauSelected, typeSelected, numprat);
                    if (typeSelected.equals("IND") || typeSelected.equals("IND PROF") || typeSelected.equals("GEN")) {
                        lesDureespratique = metier.findAllDureepratiqueD1GroupeDexamensD1SessionD1Pratique(anneeSelected, niveauSelected, typeSelected, numprat);
                    }
                    if (!deplacepratiques.isEmpty()) {
                        //sous-centres ayant des correcteurs
                        for (Deplacepratique deplacepratique : deplacepratiques) {
                            if (!souscentreAvecCorrecteursList.contains(deplacepratique.getIntervenant().getSouscentre())) {
                                souscentreAvecCorrecteursList.add(deplacepratique.getIntervenant().getSouscentre());
                            }
                        }
                        boolean testSicreer = false;
                        try {
                            for (Souscentre souscentre : souscentreAvecCorrecteursList) {
                                int net = 0;
                                for (Intervenant correcteur : intervenants) {
                                    if (testSiRattacher(correcteur, deplacepratiques, numprat)) {
                                        if (correcteur.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                            Deplacepratique sonDeplacepratique = new Deplacepratique();
                                            for (Deplacepratique deplacepratique : deplacepratiques) {
                                                if (deplacepratique.getIntervenant().getPersonnel().getNompers().equals(correcteur.getPersonnel().getNompers()) && deplacepratique.getIntervenant().getPersonnel().getPrenom().equals(correcteur.getPersonnel().getPrenom())) {
                                                    sonDeplacepratique = deplacepratique;
                                                    break;
                                                }
                                            }
                                            if (typeSelected.equals("STT")) {
                                                determinerCoutCorrecteurPratiqueSTT(correcteur, sonDeplacepratique);
                                            }
                                            if ((typeSelected.equals("IND") || typeSelected.equals("IND PROF") || typeSelected.equals("GEN")) && !lesDureespratique.isEmpty()) {
                                                determinerCoutCorrecteurPratiqueIND(correcteur, sonDeplacepratique, lesDureespratique);
                                            }

                                            int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                            net += montantArrondi;
                                        }
                                    }
                                }
                                metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                testSicreer = true;
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testSicreer) {
                            JOptionPane.showMessageDialog(this, "Etats de déplacement de correcteurs pour pratique " + numprat + " créés avec succès pour ce groupe d'examens !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun Correcteur trouvé dans la base de données !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s), session et n°pratique et imputation sont obligatoires !");
            }

            souscentreAvecCorrecteursList.clear();
        }
        if (jCheckBoxProfessionnel.isSelected()) {
            List<Souscentre> souscentreAvecCorrecteursList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des correcteurs professionnels
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---") && !numpratSelected.equals("---")) {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                int numprat = Integer.parseInt(numpratSelected);
                if (numprat == 2) {
                    JOptionPane.showMessageDialog(this, "Erreur, Il n'existe pas de correcteurs professionnels à la pratique 2 !");
                } else {
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES CORRECTEURS PROFESSIONNELS POUR PRATIQUE 1");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (!caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, les états de prise en charge de correcteurs professionnels pour pratique 1 existent déjà pour ce groupe d'examens !");
                    } else {
                        for (Session s : sessions) {
                            if (s.getAnnee() == anneeSelected) {
                                sessionSelected = s;
                                break;
                            }
                        }

                        intervenants = metier.findAllIntervenantsProfessionnelsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CORRECTEUR");
                        deplacepratiques = metier.findAllDeplacepratiquesProfessionnelsD1GroupeDexamensD1SessionD1Pratique(anneeSelected, niveauSelected, typeSelected, 1);
                        if (niveauSelected.equals("PROB") && typeSelected.equals("IND")) {
                            durees = metier.findAllDureepratiqueD1GroupeDexamensD1SessionD1Pratique(anneeSelected, "PROB", "IND", 1);//1=numpratique                       
                        }
                        if (niveauSelected.equals("BACC") && typeSelected.equals("IND")) {
                            durees = metier.findAllDureepratiqueD1GroupeDexamensD1SessionD1Pratique(anneeSelected, "BACC", "IND", 1);//1=numpratique  
                        }
                        if (niveauSelected.equals("PROB") && typeSelected.equals("IND PROF")) {
                            durees = metier.findAllDureepratiqueD1GroupeDexamensD1SessionD1Pratique(anneeSelected, "PROB", "IND PROF", 1);//1=numpratique
                        }
                        if (niveauSelected.equals("BACC") && typeSelected.equals("IND PROF")) {
                            durees = metier.findAllDureepratiqueD1GroupeDexamensD1SessionD1Pratique(anneeSelected, "BACC", "IND PROF", 1);//1=numpratique
                        }
                        if (typeSelected.equals("GEN")) {
                            durees1 = metier.findAllDureepratiqueD1GroupeDexamensD1SessionD1Pratique(anneeSelected, "PROB", "GEN", 1);//1=numpratique                       
                            durees2 = metier.findAllDureepratiqueD1GroupeDexamensD1SessionD1Pratique(anneeSelected, "BACC", "GEN", 1);
                        }

                        //remplissage de lesDureespratique qui contient toutes les durées
                        ArrayList<Dureepratique> dureespratiqueProf = new ArrayList<Dureepratique>();
                        if (typeSelected.equals("GEN")) {
                            if (!durees1.isEmpty()) {
                                for (Dureepratique duree : durees1) {
                                    dureespratiqueProf.add(duree);
                                }
                            }
                            if (!durees2.isEmpty()) {
                                for (Dureepratique duree : durees2) {
                                    dureespratiqueProf.add(duree);
                                }
                            }
                        }
                        if (typeSelected.equals("IND") || typeSelected.equals("IND PROF")) {
                            if (!durees.isEmpty()) {
                                for (Dureepratique duree : durees) {
                                    dureespratiqueProf.add(duree);
                                }
                            }
                        }

                        if (!deplacepratiques.isEmpty()) {
                            //sous-centres ayant des correcteurs professionnels
                            for (Deplacepratique deplacepratique : deplacepratiques) {
                                if (!souscentreAvecCorrecteursList.contains(deplacepratique.getIntervenant().getSouscentre())) {
                                    souscentreAvecCorrecteursList.add(deplacepratique.getIntervenant().getSouscentre());
                                }
                            }
                            boolean testSicreer = false;
                            try {
                                for (Souscentre souscentre : souscentreAvecCorrecteursList) {
                                    int net = 0;
                                    for (Intervenant correcteur : intervenants) {
                                        if (testSiRattacher(correcteur, deplacepratiques, numprat)) {
                                            if (correcteur.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                                Deplacepratique sonDeplacepratique = new Deplacepratique();
                                                for (Deplacepratique deplacepratique : deplacepratiques) {
                                                    if (deplacepratique.getIntervenant().getPersonnel().getNompers().equals(correcteur.getPersonnel().getNompers()) && deplacepratique.getIntervenant().getPersonnel().getPrenom().equals(correcteur.getPersonnel().getPrenom())) {
                                                        sonDeplacepratique = deplacepratique;
                                                        break;
                                                    }
                                                }
                                                if (typeSelected.equals("TOUT STT")) {
                                                    determinerCoutCorrecteurProfessionnelPratiqueSTT(sonDeplacepratique);
                                                }
                                                if ((typeSelected.equals("IND") || typeSelected.equals("IND PROF") || typeSelected.equals("GEN")) && !dureespratiqueProf.isEmpty()) {
                                                    determinerCoutCorrecteurProfessionnelPratiqueIND(correcteur, sonDeplacepratique, dureespratiqueProf);
                                                }

                                                int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                net += montantArrondi;
                                            }
                                        }
                                    }
                                    metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                    testSicreer = true;
                                }
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                            if (testSicreer) {
                                JOptionPane.showMessageDialog(this, "Etats de prise en charge des correcteurs professionnels pour pratique 1 créés avec succès pour ce groupe d'examens !");
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Aucun Correcteur professionnel trouvé dans la base de données !");
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s), session et n°pratique et imputation sont obligatoires !");
            }

            souscentreAvecCorrecteursList.clear();
        }
    }//GEN-LAST:event_jButtonCreerEtatsActionPerformed

    private void jButtonMettreAjourEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourEtatsActionPerformed
        infoSaisies();
        if (!jCheckBoxProfessionnel.isSelected()) {
            List<Souscentre> souscentreAvecCorrecteursList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des correcteurs
            int numprat = Integer.parseInt(numpratSelected);
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de déplacement de correcteurs pour pratique " + numprat + " pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---") && !numpratSelected.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    String rubrique = "DEPLACEMENT POUR PRATIQUE " + numprat;
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation(rubrique);
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état de déplacement de correcteurs pour pratique" + numprat + " n'existe pour ce groupe d'examens !");
                    } else {
                        //on conserve quelques info de ces anciennes caisses
                        Groupe groupe = caisses.get(0).getGroupe();
                        sessionSelected = caisses.get(0).getSession();
                        //on supprime toutes les anciennes caisses du groupe d'examens ainsi que les intervsec
                        for (Caisse c : caisses) {
                            metier.supprimerCaisse(c);
                        }
                        //on va les recréer

                        intervenants = metier.findAllIntervenantsNonProfessionnelsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CORRECTEUR");
                        deplacepratiques = metier.findAllDeplacepratiquesNonProfessionnelsD1GroupeDexamensD1SessionD1Pratique(anneeSelected, niveauSelected, typeSelected, numprat);
                        if (typeSelected.equals("IND") || typeSelected.equals("IND PROF") || typeSelected.equals("GEN")) {
                            lesDureespratique = metier.findAllDureepratiqueD1GroupeDexamensD1SessionD1Pratique(anneeSelected, niveauSelected, typeSelected, numprat);
                        }
                        if (!deplacepratiques.isEmpty()) {
                            //sous-centres ayant des correcteurs
                            for (Deplacepratique deplacepratique : deplacepratiques) {
                                if (!souscentreAvecCorrecteursList.contains(deplacepratique.getIntervenant().getSouscentre())) {
                                    souscentreAvecCorrecteursList.add(deplacepratique.getIntervenant().getSouscentre());
                                }
                            }
                            boolean testSicreer = false;
                            try {
                                for (Souscentre souscentre : souscentreAvecCorrecteursList) {
                                    int net = 0;
                                    for (Intervenant correcteur : intervenants) {
                                        if (testSiRattacher(correcteur, deplacepratiques, numprat)) {
                                            if (correcteur.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                                Deplacepratique sonDeplacepratique = new Deplacepratique();
                                                for (Deplacepratique deplacepratique : deplacepratiques) {
                                                    if (deplacepratique.getIntervenant().getPersonnel().getNompers().equals(correcteur.getPersonnel().getNompers()) && deplacepratique.getIntervenant().getPersonnel().getPrenom().equals(correcteur.getPersonnel().getPrenom())) {
                                                        sonDeplacepratique = deplacepratique;
                                                        break;
                                                    }
                                                }
                                                if (typeSelected.equals("STT")) {
                                                    determinerCoutCorrecteurPratiqueSTT(correcteur, sonDeplacepratique);
                                                }
                                                if ((typeSelected.equals("IND") || typeSelected.equals("IND PROF") || typeSelected.equals("GEN")) && !lesDureespratique.isEmpty()) {
                                                    determinerCoutCorrecteurPratiqueIND(correcteur, sonDeplacepratique, lesDureespratique);
                                                }
                                                int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                net += montantArrondi;
                                            }
                                        }
                                    }
                                    metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                    testSicreer = true;
                                }
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                            if (testSicreer) {
                                JOptionPane.showMessageDialog(this, "Etats de déplacement de correcteurs pour pratique " + numprat + " créés avec succès pour ce groupe d'examens !");
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Aucun Correcteur trouvé dans la base de données !");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s), session et n°pratique sont obligatoires !");
                }
                souscentreAvecCorrecteursList.clear();
            }//fin if result
        }
        if (jCheckBoxProfessionnel.isSelected()) {
            List<Souscentre> souscentreAvecCorrecteursList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des correcteurs professionnels
            int numprat = Integer.parseInt(numpratSelected);
            if (numprat == 2) {
                JOptionPane.showMessageDialog(this, "Erreur, Il n'existe pas de correcteurs professionnels à la pratique 2 !");
            } else {
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de prise en charge des correcteurs professionnels pour pratique 1 pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    if (!groupedexamensEnstring.equals("") && !anneeString.equals("---") && !numpratSelected.equals("---")) {
                        anneeSelected = Integer.parseInt(anneeString);
                        Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES CORRECTEURS PROFESSIONNELS POUR PRATIQUE 1");
                        caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                        if (caisses.isEmpty()) {
                            JOptionPane.showMessageDialog(this, "Erreur, aucun état de prise en charge des correcteurs professionnels pour pratique 1 n'existe pour ce groupe d'examens !");
                        } else {
                            //on conserve quelques info de ces anciennes caisses
                            Groupe groupe = caisses.get(0).getGroupe();
                            sessionSelected = caisses.get(0).getSession();
                            //on supprime toutes les anciennes caisses du groupe d'examens ainsi que les intervsec
                            for (Caisse c : caisses) {
                                metier.supprimerCaisse(c);
                            }
                            //on va les recréer

                            intervenants = metier.findAllIntervenantsProfessionnelsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CORRECTEUR");
                            deplacepratiques = metier.findAllDeplacepratiquesProfessionnelsD1GroupeDexamensD1SessionD1Pratique(anneeSelected, niveauSelected, typeSelected, 1);
                            if (niveauSelected.equals("PROB") && typeSelected.equals("IND")) {
                                durees = metier.findAllDureepratiqueD1GroupeDexamensD1SessionD1Pratique(anneeSelected, "PROB", "IND", 1);//1=numpratique                       
                            }
                            if (niveauSelected.equals("BACC") && typeSelected.equals("IND")) {
                                durees = metier.findAllDureepratiqueD1GroupeDexamensD1SessionD1Pratique(anneeSelected, "BACC", "IND", 1);//1=numpratique  
                            }
                            if (niveauSelected.equals("PROB") && typeSelected.equals("IND PROF")) {
                                durees = metier.findAllDureepratiqueD1GroupeDexamensD1SessionD1Pratique(anneeSelected, "PROB", "IND PROF", 1);//1=numpratique
                            }
                            if (niveauSelected.equals("BACC") && typeSelected.equals("IND PROF")) {
                                durees = metier.findAllDureepratiqueD1GroupeDexamensD1SessionD1Pratique(anneeSelected, "BACC", "IND PROF", 1);//1=numpratique
                            }
                            if (typeSelected.equals("GEN")) {
                                durees1 = metier.findAllDureepratiqueD1GroupeDexamensD1SessionD1Pratique(anneeSelected, "PROB", "GEN", 1);//1=numpratique                       
                                durees2 = metier.findAllDureepratiqueD1GroupeDexamensD1SessionD1Pratique(anneeSelected, "BACC", "GEN", 1);
                            }

                            //remplissage de lesDureespratique qui contient toutes les durées
                            ArrayList<Dureepratique> dureespratiqueProf = new ArrayList<Dureepratique>();
                            if (typeSelected.equals("GEN")) {
                                if (!durees1.isEmpty()) {
                                    for (Dureepratique duree : durees1) {
                                        dureespratiqueProf.add(duree);
                                    }
                                }
                                if (!durees2.isEmpty()) {
                                    for (Dureepratique duree : durees2) {
                                        dureespratiqueProf.add(duree);
                                    }
                                }
                            }
                            if (typeSelected.equals("IND") || typeSelected.equals("IND PROF")) {
                                if (!durees.isEmpty()) {
                                    for (Dureepratique duree : durees) {
                                        dureespratiqueProf.add(duree);
                                    }
                                }
                            }
                            if (!deplacepratiques.isEmpty()) {
                                //sous-centres ayant des correcteurs professionnels
                                for (Deplacepratique deplacepratique : deplacepratiques) {
                                    if (!souscentreAvecCorrecteursList.contains(deplacepratique.getIntervenant().getSouscentre())) {
                                        souscentreAvecCorrecteursList.add(deplacepratique.getIntervenant().getSouscentre());
                                    }
                                }
                                boolean testSicreer = false;
                                try {
                                    for (Souscentre souscentre : souscentreAvecCorrecteursList) {
                                        int net = 0;
                                        for (Intervenant correcteur : intervenants) {
                                            if (testSiRattacher(correcteur, deplacepratiques, numprat)) {
                                                if (correcteur.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                                    Deplacepratique sonDeplacepratique = new Deplacepratique();
                                                    for (Deplacepratique deplacepratique : deplacepratiques) {
                                                        if (deplacepratique.getIntervenant().getPersonnel().getNompers().equals(correcteur.getPersonnel().getNompers()) && deplacepratique.getIntervenant().getPersonnel().getPrenom().equals(correcteur.getPersonnel().getPrenom())) {
                                                            sonDeplacepratique = deplacepratique;
                                                            break;
                                                        }
                                                    }
                                                    if (typeSelected.equals("TOUT STT")) {
                                                        determinerCoutCorrecteurProfessionnelPratiqueSTT(sonDeplacepratique);
                                                    }
                                                    if ((typeSelected.equals("IND") || typeSelected.equals("IND PROF") || typeSelected.equals("GEN")) && !dureespratiqueProf.isEmpty()) {
                                                        determinerCoutCorrecteurProfessionnelPratiqueIND(correcteur, sonDeplacepratique, dureespratiqueProf);
                                                    }
                                                    int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                    net += montantArrondi;
                                                }
                                            }
                                        }
                                        metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                        testSicreer = true;
                                    }
                                } catch (ObcbudgetException e) {
                                    JOptionPane.showMessageDialog(this, e.getMessage());
                                }
                                if (testSicreer) {
                                    JOptionPane.showMessageDialog(this, "Etats de prise en charge des correcteurs professionnels pour pratique 1 créés avec succès pour ce groupe d'examens !");
                                }
                            } else {
                                JOptionPane.showMessageDialog(this, "Aucun Correcteur professionnel trouvé dans la base de données !");
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s), session et n°pratique sont obligatoires !");
                    }
                    souscentreAvecCorrecteursList.clear();
                }//fin if result
            }
        }
    }//GEN-LAST:event_jButtonMettreAjourEtatsActionPerformed

    private void jButtonSupprimerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEtatsActionPerformed
        infoSaisies();
        if (!jCheckBoxProfessionnel.isSelected()) {
            int numprat = Integer.parseInt(numpratSelected);
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de déplacement de correcteurs pour pratique " + numprat + " pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---") && !numpratSelected.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    String rubrique = "DEPLACEMENT POUR PRATIQUE " + numprat;
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation(rubrique);
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état de déplacement de correcteurs pour pratique " + numprat + " n'existe pour ce groupe d'examens !");
                    } else {
                        try {
                            for (Caisse caisse : caisses) {
                                metier.supprimerCaisse(caisse);
                            }
                            JOptionPane.showMessageDialog(this, "Etats de déplacement de correcteurs pour pratique " + numprat + " supprimés avec succès pour ce groupe d'examens !");
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s), session et n°pratique sont obligatoires !");
                }
            }
        }
        if (jCheckBoxProfessionnel.isSelected()) {
            int numprat = Integer.parseInt(numpratSelected);
            if (numprat == 2) {
                JOptionPane.showMessageDialog(this, "Erreur, Il n'existe pas de correcteurs professionnels à la pratique 2 !");
            } else {
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de prise en charge de correcteurs professionnels pour pratique 1 pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    if (!groupedexamensEnstring.equals("") && !anneeString.equals("---") && !numpratSelected.equals("---")) {
                        anneeSelected = Integer.parseInt(anneeString);
                        Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES CORRECTEURS PROFESSIONNELS POUR PRATIQUE 1");
                        caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                        if (caisses.isEmpty()) {
                            JOptionPane.showMessageDialog(this, "Erreur, aucun état de prise en charge de correcteurs professionnels pour pratique 1 n'existe pour ce groupe d'examens !");
                        } else {
                            try {
                                for (Caisse caisse : caisses) {
                                    metier.supprimerCaisse(caisse);
                                }
                                JOptionPane.showMessageDialog(this, "Etats de prise en charge de correcteurs professionnels pour pratique 1 supprimés avec succès pour ce groupe d'examens !");
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s), session et n°pratique sont obligatoires !");
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerEtatsActionPerformed

    private void jComboBoxDepartementSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementSouscentreActionPerformed
        remplirArrondissementSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxDepartementSouscentreActionPerformed

    private void jComboBoxArrondissementSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementSouscentreActionPerformed
        remplirSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementSouscentreActionPerformed

    private void jComboBoxSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSouscentreActionPerformed
        //jTextField1.setText();
    }//GEN-LAST:event_jComboBoxSouscentreActionPerformed

    private void jComboBoxRegionSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionSouscentreActionPerformed
        remplirDepartementSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxRegionSouscentreActionPerformed

    private void jComboBoxDepartementListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementListeActionPerformed
        remplirArrondissementListeCombobox();
        remplirPersonnelsDuDepartementCombobox();
    }//GEN-LAST:event_jComboBoxDepartementListeActionPerformed

    private void jComboBoxArrondissementListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementListeActionPerformed
        remplirPersonnelsDelArrondissementCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementListeActionPerformed

    private void jComboBoxNomsEtPrenomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNomsEtPrenomsActionPerformed
        nomsEtPrenomsSelected = (String) jComboBoxNomsEtPrenoms.getSelectedItem();
        if (!nomsEtPrenomsSelected.equals("---")) {
            for (Personnel p : personnels) {
                if ((p.getNompers() + " " + p.getPrenom()).equals(nomsEtPrenomsSelected)) {
                    personnelSelected = p;
                    break;
                }
            }
        }
    }//GEN-LAST:event_jComboBoxNomsEtPrenomsActionPerformed

    private void jComboBoxRegionListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionListeActionPerformed
        remplirDepartementListeCombobox();
    }//GEN-LAST:event_jComboBoxRegionListeActionPerformed

    private void jButtonSupprimerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerPersonnelActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nomsEtPrenomsSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre et un personnel !");
        } else {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer ce correcteur du sous-centre [" + nomSouscentreSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                anneeSelected = Integer.parseInt(anneeString);
                try {
                    Intervenant cm = metier.findIntervenantByNomEtPrenomD1GroupeDexamensD1SessionD1SouscentreD1ActiviteEt1Qualite(personnelSelected.getNompers(), personnelSelected.getPrenom(), anneeSelected, nomSouscentreSelected, niveauSelected, typeSelected, phase, "CORRECTEUR");
                    metier.supprimerIntervenant(cm);
                    JOptionPane.showMessageDialog(this, "Correcteur supprimé avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer ce correcteur du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerPersonnelActionPerformed

    private void jButtonAnnulerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerPersonnelActionPerformed
        jComboBoxRegionListe.setSelectedIndex(0);
        jComboBoxDepartementListe.setSelectedIndex(0);
        jComboBoxArrondissementListe.setSelectedIndex(0);
        jComboBoxNomsEtPrenoms.setSelectedIndex(0);
        jComboBoxMatiere.setSelectedIndex(0);
        jComboBoxTypeDeplacement.setSelectedIndex(0);
        jComboBoxSpecialiteListe.setSelectedIndex(0);
        jTextFieldEffectif.setText("");
    }//GEN-LAST:event_jButtonAnnulerPersonnelActionPerformed

    private void jButtonCreerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerPersonnelActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nomsEtPrenomsSelected.equals("---") || typeDeplacementSelected.equals("---") || sigleSpecialiteListeSelected.equals("---") || nomMatiereSelected.equals("---") || effectifString.equals("") || numpratSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre, un personnel, un type de déplacement, la matière, la spécialité, l'effectif/ratio et le numéro de pratique !");
        } else {
            validerEffectif(effectifString);
            if (!continuerEffectif) {//l'effectif peut être égal à zéro: cas de GEN
                JOptionPane.showMessageDialog(this, "Recommencez svp. L'effectif/ratio fourni est incorrect !");
            } else {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                int numprat = Integer.parseInt(numpratSelected);
                Intervenant intervenantCreated = null;
                boolean testSiCreerIntervenant = false;
                boolean testSiCreerDeplacecorrect = false;
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                for (Souscentre souscentre : souscentres) {
                    if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                        souscentreSelected = souscentre;
                        break;
                    }
                }

                for (Option option : options) {
                    if (option.getSigle().equals(sigleSpecialiteListeSelected)) {
                        optionListeSelected = option;
                        break;
                    }
                }

                for (Matiere matiere : matieres) {
                    if (matiere.getNom().equals(nomMatiereSelected)) {
                        matiereSelected = matiere;
                        break;
                    }
                }

                try {
                    //personnelSelected est déterminé au moment du clic sur sa jcombobox
                    Activite activite = metier.findActiviteByNom(phase);
                    Qualite qualite = metier.findQualiteByTitre("CORRECTEUR");
                    boolean resident = false;
                    if (typeDeplacementSelected.equals("CITE DORTOIR")) {
                        resident = true;
                    }
                    intervenantCreated = new Intervenant(groupe, sessionSelected, personnelSelected, souscentreSelected, activite, qualite, resident);
                    metier.creerIntervenant(intervenantCreated);
                    testSiCreerIntervenant = true;
                } catch (ObcbudgetException ex) {
                    testSiCreerIntervenant = false;
                }

                if (testSiCreerIntervenant) {
                    try {
                        boolean sansfrais= false;
                        if(jCheckBoxSansfrais.isSelected()) sansfrais=true;
                        metier.creerDeplacepratique(new Deplacepratique(intervenantCreated, matiereSelected, optionListeSelected, effectifSaisi, numprat, sansfrais));
                        testSiCreerDeplacecorrect = true;
                    } catch (ObcbudgetException ex) {
                        testSiCreerDeplacecorrect = false;
                    }
                }
                if (!testSiCreerDeplacecorrect) {
                    JOptionPane.showMessageDialog(this, "Impossible de créer le correcteur pour le sous-centre [" + nomSouscentreSelected + "]");
                } else {
                    JOptionPane.showMessageDialog(this, "Correcteur créé avec succès !");
                }
            }
        }
    }//GEN-LAST:event_jButtonCreerPersonnelActionPerformed

    private void jButtonListerPersonnelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerPersonnelsActionPerformed
        infoSaisies();
        List<Souscentre> souscentreAvecCorrecteursList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des correcteurs
        Map<Souscentre, ArrayList<Intervenant>> souscentreIntervenantsMap = new HashMap<>();//contient chaque souscentre et la liste de ses intervenants
        Map<Intervenant, Deplacepratique> intervenantDeplacepratiqueMap = new HashMap<>();//contient chaque intervenant et son Deplacepratique
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || numpratSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session et un n°pratique !");
        } else {
            anneeSelected = Integer.parseInt(anneeString);
            int numprat = Integer.parseInt(numpratSelected);
            intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CORRECTEUR");
            deplacepratiques = metier.findAllDeplacepratiquesD1GroupeDexamensD1SessionD1Pratique(anneeSelected, niveauSelected, typeSelected, numprat);

            if (!deplacepratiques.isEmpty()) {
                //sous-centres ayant des correcteurs
                for (Deplacepratique deplacepratique : deplacepratiques) {
                    if (!souscentreAvecCorrecteursList.contains(deplacepratique.getIntervenant().getSouscentre())) {
                        souscentreAvecCorrecteursList.add(deplacepratique.getIntervenant().getSouscentre());
                    }
                }
                for (Souscentre scentre : souscentreAvecCorrecteursList) {
                    ArrayList<Intervenant> intervenantsList = new ArrayList<>();
                    for (Intervenant intervenant : intervenants) {
                        if (!intervenantsList.contains(intervenant) && intervenant.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                            intervenantsList.add(intervenant);
                        }
                    }
                    souscentreIntervenantsMap.put(scentre, intervenantsList);
                }
                for (Intervenant intervenant : intervenants) {
                    for (Deplacepratique deplacepratique : deplacepratiques) {
                        if (intervenant.getPersonnel().getNompers().equals(deplacepratique.getIntervenant().getPersonnel().getNompers()) && intervenant.getPersonnel().getPrenom().equals(deplacepratique.getIntervenant().getPersonnel().getPrenom())) {
                            if (!intervenantDeplacepratiqueMap.containsKey(intervenant)) {
                                intervenantDeplacepratiqueMap.put(intervenant, deplacepratique);
                                break;
                            }
                        }
                    }
                }

                try {
                    List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                    for (Region region : regions) {
                        for (Souscentre souscentre : souscentreIntervenantsMap.keySet()) {
                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                                int i = 1;
                                for (Intervenant intervenant : souscentreIntervenantsMap.get(souscentre)) {
                                    Deplacepratique sonDeplacepratique = intervenantDeplacepratiqueMap.get(intervenant);
                                    if (testSiRattacher(intervenant, deplacepratiques, numprat)) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", anneeSelected);
                                        String examenAffiche = groupedexamensEnstring;
                                        if (typeSelected.equals("GEN")) {
                                            examenAffiche += " série E";
                                        }
                                        row.put("examen", examenAffiche);
                                        row.put("region", region.getNomreg());
                                        row.put("num", i++);
                                        row.put("souscentre", souscentre.getNomsouscent());
                                        String personnelAffiche = intervenant.getPersonnel().getNompers() + " " + intervenant.getPersonnel().getPrenom();
                                        if (intervenant.getPersonnel().getFonction().getTitre().equals("PROF")) {
                                            personnelAffiche += " (Professionnel)";
                                        }
                                        row.put("personnel", personnelAffiche);
                                        String typeDeplacement = "";
                                        if (intervenant.getResident()) {
                                            typeDeplacement = "Cité dortoir";
                                        } else {
                                            typeDeplacement = "Inter urbain";
                                        }
                                        row.put("typeDeplacement", typeDeplacement);
                                        row.put("sansfrais", sonDeplacepratique.isSansfrais());
                                        System.out.println("\n sa spécialité: " + sonDeplacepratique.getOption().getSigle());
                                        row.put("option", sonDeplacepratique.getOption().getSigle());
                                        row.put("matiere", sonDeplacepratique.getMatiere().getNom().toLowerCase());
                                        row.put("effectif", sonDeplacepratique.getEffectif());
                                        row.put("numpratique", sonDeplacepratique.getNumprat());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeCorrecteursPratiqueDeplacesReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Aucun Correcteur trouvé dans la base de données !");
            }
        }
        intervenants.clear();
    }//GEN-LAST:event_jButtonListerPersonnelsActionPerformed

    private void jButtonAnnulerChoixExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixExamenActionPerformed
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        jComboBoxSession.setSelectedIndex(0);
        jComboBoxNumpratique.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixExamenActionPerformed

    private void jButtonAnnulerChoixSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixSouscentreActionPerformed
        jComboBoxRegionSouscentre.setSelectedIndex(0);
        jComboBoxDepartementSouscentre.setSelectedIndex(0);
        jComboBoxArrondissementSouscentre.setSelectedIndex(0);
        jComboBoxSouscentre.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixSouscentreActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
            afficherOptionsEtMatieres();
        }
        if (typeSelected.equals("IND") || typeSelected.equals("GEN") || typeSelected.equals("IND PROF")) {
            jPanelDuree.setEnabled(true);
            jComboBoxSpecialiteDuree.setEnabled(true);
            jTextFieldDuree.setEnabled(true);
            jButtonCreerDuree.setEnabled(true);
            jButtonListerDuree.setEnabled(true);
            jButtonAnnulerDuree.setEnabled(true);
            jButtonSupprimerDuree.setEnabled(true);
        }
        if (typeSelected.equals("STT") || typeSelected.equals("STT PROF") || typeSelected.equals("TOUT ESTI")) {
            jPanelDuree.setEnabled(false);
            jComboBoxSpecialiteDuree.setEnabled(false);
            jTextFieldDuree.setEnabled(false);
            jTextFieldDuree.setText("");
            jButtonCreerDuree.setEnabled(false);
            jButtonListerDuree.setEnabled(false);
            jButtonAnnulerDuree.setEnabled(false);
            jButtonSupprimerDuree.setEnabled(false);
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jButtonCreerDureeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerDureeActionPerformed
        infoSaisies();//la série E est traitée comme une spécialité de ESTI; donc sa durée est dans dureepratique2
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || sigleSpecialiteDureeSelected.equals("---") || dureeString.equals("") || numpratSelected.equals("---") || nomSouscentreSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre et sélectionner une spécialité, un numéro de pratique et donner la durée !");
        } else {
            validerDuree(dureeString);
            int numprat = Integer.parseInt(numpratSelected);
            if (!continuerDuree || dureeSaisi == 0) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. La durée de pratique est incorrecte !");
            } else {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                for (Option option : options) {
                    if (option.getSigle().equals(sigleSpecialiteDureeSelected)) {
                        optionDureeSelected = option;
                        break;
                    }
                }
                for (Souscentre souscentre : souscentres) {
                    if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                        souscentreSelected = souscentre;
                        break;
                    }
                }
                try {
                    metier.creerDureepratique(new Dureepratique(groupe, optionDureeSelected, sessionSelected, dureeSaisi, numprat, souscentreSelected));
                    JOptionPane.showMessageDialog(this, "Durée de pratique enregistrée avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de d'enregistrer la durée de pratique de la série/spécialité [" + optionDureeSelected + "] dans le sous-centre [" + nomSouscentreSelected + "]" + "\n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonCreerDureeActionPerformed

    private void jButtonListerDureeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerDureeActionPerformed
        infoSaisies();
        List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres contenant des correcteurs pratiques
        Map<Souscentre, ArrayList<Dureepratique>> souscentreDureepratiquesMap = new HashMap<>();//contient chaque souscentre et la liste de ses Dureepratique
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || numpratSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session et un n°pratique !");
        } else {
            anneeSelected = Integer.parseInt(anneeString);
            int numprat = Integer.parseInt(numpratSelected);
            lesDureespratique = metier.findAllDureepratiqueD1GroupeDexamensD1SessionD1Pratique(anneeSelected, niveauSelected, typeSelected, numprat);

            if (!lesDureespratique.isEmpty()) {
                for (Dureepratique dureepratique : lesDureespratique) {
                    if (!souscentreList.contains(dureepratique.getSouscentre())) {
                        souscentreList.add(dureepratique.getSouscentre());
                    }
                }
                for (Souscentre scentre : souscentreList) {
                    ArrayList<Dureepratique> dureepratiquesList = new ArrayList<>();
                    for (Dureepratique dureepratique : lesDureespratique) {
                        if (!dureepratiquesList.contains(dureepratique) && dureepratique.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                            dureepratiquesList.add(dureepratique);
                        }
                    }
                    souscentreDureepratiquesMap.put(scentre, dureepratiquesList);
                }
                try {
                    List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                    for (Region region : regions) {
                        for (Souscentre souscentre : souscentreDureepratiquesMap.keySet()) {
                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                                int i = 1;
                                for (Dureepratique dureepratique : souscentreDureepratiquesMap.get(souscentre)) {
                                    Map<String, Object> row = new HashMap<>();
                                    row.put("session", anneeSelected);
                                    String examenAffiche = groupedexamensEnstring;
                                    if (typeSelected.equals("GEN")) {
                                        examenAffiche += " série E";
                                    }
                                    row.put("examen", examenAffiche);
                                    row.put("num", i++);
                                    row.put("souscentre", dureepratique.getSouscentre().getNomsouscent());
                                    row.put("option", dureepratique.getOption().getSigle());
                                    row.put("duree", dureepratique.getDuree());
                                    row.put("numpratique", dureepratique.getNumprat());
                                    datasource.add(row);
                                }
                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeDureePratique2Report.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Aucune durée de pratique trouvée dans la base de données !");
            }
        }
    }//GEN-LAST:event_jButtonListerDureeActionPerformed

    private void jButtonAnnulerDureeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerDureeActionPerformed
        jTextFieldDuree.setText("");
        jComboBoxSpecialiteDuree.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerDureeActionPerformed

    private void jButtonSupprimerDureeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerDureeActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || sigleSpecialiteDureeSelected.equals("---") || numpratSelected.equals("---") || nomSouscentreSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre, une spécialité et un numéro de pratique !");
        } else {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer la durée de pratique pour la spécialité " + sigleSpecialiteDureeSelected + " de la pratique [" + numpratSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                anneeSelected = Integer.parseInt(anneeString);
                int numprat = Integer.parseInt(numpratSelected);
                try {
                    Dureepratique dureepratique = metier.findDureepratiqueD1SouscentreD1GroupeDexamensD1SessionD1SpecialiteEt1Pratique(nomSouscentreSelected, anneeSelected, niveauSelected, typeSelected, sigleSpecialiteDureeSelected, numprat);
                    metier.supprimerDureepratique(dureepratique);
                    JOptionPane.showMessageDialog(this, "Durée de pratique supprimée avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer la durée de pratique pour la spécialité " + sigleSpecialiteDureeSelected + "au sous-centre " + nomSouscentreSelected + " \n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerDureeActionPerformed

    private void jComboBoxNumpratiqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNumpratiqueActionPerformed
        typeSelected = (String) jComboBoxType.getSelectedItem();
        numpratSelected = (String) jComboBoxNumpratique.getSelectedItem();
        if ((typeSelected.equals("STT") || typeSelected.equals("GEN")) && numpratSelected.equals("2")) {
            JOptionPane.showMessageDialog(this, "Veuillez recommencer svp. La pratique 2 n'est pas définie pour STT ou pour GEN !");
            jComboBoxNumpratique.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jComboBoxNumpratiqueActionPerformed

    private void jButtonImporterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImporterActionPerformed
        anneeString = (String) jComboBoxSession.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        if (!anneeString.equals("---") && !groupedexamensEnstring.equals("")) {
            class donneesNonSave {//classe interne devant contenir un personnel et ses paramètres non sauvegardés dans la BD

                String scentre;
                String nom;
                String prenom;
                String fonction;
                String structure;
                String arrondissement;
                String resident;
                String option;
                String matiere;
                int effectif;
                int numprat;
                String sfrais;

                public donneesNonSave(String scentre, String nom, String prenom, String fonction, String structure, String arrondissement, String resident, String option, String matiere, int effectif, int numprat, String sfrais) {
                    this.scentre = scentre;
                    this.nom = nom;
                    this.prenom = prenom;
                    this.fonction = fonction;
                    this.structure = structure;
                    this.arrondissement = arrondissement;
                    this.resident = resident;
                    this.option = option;
                    this.matiere = matiere;
                    this.effectif = effectif;
                    this.numprat = numprat;
                    this.sfrais = sfrais;
                }
            }
            ArrayList<donneesNonSave> donneesNonSaveList = new ArrayList<>();//liste de tous les personnels et leurs paramètres non sauvegardés dans la BD
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            anneeSelected = Integer.parseInt(anneeString);
            Qualite qualite = metier.findQualiteByTitre("CORRECTEUR");
            for (Session s : sessions) {
                if (s.getAnnee() == anneeSelected) {
                    sessionSelected = s;
                    break;
                }
            }

            JFileChooser choix = new JFileChooser();
            int retour = choix.showOpenDialog(this);
            if (retour == JFileChooser.APPROVE_OPTION) {
                // un fichier a été choisi (sortie par OK)
                // nom du fichier  choisi
                //String nomFichier = choix.getSelectedFile().getName();
                // chemin absolu du fichier choisi
                String cheminFichier = choix.getSelectedFile().getAbsolutePath();
                //JOptionPane.showMessageDialog(this, "Nom du fichier choisi:" + nomFichier+" \n Chemin du fichier:"+cheminFichier);

                try {
                    //long start = System.currentTimeMillis();

                    FileInputStream inputStream = new FileInputStream(cheminFichier);

                    XSSFWorkbook workbook = new XSSFWorkbook(inputStream);//XSSFWorkbook pour windows 2007 d'extension xlsx; HSSFWorkbook pour excel 97 et 2003 d'extension xls

                    Sheet firstSheet = workbook.getSheetAt(0);
                    Iterator<Row> rowIterator = firstSheet.iterator();

                    rowIterator.next(); // skip the header row

                    while (rowIterator.hasNext()) {
                        boolean continuerSouscentre = true;
                        boolean continuerFonction = true;
                        boolean continuerArrond = true;
                        boolean continuerOption = true;
                        boolean continuerMatiere = true;
                        Row nextRow = rowIterator.next();
                        Iterator<Cell> cellIterator = nextRow.cellIterator();
                        Souscentre souscentre = new Souscentre();
                        Fonction fonct = new Fonction();
                        Arrondissement arrond = new Arrondissement();
                        Option opt = new Option();
                        Matiere mat = new Matiere();
                        Personnel pers = new Personnel();
                        Intervenant intervenantCreated = null;
                        String nomScentre = "";
                        String nompers = "";
                        String prenompers = "";
                        String nomstruct = "";
                        String nomfonct = "";
                        String nomarrond = "";
                        String titreOpt = "";
                        String nomMat = "";
                        String valresident = "";
                        int nbcand = 0;
                        int prat = 0;
                        String valsfrais = "";
                        while (cellIterator.hasNext()) {
                            Cell nextCell = cellIterator.next();
                            int columnIndex = nextCell.getColumnIndex();

                            switch (columnIndex) {
                                case 0:
                                    nomScentre = nextCell.getStringCellValue();
                                    try {
                                        souscentre = metier.findSouscentreByName(nomScentre);
                                    } catch (Exception e) {
                                        continuerSouscentre = false;
                                    }
                                    break;
                                case 1:
                                    nompers = nextCell.getStringCellValue();
                                    break;
                                case 2:
                                    prenompers = nextCell.getStringCellValue();
                                    break;
                                case 3:
                                    nomstruct = nextCell.getStringCellValue();
                                    break;
                                case 4:
                                    nomfonct = nextCell.getStringCellValue();
                                    try {
                                        fonct = metier.findFonctionByTitre(nomfonct);
                                    } catch (Exception e) {
                                        continuerFonction = false;
                                    }
                                    break;
                                case 5:
                                    nomarrond = nextCell.getStringCellValue();
                                    try {
                                        arrond = metier.findArrondissementByName(nomarrond);
                                    } catch (Exception e) {
                                        continuerArrond = false;
                                    }
                                    break;
                                case 6:
                                    titreOpt = nextCell.getStringCellValue();
                                    try {
                                        opt = metier.findOptionBySigle(titreOpt);
                                    } catch (Exception e) {
                                        continuerOption = false;
                                    }
                                    break;
                                case 7:
                                    nomMat = nextCell.getStringCellValue();
                                    try {
                                        mat = metier.findMatiereByName(nomMat);
                                    } catch (Exception e) {
                                        continuerMatiere = false;
                                    }
                                    break;
                                case 8:
                                    valresident = nextCell.getStringCellValue();
                                    break;
                                case 9:
                                    nbcand = (int) nextCell.getNumericCellValue();
                                    break;
                                case 10:
                                    prat = (int) nextCell.getNumericCellValue();
                                    break;
                                case 11:
                                    valsfrais = nextCell.getStringCellValue();
                                    break;
                            }
                        }

                        Activite activite = metier.findActiviteByNom("PRATIQUE");

                        if (continuerMatiere && continuerFonction && continuerArrond && continuerOption && continuerSouscentre) {
                            pers = metier.creerPersonnel(new Personnel(nompers.toUpperCase(), prenompers.toUpperCase(), nomstruct.toUpperCase(), fonct, arrond));
                            boolean resident = false;
                            boolean sansfrais = false;
                            if (valresident.equals("OUI")) {
                                resident = true;
                            }
                            if (valsfrais.equals("OUI")) {
                                sansfrais = true;
                            }
                            intervenantCreated = metier.creerIntervenant(new Intervenant(groupe, sessionSelected, pers, souscentre, activite, qualite, resident));
                            metier.creerDeplacepratique(new Deplacepratique(intervenantCreated, mat, opt, nbcand, prat,sansfrais));
                        } else {
                            donneesNonSaveList.add(new donneesNonSave(nomScentre, nompers, prenompers, nomfonct, nomstruct, nomarrond, valresident, titreOpt, nomMat, nbcand, prat, valsfrais));//impossible de sauvegarder personnel et intervenant et Deplacpratique
                        }
                    }

                    workbook.close();

                } catch (IOException ex1) {
                    System.out.println("Error reading file");
                    ex1.printStackTrace();
                }

                if (donneesNonSaveList.size() > 0) {
                    JOptionPane.showMessageDialog(this, "Attention ! Attention ! Plusieurs données n'ont pas été importées dans la base des données !");
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        int i = 1;
                        for (donneesNonSave donnee : donneesNonSaveList) {
                            Map<String, Object> row = new HashMap<>();
                            row.put("examen", groupedexamensEnstring);
                            row.put("session", sessionSelected.getAnnee());
                            row.put("num", i++);
                            row.put("souscentre", donnee.scentre);
                            row.put("nom", donnee.nom);
                            row.put("prenom", donnee.prenom);
                            row.put("nomfonct", donnee.fonction);
                            row.put("nomstruct", donnee.structure);
                            row.put("nomarrond", donnee.arrondissement);
                            row.put("resident", donnee.resident);
                            row.put("option", donnee.option);
                            row.put("matiere", donnee.matiere);
                            row.put("effectif", donnee.effectif);
                            row.put("numprat", donnee.numprat);
                            row.put("sansfrais", donnee.sfrais);
                            datasource.add(row);
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\correcteursPratiqueDeplacesNonSauvegardesReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Importation effectuée avec succès !");
                }
            } else {
                //... ;// pas de fichier choisi
                JOptionPane.showMessageDialog(this, "Aucun choix effectué !");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencer svp. Vous devez choisir un groupe d'examens et une session !");
        }
    }//GEN-LAST:event_jButtonImporterActionPerformed

    private void jComboBoxTypeDeplacementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeDeplacementActionPerformed
        typeDeplacementSelected = (String) jComboBoxTypeDeplacement.getSelectedItem();
        if(typeDeplacementSelected.equals("CITE DORTOIR")) {
            jCheckBoxSansfrais.setEnabled(true);           
        }
        else{
            jCheckBoxSansfrais.setEnabled(false);
            jCheckBoxSansfrais.setSelected(false);
        }
    }//GEN-LAST:event_jComboBoxTypeDeplacementActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatDeplacementPratique.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatDeplacementPratique.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatDeplacementPratique.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatDeplacementPratique.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatDeplacementPratique().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonAnnulerChoixExamen;
    private javax.swing.JButton jButtonAnnulerChoixSouscentre;
    private javax.swing.JButton jButtonAnnulerDuree;
    private javax.swing.JButton jButtonAnnulerPersonnel;
    private javax.swing.JButton jButtonCreerDuree;
    private javax.swing.JButton jButtonCreerEtats;
    private javax.swing.JButton jButtonCreerPersonnel;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonImporter;
    private javax.swing.JButton jButtonListerDuree;
    private javax.swing.JButton jButtonListerPersonnels;
    private javax.swing.JButton jButtonMettreAjourEtats;
    private javax.swing.JButton jButtonSupprimerDuree;
    private javax.swing.JButton jButtonSupprimerEtats;
    private javax.swing.JButton jButtonSupprimerPersonnel;
    private javax.swing.JButton jButtonVisualiserEtats;
    private javax.swing.JCheckBox jCheckBoxProfessionnel;
    private javax.swing.JCheckBox jCheckBoxSansfrais;
    private javax.swing.JComboBox<String> jComboBoxArrondissementListe;
    private javax.swing.JComboBox<String> jComboBoxArrondissementSouscentre;
    private javax.swing.JComboBox<String> jComboBoxDepartementListe;
    private javax.swing.JComboBox<String> jComboBoxDepartementSouscentre;
    private javax.swing.JComboBox<String> jComboBoxMatiere;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxNomsEtPrenoms;
    private javax.swing.JComboBox<String> jComboBoxNumpratique;
    private javax.swing.JComboBox<String> jComboBoxRegionListe;
    private javax.swing.JComboBox<String> jComboBoxRegionSouscentre;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxSouscentre;
    private javax.swing.JComboBox<String> jComboBoxSpecialiteDuree;
    private javax.swing.JComboBox<String> jComboBoxSpecialiteListe;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JComboBox<String> jComboBoxTypeDeplacement;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelArrondissementListe;
    private javax.swing.JLabel jLabelArrondissementSouscentre;
    private javax.swing.JLabel jLabelCoutposte;
    private javax.swing.JLabel jLabelDepartementListe;
    private javax.swing.JLabel jLabelDepartementSouscentre;
    private javax.swing.JLabel jLabelDuree;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelJours;
    private javax.swing.JLabel jLabelMatiere;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelNumpratique;
    private javax.swing.JLabel jLabelRegionListe;
    private javax.swing.JLabel jLabelRegionSouscentre;
    private javax.swing.JLabel jLabelResponsable;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelSouscentre;
    private javax.swing.JLabel jLabelSpecialiteDuree;
    private javax.swing.JLabel jLabelSpecialiteListe;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JLabel jLabelTypeDeplacement;
    private javax.swing.JPanel jPanelChoixExamen;
    private javax.swing.JPanel jPanelChoixSouscentre;
    private javax.swing.JPanel jPanelCorrecteurs;
    private javax.swing.JPanel jPanelDuree;
    private javax.swing.JPanel jPanelGestionEtat;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldDuree;
    private javax.swing.JTextField jTextFieldEffectif;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Region> regions = null;
    private List<Examen> examens = null;
    private List<Option> options = null;
    private List<Matiere> matieres = null;
    private Examen examenSelected = null;
    private String[] examensList = null;
    private List<Examen> examensSelected = new ArrayList<>();
    private List<Departement> departementsSouscentre = null;
    private List<Arrondissement> arrondissementsSouscentre = null;
    private List<Departement> departementsListe = null;
    private List<Arrondissement> arrondissementsListe = null;
    private List<Souscentre> souscentres = null;
    private Souscentre souscentreSelected = null;
    private String[] sessionsCombo = null;
    private String[] regionsSouscentreCombo = null;
    private String[] departementsSouscentreCombo = null;
    private String[] arrondissementsSouscentreCombo = null;
    private String[] souscentresCombo = null;
    private String[] regionsListeCombo = null;
    private String[] departementsListeCombo = null;
    private String[] arrondissementsListeCombo = null;
    private String[] optionsListeCombo = null;
    private String[] optionsDureeCombo = null;
    private String[] matieresCombo = null;
    private String[] numpratCombo = null;
    private String nomRegionSouscentreSelected = "";
    private String nomDepartementSouscentreSelected = "";
    private String nomArrondissementSouscentreSelected = "";
    private String nomRegionListeSelected = "";
    private String nomDepartementListeSelected = "";
    private String nomArrondissementListeSelected = "";
    private String nomSouscentreSelected = "";
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private String phase = "PRATIQUE";
    private List<Caisse> caisses = null;
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private int total = 0, nbjours = 0, ratio = 0, txjour = 25000, primexpert = 15000, primeconfid = 25000, totalProf = 0, indemforfait = 0;
    private String nomsEtPrenomsSelected = "";
    private Personnel personnelSelected = null;
    private List<Personnel> personnels = null;
    private String[] personnelsCombo = null;
    private List<Intervenant> intervenants = null;
    private String dureeString = "";
    private int dureeSaisi = 0;
    private boolean continuerDuree = false;
    private String effectifString = "";
    private int effectifSaisi = 0;
    private boolean continuerEffectif = false;
    private String numpratSelected = "";
    private String nomMatiereSelected = "";
    private Matiere matiereSelected = null;
    private String sigleSpecialiteListeSelected = "";
    private Option optionListeSelected = null;
    private Option optionDureeSelected = null;
    private String sigleSpecialiteDureeSelected = "";
    private String[] typeDeplacementsCombo = null;
    private String typeDeplacementSelected = "";
    private List<Deplacepratique> deplacepratiques = null;
    private List<Dureepratique> lesDureespratique = null;
    private List<Dureepratique> durees1 = null;//pour Professionnels PROB ESG
    private List<Dureepratique> durees2 = null;//pour Professionnels BAC ESG
    private List<Dureepratique> durees = null;//pour Professionnels ESTI

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        regions = metier.findAllRegions();
        souscentres = metier.findAllSouscentres();
        examens = metier.findAllExamens();
        options = metier.findAllOptions();
        matieres = metier.findAllMatieres();

        //on remplit la combobox des régions du sous-centre
        regionsSouscentreCombo = new String[regions.size() + 1];
        regionsSouscentreCombo[0] = "---";
        int i = 1;
        for (Region region : regions) {
            regionsSouscentreCombo[i++] = region.getNomreg();
        }
        jComboBoxRegionSouscentre.setModel(new DefaultComboBoxModel(regionsSouscentreCombo));

        //on remplit la combobox des régions des examinateurs
        regionsListeCombo = new String[regions.size() + 1];
        regionsListeCombo[0] = "---";
        int j = 1;
        for (Region region : regions) {
            regionsListeCombo[j++] = region.getNomreg();
        }
        jComboBoxRegionListe.setModel(new DefaultComboBoxModel(regionsListeCombo));

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int k = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[k++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "GEN", "IND", "IND PROF", "TOUT ESTI", "STT", "STT PROF", "TOUT STT"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des types de déplacement
        typeDeplacementsCombo = new String[]{"---", "CITE DORTOIR", "INTER URBAIN"};
        jComboBoxTypeDeplacement.setModel(new DefaultComboBoxModel(typeDeplacementsCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC", "TOUT"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        //on remplit la combobox des numéros de pratique
        numpratCombo = new String[]{"---", "1", "2"};
        jComboBoxNumpratique.setModel(new DefaultComboBoxModel(numpratCombo));

        remplirDepartementSouscentreCombobox();
        remplirArrondissementSouscentreCombobox();
        remplirSouscentreCombobox();

        remplirDepartementListeCombobox();
        remplirArrondissementListeCombobox();
        remplirPersonnelsDelArrondissementCombobox();
        remplirPersonnelsDuDepartementCombobox();

        jPanelDuree.setEnabled(false);
        jComboBoxSpecialiteDuree.setEnabled(false);
        jTextFieldDuree.setEnabled(false);
        jButtonCreerDuree.setEnabled(false);
        jButtonListerDuree.setEnabled(false);
        jButtonAnnulerDuree.setEnabled(false);
        jButtonSupprimerDuree.setEnabled(false);
        jCheckBoxSansfrais.setEnabled(false);
        jCheckBoxSansfrais.setSelected(false);
    }

    private void infoSaisies() {
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        nomsEtPrenomsSelected = (String) jComboBoxNomsEtPrenoms.getSelectedItem();
        dureeString = jTextFieldDuree.getText();
        effectifString = jTextFieldEffectif.getText();
        numpratSelected = (String) jComboBoxNumpratique.getSelectedItem();
        nomMatiereSelected = (String) jComboBoxMatiere.getSelectedItem();
        sigleSpecialiteListeSelected = (String) jComboBoxSpecialiteListe.getSelectedItem();
        sigleSpecialiteDureeSelected = (String) jComboBoxSpecialiteDuree.getSelectedItem();
        typeDeplacementSelected = (String) jComboBoxTypeDeplacement.getSelectedItem();
    }

    private void remplirDepartementSouscentreCombobox() {
        nomRegionSouscentreSelected = (String) jComboBoxRegionSouscentre.getSelectedItem();
        departementsSouscentre = metier.findAllDepartementsD1Region(nomRegionSouscentreSelected);
        //on remplit la combobox des départements du sous-centre
        departementsSouscentreCombo = new String[departementsSouscentre.size() + 1];
        departementsSouscentreCombo[0] = "---";
        int i = 1;
        for (Departement departement : departementsSouscentre) {
            departementsSouscentreCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartementSouscentre.setModel(new DefaultComboBoxModel(departementsSouscentreCombo));
    }

    private void remplirArrondissementSouscentreCombobox() {
        nomDepartementSouscentreSelected = (String) jComboBoxDepartementSouscentre.getSelectedItem();
        arrondissementsSouscentre = metier.findAllArrondissementsD1Departement(nomDepartementSouscentreSelected);
        //on remplit la combobox des arrondissements
        arrondissementsSouscentreCombo = new String[arrondissementsSouscentre.size() + 1];
        arrondissementsSouscentreCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissementsSouscentre) {
            arrondissementsSouscentreCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissementSouscentre.setModel(new DefaultComboBoxModel(arrondissementsSouscentreCombo));
    }

    private void remplirSouscentreCombobox() {
        nomArrondissementSouscentreSelected = (String) jComboBoxArrondissementSouscentre.getSelectedItem();
        souscentres = metier.findAllSouscentresD1Arrondissement(nomArrondissementSouscentreSelected);
        //on remplit la combobox des sous-centres
        souscentresCombo = new String[souscentres.size() + 1];
        souscentresCombo[0] = "---";
        int i = 1;
        for (Souscentre souscentre : souscentres) {
            souscentresCombo[i++] = souscentre.getNomsouscent();
        }
        jComboBoxSouscentre.setModel(new DefaultComboBoxModel(souscentresCombo));
    }

    private void remplirDepartementListeCombobox() {
        nomRegionListeSelected = (String) jComboBoxRegionListe.getSelectedItem();
        departementsListe = metier.findAllDepartementsD1Region(nomRegionListeSelected);
        //on remplit la combobox des départements des examinateurs
        departementsListeCombo = new String[departementsListe.size() + 1];
        departementsListeCombo[0] = "---";
        int i = 1;
        for (Departement departement : departementsListe) {
            departementsListeCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartementListe.setModel(new DefaultComboBoxModel(departementsListeCombo));
    }

    private void remplirArrondissementListeCombobox() {
        nomDepartementListeSelected = (String) jComboBoxDepartementListe.getSelectedItem();
        arrondissementsListe = metier.findAllArrondissementsD1Departement(nomDepartementListeSelected);
        //on remplit la combobox des arrondissements des examinateurs
        arrondissementsListeCombo = new String[arrondissementsListe.size() + 1];
        arrondissementsListeCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissementsListe) {
            arrondissementsListeCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissementListe.setModel(new DefaultComboBoxModel(arrondissementsListeCombo));
    }

    private void remplirPersonnelsDelArrondissementCombobox() {
        nomArrondissementListeSelected = (String) jComboBoxArrondissementListe.getSelectedItem();
        personnels = metier.findAllPersonnelsD1Arrondissement(nomArrondissementListeSelected);
        //on remplit les combobox des responsables et des membres
        personnelsCombo = new String[personnels.size() + 1];
        personnelsCombo[0] = "---";
        int i = 1;
        for (Personnel personnel : personnels) {
            personnelsCombo[i] = personnel.getNompers() + " " + personnel.getPrenom();
            i++;
        }
        jComboBoxNomsEtPrenoms.setModel(new DefaultComboBoxModel(personnelsCombo));
    }

    private void remplirPersonnelsDuDepartementCombobox() {
        nomDepartementListeSelected = (String) jComboBoxDepartementListe.getSelectedItem();
        personnels = metier.findAllPersonnelsD1Departement(nomDepartementListeSelected);
        //on remplit les combobox des personnels       
        personnelsCombo = new String[personnels.size() + 1];
        personnelsCombo[0] = "---";
        int i = 1;
        for (Personnel personnel : personnels) {
            personnelsCombo[i] = personnel.getNompers() + " " + personnel.getPrenom();
            i++;
        }
        jComboBoxNomsEtPrenoms.setModel(new DefaultComboBoxModel(personnelsCombo));
    }

    private void determinerCoutCorrecteurPratiqueIND(Intervenant correcteur, Deplacepratique sonDeplacepratique, List<Dureepratique> lesDureepratique) {
        //valable pour la série E aussi
        nbjours = 0;
        total = 0;
        for (Dureepratique dureepratique : lesDureepratique) {
            if (dureepratique.getOption().getSigle().equals(sonDeplacepratique.getOption().getSigle()) && dureepratique.getSouscentre().getNomsouscent().equals(correcteur.getSouscentre().getNomsouscent())) {
                nbjours = dureepratique.getDuree();
                break;
            }
        }
        if (correcteur.getResident()) {
            total = nbjours * txjour;
        }
        if (!correcteur.getResident()) {
            total = (nbjours + 2) * txjour;
        }
    }

    private void determinerCoutCorrecteurProfessionnelPratiqueIND(Intervenant correcteur, Deplacepratique sonDeplacepratique, ArrayList<Dureepratique> lesDureepratique) {
        //valable pour la série E aussi
        total = 0;
        nbjours = 0;
        indemforfait = 0;
        totalProf = 0;
        for (Dureepratique dureepratique : lesDureepratique) {
            if (dureepratique.getOption().getSigle().equals(sonDeplacepratique.getOption().getSigle()) && correcteur.getSouscentre().getNomsouscent().equals(dureepratique.getSouscentre().getNomsouscent())) {
                nbjours = dureepratique.getDuree();
                break;
            }
        }
        indemforfait = (nbjours + 2) * txjour;
        if(sonDeplacepratique.isSansfrais()) indemforfait =0;
        totalProf = indemforfait + primexpert + primeconfid;//tous les correcteurs professionnels sont inter urbain
    }

    private void determinerCoutCorrecteurPratiqueSTT(Intervenant correcteur, Deplacepratique sonDeplacepratique) {
        total = 0;
        nbjours = 0;
        ratio = sonDeplacepratique.getEffectif();
        if (ratio > 0 && ratio <= 10) {
            nbjours = 2;
        }
        if (ratio > 10 && ratio <= 20) {
            nbjours = 3;
        }
        if (ratio > 20) {
            nbjours = 4;
        }
        if (correcteur.getResident()) {
            total = nbjours * txjour;
        }
        if (!correcteur.getResident()) {
            total = (nbjours + 2) * txjour;
        }
    }

    private void determinerCoutCorrecteurProfessionnelPratiqueSTT(Deplacepratique sonDeplacepratique) {
        total = 0;
        nbjours = 0;
        indemforfait = 0;
        totalProf = 0;
        ratio = sonDeplacepratique.getEffectif();
        if (ratio > 0 && ratio <= 10) {
            nbjours = 2;
        }
        if (ratio > 10 && ratio <= 20) {
            nbjours = 3;
        }
        if (ratio > 20) {
            nbjours = 4;
        }
        indemforfait = (nbjours + 2) * txjour;
        totalProf = indemforfait + primexpert + primeconfid;//tous les correcteurs professionnels sont inter urbain
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    private void afficherOptionsEtMatieres() {
        ArrayList<Option> optionsE = new ArrayList<>();
        ArrayList<Option> optionsTI = new ArrayList<>();
        ArrayList<Matiere> matieresESG = new ArrayList<>();
        ArrayList<Matiere> matieresTI = new ArrayList<>();
        ArrayList<Option> optionsSTT = new ArrayList<>();
        ArrayList<Matiere> matieresSTT = new ArrayList<>();

        for (Option option : options) {
            if (option.getSigle().equals("E")) {
                optionsE.add(option);
            }
        }
        for (Option option : options) {
            if (option.getFamille().getTitre().equals("TECHNIQUE INDUSTRIEL")) {
                optionsTI.add(option);
            }
        }
        for (Matiere matiere : matieres) {
            if (matiere.getFamille().getTitre().equals("SCIENTIFIQUE") || matiere.getFamille().getTitre().equals("LITTÉRAIRE")) {
                matieresESG.add(matiere);
            }
        }
        for (Matiere matiere : matieres) {
            if (matiere.getFamille().getTitre().equals("TECHNIQUE INDUSTRIEL") || matiere.getFamille().getTitre().equals("LITTÉRAIRE")) {
                matieresTI.add(matiere);
            }
        }

        for (Option option : options) {
            if (option.getFamille().getTitre().equals("TECHNIQUE COMMERCIAL")) {
                optionsSTT.add(option);
            }
        }
        for (Matiere matiere : matieres) {
            if (matiere.getFamille().getTitre().equals("TECHNIQUE COMMERCIAL") || matiere.getFamille().getTitre().equals("LITTÉRAIRE")) {
                matieresSTT.add(matiere);
            }
        }

        if (typeSelected.equals("IND") || typeSelected.equals("IND PROF")) {//IND PROF laissé au où
            //on remplit la combobox des options de liste
            optionsListeCombo = new String[optionsTI.size() + 1];
            optionsListeCombo[0] = "---";
            int k = 1;
            for (Option option : optionsTI) {
                optionsListeCombo[k++] = option.getSigle();
            }
            jComboBoxSpecialiteListe.setModel(new DefaultComboBoxModel(optionsListeCombo));

            //on remplit la combobox des options de durée
            optionsDureeCombo = new String[optionsTI.size() + 1];
            optionsDureeCombo[0] = "---";
            int l = 1;
            for (Option option : optionsTI) {
                optionsDureeCombo[l++] = option.getSigle();
            }
            jComboBoxSpecialiteDuree.setModel(new DefaultComboBoxModel(optionsDureeCombo));

            //on remplit la combobox des matières
            matieresCombo = new String[matieresTI.size() + 1];
            matieresCombo[0] = "---";
            int m = 1;
            for (Matiere matiere : matieresTI) {
                matieresCombo[m++] = matiere.getNom();
            }
            jComboBoxMatiere.setModel(new DefaultComboBoxModel(matieresCombo));
        }

        if (typeSelected.equals("GEN")) {
            //on remplit la combobox des options de liste
            optionsListeCombo = new String[optionsE.size() + 1];
            optionsListeCombo[0] = "---";
            int k = 1;
            for (Option option : optionsE) {
                optionsListeCombo[k++] = option.getSigle();
            }
            jComboBoxSpecialiteListe.setModel(new DefaultComboBoxModel(optionsListeCombo));

            //on remplit la combobox des options de durée
            optionsDureeCombo = new String[optionsE.size() + 1];
            optionsDureeCombo[0] = "---";
            int l = 1;
            for (Option option : optionsE) {
                optionsDureeCombo[l++] = option.getSigle();
            }
            jComboBoxSpecialiteDuree.setModel(new DefaultComboBoxModel(optionsDureeCombo));

            //on remplit la combobox des matières
            matieresCombo = new String[matieresESG.size() + 1];
            matieresCombo[0] = "---";
            int m = 1;
            for (Matiere matiere : matieresESG) {
                matieresCombo[m++] = matiere.getNom();
            }
            jComboBoxMatiere.setModel(new DefaultComboBoxModel(matieresCombo));
        }

        if (typeSelected.equals("STT") || typeSelected.equals("STT PROF")) {
            //on remplit la combobox des options de liste
            optionsListeCombo = new String[optionsSTT.size() + 1];
            optionsListeCombo[0] = "---";
            int k = 1;
            for (Option option : optionsSTT) {
                optionsListeCombo[k++] = option.getSigle();
            }
            jComboBoxSpecialiteListe.setModel(new DefaultComboBoxModel(optionsListeCombo));

            //on remplit la combobox des matières
            matieresCombo = new String[matieresSTT.size() + 1];
            matieresCombo[0] = "---";
            int l = 1;
            for (Matiere matiere : matieresSTT) {
                matieresCombo[l++] = matiere.getNom();
            }
            jComboBoxMatiere.setModel(new DefaultComboBoxModel(matieresCombo));
        }
        if (typeSelected.equals("TOUT ESTI")) {
            //on remplit la combobox des options de la liste
            optionsListeCombo = new String[optionsTI.size() + 1];
            optionsListeCombo[0] = "---";
            int k = 1;
            for (Option option : optionsTI) {
                optionsListeCombo[k++] = option.getSigle();
            }
            jComboBoxSpecialiteListe.setModel(new DefaultComboBoxModel(optionsListeCombo));

            //on remplit la combobox des matières
            matieresCombo = new String[matieresTI.size() + 1];
            matieresCombo[0] = "---";
            int l = 1;
            for (Matiere matiere : matieresTI) {
                matieresCombo[l++] = matiere.getNom();
            }
            jComboBoxMatiere.setModel(new DefaultComboBoxModel(matieresCombo));
        }
        if (typeSelected.equals("TOUT STT")) {
            //on remplit la combobox des options de liste
            optionsListeCombo = new String[optionsSTT.size() + 1];
            optionsListeCombo[0] = "---";
            int k = 1;
            for (Option option : optionsSTT) {
                optionsListeCombo[k++] = option.getSigle();
            }
            jComboBoxSpecialiteListe.setModel(new DefaultComboBoxModel(optionsListeCombo));

            //on remplit la combobox des matières
            matieresCombo = new String[matieresSTT.size() + 1];
            matieresCombo[0] = "---";
            int l = 1;
            for (Matiere matiere : matieresSTT) {
                matieresCombo[l++] = matiere.getNom();
            }
            jComboBoxMatiere.setModel(new DefaultComboBoxModel(matieresCombo));
        }
    }

    private void validerDuree(String nbreString) {
        try {
            dureeSaisi = Integer.parseInt(nbreString);
            continuerDuree = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "La durée de pratique doit être fourni et contenir uniquement des chiffres entiers!");
            continuerDuree = false;
        }
    }

    private void validerEffectif(String nbreString) {
        try {
            effectifSaisi = Integer.parseInt(nbreString);
            continuerEffectif = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "L'effectif ou le ration doit être fourni et contenir uniquement des chiffres entiers!");
            continuerEffectif = false;
        }
    }

    private boolean testSiRattacher(Intervenant intervenant, List<Deplacepratique> deplacepratiques, int numprat) {
        boolean rattacher = false;
        for (Deplacepratique deplacepratique : deplacepratiques) {
            if (deplacepratique.getIntervenant().getPersonnel().getNompers().equals(intervenant.getPersonnel().getNompers()) && deplacepratique.getIntervenant().getPersonnel().getPrenom().equals(intervenant.getPersonnel().getPrenom()) && deplacepratique.getNumprat() == numprat) {
                rattacher = true;
                break;
            }
        }
        return rattacher;
    }
}
