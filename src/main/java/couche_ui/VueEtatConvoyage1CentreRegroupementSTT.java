package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Caisse;
import couche_jpa.Centrebilletage;
import couche_jpa.Centredispatching;
import couche_jpa.Etablissement;
import couche_jpa.Examen;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Nature;
import couche_jpa.Rattachdispatching;
import couche_jpa.Rattachregroupement;
import couche_jpa.Rattachventilation;
import couche_jpa.Rattachventilationspeciale;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_jpa.Statistique;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 *
 * @author famille chijou
 */
public class VueEtatConvoyage1CentreRegroupementSTT extends javax.swing.JFrame {

    public VueEtatConvoyage1CentreRegroupementSTT() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonFermer = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonVisualiser = new javax.swing.JButton();
        jButtonCreerEtats = new javax.swing.JButton();
        jButtonSupprimerEtats = new javax.swing.JButton();
        jPanelChoixExamen = new javax.swing.JPanel();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelExamen = new javax.swing.JLabel();
        jButtonMettreAjour = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jButtonAnnuler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT DE PAIEMENT DU CONVOYAGE 1");

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonVisualiser.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiser.setText("Visualiser l'état");
        jButtonVisualiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserActionPerformed(evt);
            }
        });

        jButtonCreerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEtats.setText("Créer");
        jButtonCreerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEtatsActionPerformed(evt);
            }
        });

        jButtonSupprimerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEtats.setText("Supprimer");
        jButtonSupprimerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEtatsActionPerformed(evt);
            }
        });

        jPanelChoixExamen.setBackground(new java.awt.Color(102, 255, 153));
        jPanelChoixExamen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un groupe d'examens", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxNiveau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNiveauActionPerformed(evt);
            }
        });

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        javax.swing.GroupLayout jPanelChoixExamenLayout = new javax.swing.GroupLayout(jPanelChoixExamen);
        jPanelChoixExamen.setLayout(jPanelChoixExamenLayout);
        jPanelChoixExamenLayout.setHorizontalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(0, 25, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );
        jPanelChoixExamenLayout.setVerticalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 132, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        jButtonMettreAjour.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjour.setText("Mettre à jour");
        jButtonMettreAjour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel2.setText("DES CENTRES DE REGROUPEMENT/VENTILATION STT");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(253, 253, 253)
                        .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(jButtonCreerEtats)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonMettreAjour)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonVisualiser)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSupprimerEtats)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnuler)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(414, 414, 414)
                        .addComponent(jLabelSession)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonVisualiser, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCreerEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSupprimerEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnuler, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonMettreAjour, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        videFrame();
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonVisualiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserActionPerformed
        infoSaisies();
        Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
        Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
        Map<Centredispatching, Integer> centreregroupementEffectifMap = new HashMap<>();//contient l'ensemble des centres de regroupement avec leur nombre de candidats
        Map<Centredispatching, Integer> centreventilationEffectifMap = new HashMap<>();//contient l'ensemble des centres de ventilation avec leur nombre de candidats
        //Map<Centredispatching, Integer> centreventilationspecialeEffectifMap = new HashMap<>();//contient l'ensemble des centres de ventilation spéciale avec leur nombre de candidats
        List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session
        Map<Centredispatching, ArrayList<Souscentre>> centreregroupementSouscentresMap = new HashMap<>();//contient l'ensemble des Centre de regroupement chacun avec la liste de ses souscentres rattachés
        Map<Centredispatching, ArrayList<Etablissement>> centreventilationEtablissementsMap = new HashMap<>();//contient l'ensemble des Centre de ventilation chacun avec la liste de ses Etablissements (centre de regroupement ou de délibération) rattachés
        //Map<Centredispatching, ArrayList<Centredispatching>> centreventilationspecialeCentresventilationMap = new HashMap<>();//contient l'ensemble des Centre de ventilation spéciale chacun avec la liste de ses centres de ventilation rattachés
        Map<Souscentre, ArrayList<Statistique>> souscentreStatistiquesMap = new HashMap<>();//contient l'ensemble des sous-centres avec leurs tableaux de statistiques
        Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
        ArrayList<String> typesBruts = new ArrayList<>();
        ArrayList<String> typesAconsiderer = new ArrayList<>();
        ArrayList<String> niveauxAconsiderer = new ArrayList<>();
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("INDEMNITE POUR CONVOYAGE 1 ET VENTILATION DES COPIES DES CENTRES DE REGROUPEMENT");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);

            boolean continuer = false;
            for (Caisse c : caisses) {
                if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                    continuer = true;
                    break;
                }
            }
            if (!continuer) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de convoyage 1 n'ont pas encore été créés pour ce groupe d'examens !");
            } else {
                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }

                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                for (Examen e : examensSelected) {
                    List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                    for (Statistique s : lesStats) {
                        if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                            int nbcand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                            souscentreEffectifMap.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                        } else {
                            souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                        }
                    }

                    List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                    for (Nature n : lesNats) {
                        Souscentre unSouscentre = n.getSouscentre();
                        if (!souscentreList.contains(unSouscentre)) {
                            souscentreList.add(unSouscentre);
                        }
                    }

                    //remplissage de souscentreStatistiquesMap
                    for (Souscentre souscentre : souscentreList) {
                        ArrayList<Statistique> statistiquesList = new ArrayList<>();
                        for (Statistique s : lesStats) {
                            if (s.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                statistiquesList.add(s);
                            }
                        }
                        souscentreStatistiquesMap.put(souscentre, statistiquesList);
                    }

                    for (int j = 0; j < souscentreList.size(); j++) {
                        ArrayList<Character> phasesList = new ArrayList<>();
                        Souscentre s = souscentreList.get(j);
                        for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                            if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                if (!phasesList.contains(n.getActivite().getInitiale())) {
                                    phasesList.add(n.getActivite().getInitiale());
                                }
                                //pas de break ici car on doit parcourir tous lesNats
                            }
                        }
                        if (!souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {
                            souscentrePhasesMap.put(s, phasesList);
                        }
                        if (souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                            ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                            for (int k = 0; k < phasesList.size(); k++) {
                                if (!phasesList1.contains(phasesList.get(k))) {
                                    phasesList1.add(phasesList.get(k));
                                }
                            }
                            Collections.sort(phasesList1);
                            souscentrePhasesMap.put(s, phasesList1);
                        }
                    }
                }

                //on remplit centreregroupementSouscentresMap
                if (!centresRegroupement.isEmpty()) {
                    for (Centredispatching centreregroupement : centresRegroupement) {
                        ArrayList<Souscentre> liste = new ArrayList<>();
                        lesRattachdispatching = metier.findAllRattachdispatchingsD1CentredispatchingD1Type(centreregroupement.getEtablissement().getAbreviation(), "Regroupement");
                        for (Rattachdispatching rattachdispatch : lesRattachdispatching) {
                            if (!liste.contains(rattachdispatch.getSouscentre())) {
                                liste.add(rattachdispatch.getSouscentre());
                            }
                        }
                        centreregroupementSouscentresMap.put(centreregroupement, liste);
                    }
                }

                //on remplit centreventilationEtablissementsMap
                if (!centresVentilation.isEmpty()) {
                    for (Centredispatching centreventilation : centresVentilation) {
                        ArrayList<Etablissement> liste = new ArrayList<>();//Etablissements abritant un centre de regroupement ou de délibération (non regroupement)
                        lesRattachregroupement = metier.findAllRattachregroupementsD1CentredispatchingD1Type(centreventilation.getEtablissement().getAbreviation(), "Ventilation");
                        for (Rattachregroupement rattachregroupement : lesRattachregroupement) {
                            if (!liste.contains(rattachregroupement.getEtablissement())) {
                                liste.add(rattachregroupement.getEtablissement());
                            }
                        }
                        centreventilationEtablissementsMap.put(centreventilation, liste);
                    }
                }
                /*
                //on remplit centreventilationspecialeCentresventilationMap
                if (!centresVentilationspeciale.isEmpty()) {
                    for (Centredispatching centreventilationspec : centresVentilationspeciale) {
                        ArrayList<Centredispatching> liste = new ArrayList<>();//centre de ventilation
                        lesRattachventilation = metier.findAllRattachventilationsD1CentreventilationSpecial(referenceImputationSelected);
                        for (Rattachventilation rattachventilation : lesRattachventilation) {
                            if (!liste.contains(rattachventilation.getCentreventilation())) {
                                liste.add(rattachventilation.getCentreventilation());
                            }
                        }
                        centreventilationspecialeCentresventilationMap.put(centreventilationspec, liste);
                    }
                }
                 */

                //pas besoin de créer une Map pour regrouper les centres de ventilation spéciale et le centre de tri à cause de son unicité: lesRattachventilationspeciale suffisent ici pour tout gérer 
                //on remplit centreregroupementEffectifMap
                for (Centredispatching centreregroupement : centreregroupementSouscentresMap.keySet()) {
                    int nb = 0;
                    for (Souscentre souscentre : centreregroupementSouscentresMap.get(centreregroupement)) {
                        nb += souscentreEffectifMap.get(souscentre);
                    }
                    centreregroupementEffectifMap.put(centreregroupement, nb);
                }

                //on remplit centreventilationEffectifMap
                for (Centredispatching centreventilation : centreventilationEtablissementsMap.keySet()) {
                    //il a les effectifs de ses centres de regroupement augmentés de ceux de ses centres de délibération (non regroupement)
                    int nb = 0;
                    for (Etablissement etablissement : centreventilationEtablissementsMap.get(centreventilation)) {
                        if (testerSiEtablissementCentreRegroupement(etablissement)) {
                            //cet etablissement est celui d'un centre de regroupement
                            Centredispatching centreregroupement = metier.findCentredispatchingD1TypeByEtablissement(etablissement.getAbreviation(), "Regroupement");
                            nb += centreregroupementEffectifMap.get(centreregroupement);
                        } else {
                            //cet etablissement est celui d'un centre de délibération (non regroupement)
                            Souscentre souscentre = metier.findSouscentreByEtablissement(etablissement.getAbreviation());
                            nb += souscentreEffectifMap.get(souscentre);
                        }

                    }
                    centreventilationEffectifMap.put(centreventilation, nb);
                }
                /*
                //on remplit centreventilationspecialeEffectifMap
                for (Centredispatching centreventilationspeciale : centreventilationspecialeCentresventilationMap.keySet()) {
                    //il a les effectifs de ses centres de ventilation rattachés
                    int nb = 0;
                    for (Centredispatching centreventilation : centreventilationspecialeCentresventilationMap.get(centreventilationspeciale)) {
                        nb += centreventilationEffectifMap.get(centreventilation);
                    }
                    centreventilationspecialeEffectifMap.put(centreventilationspeciale, nb);
                }
                 */

                //recherche des types des examens à utiliser
                for (Examen examen : examensSelected) {
                    System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                    if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                        typesBruts.add("ESG");
                    }
                    if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                        typesBruts.add("ESTP");
                    }
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 2) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                //recherche des niveaux des examens à utiliser
                if (!niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add(niveauSelected);
                    niveauxAconsiderer.add("TOUT");
                }
                if (niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add("PROB");
                    niveauxAconsiderer.add("BACC");
                    niveauxAconsiderer.add("TOUT");
                }
                //recherche des centres de billetage
                for (String niveau : niveauxAconsiderer) {
                    for (String type : typesAconsiderer) {
                        List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                        for (Centrebilletage centrebilletage : desCentrebilletages) {
                            ArrayList<Souscentre> souscentresList = new ArrayList<>();
                            if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                for (Secteurcouv sect : secteurs) {
                                    if (!souscentresList.contains(sect.getSouscentre())) {
                                        souscentresList.add(sect.getSouscentre());
                                    }
                                }
                                centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                            }
                        }
                    }
                }
                try {
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    for (Region region : regions) {
                        for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                            if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                int num = 1;
                                int totalMontant = 0;
                                ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                for (int i = 0; i < souscentresList.size(); i++) {
                                    Souscentre souscentre = souscentresList.get(i);
                                    if (souscentreEffectifMap.containsKey(souscentre)) {
                                        if (testSiCentreDeRegroupement(souscentre)) {
                                            //le souscentre peut être centre de regroupement, centre de ventilation ou de ventilation spéciale
                                            //si le souscentre abrite un centre de regroupement
                                            if (testSiCentreDeRegroupement(souscentre)) {
                                                //on recherche ledit centreregroupement
                                                //et on calcule le coût
                                                Centredispatching centreregroupement = metier.findCentredispatchingD1TypeByEtablissement(souscentre.getEtablissement().getAbreviation(), "Regroupement");
                                                determinerCout(centreregroupement, centreregroupementEffectifMap);
                                            }

                                            //si le souscentre abrite un centre de ventilation
                                            /*
                                            if (testSiCentreDeVentilation(souscentre)) {
                                                //on recherche ledit centre de ventilation
                                                //et on calcule le coût
                                                Centredispatching centreventilation = metier.findCentredispatchingD1TypeByEtablissement(souscentre.getEtablissement().getAbreviation(), "Ventilation");
                                                determinerCout(centreventilation, centreventilationEffectifMap);
                                            }
                                            */
                                            /*
                                                //si le souscentre abrite un centre de ventilation spéciale
                                                if (testSiCentreDeVentilationspeciale(souscentre)) {
                                                    //on recherche ledit centre de ventilation spéciale
                                                    //et on calcule le coût
                                                    Centredispatching centreventilationspeciale = metier.findCentredispatchingD1TypeByEtablissement(souscentre.getEtablissement().getAbreviation(), "Ventilation spéciale");
                                                    determinerCoutESTI(centreventilationspeciale, centreventilationspecialeEffectifMap);
                                                }
                                             */

                                            ArrayList<Character> phasesList = souscentrePhasesMap.get(souscentre);
                                            phasesEnchaine = "";
                                            if (!phasesList.isEmpty()) {
                                                for (char c : phasesList) {
                                                    if (c != 'T') {
                                                        phasesEnchaine += c;
                                                    }
                                                }
                                            }

                                            //determinerCout(souscentre, souscentreEffectifMap, souscentreStatistiquesMap);
                                            Map<String, Object> row = new HashMap<>();
                                            row.put("examen", groupedexamensEnstring);
                                            row.put("session", anneeSelected);
                                            row.put("reference", "");
                                            row.put("region", region.getNomreg());
                                            row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                            row.put("num", num++);
                                            row.put("souscentre", souscentre.getNomsouscent() + "\n\n" + nbcolisEnchaine);
                                            row.put("nature", phasesEnchaine);
                                            row.put("effectifEnchaine", effectifEnchaine);
                                            row.put("cm", "Chargé de Mission");
                                            row.put("chefsec", "Chef Sec.");
                                            row.put("distance", distance);
                                            row.put("transportmanutCM", transportmanutCM);
                                            row.put("transportmanutChefsec", transportmanutChefsec);
                                            row.put("indemChefsec", indemchefsec);
                                            row.put("baspage", "OBC/AR/"+centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                            int totalCMArrondi = (int) Math.ceil((double) totalCM / (double) 1000) * 1000;
                                            row.put("totalCM", totalCMArrondi);
                                            int totalChefsecArrondi = (int) Math.ceil((double) totalChefsec / (double) 1000) * 1000;
                                            row.put("totalChefsec", totalChefsecArrondi);

                                            totalMontant += totalCMArrondi + totalChefsecArrondi;//jasperreport prendra la dernière valeur de totalMontant
                                            row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                            datasource.add(row);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatConvoyage1STTregroupementReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }

                souscentreEffectifMap.clear();//on vide le hashmap
                souscentrePhasesMap.clear();//on vide le hashmap
                examensSelected.clear();//on vide
                souscentreList.clear();
                souscentreStatistiquesMap.clear();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonVisualiserActionPerformed

    private void jButtonCreerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEtatsActionPerformed
        infoSaisies();
        Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
        Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
        Map<Centredispatching, Integer> centreregroupementEffectifMap = new HashMap<>();//contient l'ensemble des centres de regroupement avec leur nombre de candidats
        Map<Centredispatching, Integer> centreventilationEffectifMap = new HashMap<>();//contient l'ensemble des centres de ventilation avec leur nombre de candidats
        //Map<Centredispatching, Integer> centreventilationspecialeEffectifMap = new HashMap<>();//contient l'ensemble des centres de ventilation spéciale avec leur nombre de candidats
        List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session
        Map<Centredispatching, ArrayList<Souscentre>> centreregroupementSouscentresMap = new HashMap<>();//contient l'ensemble des Centre de regroupement chacun avec la liste de ses souscentres rattachés
        Map<Centredispatching, ArrayList<Etablissement>> centreventilationEtablissementsMap = new HashMap<>();//contient l'ensemble des Centre de ventilation chacun avec la liste de ses Etablissements (centre de regroupement ou de délibération) rattachés
        //Map<Centredispatching, ArrayList<Centredispatching>> centreventilationspecialeCentresventilationMap = new HashMap<>();//contient l'ensemble des Centre de ventilation spéciale chacun avec la liste de ses centres de ventilation rattachés
        Map<Souscentre, ArrayList<Statistique>> souscentreStatistiquesMap = new HashMap<>();//contient l'ensemble des sous-centres avec leurs tableaux de statistiques
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---") && !referenceImputationSelected.equals("---")) {
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("INDEMNITE POUR CONVOYAGE 1 ET VENTILATION DES COPIES DES CENTRES DE REGROUPEMENT");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
            if (!caisses.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de convoyage 1 centre de regroupement existent déjà pour ce groupe d'examens !");
            } else {
                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                
                for (Examen e : examensSelected) {
                    List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                    for (Statistique s : lesStats) {
                        if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                            int nbcand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                            souscentreEffectifMap.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                        } else {
                            souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                        }
                    }

                    List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                    for (Nature n : lesNats) {
                        Souscentre unSouscentre = n.getSouscentre();
                        if (!souscentreList.contains(unSouscentre)) {
                            souscentreList.add(unSouscentre);
                        }
                    }

                    //remplissage de souscentreStatistiquesMap
                    for (Souscentre souscentre : souscentreList) {
                        ArrayList<Statistique> statistiquesList = new ArrayList<>();
                        for (Statistique s : lesStats) {
                            if (s.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                statistiquesList.add(s);
                            }
                        }
                        souscentreStatistiquesMap.put(souscentre, statistiquesList);
                    }

                    for (int j = 0; j < souscentreList.size(); j++) {
                        ArrayList<Character> phasesList = new ArrayList<>();
                        Souscentre s = souscentreList.get(j);
                        for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                            if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                if (!phasesList.contains(n.getActivite().getInitiale())) {
                                    phasesList.add(n.getActivite().getInitiale());
                                }
                                //pas de break ici car on doit parcourir tous lesNats
                            }
                        }
                        if (!souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {
                            souscentrePhasesMap.put(s, phasesList);
                        }
                        if (souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                            ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                            for (int k = 0; k < phasesList.size(); k++) {
                                if (!phasesList1.contains(phasesList.get(k))) {
                                    phasesList1.add(phasesList.get(k));
                                }
                            }
                            Collections.sort(phasesList1);
                            souscentrePhasesMap.put(s, phasesList1);
                        }
                    }
                }

                //on remplit centreregroupementSouscentresMap
                if (!centresRegroupement.isEmpty()) {
                    for (Centredispatching centreregroupement : centresRegroupement) {
                        ArrayList<Souscentre> liste = new ArrayList<>();
                        lesRattachdispatching = metier.findAllRattachdispatchingsD1CentredispatchingD1Type(centreregroupement.getEtablissement().getAbreviation(), "Regroupement");
                        for (Rattachdispatching rattachdispatch : lesRattachdispatching) {
                            if (!liste.contains(rattachdispatch.getSouscentre())) {
                                liste.add(rattachdispatch.getSouscentre());
                            }
                        }
                        centreregroupementSouscentresMap.put(centreregroupement, liste);
                    }
                }

                //on remplit centreventilationEtablissementsMap
                if (!centresVentilation.isEmpty()) {
                    for (Centredispatching centreventilation : centresVentilation) {
                        ArrayList<Etablissement> liste = new ArrayList<>();//Etablissements abritant un centre de regroupement ou de délibération (non regroupement)
                        lesRattachregroupement = metier.findAllRattachregroupementsD1CentredispatchingD1Type(centreventilation.getEtablissement().getAbreviation(), "Ventilation");
                        for (Rattachregroupement rattachregroupement : lesRattachregroupement) {
                            if (!liste.contains(rattachregroupement.getEtablissement())) {
                                liste.add(rattachregroupement.getEtablissement());
                            }
                        }
                        centreventilationEtablissementsMap.put(centreventilation, liste);
                    }
                }
                /*
                //on remplit centreventilationspecialeCentresventilationMap
                if (!centresVentilationspeciale.isEmpty()) {
                    for (Centredispatching centreventilationspec : centresVentilationspeciale) {
                        ArrayList<Centredispatching> liste = new ArrayList<>();//centre de ventilation
                        lesRattachventilation = metier.findAllRattachventilationsD1CentreventilationSpecial(referenceImputationSelected);
                        for (Rattachventilation rattachventilation : lesRattachventilation) {
                            if (!liste.contains(rattachventilation.getCentreventilation())) {
                                liste.add(rattachventilation.getCentreventilation());
                            }
                        }
                        centreventilationspecialeCentresventilationMap.put(centreventilationspec, liste);
                    }
                }
                 */
                //pas besoin de créer une Map pour regrouper les centres de ventilation spéciale et le centre de tri à cause de son unicité: lesRattachventilationspeciale suffisent ici pour tout gérer 
                //on remplit centreregroupementEffectifMap
                for (Centredispatching centreregroupement : centreregroupementSouscentresMap.keySet()) {
                    int nb = 0;
                    for (Souscentre souscentre : centreregroupementSouscentresMap.get(centreregroupement)) {
                        System.out.println("-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
                        System.out.println("souscentre=" + souscentre.getNomsouscent());
                        nb += souscentreEffectifMap.get(souscentre);
                    }
                    centreregroupementEffectifMap.put(centreregroupement, nb);
                }

                //on remplit centreventilationEffectifMap
                for (Centredispatching centreventilation : centreventilationEtablissementsMap.keySet()) {
                    //il a les effectifs de ses centres de regroupement augmentés de ceux de ses centres de délibération (non regroupement)
                    int nb = 0;
                    for (Etablissement etablissement : centreventilationEtablissementsMap.get(centreventilation)) {
                        if (testerSiEtablissementCentreRegroupement(etablissement)) {
                            //cet etablissement est celui d'un centre de regroupement
                            Centredispatching centreregroupement = metier.findCentredispatchingD1TypeByEtablissement(etablissement.getAbreviation(), "Regroupement");
                            nb += centreregroupementEffectifMap.get(centreregroupement);
                        } else {
                            //cet etablissement est celui d'un centre de délibération (non regroupement)
                            Souscentre souscentre = metier.findSouscentreByEtablissement(etablissement.getAbreviation());
                            nb += souscentreEffectifMap.get(souscentre);
                        }

                    }
                    centreventilationEffectifMap.put(centreventilation, nb);
                }
                /*
                //on remplit centreventilationspecialeEffectifMap
                for (Centredispatching centreventilationspeciale : centreventilationspecialeCentresventilationMap.keySet()) {
                    //il a les effectifs de ses centres de ventilation rattachés
                    int nb = 0;
                    for (Centredispatching centreventilation : centreventilationspecialeCentresventilationMap.get(centreventilationspeciale)) {
                        nb += centreventilationEffectifMap.get(centreventilation);
                    }
                    centreventilationspecialeEffectifMap.put(centreventilationspeciale, nb);
                }
                 */
                boolean testSicreer = false;
                try {
                    for (Souscentre souscentre : souscentreEffectifMap.keySet()) {
                        //le souscentre peut être centre de regroupement, centre de ventilation ou de ventilation spéciale

                        int totalCMArrondi = 0;
                        int totalChefsecArrondi = 0;
                        //si le souscentre abrite un centre de regroupement
                        if (testSiCentreDeRegroupement(souscentre)) {
                            //on recherche ledit centreregroupement
                            //et on calcule le coût
                            Centredispatching centreregroupement = metier.findCentredispatchingD1TypeByEtablissement(souscentre.getEtablissement().getAbreviation(), "Regroupement");
                            determinerCout(centreregroupement, centreregroupementEffectifMap);
                            totalCMArrondi = (int) Math.ceil((double) totalCM / (double) 1000) * 1000;
                            totalChefsecArrondi = (int) Math.ceil((double) totalChefsec / (double) 1000) * 1000;
                        }

                        //si le souscentre abrite un centre de ventilation
                        /*
                        if (testSiCentreDeVentilation(souscentre)) {
                            //on recherche ledit centre de ventilation
                            //et on calcule le coût
                            Centredispatching centreventilation = metier.findCentredispatchingD1TypeByEtablissement(souscentre.getEtablissement().getAbreviation(), "Ventilation");
                            determinerCout(centreventilation, centreventilationEffectifMap);
                            totalCMArrondi = (int) Math.ceil((double) totalCM / (double) 1000) * 1000;
                            totalChefsecArrondi = (int) Math.ceil((double) totalChefsec / (double) 1000) * 1000;
                        }
                        */
                        /*
                            //si le souscentre abrite un centre de ventilation spéciale
                            if (testSiCentreDeVentilationspeciale(souscentre)) {
                                //on recherche ledit centre de ventilation spéciale
                                //et on calcule le coût
                                Centredispatching centreventilationspeciale = metier.findCentredispatchingD1TypeByEtablissement(souscentre.getEtablissement().getAbreviation(), "Ventilation spéciale");
                                determinerCoutESTI(centreventilationspeciale, centreventilationspecialeEffectifMap);
                                totalCMArrondi = (int) Math.ceil((double) totalCM / (double) 1000) * 1000;
                                totalChefsecArrondi = (int) Math.ceil((double) totalChefsec / (double) 1000) * 1000;
                            }
                         */
                        int net = totalCMArrondi + totalChefsecArrondi;
                        metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                        testSicreer = true;
                    }
                } catch (ObcbudgetException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                if (testSicreer) {
                    JOptionPane.showMessageDialog(this, "Etats de convoyage 1 centre de regroupement créés avec succès pour ce groupe d'examens !");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
        }
        souscentreEffectifMap.clear();//on vide le hashmap
        souscentrePhasesMap.clear();//on vide le hashmap
        examensSelected.clear();//on vide
        souscentreList.clear();
        souscentreStatistiquesMap.clear();
        centreregroupementEffectifMap.clear();
    }//GEN-LAST:event_jButtonCreerEtatsActionPerformed

    private void jButtonSupprimerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEtatsActionPerformed
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de convoyage 1 centre de regroupement pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("INDEMNITE POUR CONVOYAGE 1 ET VENTILATION DES COPIES DES CENTRES DE REGROUPEMENT");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de convoyage 1 centre de regroupement n'existe pour ce groupe d'examens !");
                } else {
                    try {
                        for (Caisse caisse : caisses) {
                            metier.supprimerCaisse(caisse);
                        }
                        JOptionPane.showMessageDialog(this, "Etats de convoyage 1 centre de regroupement supprimés avec succès pour ce groupe d'examens !");
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerEtatsActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        } else {
            JOptionPane.showMessageDialog(this, "Attention. Niveau non fourni !");
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jComboBoxNiveauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNiveauActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxNiveauActionPerformed

    private void jButtonMettreAjourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourActionPerformed
        infoSaisies();
        Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
        Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
        Map<Centredispatching, Integer> centreregroupementEffectifMap = new HashMap<>();//contient l'ensemble des centres de regroupement avec leur nombre de candidats
        Map<Centredispatching, Integer> centreventilationEffectifMap = new HashMap<>();//contient l'ensemble des centres de ventilation avec leur nombre de candidats
        //Map<Centredispatching, Integer> centreventilationspecialeEffectifMap = new HashMap<>();//contient l'ensemble des centres de ventilation spéciale avec leur nombre de candidats
        List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session
        Map<Centredispatching, ArrayList<Souscentre>> centreregroupementSouscentresMap = new HashMap<>();//contient l'ensemble des Centre de regroupement chacun avec la liste de ses souscentres rattachés
        Map<Centredispatching, ArrayList<Etablissement>> centreventilationEtablissementsMap = new HashMap<>();//contient l'ensemble des Centre de ventilation chacun avec la liste de ses Etablissements (centre de regroupement ou de délibération) rattachés
        //Map<Centredispatching, ArrayList<Centredispatching>> centreventilationspecialeCentresventilationMap = new HashMap<>();//contient l'ensemble des Centre de ventilation spéciale chacun avec la liste de ses centres de ventilation rattachés
        Map<Souscentre, ArrayList<Statistique>> souscentreStatistiquesMap = new HashMap<>();//contient l'ensemble des sous-centres avec leurs tableaux de statistiques
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de convoyage 1 centre de regroupement pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("INDEMNITE POUR CONVOYAGE 1 ET VENTILATION DES COPIES DES CENTRES DE REGROUPEMENT");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de convoyage 1 centre de regroupement n'existe pour ce groupe d'examens !");
                } else {
                    //on conserve quelques info de ces anciennes caisses
                    Groupe groupe = caisses.get(0).getGroupe();
                    sessionSelected = caisses.get(0).getSession();
                    //on supprime toutes les anciennes caisses du groupe d'examens
                    for (Caisse c : caisses) {
                        metier.supprimerCaisse(c);
                    }

                    //on va les recréer
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }

                    for (Examen e : examensSelected) {
                        List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                        for (Statistique s : lesStats) {
                            if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                int nbcand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                                souscentreEffectifMap.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                            } else {
                                souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                            }
                        }

                        List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                        for (Nature n : lesNats) {
                            Souscentre unSouscentre = n.getSouscentre();
                            if (!souscentreList.contains(unSouscentre)) {
                                souscentreList.add(unSouscentre);
                            }
                        }

                        //remplissage de souscentreStatistiquesMap
                        for (Souscentre souscentre : souscentreList) {
                            ArrayList<Statistique> statistiquesList = new ArrayList<>();
                            for (Statistique s : lesStats) {
                                if (s.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                    statistiquesList.add(s);
                                }
                            }
                            souscentreStatistiquesMap.put(souscentre, statistiquesList);
                        }

                        for (int j = 0; j < souscentreList.size(); j++) {
                            ArrayList<Character> phasesList = new ArrayList<>();
                            Souscentre s = souscentreList.get(j);
                            for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                    if (!phasesList.contains(n.getActivite().getInitiale())) {
                                        phasesList.add(n.getActivite().getInitiale());
                                    }
                                    //pas de break ici car on doit parcourir tous lesNats
                                }
                            }
                            if (!souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {
                                souscentrePhasesMap.put(s, phasesList);
                            }
                            if (souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                for (int k = 0; k < phasesList.size(); k++) {
                                    if (!phasesList1.contains(phasesList.get(k))) {
                                        phasesList1.add(phasesList.get(k));
                                    }
                                }
                                Collections.sort(phasesList1);
                                souscentrePhasesMap.put(s, phasesList1);
                            }
                        }
                    }

                    //on remplit centreregroupementSouscentresMap
                    if (!centresRegroupement.isEmpty()) {
                        for (Centredispatching centreregroupement : centresRegroupement) {
                            ArrayList<Souscentre> liste = new ArrayList<>();
                            lesRattachdispatching = metier.findAllRattachdispatchingsD1CentredispatchingD1Type(centreregroupement.getEtablissement().getAbreviation(), "Regroupement");
                            for (Rattachdispatching rattachdispatch : lesRattachdispatching) {
                                if (!liste.contains(rattachdispatch.getSouscentre())) {
                                    liste.add(rattachdispatch.getSouscentre());
                                }
                            }
                            centreregroupementSouscentresMap.put(centreregroupement, liste);
                        }
                    }

                    //on remplit centreventilationEtablissementsMap
                    if (!centresVentilation.isEmpty()) {
                        for (Centredispatching centreventilation : centresVentilation) {
                            ArrayList<Etablissement> liste = new ArrayList<>();//Etablissements abritant un centre de regroupement ou de délibération (non regroupement)
                            lesRattachregroupement = metier.findAllRattachregroupementsD1CentredispatchingD1Type(centreventilation.getEtablissement().getAbreviation(), "Ventilation");
                            for (Rattachregroupement rattachregroupement : lesRattachregroupement) {
                                if (!liste.contains(rattachregroupement.getEtablissement())) {
                                    liste.add(rattachregroupement.getEtablissement());
                                }
                            }
                            centreventilationEtablissementsMap.put(centreventilation, liste);
                        }
                    }
                    /*
                    //on remplit centreventilationspecialeCentresventilationMap
                    if (!centresVentilationspeciale.isEmpty()) {
                        for (Centredispatching centreventilationspec : centresVentilationspeciale) {
                            ArrayList<Centredispatching> liste = new ArrayList<>();//centre de ventilation
                            lesRattachventilation = metier.findAllRattachventilationsD1CentreventilationSpecial(referenceImputationSelected);
                            for (Rattachventilation rattachventilation : lesRattachventilation) {
                                if (!liste.contains(rattachventilation.getCentreventilation())) {
                                    liste.add(rattachventilation.getCentreventilation());
                                }
                            }
                            centreventilationspecialeCentresventilationMap.put(centreventilationspec, liste);
                        }
                    }
                     */
                    //pas besoin de créer une Map pour regrouper les centres de ventilation spéciale et le centre de tri à cause de son unicité: lesRattachventilationspeciale suffisent ici pour tout gérer 
                    //on remplit centreregroupementEffectifMap
                    for (Centredispatching centreregroupement : centreregroupementSouscentresMap.keySet()) {
                        int nb = 0;
                        for (Souscentre souscentre : centreregroupementSouscentresMap.get(centreregroupement)) {
                            nb += souscentreEffectifMap.get(souscentre);
                        }
                        centreregroupementEffectifMap.put(centreregroupement, nb);
                    }

                    //on remplit centreventilationEffectifMap
                    for (Centredispatching centreventilation : centreventilationEtablissementsMap.keySet()) {
                        //il a les effectifs de ses centres de regroupement augmentés de ceux de ses centres de délibération (non regroupement)
                        int nb = 0;
                        for (Etablissement etablissement : centreventilationEtablissementsMap.get(centreventilation)) {
                            if (testerSiEtablissementCentreRegroupement(etablissement)) {
                                //cet etablissement est celui d'un centre de regroupement
                                Centredispatching centreregroupement = metier.findCentredispatchingD1TypeByEtablissement(etablissement.getAbreviation(), "Regroupement");
                                nb += centreregroupementEffectifMap.get(centreregroupement);
                            } else {
                                //cet etablissement est celui d'un centre de délibération (non regroupement)
                                Souscentre souscentre = metier.findSouscentreByEtablissement(etablissement.getAbreviation());
                                nb += souscentreEffectifMap.get(souscentre);
                            }

                        }
                        centreventilationEffectifMap.put(centreventilation, nb);
                    }
                    /*
                    //on remplit centreventilationspecialeEffectifMap
                    for (Centredispatching centreventilationspeciale : centreventilationspecialeCentresventilationMap.keySet()) {
                        //il a les effectifs de ses centres de ventilation rattachés
                        int nb = 0;
                        for (Centredispatching centreventilation : centreventilationspecialeCentresventilationMap.get(centreventilationspeciale)) {
                            nb += centreventilationEffectifMap.get(centreventilation);
                        }
                        centreventilationspecialeEffectifMap.put(centreventilationspeciale, nb);
                    }
                     */
                    boolean testSimodifier = false;
                    try {
                        for (Souscentre souscentre : souscentreEffectifMap.keySet()) {
                            //le souscentre peut être centre de regroupement, centre de ventilation ou de ventilation spéciale

                            int totalCMArrondi = 0;
                            int totalChefsecArrondi = 0;
                            //si le souscentre abrite un centre de regroupement
                            if (testSiCentreDeRegroupement(souscentre)) {
                                //on recherche ledit centreregroupement
                                //et on calcule le coût
                                Centredispatching centreregroupement = metier.findCentredispatchingD1TypeByEtablissement(souscentre.getEtablissement().getAbreviation(), "Regroupement");
                                determinerCout(centreregroupement, centreregroupementEffectifMap);
                                totalCMArrondi = (int) Math.ceil((double) totalCM / (double) 1000) * 1000;
                                totalChefsecArrondi = (int) Math.ceil((double) totalChefsec / (double) 1000) * 1000;
                            }

                            //si le souscentre abrite un centre de ventilation
                            /*
                            if (testSiCentreDeVentilation(souscentre)) {
                                //on recherche ledit centre de ventilation
                                //et on calcule le coût
                                Centredispatching centreventilation = metier.findCentredispatchingD1TypeByEtablissement(souscentre.getEtablissement().getAbreviation(), "Ventilation");
                                determinerCout(centreventilation, centreventilationEffectifMap);
                                totalCMArrondi = (int) Math.ceil((double) totalCM / (double) 1000) * 1000;
                                totalChefsecArrondi = (int) Math.ceil((double) totalChefsec / (double) 1000) * 1000;
                            }
                            */
                            /*
                                //si le souscentre abrite un centre de ventilation spéciale
                                if (testSiCentreDeVentilationspeciale(souscentre)) {
                                    //on recherche ledit centre de ventilation spéciale
                                    //et on calcule le coût
                                    Centredispatching centreventilationspeciale = metier.findCentredispatchingD1TypeByEtablissement(souscentre.getEtablissement().getAbreviation(), "Ventilation spéciale");
                                    determinerCoutESTI(centreventilationspeciale, centreventilationspecialeEffectifMap);
                                    totalCMArrondi = (int) Math.ceil((double) totalCM / (double) 1000) * 1000;
                                    totalChefsecArrondi = (int) Math.ceil((double) totalChefsec / (double) 1000) * 1000;
                                }
                             */
                            int net = totalCMArrondi + totalChefsecArrondi;
                            metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                            testSimodifier = true;
                        }
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testSimodifier) {
                        JOptionPane.showMessageDialog(this, "Etats de convoyage 1 centre de regroupement mis à jour avec succès pour ce groupe d'examens !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
            }
            souscentreEffectifMap.clear();//on vide le hashmap
            souscentrePhasesMap.clear();//on vide le hashmap
            examensSelected.clear();//on vide
            souscentreList.clear();
            souscentreStatistiquesMap.clear();
            centreregroupementEffectifMap.clear();
        }
    }//GEN-LAST:event_jButtonMettreAjourActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatConvoyage1CentreRegroupementESTI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatConvoyage1CentreRegroupementESTI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatConvoyage1CentreRegroupementESTI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatConvoyage1CentreRegroupementESTI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatConvoyage1CentreRegroupementESTI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonCreerEtats;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonMettreAjour;
    private javax.swing.JButton jButtonSupprimerEtats;
    private javax.swing.JButton jButtonVisualiser;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanelChoixExamen;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Region> regions = null;
    private List<Session> sessions = null;
    private List<Examen> examens = null;
    private List<Examen> examensSelected = new ArrayList<Examen>();
    private String[] examensList = null;
    private String[] sessionsCombo = null;
    private String[] imputationsCombo = null;
    private Examen examenSelected = null;
    private List<Caisse> caisses = null;
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private String referenceImputationSelected = "";
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private int effectif1 = 0, effectif2 = 0, transportmanutCM = 0, transportmanutChefsec = 0, transport = 0, manutention = 0, distance = 0, fraisconvAcm = 0, fraisconvAchefsec = 0, fraisconvBacm = 0, fraisconvCacm = 0, indemchefsec = 0, totalCM = 0, totalChefsec = 0, totalACM = 0;
    private int[] tabColis1 = new int[3];
    private int[] tabColis2 = new int[3];
    private NumberFormat nf = NumberFormat.getInstance();
    private String phase = "ECRIT";
    private String nbcolisEnchaine = "";
    private String effectifEnchaine = "";
    private String phasesEnchaine = "";
    private Rattachdispatching rattachdispatchingAregroupement = null;//rattach souscentre à regroupement
    private Rattachdispatching rattachdispatchingAventilation = null;//rattach souscentre à ventilation
    private Rattachventilation rattachventilationAventilationSpeciale = null;
    private Rattachventilationspeciale rattachventilationspecialeAcentretri = null;
    private Rattachregroupement rattachregroupementAventilation = null;
    private boolean resultTestRattacherAregroupement = false;
    private boolean resultTestRattacherAventilation = false;
    private boolean resultTestRattacherAventilationspeciale = false;
    private boolean resultTestRattacherAcentretri = false;
    private List<Centredispatching> centresRegroupement = null;
    private List<Centredispatching> centresVentilation = null;
    private List<Centredispatching> centresVentilationspeciale = null;
    private List<Rattachdispatching> lesRattachdispatching = null;
    private List<Rattachregroupement> lesRattachregroupement = null;
    private List<Rattachventilation> lesRattachventilation = null;
    private List<Rattachventilationspeciale> lesRattachventilationspeciale = null;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        examens = metier.findAllExamens();
        regions = metier.findAllRegions();
        centresRegroupement = metier.findAllCentredispatchingD1Type("Regroupement");
        centresVentilation = metier.findAllCentredispatchingD1Type("Ventilation");
        centresVentilationspeciale = metier.findAllCentredispatchingD1Type("Ventilation spéciale");

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int i = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[i++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "STT", "STT PROF"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));
    }

    private void infoSaisies() {
        anneeString = (String) jComboBoxSession.getSelectedItem();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
    }

    private void videFrame() {
        jComboBoxSession.setSelectedIndex(0);
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
    }

    //ESG non concerné
    /*
    private void determinerCoutESG(Souscentre souscentre, Map<Souscentre, Integer> souscentreEffectifMap, Map<Souscentre, ArrayList<Character>> souscentrePhasesMap) {
        effectif1 = souscentreEffectifMap.get(souscentre);
        tabColis1[0] = (int) Math.ceil((double) effectif1 / (double) 50);
        tabColis1[1] = (int) Math.ceil((double) effectif1 / (double) 100);
        tabColis1[2] = (int) Math.ceil((double) effectif1 / (double) 100);
        int nbcolis = tabColis1[0] + tabColis1[1] + tabColis1[2];
        nbcolisEnchaine = "(" + tabColis1[0] + "," + tabColis1[1] + "," + tabColis1[2] + ")";
        manutention = nbcolis * 500;
        if (testSiCentreDeRegroupement(souscentre) && testSiCentreDeVentilation(souscentre)) {
            manutention = nbcolis * 300;//si un sous-centre est en même temps centre de regroupement et centre de ventilation alors son coût de colis est 300
        }
        if (testerSiRattacherAcentreregroupement(souscentre)) {
            distance = rattachdispatchingAregroupement.getDistance();
        }
        if (testerSiRattacherAcentreventilation(souscentre) && !testerSiRattacherAcentreregroupement(souscentre)) {
            distance = rattachdispatchingAventilation.getDistance();
        }

        ArrayList<Character> phasesList = souscentrePhasesMap.get(souscentre);

        fraisconvAcm = distance * 50 + manutention;//fraisconvAcm,fraisconvAchefsec,fraisconvBacm,fraisconvCacm
        fraisconvAchefsec = distance * 50;
        fraisconvBacm = distance * 50 + manutention / 2;//notre de colis ACM=somme(tabColis1[0]+tabColis1[1]+tabColis1[2])/2
        fraisconvCacm = distance * 50 + manutention / 2;
        if (!phasesList.contains('C') || (phasesList.contains('D') && !testSiCentreDeRegroupement(souscentre))) {//si le sous-centre ne corrige pas ou s'il délibère mais n'est pas centre de regroupement
            //dans ce deuxième cas son ACM est pris en compte dans convoyage 2
            fraisconvBacm = 0;
            fraisconvCacm = 0;
        }
        indemchefsec = 25000;

        if (distance > 0 && distance < 30) {
            indemchefsec = 10000;
        }
        if (distance >= 30 && distance < 50) {
            indemchefsec = 15000;
        }
        if (distance == 0) {
            indemchefsec = 0;
        }
        totalCM = fraisconvAcm;//totalCM,totalChefsec,totalACM
        totalChefsec = fraisconvAchefsec + indemchefsec;
        totalACM = fraisconvBacm + fraisconvCacm;
    }
     */
    private void determinerCout(Centredispatching centredispatching, Map<Centredispatching, Integer> centredispatchingEffectifMap) {
        //centredispatching peut être regroupement, ventilation ou ventilation speciale
        effectif1 = centredispatchingEffectifMap.get(centredispatching);
        tabColis1[0] = (int) Math.ceil((double) effectif1 / (double) 50);
        tabColis1[1] = (int) Math.ceil((double) effectif1 / (double) 100);
        tabColis1[2] = (int) Math.ceil((double) effectif1 / (double) 100);

        int nbcolis = tabColis1[0] + tabColis1[1] + tabColis1[2];

        effectifEnchaine = "" + effectif1;
        nbcolisEnchaine = "(" + tabColis1[0] + "," + tabColis1[1] + "," + tabColis1[2] + ")";

        manutention = nbcolis * 500;

        if (testerSiRattacherAcentreventilation(centredispatching)) {
            distance = rattachregroupementAventilation.getDistance();
        }

        if (testerSiRattacherAcentreventilationSpeciale(centredispatching)) {
            distance = rattachventilationAventilationSpeciale.getDistance();
        }
        
        //pas utilisé pour l'instant
        if (testerSiRattacherAcentreTri(centredispatching)) {
            distance = rattachventilationspecialeAcentretri.getDistance();
        }

        transportmanutCM = distance * 50 + manutention;
        transportmanutChefsec = distance * 50;
        indemchefsec = 25000;
        if (distance == 0) {
            transportmanutCM =1500 + manutention;
            transportmanutChefsec = 1500;
            indemchefsec = 0;
        }

        totalCM = transportmanutCM;
        totalChefsec = transportmanutChefsec + indemchefsec;
    }

    /*
    private void determinerCoutSTT(Centredispatching centreregroupement, Map<Centredispatching, Integer> centreregroupementEffectifMap) {
        effectif1 = centreregroupementEffectifMap.get(centreregroupement);
        tabColis1[0] = (int) Math.ceil((double) effectif1 / (double) 50);
        tabColis1[1] = (int) Math.ceil((double) effectif1 / (double) 100);
        tabColis1[2] = (int) Math.ceil((double) effectif1 / (double) 100);

        int nbcolis = tabColis1[0] + tabColis1[1] + tabColis1[2];

        effectifEnchaine = "" + effectif1;
        nbcolisEnchaine = "(" + tabColis1[0] + "," + tabColis1[1] + "," + tabColis1[2] + ")";

        manutention = nbcolis * 500;

        if (testerSiRattacherAcentreventilation(centreregroupement)) {
            distance = rattachregroupementAventilation.getDistance();
        }

        transportmanutCM = distance * 50 + manutention;
        transportmanutChefsec = distance * 50;
        indemchefsec = 25000;
        if (distance == 0) {
            transportmanutCM = manutention;
            transportmanutChefsec = 0;
            indemchefsec = 0;
        }

        totalCM = transportmanutCM;
        totalChefsec = transportmanutChefsec + indemchefsec;
    }
     */
    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    private boolean testSiCentreDeVentilation(Souscentre souscentre) {
        boolean valTest = false;
        for (Centredispatching centreventilation : centresVentilation) {
            if (centreventilation.getEtablissement().getNometab().equals(souscentre.getEtablissement().getNometab())) {
                //le même établissement abrite ce sous-centre et un centre de ventilation
                valTest = true;
                break;
            }
        }
        return valTest;
    }

    private boolean testSiCentreDeVentilationspeciale(Souscentre souscentre) {
        boolean valTest = false;
        for (Centredispatching centreventilationspeciale : centresVentilationspeciale) {
            if (centreventilationspeciale.getEtablissement().getNometab().equals(souscentre.getEtablissement().getNometab())) {
                //le même établissement abrite ce sous-centre et un centre de ventilation spéciale
                valTest = true;
                break;
            }
        }
        return valTest;
    }

    private boolean testerSiRattacherAcentreventilation(Centredispatching centreregroupement) {
        resultTestRattacherAventilation = false;
        try {
            rattachregroupementAventilation = metier.findRattachregroupementD1Centreregroupement(centreregroupement.getEtablissement().getAbreviation());//rattachement d'un centre de regroupement à un centre de ventilation: permet de recupérer la la distance
            resultTestRattacherAventilation = true;
        } catch (ObcbudgetException ex) {
            resultTestRattacherAventilation = false;
        }
        return resultTestRattacherAventilation;
    }

    private boolean testSiCentreDeRegroupement(Souscentre souscentre) {
        //NB: un centre de regroupement ne bénéficie pas des frais de convoyage 1
        //on déterminent la liste des centres de regroupement
        boolean valTest = false;
        for (Centredispatching centreregroupement : centresRegroupement) {
            if (centreregroupement.getEtablissement().getNometab().equals(souscentre.getEtablissement().getNometab())) {
                //le même établissement abrite ce sous-centre et un centre de regroupement
                valTest = true;
                break;
            }
        }
        return valTest;
    }

    private boolean testerSiRattacherAcentreregroupement(Souscentre souscentre) {
        resultTestRattacherAregroupement = false;
        try {
            rattachdispatchingAregroupement = metier.findRattachdispatchingD1SouscentreD1Type(souscentre.getNomsouscent(), "Regroupement"); //metier.findRattachregroupementD1Souscentre(souscentre.getNomsouscent());//permet de recupérer la la distance
            resultTestRattacherAregroupement = true;
        } catch (ObcbudgetException ex) {
            resultTestRattacherAregroupement = false;
        }
        return resultTestRattacherAregroupement;
    }

    private boolean testerSiRattacherAcentreventilation(Souscentre souscentre) {
        resultTestRattacherAventilation = false;
        try {
            rattachdispatchingAventilation = metier.findRattachdispatchingD1SouscentreD1Type(souscentre.getNomsouscent(), "Ventilation"); //metier.findRattachregroupementD1Souscentre(souscentre.getNomsouscent());//permet de recupérer la la distance
            resultTestRattacherAventilation = true;
        } catch (ObcbudgetException ex) {
            resultTestRattacherAventilation = false;
        }
        return resultTestRattacherAventilation;
    }

    private boolean testerSiRattacherAcentreventilationSpeciale(Centredispatching centreventilation) {
        resultTestRattacherAventilationspeciale = false;
        try {
            rattachventilationAventilationSpeciale = metier.findRattachventilationD1Centreventilation(centreventilation.getEtablissement().getAbreviation());//rattachement d'un centre de ventilation à un centre de ventilation spéciale: permet de recupérer la distance
            resultTestRattacherAventilationspeciale = true;
        } catch (ObcbudgetException ex) {
            resultTestRattacherAventilationspeciale = false;
        }
        return resultTestRattacherAventilationspeciale;
    }

    private boolean testerSiRattacherAcentreTri(Centredispatching centreventilationspeciale) {
        resultTestRattacherAcentretri = false;
        try {
            rattachventilationspecialeAcentretri = metier.findRattachventilationspecialeD1Centreventilationspeciale(centreventilationspeciale.getEtablissement().getAbreviation());//rattachement d'un centre de ventilation speciale à un centre de tri: permet de recupérer la distance
            resultTestRattacherAcentretri = true;
        } catch (ObcbudgetException ex) {
            resultTestRattacherAcentretri = false;
        }
        return resultTestRattacherAcentretri;
    }

    private boolean testerSiEtablissementCentreRegroupement(Etablissement etab) {
        boolean tester = false;
        for (Centredispatching centreregroupement : centresRegroupement) {
            if (centreregroupement.getEtablissement().getAbreviation().equals(etab.getAbreviation())) {
                tester = true;
                break;
            }
        }
        return tester;
    }
}
