package couche_ui;

import couche_jpa.Examen;
import couche_jpa.Nbepreuveprof;
import couche_jpa.Option;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueNbEpreuveProf extends javax.swing.JFrame {

    DefaultTableModel model;

    public VueNbEpreuveProf() {
        initComponents();
        model = (DefaultTableModel) jTable1.getModel();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabelExamen = new javax.swing.JLabel();
        jLabelOption = new javax.swing.JLabel();
        jComboBoxExamen = new javax.swing.JComboBox<>();
        jComboBoxOption = new javax.swing.JComboBox<>();
        jButtonCreer = new javax.swing.JButton();
        jButtonRechercher = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jButtonVisualiser = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabelNombreEpreuveEcrites = new javax.swing.JLabel();
        jLabelNombreEpreuvePratique1 = new javax.swing.JLabel();
        jComboBoxEcrites = new javax.swing.JComboBox<>();
        jComboBoxPratiques1 = new javax.swing.JComboBox<>();
        jLabelNombreEpreuvePratique2 = new javax.swing.JLabel();
        jComboBoxPratiques2 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("NOMBRE D'EPREUVES ");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel2.setText("PROFESSIONNELLES");

        jTable1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Examen", "Série/Spécialité", "Nb épreuves prof. écrites", "Nb épreuves prof. prat. contr.(P1)", "Nb épreuves prof. prat. (P2)", "Version"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(true);
        jTable1.setShowVerticalLines(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen :");

        jLabelOption.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelOption.setText("Série/Spécialité :");

        jComboBoxExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxExamen.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxExamenActionPerformed(evt);
            }
        });

        jComboBoxOption.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxOption.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxOptionActionPerformed(evt);
            }
        });

        jButtonCreer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreer.setText("Créer");
        jButtonCreer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerActionPerformed(evt);
            }
        });

        jButtonRechercher.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonRechercher.setText("Rechercher");
        jButtonRechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRechercherActionPerformed(evt);
            }
        });

        jButtonModifier.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonModifier.setText("Modifier");
        jButtonModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierActionPerformed(evt);
            }
        });

        jButtonSupprimer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jButtonAnnuler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jButtonVisualiser.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiser.setText("Visualiser");
        jButtonVisualiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(153, 255, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nombre d'épreuves", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelNombreEpreuveEcrites.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNombreEpreuveEcrites.setText("Ecrites :");

        jLabelNombreEpreuvePratique1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNombreEpreuvePratique1.setText("Professionnelles pratiques contraignantes (P1) :");

        jComboBoxEcrites.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jComboBoxPratiques1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelNombreEpreuvePratique2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNombreEpreuvePratique2.setText("Professionnelles pratiques 2 :");

        jComboBoxPratiques2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelNombreEpreuveEcrites)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxEcrites, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabelNombreEpreuvePratique2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxPratiques2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabelNombreEpreuvePratique1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxPratiques1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNombreEpreuveEcrites, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxEcrites, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNombreEpreuvePratique1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxPratiques1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNombreEpreuvePratique2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxPratiques2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addComponent(jButtonCreer)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonRechercher)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonModifier)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonSupprimer)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonAnnuler)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonFermer)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonVisualiser))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(248, 248, 248)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel2))
                                    .addComponent(jLabel1)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(191, 191, 191)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 48, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(239, 239, 239)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelOption)
                    .addComponent(jLabelExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBoxExamen, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxOption, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelOption, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxOption, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonSupprimer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonCreer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonModifier, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonRechercher, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonAnnuler, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(jButtonFermer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonVisualiser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        videFrame();
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jButtonCreerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        if (!sigleExamenCliked.equals("---") && !sigleOptionCliked.equals("---") && !nbprofecritStringSaisi.equals("---") && !nbprofpratique1StringSaisi.equals("---") && !nbprofpratique2StringSaisi.equals("---")) {
            for (Examen e : examens) {
                if (e.getSigle().equals(sigleExamenCliked)) {
                    examenCliked = e;
                    break;
                }
            }
            for (Option o : options) {
                if (o.getSigle().equals(sigleOptionCliked)) {
                    optionCliked = o;
                    break;
                }
            }
            nbprofecritSaisi = Integer.parseInt(nbprofecritStringSaisi);
            nbprofpratique1Saisi = Integer.parseInt(nbprofpratique1StringSaisi);
            nbprofpratique2Saisi = Integer.parseInt(nbprofpratique2StringSaisi);
            try {
                metier.creerNbepreuveprof(new Nbepreuveprof(examenCliked, optionCliked, nbprofecritSaisi, nbprofpratique1Saisi, nbprofpratique2Saisi));
                JOptionPane.showMessageDialog(this, " Nombres d'épreuves professionnelles écrites et pratiques créés avec succès !");
                //videFrame();
                nbepreuveprofs = metier.findAllNbepreuveprofsD1Examen(sigleExamenCliked);
                for (Nbepreuveprof n : nbepreuveprofs) {
                    model.insertRow(model.getRowCount(), new Object[]{n.getIdnbepprof(), n.getExamen().getSigle(), n.getOption().getSigle(), n.getNbprofecrit(), n.getNbprofpratique1(), n.getNbprofpratique2(), n.getVersion()});
                }
            } catch (ObcbudgetException ex) {
                JOptionPane.showMessageDialog(this, "Impossible de créer les nombres d'épreuves professionnelles souhaités !\n raison:" + ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, " Veuillez recommencer svp. Au moins une donnée est incorrecte ! ");
        }


    }//GEN-LAST:event_jButtonCreerActionPerformed

    private void jButtonRechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRechercherActionPerformed
        model.setRowCount(0);//vide la jTable
        sigleExamenCliked = (String) jComboBoxExamen.getSelectedItem();
        sigleOptionCliked = (String) jComboBoxOption.getSelectedItem();
        if (testExamenComboCliked && !testOptionComboCliked) {
            //on recherche tous les nombres d'épreuves professionnelles liés à un examen
            if (!sigleExamenCliked.equals("---")) {
                try {
                    nbepreuveprofRecherches = metier.findAllNbepreuveprofsD1Examen(sigleExamenCliked);
                    for (Nbepreuveprof n : nbepreuveprofRecherches) {
                        model.insertRow(model.getRowCount(), new Object[]{n.getIdnbepprof(), n.getExamen().getSigle(), n.getOption().getSigle(), n.getNbprofecrit(), n.getNbprofpratique1(), n.getNbprofpratique2(), n.getVersion()});
                    }
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de trouver les nombres d'épreuves professionnelles de l'examen [" + sigleExamenCliked + "] \n raison:" + ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, " Veuillez sélectionner unn examen svp ! ");
            }
        }
        if (testExamenComboCliked && testOptionComboCliked) {
            //on recherche le nombre d'épreuves professionnelles d'une option dans un examen donné
            if (!sigleExamenCliked.equals("---") && !sigleOptionCliked.equals("---")) {
                try {
                    nbepreuveprofRecherche = metier.findAllNbepreuveprofsD1ExamenEtD1Option(sigleExamenCliked, sigleOptionCliked);//s'il existe, il est unique
                    model.insertRow(model.getRowCount(), new Object[]{nbepreuveprofRecherche.getIdnbepprof(), nbepreuveprofRecherche.getExamen().getSigle(), nbepreuveprofRecherche.getOption().getSigle(), nbepreuveprofRecherche.getNbprofecrit(), nbepreuveprofRecherche.getNbprofpratique1(), nbepreuveprofRecherche.getNbprofpratique2(), nbepreuveprofRecherche.getVersion()});
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de trouver les nombres d'épreuves professionnelles de l'examen [" + sigleExamenCliked + "] à l'option [" + sigleOptionCliked + "] \n raison:" + ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, " Veuillez recommencer svp. Au moins une donnée est incorrecte ! ");
            }
        }
    }//GEN-LAST:event_jButtonRechercherActionPerformed

    private void jComboBoxExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxExamenActionPerformed
        testExamenComboCliked = true;

    }//GEN-LAST:event_jComboBoxExamenActionPerformed

    private void jComboBoxOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxOptionActionPerformed
        testOptionComboCliked = true;
    }//GEN-LAST:event_jComboBoxOptionActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        //remplit les champs
        int ligne = jTable1.getSelectedRow();
        idNbepreuveprofCliked = (int) model.getValueAt(ligne, 0);
        jComboBoxExamen.setSelectedItem((String) model.getValueAt(ligne, 1));
        jComboBoxOption.setSelectedItem((String) model.getValueAt(ligne, 2));
        jComboBoxEcrites.setSelectedItem(""+ model.getValueAt(ligne, 3));
        jComboBoxPratiques1.setSelectedItem(""+ model.getValueAt(ligne, 4));
        jComboBoxPratiques2.setSelectedItem(""+ model.getValueAt(ligne, 5));  
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButtonModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        if (!sigleExamenCliked.equals("---") && !sigleOptionCliked.equals("---") && !nbprofecritStringSaisi.equals("---") && !nbprofpratique1StringSaisi.equals("---") && !nbprofpratique2StringSaisi.equals("---")) {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier ces nombres d'épreuves professionnelles?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!sigleExamenCliked.equals("---") && !sigleOptionCliked.equals("---")) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(sigleExamenCliked)) {
                            examenCliked = e;
                            break;
                        }
                    }
                    for (Option o : options) {
                        if (o.getSigle().equals(sigleOptionCliked)) {
                            optionCliked = o;
                            break;
                        }
                    }
                    nbprofecritSaisi = Integer.parseInt(nbprofecritStringSaisi);
                    nbprofpratique1Saisi = Integer.parseInt(nbprofpratique1StringSaisi);
                    nbprofpratique2Saisi = Integer.parseInt(nbprofpratique2StringSaisi);
                    
                    nbepreuveprofCliked = metier.findNbepreuveprofById(idNbepreuveprofCliked);
                    nbepreuveprofCliked.setExamen(examenCliked);
                    nbepreuveprofCliked.setOption(optionCliked);
                    nbepreuveprofCliked.setNbprofecrit(nbprofecritSaisi);
                    nbepreuveprofCliked.setNbprofpratique1(nbprofpratique1Saisi);
                     nbepreuveprofCliked.setNbprofpratique2(nbprofpratique2Saisi);
                    try {
                        metier.modifierNbepreuveprof(nbepreuveprofCliked);
                        JOptionPane.showMessageDialog(this, " Nombres d'épreuves professionnelles modifiés avec succès !");
                        //videFrame();
                        nbepreuveprofRecherche = metier.findAllNbepreuveprofsD1ExamenEtD1Option(sigleExamenCliked, sigleOptionCliked);//s'il existe, il est unique
                        model.insertRow(model.getRowCount(), new Object[]{nbepreuveprofRecherche.getIdnbepprof(), nbepreuveprofRecherche.getExamen().getSigle(), nbepreuveprofRecherche.getOption().getSigle(), nbepreuveprofRecherche.getNbprofecrit(), nbepreuveprofRecherche.getNbprofpratique1(), nbepreuveprofRecherche.getNbprofpratique2(), nbepreuveprofRecherche.getVersion()});
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de modifier les nombres d'épreuves professionnelles de l'examen [" + sigleExamenCliked + "] à l'option [" + sigleOptionCliked + "] \n raison:" + ex.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(this, " Veuillez recommencer svp. Au moins une donnée est incorrecte ! ");
                }
            }
        }
        else JOptionPane.showMessageDialog(this, " Veuillez recommencer svp. Au moins une donnée est incorrecte ! ");
    }//GEN-LAST:event_jButtonModifierActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        //model.setRowCount(0);//vide la jTable
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer ces nombres d'épreuves professionnelles?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            try {
                metier.supprimerNbepreuveprof(metier.findNbepreuveprofById(idNbepreuveprofCliked));
                JOptionPane.showMessageDialog(this, " Nombres d'épreuves professionnelles supprimés avec succès !");
                //videFrame();
                //on réaffiche les nombres d'épreuves professionnelles de l'examen concerné
                nbepreuveprofRecherches = metier.findAllNbepreuveprofsD1Examen(sigleExamenCliked);
                for (Nbepreuveprof n : nbepreuveprofRecherches) {
                    model.insertRow(model.getRowCount(), new Object[]{n.getIdnbepprof(), n.getExamen().getSigle(), n.getOption().getSigle(), n.getNbprofecrit(), n.getNbprofpratique1(), n.getNbprofpratique2(), n.getVersion()});
                }
            } catch (ObcbudgetException ex) {
                JOptionPane.showMessageDialog(this, "Impossible de supprimer les nombres d'épreuves professionnelles de l'examen [" + sigleExamenCliked + "] à l'option [" + sigleOptionCliked + "]\n raison:" + ex.getMessage());
            }
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jButtonVisualiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserActionPerformed
        nbepreuveprofs = metier.findAllNbepreuveprofs();
        try {
            List<Map<String, Object>> datasource = new ArrayList<>();
            int i = 1;
            for (Nbepreuveprof nbepreuveprof : nbepreuveprofs) {
                Map<String, Object> row = new HashMap<>();
                row.put("num", "" + i++);
                row.put("examen", nbepreuveprof.getExamen().getSigle());
                row.put("option", nbepreuveprof.getOption().getSigle());
                row.put("nbprofecrit", nbepreuveprof.getNbprofecrit());
                row.put("nbprofpratique1", nbepreuveprof.getNbprofpratique1());
                row.put("nbprofpratique2", nbepreuveprof.getNbprofpratique2());
                datasource.add(row);
            }
            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\nbepreuveprofReport.jrxml");
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
            jasperViewer.setVisible(true);
        } catch (JRException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_jButtonVisualiserActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueNbEpreuveProf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueNbEpreuveProf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueNbEpreuveProf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueNbEpreuveProf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueNbEpreuveProf().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonCreer;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonRechercher;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JButton jButtonVisualiser;
    private javax.swing.JComboBox<String> jComboBoxEcrites;
    private javax.swing.JComboBox<String> jComboBoxExamen;
    private javax.swing.JComboBox<String> jComboBoxOption;
    private javax.swing.JComboBox<String> jComboBoxPratiques1;
    private javax.swing.JComboBox<String> jComboBoxPratiques2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelNombreEpreuveEcrites;
    private javax.swing.JLabel jLabelNombreEpreuvePratique1;
    private javax.swing.JLabel jLabelNombreEpreuvePratique2;
    private javax.swing.JLabel jLabelOption;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Option> options = null;
    private String sigleExamenCliked = "";
    private String sigleOptionCliked = "";
    private int nbprofecritSaisi = 0;
    private int nbprofpratique1Saisi = 0;
    private int nbprofpratique2Saisi = 0;
    private String nbprofecritStringSaisi = "";
    private String nbprofpratique1StringSaisi = "";
    private String nbprofpratique2StringSaisi = "";
    private List<Examen> examens = null;
    private String[] examensCombo = null;
    private String[] optionsCombo = null;
    private String[] nbEpreuvesEcritesCombo = null;
    private String[] nbEpreuvesPratiques1Combo = null;
    private String[] nbEpreuvesPratiques2Combo = null;
    private Examen examenCliked = null;
    private Option optionCliked = null;
    private int idNbepreuveprofCliked = 0;
    private Nbepreuveprof nbepreuveprofCliked = null;
    private boolean testExamenComboCliked = false;
    private boolean testOptionComboCliked = false;
    private List<Nbepreuveprof> nbepreuveprofs = null;
    private List<Nbepreuveprof> nbepreuveprofRecherches = null;
    private Nbepreuveprof nbepreuveprofRecherche = null;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");

        //tous les examens
        examens = metier.findAllExamens();
        //on remplit la combobox des examens
        examensCombo = new String[examens.size() + 1];
        examensCombo[0] = "---";
        int i = 1;
        for (Examen examen : examens) {
            examensCombo[i++] = examen.getSigle();
        }
        jComboBoxExamen.setModel(new DefaultComboBoxModel(examensCombo));

        //toutes les options
        options = metier.findAllOptions();
        //on remplit la combobox des examens
        optionsCombo = new String[options.size() + 1];
        optionsCombo[0] = "---";
        int j = 1;
        for (Option option : options) {
            optionsCombo[j++] = option.getSigle();
        }
        jComboBoxOption.setModel(new DefaultComboBoxModel(optionsCombo));

        //on remplit la combobox du nombre d'épreuves professionnelles écrites
        nbEpreuvesEcritesCombo = new String[]{"---", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15"};
        jComboBoxEcrites.setModel(new DefaultComboBoxModel(nbEpreuvesEcritesCombo));

        //on remplit la combobox du nombre d'épreuves professionnelles pratique 1
        nbEpreuvesPratiques1Combo = new String[]{"---", "0", "1", "2", "3", "4", "5"};
        jComboBoxPratiques1.setModel(new DefaultComboBoxModel(nbEpreuvesPratiques1Combo));

        //on remplit la combobox du nombre d'épreuves professionnelles pratique 2
        nbEpreuvesPratiques2Combo = new String[]{"---", "0", "1", "2", "3", "4", "5"};
        jComboBoxPratiques2.setModel(new DefaultComboBoxModel(nbEpreuvesPratiques2Combo));
    }

    private void infoSaisies() {
        sigleExamenCliked = (String) jComboBoxExamen.getSelectedItem();
        sigleOptionCliked = (String) jComboBoxOption.getSelectedItem();
        nbprofecritStringSaisi = (String) jComboBoxEcrites.getSelectedItem();
        nbprofpratique1StringSaisi = (String) jComboBoxPratiques1.getSelectedItem();
        nbprofpratique2StringSaisi = (String) jComboBoxPratiques2.getSelectedItem();
    }

    private void videFrame() {
        jComboBoxExamen.setSelectedIndex(0);
        jComboBoxOption.setSelectedIndex(0);
        jComboBoxEcrites.setSelectedIndex(0);
        jComboBoxPratiques1.setSelectedIndex(0);
        jComboBoxPratiques2.setSelectedIndex(0);
        model.setRowCount(0);//vide la jTable
    }
}
