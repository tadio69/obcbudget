package couche_ui;

import couche_jpa.Arrondissement;
import couche_jpa.Caisse;
import couche_jpa.Categorie;
import couche_jpa.Centrebilletage;
import couche_jpa.Departement;
import couche_jpa.Examen;
import couche_jpa.Groupedexamen;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueCaisse extends javax.swing.JFrame {

    DefaultTableModel model;

    public VueCaisse() {
        initComponents();
        model = (DefaultTableModel) jTable1.getModel();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabelSession = new javax.swing.JLabel();
        jLabelRubriquetat = new javax.swing.JLabel();
        jLabelRegion = new javax.swing.JLabel();
        jLabelDepartement = new javax.swing.JLabel();
        jPanelSolde = new javax.swing.JPanel();
        jTextFieldSoldeAvance = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabelSoldeReliquat = new javax.swing.JLabel();
        jTextFieldSoldeReliquat = new javax.swing.JTextField();
        jLabelSoldeAvance = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jComboBoxRubriquetat = new javax.swing.JComboBox<>();
        jComboBoxRegion = new javax.swing.JComboBox<>();
        jComboBoxDepartement = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonRechercher = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jLabelArrondissement = new javax.swing.JLabel();
        jComboBoxArrondissement = new javax.swing.JComboBox<>();
        jLabelCategorie = new javax.swing.JLabel();
        jComboBoxCategorie = new javax.swing.JComboBox<>();
        jButtonVisualiser = new javax.swing.JButton();
        jLabelSouscentre = new javax.swing.JLabel();
        jComboBoxSouscentre = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jLabelExamen = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanelMontantDepense = new javax.swing.JPanel();
        jLabelAvanceDepensee = new javax.swing.JLabel();
        jLabelReliquatDepense = new javax.swing.JLabel();
        jTextFieldReliquatDepense = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldAvanceDepensee = new javax.swing.JTextField();
        jPanelMontantOctroye1 = new javax.swing.JPanel();
        jLabelAvanceOctroyee = new javax.swing.JLabel();
        jTextFieldAvanceOctroyee = new javax.swing.JTextField();
        jLabelReliquatOctroye = new javax.swing.JLabel();
        jTextFieldReliquatOctroye = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jCheckBoxAdditif = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setText("BALANCE DE PAIEMENT DES AUTRES ETATS (EPS EXCLU) ");

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jLabelRubriquetat.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRubriquetat.setText("Rubrique d'état :");

        jLabelRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegion.setText("Region :");

        jLabelDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartement.setText("Département :");

        jPanelSolde.setBackground(new java.awt.Color(153, 204, 0));
        jPanelSolde.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Solde après paiement effectif", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 0, 204))); // NOI18N
        jPanelSolde.setForeground(new java.awt.Color(253, 255, 255));
        jPanelSolde.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jTextFieldSoldeAvance.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldSoldeAvance.setForeground(new java.awt.Color(255, 0, 0));
        jTextFieldSoldeAvance.setEnabled(false);
        jTextFieldSoldeAvance.setFocusable(false);

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("F CFA");

        jLabelSoldeReliquat.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSoldeReliquat.setText("Reliquat :");

        jTextFieldSoldeReliquat.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldSoldeReliquat.setForeground(new java.awt.Color(255, 0, 0));
        jTextFieldSoldeReliquat.setEnabled(false);
        jTextFieldSoldeReliquat.setFocusable(false);

        jLabelSoldeAvance.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSoldeAvance.setText("Avance :");

        jLabel8.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel8.setText("F CFA");

        javax.swing.GroupLayout jPanelSoldeLayout = new javax.swing.GroupLayout(jPanelSolde);
        jPanelSolde.setLayout(jPanelSoldeLayout);
        jPanelSoldeLayout.setHorizontalGroup(
            jPanelSoldeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSoldeLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabelSoldeAvance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldSoldeAvance, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(jLabelSoldeReliquat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldSoldeReliquat, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(25, 25, 25))
        );
        jPanelSoldeLayout.setVerticalGroup(
            jPanelSoldeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSoldeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSoldeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSoldeAvance, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSoldeReliquat, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldSoldeReliquat, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSoldeAvance, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jComboBoxRubriquetat.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRubriquetat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRubriquetatActionPerformed(evt);
            }
        });

        jComboBoxRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionActionPerformed(evt);
            }
        });

        jComboBoxDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Sous-centre", "Catégorie", "Rubrique d'état", "Avance octroyée", "Reliquat octroyé", "Avance dépensée", "Reliquat dépensé", "Solde avance", "Solde reliquat", "Additif", "Version"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(true);
        jTable1.setShowVerticalLines(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButtonRechercher.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonRechercher.setText("Rechercher");
        jButtonRechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRechercherActionPerformed(evt);
            }
        });

        jButtonModifier.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonModifier.setText("Modifier");
        jButtonModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierActionPerformed(evt);
            }
        });

        jButtonAnnuler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jLabelArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissement.setText("Arrondissement :");

        jComboBoxArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementActionPerformed(evt);
            }
        });

        jLabelCategorie.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelCategorie.setText("Catégorie :");

        jComboBoxCategorie.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxCategorie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCategorieActionPerformed(evt);
            }
        });

        jButtonVisualiser.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiser.setText("Visualiser");
        jButtonVisualiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserActionPerformed(evt);
            }
        });

        jLabelSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSouscentre.setText("Sous-centre :");

        jComboBoxSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSouscentre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSouscentreActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(204, 255, 0));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Groupe d'examens", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addGap(42, 42, 42))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanelMontantDepense.setBackground(new java.awt.Color(204, 255, 255));
        jPanelMontantDepense.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Montant dépensé", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14))); // NOI18N

        jLabelAvanceDepensee.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelAvanceDepensee.setText("Avance :");

        jLabelReliquatDepense.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelReliquatDepense.setText("Reliquat :");

        jTextFieldReliquatDepense.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldReliquatDepense.setText("0");
        jTextFieldReliquatDepense.setEnabled(false);

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setText("F CFA");

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setText("F CFA");

        jTextFieldAvanceDepensee.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldAvanceDepensee.setText("0");

        javax.swing.GroupLayout jPanelMontantDepenseLayout = new javax.swing.GroupLayout(jPanelMontantDepense);
        jPanelMontantDepense.setLayout(jPanelMontantDepenseLayout);
        jPanelMontantDepenseLayout.setHorizontalGroup(
            jPanelMontantDepenseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMontantDepenseLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanelMontantDepenseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelReliquatDepense)
                    .addComponent(jLabelAvanceDepensee))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelMontantDepenseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelMontantDepenseLayout.createSequentialGroup()
                        .addComponent(jTextFieldAvanceDepensee, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6))
                    .addGroup(jPanelMontantDepenseLayout.createSequentialGroup()
                        .addComponent(jTextFieldReliquatDepense, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanelMontantDepenseLayout.setVerticalGroup(
            jPanelMontantDepenseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMontantDepenseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMontantDepenseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelAvanceDepensee, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldAvanceDepensee, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelMontantDepenseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelMontantDepenseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldReliquatDepense, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelReliquatDepense, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelMontantOctroye1.setBackground(new java.awt.Color(0, 255, 255));
        jPanelMontantOctroye1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Montant octroyé", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14))); // NOI18N

        jLabelAvanceOctroyee.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelAvanceOctroyee.setText("Avance :");

        jTextFieldAvanceOctroyee.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldAvanceOctroyee.setEnabled(false);
        jTextFieldAvanceOctroyee.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextFieldAvanceOctroyeeCaretUpdate(evt);
            }
        });

        jLabelReliquatOctroye.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelReliquatOctroye.setText("Reliquat :");

        jTextFieldReliquatOctroye.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldReliquatOctroye.setEnabled(false);
        jTextFieldReliquatOctroye.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextFieldReliquatOctroyeCaretUpdate(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("F CFA");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("F CFA");

        javax.swing.GroupLayout jPanelMontantOctroye1Layout = new javax.swing.GroupLayout(jPanelMontantOctroye1);
        jPanelMontantOctroye1.setLayout(jPanelMontantOctroye1Layout);
        jPanelMontantOctroye1Layout.setHorizontalGroup(
            jPanelMontantOctroye1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMontantOctroye1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanelMontantOctroye1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelReliquatOctroye)
                    .addComponent(jLabelAvanceOctroyee))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelMontantOctroye1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelMontantOctroye1Layout.createSequentialGroup()
                        .addComponent(jTextFieldAvanceOctroyee, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2))
                    .addGroup(jPanelMontantOctroye1Layout.createSequentialGroup()
                        .addComponent(jTextFieldReliquatOctroye, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanelMontantOctroye1Layout.setVerticalGroup(
            jPanelMontantOctroye1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMontantOctroye1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMontantOctroye1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelAvanceOctroyee, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldAvanceOctroyee, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelMontantOctroye1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelMontantOctroye1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldReliquatOctroye, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelReliquatOctroye, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jCheckBoxAdditif.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jCheckBoxAdditif.setText("Additif");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1)
                .addGap(17, 17, 17))
            .addGroup(layout.createSequentialGroup()
                .addGap(268, 268, 268)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelRegion)
                            .addComponent(jLabelDepartement)
                            .addComponent(jLabelSession))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelRubriquetat)
                            .addComponent(jLabelCategorie)
                            .addComponent(jLabelSouscentre)
                            .addComponent(jLabelArrondissement))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxRubriquetat, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBoxCategorie, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(68, 68, 68)
                                .addComponent(jCheckBoxAdditif))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanelMontantOctroye1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanelMontantDepense, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanelSolde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(81, 81, 81))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonRechercher)
                .addGap(18, 18, 18)
                .addComponent(jButtonModifier)
                .addGap(18, 18, 18)
                .addComponent(jButtonFermer)
                .addGap(18, 18, 18)
                .addComponent(jButtonAnnuler)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiser)
                .addGap(341, 341, 341))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelCategorie, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxCategorie, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxAdditif))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelRubriquetat, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxRubriquetat, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelMontantOctroye1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanelMontantDepense, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanelSolde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRechercher, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonModifier, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnuler, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVisualiser, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jComboBoxRubriquetatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRubriquetatActionPerformed
        designationRubriquetatSelected = (String) jComboBoxRubriquetat.getSelectedItem();
        if (testerSiMOpratique2Selected(designationRubriquetatSelected)) {
            jTextFieldReliquatDepense.setEnabled(true);
            jTextFieldAvanceDepensee.setEnabled(false);
        } else {
            jTextFieldReliquatDepense.setEnabled(false);
            jTextFieldAvanceDepensee.setEnabled(true);
        }
    }//GEN-LAST:event_jComboBoxRubriquetatActionPerformed

    private void jComboBoxArrondissementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementActionPerformed
        remplirSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementActionPerformed

    private void jComboBoxSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSouscentreActionPerformed
        //
    }//GEN-LAST:event_jComboBoxSouscentreActionPerformed

    private void jComboBoxRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionActionPerformed
        remplirDepartementCombobox();
    }//GEN-LAST:event_jComboBoxRegionActionPerformed

    private void jComboBoxDepartementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementActionPerformed
        remplirArrondissementCombobox();
    }//GEN-LAST:event_jComboBoxDepartementActionPerformed

    private void jComboBoxCategorieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCategorieActionPerformed
        remplirRubriquetatCombobox();
    }//GEN-LAST:event_jComboBoxCategorieActionPerformed

    private void jButtonRechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRechercherActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        if (anneeString.equals("---") || nomSouscentreSelected.equals("---") || groupedexamensEnstring.equals("") || designationRubriquetatSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le groupe d'examens, la session, le sous-centre et la rubrique d'état doivent être sélectionnés ! ");
        } else {
            anneeSelected = Integer.parseInt(anneeString);
            if (!jCheckBoxAdditif.isSelected()) {
                try {
                    caisse = metier.findCaisseOrdinaireD1SouscentreDans1Session1GroupedexamensEt1Rubrique(anneeSelected, nomSouscentreSelected, niveauSelected, typeSelected, designationRubriquetatSelected);
                    //jTextFieldMontantDepense.setText("0");//on initialise à 0
                    soldeAvance = 0;
                    soldeReliquat = 0;
                    if (caisse.getAvancedepensee() == 0) {
                        soldeAvance = caisse.getAvance();
                    } else {
                        soldeAvance = caisse.getAvance() - caisse.getAvancedepensee();
                    }
                    if (testerSiMOpratique2Selected(designationRubriquetatSelected)) {
                        if (caisse.getReliquatdepense() == 0) {
                            soldeReliquat = caisse.getReliquat();
                        } else {
                            soldeReliquat = caisse.getReliquat() - caisse.getReliquatdepense();
                        }
                    }
                    model.insertRow(model.getRowCount(), new Object[]{caisse.getIdcais(), caisse.getSouscentre().getNomsouscent(), caisse.getRubetat().getCategorie().getTitre(), caisse.getRubetat().getDesignation(), caisse.getAvance(), caisse.getReliquat(), caisse.getAvancedepensee(), caisse.getReliquatdepense(), soldeAvance, soldeReliquat, caisse.isAdditif(), caisse.getVersion()});
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "La balance ordinaire de paiement recherchée n'existe sans doute pas ! ");
                }
            } else {
                try {
                    caisse = metier.findCaisseAdditiveD1SouscentreDans1Session1GroupedexamensEt1Rubrique(anneeSelected, nomSouscentreSelected, niveauSelected, typeSelected, designationRubriquetatSelected);
                    //jTextFieldMontantDepense.setText("0");//on initialise à 0
                    soldeAvance = 0;
                    soldeReliquat = 0;
                    if (caisse.getAvancedepensee() == 0) {
                        soldeAvance = caisse.getAvance();
                    } else {
                        soldeAvance = caisse.getAvance() - caisse.getAvancedepensee();
                    }
                    if (testerSiMOpratique2Selected(designationRubriquetatSelected)) {
                        if (caisse.getReliquatdepense() == 0) {
                            soldeReliquat = caisse.getReliquat();
                        } else {
                            soldeReliquat = caisse.getReliquat() - caisse.getReliquatdepense();
                        }
                    }
                    model.insertRow(model.getRowCount(), new Object[]{caisse.getIdcais(), caisse.getSouscentre().getNomsouscent(), caisse.getRubetat().getCategorie().getTitre(), caisse.getRubetat().getDesignation(), caisse.getAvance(), caisse.getReliquat(), caisse.getAvancedepensee(), caisse.getReliquatdepense(), soldeAvance, soldeReliquat, caisse.isAdditif(), caisse.getVersion()});
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "La balance additive de paiement recherchée n'existe sans doute pas ! ");
                }
            }
        }
    }//GEN-LAST:event_jButtonRechercherActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        //remplit les champs
        int ligne = jTable1.getSelectedRow();
        idCaisseCliked = (int) model.getValueAt(ligne, 0);
        jComboBoxSouscentre.setSelectedItem((String) model.getValueAt(ligne, 1));
        jComboBoxCategorie.setSelectedItem((String) model.getValueAt(ligne, 2));
        jComboBoxRubriquetat.setSelectedItem((String) model.getValueAt(ligne, 3));
        jTextFieldAvanceOctroyee.setText("" + model.getValueAt(ligne, 4));
        jTextFieldReliquatOctroye.setText("" + model.getValueAt(ligne, 5));
        jTextFieldAvanceDepensee.setText("" + model.getValueAt(ligne, 6));
        jTextFieldReliquatDepense.setText("" + model.getValueAt(ligne, 7));
        jTextFieldSoldeAvance.setText("" + model.getValueAt(ligne, 8));
        jTextFieldSoldeReliquat.setText("" + model.getValueAt(ligne, 9));
        jCheckBoxAdditif.setSelected((boolean) model.getValueAt(ligne, 10));
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        videFrame();
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jButtonModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierActionPerformed
        model.setRowCount(0);//vide la jTable
        if (!jCheckBoxAdditif.isSelected()) {
            if (testerSiMOpratique2Selected(designationRubriquetatSelected)) {
                validerReliquatDepense();
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier cette balance ordinaire de paiement?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    if (continuerReliquatDepense) {
                        if (reliquatDepense <= 0) {
                            JOptionPane.showMessageDialog(this, "Le montant du reliquat ordinaire dépensé doit être un entier strictement positif !");
                        } else {
                            infoSaisies();
                            if (!anneeString.equals("---") && !nomSouscentreSelected.equals("---") && !groupedexamensEnstring.equals("") && !designationRubriquetatSelected.equals("---")) {
                                anneeSelected = Integer.parseInt(anneeString);
                                caisseCliked = metier.findCaisseById(idCaisseCliked);
                                caisseCliked.setReliquatdepense(reliquatDepense);
                                try {
                                    metier.modifierCaisse(caisseCliked);
                                    JOptionPane.showMessageDialog(this, "Balance ordinaire de paiement modifiée avec succès !");
                                    //jTextFieldMontantDepense.setText("0");//on initialise à 0
                                    caisse = metier.findCaisseOrdinaireD1SouscentreDans1Session1GroupedexamensEt1Rubrique(anneeSelected, nomSouscentreSelected, niveauSelected, typeSelected, designationRubriquetatSelected);
                                    if (caisse.getReliquatdepense() == 0) {
                                        soldeReliquat = caisse.getReliquat();
                                    } else {
                                        soldeReliquat = caisse.getReliquat() - caisse.getReliquatdepense();
                                    }
                                    model.insertRow(model.getRowCount(), new Object[]{caisse.getIdcais(), caisse.getSouscentre().getNomsouscent(), caisse.getRubetat().getCategorie().getTitre(), caisse.getRubetat().getDesignation(), caisse.getAvance(), caisse.getReliquat(), caisse.getAvancedepensee(), caisse.getReliquatdepense(), soldeAvance, soldeReliquat, caisse.isAdditif(), caisse.getVersion()});
                                } catch (ObcbudgetException ex) {
                                    JOptionPane.showMessageDialog(this, "Impossible de modifier la balance ordinaire de paiement souhaitée \n raison:" + ex.getMessage());
                                }
                            } else {
                                JOptionPane.showMessageDialog(this, "Veuillez recommencer. Au moins une donnée est incorrecte !");
                            }
                        }
                    }
                }
            } else {
                validerAvanceDepensee();
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier cette balance ordinaire de paiement?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    if (continuerAvanceDepensee) {
                        if (avanceDepensee <= 0) {
                            JOptionPane.showMessageDialog(this, "Le montant de l'avance ordinaire dépensée doit être un entier strictement positif !");
                        } else {
                            infoSaisies();
                            if (!anneeString.equals("---") && !nomSouscentreSelected.equals("---") && !groupedexamensEnstring.equals("") && !designationRubriquetatSelected.equals("---")) {
                                anneeSelected = Integer.parseInt(anneeString);
                                caisseCliked = metier.findCaisseById(idCaisseCliked);
                                caisseCliked.setAvancedepensee(avanceDepensee);
                                try {
                                    metier.modifierCaisse(caisseCliked);
                                    JOptionPane.showMessageDialog(this, "Balance ordinaire de paiement modifiée avec succès !");
                                    //jTextFieldMontantDepense.setText("0");//on initialise à 0
                                    caisse = metier.findCaisseOrdinaireD1SouscentreDans1Session1GroupedexamensEt1Rubrique(anneeSelected, nomSouscentreSelected, niveauSelected, typeSelected, designationRubriquetatSelected);
                                    soldeAvance = 0;
                                    if (caisse.getAvancedepensee() == 0) {
                                        soldeAvance = caisse.getAvance();
                                    } else {
                                        soldeAvance = caisse.getAvance() - caisse.getAvancedepensee();
                                    }
                                    model.insertRow(model.getRowCount(), new Object[]{caisse.getIdcais(), caisse.getSouscentre().getNomsouscent(), caisse.getRubetat().getCategorie().getTitre(), caisse.getRubetat().getDesignation(), caisse.getAvance(), caisse.getReliquat(), caisse.getAvancedepensee(), caisse.getReliquatdepense(), soldeAvance, soldeReliquat, caisse.isAdditif(), caisse.getVersion()});
                                } catch (ObcbudgetException ex) {
                                    JOptionPane.showMessageDialog(this, "Impossible de modifier la balance ordinaire de paiement souhaitée \n raison:" + ex.getMessage());
                                }
                            } else {
                                JOptionPane.showMessageDialog(this, "Veuillez recommencer. Au moins une donnée est incorrecte !");
                            }
                        }
                    }
                }
            }
        } else {
            if (testerSiMOpratique2Selected(designationRubriquetatSelected)) {
                validerReliquatDepense();
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier cette balance additive de paiement?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    if (continuerReliquatDepense) {
                        if (reliquatDepense <= 0) {
                            JOptionPane.showMessageDialog(this, "Le montant du reliquat additif dépensé doit être un entier strictement positif !");
                        } else {
                            infoSaisies();
                            if (!anneeString.equals("---") && !nomSouscentreSelected.equals("---") && !groupedexamensEnstring.equals("") && !designationRubriquetatSelected.equals("---")) {
                                anneeSelected = Integer.parseInt(anneeString);
                                caisseCliked = metier.findCaisseById(idCaisseCliked);
                                caisseCliked.setReliquatdepense(reliquatDepense);
                                try {
                                    metier.modifierCaisse(caisseCliked);
                                    JOptionPane.showMessageDialog(this, "Balance additive de paiement modifiée avec succès !");
                                    //jTextFieldMontantDepense.setText("0");//on initialise à 0
                                    caisse = metier.findCaisseAdditiveD1SouscentreDans1Session1GroupedexamensEt1Rubrique(anneeSelected, nomSouscentreSelected, niveauSelected, typeSelected, designationRubriquetatSelected);
                                    if (caisse.getReliquatdepense() == 0) {
                                        soldeReliquat = caisse.getReliquat();
                                    } else {
                                        soldeReliquat = caisse.getReliquat() - caisse.getReliquatdepense();
                                    }
                                    model.insertRow(model.getRowCount(), new Object[]{caisse.getIdcais(), caisse.getSouscentre().getNomsouscent(), caisse.getRubetat().getCategorie().getTitre(), caisse.getRubetat().getDesignation(), caisse.getAvance(), caisse.getReliquat(), caisse.getAvancedepensee(), caisse.getReliquatdepense(), soldeAvance, soldeReliquat, caisse.isAdditif(), caisse.getVersion()});
                                } catch (ObcbudgetException ex) {
                                    JOptionPane.showMessageDialog(this, "Impossible de modifier la balance additive de paiement souhaitée \n raison:" + ex.getMessage());
                                }
                            } else {
                                JOptionPane.showMessageDialog(this, "Veuillez recommencer. Au moins une donnée est incorrecte !");
                            }
                        }
                    }
                }
            } else {
                validerAvanceDepensee();
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier cette balance additive de paiement?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    if (continuerAvanceDepensee) {
                        if (avanceDepensee <= 0) {
                            JOptionPane.showMessageDialog(this, "Le montant de l'avance additive dépensée doit être un entier strictement positif !");
                        } else {
                            infoSaisies();
                            if (!anneeString.equals("---") && !nomSouscentreSelected.equals("---") && !groupedexamensEnstring.equals("") && !designationRubriquetatSelected.equals("---")) {
                                anneeSelected = Integer.parseInt(anneeString);
                                caisseCliked = metier.findCaisseById(idCaisseCliked);
                                caisseCliked.setAvancedepensee(avanceDepensee);
                                try {
                                    metier.modifierCaisse(caisseCliked);
                                    JOptionPane.showMessageDialog(this, "Balance additive de paiement modifiée avec succès !");
                                    //jTextFieldMontantDepense.setText("0");//on initialise à 0
                                    caisse = metier.findCaisseAdditiveD1SouscentreDans1Session1GroupedexamensEt1Rubrique(anneeSelected, nomSouscentreSelected, niveauSelected, typeSelected, designationRubriquetatSelected);
                                    soldeAvance = 0;
                                    if (caisse.getAvancedepensee() == 0) {
                                        soldeAvance = caisse.getAvance();
                                    } else {
                                        soldeAvance = caisse.getAvance() - caisse.getAvancedepensee();
                                    }
                                    model.insertRow(model.getRowCount(), new Object[]{caisse.getIdcais(), caisse.getSouscentre().getNomsouscent(), caisse.getRubetat().getCategorie().getTitre(), caisse.getRubetat().getDesignation(), caisse.getAvance(), caisse.getReliquat(), caisse.getAvancedepensee(), caisse.getReliquatdepense(), soldeAvance, soldeReliquat, caisse.isAdditif(), caisse.getVersion()});
                                } catch (ObcbudgetException ex) {
                                    JOptionPane.showMessageDialog(this, "Impossible de modifier la balance additive de paiement souhaitée \n raison:" + ex.getMessage());
                                }
                            } else {
                                JOptionPane.showMessageDialog(this, "Veuillez recommencer. Au moins une donnée est incorrecte !");
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonModifierActionPerformed

    private void jButtonVisualiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserActionPerformed
        if (!jCheckBoxAdditif.isSelected()) {
            anneeString = (String) jComboBoxSession.getSelectedItem();
            groupedexamensEnstring = jTextArea1.getText();
            designationRubriquetatSelected = (String) jComboBoxRubriquetat.getSelectedItem();
            Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
            ArrayList<String> typesBruts = new ArrayList<>();
            ArrayList<String> typesAconsiderer = new ArrayList<>();
            ArrayList<String> niveauxAconsiderer = new ArrayList<>();
            if (!anneeString.equals("---") && !groupedexamensEnstring.equals("") && !designationRubriquetatSelected.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                caisses = metier.findAllCaissesOrdinairesD1GroupedexamensDans1RubriquetatEt1Session(designationRubriquetatSelected, anneeSelected, niveauSelected, typeSelected);
                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                //recherche des types des examens à utiliser
                for (Examen examen : examensSelected) {
                    if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                        typesBruts.add("ESG");
                    }
                    if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                        typesBruts.add("ESTP");
                    }
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 2) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                //recherche des niveaux des examens à utiliser
                if (!niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add(niveauSelected);
                    niveauxAconsiderer.add("TOUT");
                }
                if (niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add("PROB");
                    niveauxAconsiderer.add("BACC");
                    niveauxAconsiderer.add("TOUT");
                }
                //recherche des centres de billetage
                for (String niveau : niveauxAconsiderer) {
                    for (String type : typesAconsiderer) {
                        List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                        for (Centrebilletage centrebilletage : desCentrebilletages) {
                            ArrayList<Souscentre> souscentresList = new ArrayList<>();
                            if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                for (Secteurcouv sect : secteurs) {
                                    if (!souscentresList.contains(sect.getSouscentre())) {
                                        souscentresList.add(sect.getSouscentre());
                                    }
                                }
                                centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                            }
                        }
                    }
                }
                try {//caisse par sous-centre et centre de billetage
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    for (Region region : regions) {
                        for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                            if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                int num = 1;
                                ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                for (int i = 0; i < souscentresList.size(); i++) {
                                    Souscentre souscentre = souscentresList.get(i);
                                    boolean trouver = false;
                                    Caisse caisseEncours = null;
                                    for (Caisse caisse : caisses) {
                                        if (caisse.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                            trouver = true;
                                            caisseEncours = caisse;
                                            break;
                                        }
                                    }
                                    if (trouver) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("num", num++);
                                        row.put("session", anneeSelected);
                                        row.put("region", region.getNomreg());
                                        row.put("departement", caisseEncours.getSouscentre().getEtablissement().getArrondissement().getDepartement().getNomdepart());
                                        row.put("arrondissement", caisseEncours.getSouscentre().getEtablissement().getArrondissement().getNomarr());
                                        row.put("souscentre", souscentre.getNomsouscent());
                                        row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                        row.put("examen", groupedexamensEnstring);
                                        row.put("rubriquetat", designationRubriquetatSelected);
                                        row.put("additif", "");
                                        int montantpercu = 0;
                                        int montantdepense = 0;
                                        if (testerSiMOpratique2Selected(designationRubriquetatSelected)) {
                                            montantpercu = caisseEncours.getReliquat();
                                            montantdepense = caisseEncours.getReliquatdepense();
                                        } else {
                                            montantpercu = caisseEncours.getAvance();
                                            montantdepense = caisseEncours.getAvancedepensee();
                                        }
                                        row.put("montantpercu", montantpercu);
                                        row.put("montantdepense", montantdepense);
                                        row.put("reliquat", caisseEncours.getAvance() - caisseEncours.getAvancedepensee());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\caisseReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                try {//synthèse ou état recapitulatif par centre de billetage
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    int num = 1;
                    for (Region region : regions) {
                        for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                            int montantCentre = 0;
                            if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                for (int i = 0; i < souscentresList.size(); i++) {
                                    Souscentre souscentre = souscentresList.get(i);
                                    if (testerSiMOpratique2Selected(designationRubriquetatSelected)) {
                                        for (Caisse caisse : caisses) {
                                            if (caisse.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                                montantCentre += caisse.getReliquat();
                                                break;
                                            }
                                        }
                                    } else {
                                        for (Caisse caisse : caisses) {
                                            if (caisse.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                                montantCentre += caisse.getAvance();
                                                break;
                                            }
                                        }
                                    }
                                }
                                Map<String, Object> row = new HashMap<>();
                                row.put("num", num++);
                                row.put("session", anneeSelected);
                                row.put("region", region.getNomreg());
                                row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                row.put("examen", groupedexamensEnstring);
                                row.put("rubriquetat", designationRubriquetatSelected);
                                row.put("montantCentre", montantCentre);
                                row.put("additif", "");
                                datasource.add(row);
                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\syntheseReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }//fin if groupedexamen
            else {
                JOptionPane.showMessageDialog(this, "Veuillez sélectionner un groupe d'examens, une session et une rubrique svp !");
            }
        } else {//de if !checkbox: la jchecbox a été sélectionnée
            anneeString = (String) jComboBoxSession.getSelectedItem();
            groupedexamensEnstring = jTextArea1.getText();
            designationRubriquetatSelected = (String) jComboBoxRubriquetat.getSelectedItem();
            Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
            ArrayList<String> typesBruts = new ArrayList<>();
            ArrayList<String> typesAconsiderer = new ArrayList<>();
            ArrayList<String> niveauxAconsiderer = new ArrayList<>();
            if (!anneeString.equals("---") && !groupedexamensEnstring.equals("") && !designationRubriquetatSelected.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                caisses = metier.findAllCaissesAdditivesD1GroupedexamensDans1RubriquetatEt1Session(designationRubriquetatSelected, anneeSelected, niveauSelected, typeSelected);
                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                //recherche des types des examens à utiliser
                for (Examen examen : examensSelected) {
                    if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                        typesBruts.add("ESG");
                    }
                    if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                        typesBruts.add("ESTP");
                    }
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 2) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                //recherche des niveaux des examens à utiliser
                if (!niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add(niveauSelected);
                    niveauxAconsiderer.add("TOUT");
                }
                if (niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add("PROB");
                    niveauxAconsiderer.add("BACC");
                    niveauxAconsiderer.add("TOUT");
                }
                //recherche des centres de billetage
                for (String niveau : niveauxAconsiderer) {
                    for (String type : typesAconsiderer) {
                        List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                        for (Centrebilletage centrebilletage : desCentrebilletages) {
                            ArrayList<Souscentre> souscentresList = new ArrayList<>();
                            if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                for (Secteurcouv sect : secteurs) {
                                    if (!souscentresList.contains(sect.getSouscentre())) {
                                        souscentresList.add(sect.getSouscentre());
                                    }
                                }
                                centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                            }
                        }
                    }
                }
                try {//caisse additive par sous-centre et centre de billetage
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    for (Region region : regions) {
                        for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                            if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                int num = 1;
                                ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                for (int i = 0; i < souscentresList.size(); i++) {
                                    Souscentre souscentre = souscentresList.get(i);
                                    boolean trouver = false;
                                    Caisse caisseEncours = null;
                                    for (Caisse caisse : caisses) {
                                        if (caisse.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                            trouver = true;
                                            caisseEncours = caisse;
                                            break;
                                        }
                                    }
                                    if (trouver) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("num", num++);
                                        row.put("session", anneeSelected);
                                        row.put("region", region.getNomreg());
                                        row.put("departement", caisseEncours.getSouscentre().getEtablissement().getArrondissement().getDepartement().getNomdepart());
                                        row.put("arrondissement", caisseEncours.getSouscentre().getEtablissement().getArrondissement().getNomarr());
                                        row.put("souscentre", souscentre.getNomsouscent());
                                        row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                        row.put("examen", groupedexamensEnstring);
                                        row.put("rubriquetat", designationRubriquetatSelected);
                                        row.put("additif", "ADDITIF");
                                        int montantpercu = 0;
                                        int montantdepense = 0;
                                        if (testerSiMOpratique2Selected(designationRubriquetatSelected)) {
                                            montantpercu = caisseEncours.getReliquat();
                                            montantdepense = caisseEncours.getReliquatdepense();
                                        } else {
                                            montantpercu = caisseEncours.getAvance();
                                            montantdepense = caisseEncours.getAvancedepensee();
                                        }
                                        row.put("montantpercu", montantpercu);
                                        row.put("montantdepense", montantdepense);
                                        row.put("reliquat", caisseEncours.getAvance() - caisseEncours.getAvancedepensee());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\caisseReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                try {//synthèse additive ou état recapitulatif additif par centre de billetage
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    int num = 1;
                    for (Region region : regions) {
                        for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                            int montantCentre = 0;
                            if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                for (int i = 0; i < souscentresList.size(); i++) {
                                    Souscentre souscentre = souscentresList.get(i);
                                    if (testerSiMOpratique2Selected(designationRubriquetatSelected)) {
                                        for (Caisse caisse : caisses) {
                                            if (caisse.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                                montantCentre += caisse.getReliquat();
                                                break;
                                            }
                                        }
                                    } else {
                                        for (Caisse caisse : caisses) {
                                            if (caisse.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                                montantCentre += caisse.getAvance();
                                                break;
                                            }
                                        }
                                    }
                                }
                                Map<String, Object> row = new HashMap<>();
                                row.put("num", num++);
                                row.put("session", anneeSelected);
                                row.put("region", region.getNomreg());
                                row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                row.put("examen", groupedexamensEnstring);
                                row.put("rubriquetat", designationRubriquetatSelected);
                                row.put("montantCentre", montantCentre);
                                row.put("additif", "ADDITIF");
                                datasource.add(row);
                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\syntheseReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }//fin if groupedexamen
            else {
                JOptionPane.showMessageDialog(this, "Veuillez sélectionner un groupe d'examens, une session et une rubrique svp !");
            }
        }//fin else checbox
    }//GEN-LAST:event_jButtonVisualiserActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jTextFieldAvanceOctroyeeCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextFieldAvanceOctroyeeCaretUpdate
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldAvanceOctroyeeCaretUpdate

    private void jTextFieldReliquatOctroyeCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextFieldReliquatOctroyeCaretUpdate
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldReliquatOctroyeCaretUpdate

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueCaisse.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueCaisse.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueCaisse.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueCaisse.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueCaisse().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonRechercher;
    private javax.swing.JButton jButtonVisualiser;
    private javax.swing.JCheckBox jCheckBoxAdditif;
    private javax.swing.JComboBox<String> jComboBoxArrondissement;
    private javax.swing.JComboBox<String> jComboBoxCategorie;
    private javax.swing.JComboBox<String> jComboBoxDepartement;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxRegion;
    private javax.swing.JComboBox<String> jComboBoxRubriquetat;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxSouscentre;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelArrondissement;
    private javax.swing.JLabel jLabelAvanceDepensee;
    private javax.swing.JLabel jLabelAvanceOctroyee;
    private javax.swing.JLabel jLabelCategorie;
    private javax.swing.JLabel jLabelDepartement;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelRegion;
    private javax.swing.JLabel jLabelReliquatDepense;
    private javax.swing.JLabel jLabelReliquatOctroye;
    private javax.swing.JLabel jLabelRubriquetat;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelSoldeAvance;
    private javax.swing.JLabel jLabelSoldeReliquat;
    private javax.swing.JLabel jLabelSouscentre;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelMontantDepense;
    private javax.swing.JPanel jPanelMontantOctroye1;
    private javax.swing.JPanel jPanelSolde;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldAvanceDepensee;
    private javax.swing.JTextField jTextFieldAvanceOctroyee;
    private javax.swing.JTextField jTextFieldReliquatDepense;
    private javax.swing.JTextField jTextFieldReliquatOctroye;
    private javax.swing.JTextField jTextFieldSoldeAvance;
    private javax.swing.JTextField jTextFieldSoldeReliquat;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Region> regions = null;
    private String[] regionsCombo = null;
    private List<Departement> departements = null;
    private List<Arrondissement> arrondissements = null;
    private List<Souscentre> souscentres = null;
    private List<Session> sessions = null;
    private List<Examen> examens = null;
    private List<Rubriquetat> rubriquetats = null;
    private String[] departementsCombo = null;
    private String[] arrondissementsCombo = null;
    private String[] souscentresCombo = null;
    private String[] sessionsCombo = null;
    private String[] rubriquetatsCombo = null;
    private Departement departementSelected = null;
    private Arrondissement arrondissementSelected = null;
    private Souscentre souscentreSelected = null;
    private Rubriquetat rubriquetatSelected = null;
    private String nomRegionSelected = "";
    private String nomDepartementSelected = "";
    private String nomArrondissementSelected = "";
    private String nomSouscentreSelected = "";
    private String designationRubriquetatSelected = "";
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    //private String avanceOctroyeeSaisie = "";
    //private String reliquatOctroyeSaisi = "";
    //private String avanceDepenseeSaisie = "";
    //private String reliquatDepenseSaisi = "";
    //private String soldeAvanceSaisi = "";
    //private String soldeReliquatSaisi = "";
    private int avanceOctroyee = 0;
    private int avanceDepensee = 0;
    private int reliquatOctroye = 0;
    private int reliquatDepense = 0;
    private int soldeAvance = 0;
    private int soldeReliquat = 0;
    private int idCaisseCliked = 0;
    private Caisse caisseCliked = null;
    private List<Caisse> caisses = null;
    private Caisse caisse = null;
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private boolean continuerAvanceDepensee = false;
    private boolean continuerReliquatDepense = false;
    private List<Categorie> categories = null;
    private String[] categoriesCombo = null;
    private String titreCategorieSelected = "";
    private String groupedexamensEnstring = "";
    private Categorie categorieSelected = null;
    private NumberFormat nf = NumberFormat.getInstance();
    private List<Groupedexamen> groupedexamens = null;
    private String[] examensList = null;
    private List<Examen> examensSelected = new ArrayList<Examen>();

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        examens = metier.findAllExamens();
        regions = metier.findAllRegions();

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int i = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[i++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "GEN", "IND", "IND PROF", "STT", "STT PROF", "TOUT", "TOUT ESTI", "TOUT STT", "TOUT ESTP"};//TOUT=tous les types; TOUT ESTI=INDUSTRIEL+INDUSTRIEL PROFESSIONNEL; TOUT STT=STT+STT PROFESSIONNEL; TOUTN ESTP=TOUT SAUF ESG
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC", "TOUT"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        //on remplit la combobox des régions
        regionsCombo = new String[regions.size() + 1];
        regionsCombo[0] = "---";
        int j = 1;
        for (Region region : regions) {
            regionsCombo[j++] = region.getNomreg();
        }
        jComboBoxRegion.setModel(new DefaultComboBoxModel(regionsCombo));

        categories = metier.findAllCategories();
        //on remplit la combobox des catégories
        categoriesCombo = new String[categories.size() + 1];
        categoriesCombo[0] = "---";
        int l = 1;
        for (Categorie categorie : categories) {
            categoriesCombo[l++] = categorie.getTitre();
        }
        jComboBoxCategorie.setModel(new DefaultComboBoxModel(categoriesCombo));

        jTextFieldReliquatDepense.setText("0");//on initialise à 0
        jTextFieldAvanceDepensee.setText("0");
        jTextFieldReliquatDepense.setEnabled(false);//on inhibe
        jTextFieldAvanceDepensee.setEnabled(false);
        remplirDepartementCombobox();
        remplirArrondissementCombobox();
        remplirRubriquetatCombobox();
    }

    private void infoSaisies() {
        anneeString = (String) jComboBoxSession.getSelectedItem();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        designationRubriquetatSelected = (String) jComboBoxRubriquetat.getSelectedItem();
    }

    private void videFrame() {
        jTextFieldAvanceDepensee.setText("0");//on initialise à 0
        jTextFieldReliquatDepense.setText("0");//on initialise à 0
        jTextFieldAvanceOctroyee.setText("");
        jTextFieldReliquatOctroye.setText("");
        jTextFieldSoldeAvance.setText("");
        jTextFieldSoldeReliquat.setText("");
        jComboBoxSession.setSelectedIndex(0);
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        jTextFieldSoldeAvance.setText("");
        jComboBoxRegion.setSelectedIndex(0);
        jComboBoxDepartement.setSelectedIndex(0);
        jComboBoxArrondissement.setSelectedIndex(0);
        jComboBoxSouscentre.setSelectedIndex(0);
        jComboBoxCategorie.setSelectedIndex(0);
        jComboBoxRubriquetat.setSelectedIndex(0);
        jCheckBoxAdditif.setSelected(false);
        model.setRowCount(0);//vide la jTable
    }

    private void remplirDepartementCombobox() {
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        departements = metier.findAllDepartementsD1Region(nomRegionSelected);
        //on remplit la combobox des départements
        departementsCombo = new String[departements.size() + 1];
        departementsCombo[0] = "---";
        int i = 1;
        for (Departement departement : departements) {
            departementsCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartement.setModel(new DefaultComboBoxModel(departementsCombo));
    }

    private void remplirArrondissementCombobox() {
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        arrondissements = metier.findAllArrondissementsD1Departement(nomDepartementSelected);
        //on remplit la combobox des arrondissements
        arrondissementsCombo = new String[arrondissements.size() + 1];
        arrondissementsCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissements) {
            arrondissementsCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissement.setModel(new DefaultComboBoxModel(arrondissementsCombo));
    }

    private void remplirSouscentreCombobox() {
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        souscentres = metier.findAllSouscentresD1Arrondissement(nomArrondissementSelected);
        //on remplit la combobox des centres de billetage
        souscentresCombo = new String[souscentres.size() + 1];
        souscentresCombo[0] = "---";
        int i = 1;
        for (Souscentre souscentre : souscentres) {
            souscentresCombo[i++] = souscentre.getNomsouscent();
        }
        jComboBoxSouscentre.setModel(new DefaultComboBoxModel(souscentresCombo));

    }

    private void remplirRubriquetatCombobox() {
        titreCategorieSelected = (String) jComboBoxCategorie.getSelectedItem();
        rubriquetats = metier.findAllRubriquetatsD1Categorie(titreCategorieSelected);
        //on remplit la combobox des rubriques d'état
        rubriquetatsCombo = new String[rubriquetats.size() + 1];
        rubriquetatsCombo[0] = "---";
        int i = 1;
        for (Rubriquetat rubriquetat : rubriquetats) {
            rubriquetatsCombo[i++] = rubriquetat.getDesignation();
        }
        jComboBoxRubriquetat.setModel(new DefaultComboBoxModel(rubriquetatsCombo));
    }

    private void validerAvanceDepensee() {
        //avanceOctroyee,reliquatOctroye,avanceDepensee,reliquatDepense,soldeAvance,soldeReliquat
        String chaine = jTextFieldAvanceDepensee.getText();
        try {
            avanceDepensee = Integer.parseInt(chaine);
            continuerAvanceDepensee = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, " L'avance dépensée doit être fournie et contenir uniquement des chiffres entiers!");
            continuerAvanceDepensee = false;
        }
    }

    private void validerReliquatDepense() {
        String chaine = (String) jTextFieldReliquatDepense.getText();
        reliquatOctroye = Integer.parseInt((String) jTextFieldReliquatOctroye.getText());
        if (reliquatOctroye <= 0) {
            JOptionPane.showMessageDialog(this, " Attention : le reliquat octroyé est nul !");
        } else {
            try {
                reliquatDepense = Integer.parseInt(chaine);
                continuerReliquatDepense = true;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, " Le reliquat depensé doit être fourni et contenir uniquement des chiffres entiers!");
                continuerReliquatDepense = false;
            }
        }
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    private boolean testerSiMOpratique2Selected(String chaine) {
        boolean valTest = false;
        if (chaine.equals("RELIQUAT MATIÈRE D'OEUVRE PRATIQUE 2")) {
            valTest = true;
        }
        return valTest;
    }
}
