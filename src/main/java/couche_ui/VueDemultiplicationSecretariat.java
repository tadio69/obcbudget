package couche_ui;

import couche_jpa.Activite;
import couche_jpa.Arrondissement;
import couche_jpa.Departement;
import couche_jpa.Etablissement;
import couche_jpa.Examen;
import couche_jpa.Nature;
import couche_jpa.Naturesecretariat;
import couche_jpa.Nbepreuveprof;
import couche_jpa.Option;
import couche_jpa.Region;
import couche_jpa.Secretariat;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_jpa.Specialisation;
import couche_jpa.Specialisationsec;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.table.DefaultTableModel;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 *
 * @author famille chijou
 */
public class VueDemultiplicationSecretariat extends javax.swing.JFrame {

    /**
     * Creates new form VueDemultiplicationSecretariat
     */
    DefaultTableModel model;

    public VueDemultiplicationSecretariat() {
        initComponents();
        model = (DefaultTableModel) jTable1.getModel();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButtonRechercher = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonCreer = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonVisualiser = new javax.swing.JButton();
        jPanelChoixSouscentre = new javax.swing.JPanel();
        jComboBoxDepartement = new javax.swing.JComboBox<>();
        jLabelDepartement = new javax.swing.JLabel();
        jLabelSouscentre = new javax.swing.JLabel();
        jComboBoxSouscentre = new javax.swing.JComboBox<>();
        jComboBoxRegion = new javax.swing.JComboBox<>();
        jLabelRegion = new javax.swing.JLabel();
        jComboBoxArrondissement = new javax.swing.JComboBox<>();
        jLabelArrondissement = new javax.swing.JLabel();
        jLabelExamen = new javax.swing.JLabel();
        jLabelActivite = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListExamen = new javax.swing.JList<>();
        jLabelOption = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListOption = new javax.swing.JList<>();
        jLabelNumsec = new javax.swing.JLabel();
        jComboBoxNumsec = new javax.swing.JComboBox<>();
        jLabelEtablissement = new javax.swing.JLabel();
        jComboBoxEtablissement = new javax.swing.JComboBox<>();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        jListActivite = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("DEMULTIPLICATION DE SECRETARIAT");

        jButtonRechercher.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonRechercher.setText("Rechercher");
        jButtonRechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRechercherActionPerformed(evt);
            }
        });

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jButtonAnnuler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Région", "Département", "Arrondissement", "Sous-centre", "Numéro secrétariat", "Etablissement", "Examen(s)", "Session", "Activité(s)", "Série/spécialité(s)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(true);
        jTable1.setShowVerticalLines(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jButtonCreer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreer.setText("Créer");
        jButtonCreer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerActionPerformed(evt);
            }
        });

        jButtonSupprimer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jButtonVisualiser.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiser.setText("Tous les secrétariats");
        jButtonVisualiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserActionPerformed(evt);
            }
        });

        jPanelChoixSouscentre.setBackground(new java.awt.Color(204, 255, 0));
        jPanelChoixSouscentre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un sous-centre d'examen", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jComboBoxDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementActionPerformed(evt);
            }
        });

        jLabelDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartement.setText("Département :");

        jLabelSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSouscentre.setText("Sous-centre :");

        jComboBoxSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSouscentre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSouscentreActionPerformed(evt);
            }
        });

        jComboBoxRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionActionPerformed(evt);
            }
        });

        jLabelRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegion.setText("Région :");

        jComboBoxArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementActionPerformed(evt);
            }
        });

        jLabelArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissement.setText("Arrondissement :");

        javax.swing.GroupLayout jPanelChoixSouscentreLayout = new javax.swing.GroupLayout(jPanelChoixSouscentre);
        jPanelChoixSouscentre.setLayout(jPanelChoixSouscentreLayout);
        jPanelChoixSouscentreLayout.setHorizontalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelRegion)
                    .addComponent(jLabelDepartement))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBoxDepartement, 0, 314, Short.MAX_VALUE)
                    .addComponent(jComboBoxRegion, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(34, 34, 34)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelArrondissement)
                    .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabelSouscentre)))
                .addGap(1, 1, 1)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 578, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanelChoixSouscentreLayout.setVerticalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        jLabelActivite.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelActivite.setText("Activité(s) :");

        jListExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jScrollPane3.setViewportView(jListExamen);

        jLabelOption.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelOption.setText("Série/Spécialité(s) :");

        jListOption.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jScrollPane4.setViewportView(jListOption);

        jLabelNumsec.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNumsec.setText("Numéro secrétariat :");

        jComboBoxNumsec.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxNumsec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNumsecActionPerformed(evt);
            }
        });

        jLabelEtablissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelEtablissement.setText("Etablissement d'accueil :");

        jComboBoxEtablissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxEtablissement.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxEtablissement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEtablissementActionPerformed(evt);
            }
        });

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jListActivite.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jScrollPane5.setViewportView(jListActivite);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(363, 363, 363)
                        .addComponent(jButtonRechercher)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonCreer)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSupprimer)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnuler)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonFermer)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonVisualiser))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(377, 377, 377)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(jLabelEtablissement)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxEtablissement, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelNumsec)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxNumsec, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelSession)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addComponent(jLabelExamen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(jLabelActivite)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(jLabelOption)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(99, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1397, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelEtablissement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxEtablissement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNumsec, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNumsec, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabelActivite, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(9, 9, 9)
                            .addComponent(jLabelOption, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane4)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3)
                    .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonSupprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCreer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonRechercher, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonAnnuler, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonVisualiser, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRechercherActionPerformed
        infoSaisies();
        model.setRowCount(0);//vide la jTable
        if (!anneeEnString.equals("---") && !nomSouscentreSelected.equals("---")) {//tous les secrétariats du sous-centre fourni à la session fournie
            //naturesec = metier.findAllNaturesecretariatD1SouscentrePour1ExamenEtSession(anneeSelected, sigleExamenSelected, nomSouscentreSelected, numsec);
            //optionsec = metier.findAllOptionsecretariatD1SouscentrePour1ExamenEtSession(anneeSelected, sigleExamenSelected, nomSouscentreSelected, numsec);
            anneeSelected = Integer.parseInt(anneeEnString);
            secretariats = metier.findAllSecretariatsD1SouscentreEtSession(nomSouscentreSelected, anneeSelected);
            for (Souscentre s : souscentres) {
                if (s.getNomsouscent().equals(nomSouscentreSelected)) {
                    souscentreSelected = s;
                    break;
                }
            }
            if (!secretariats.isEmpty()) {
                for (Secretariat sec : secretariats) {
                    naturesec = metier.findAllNaturesecretariatD1Secretariat(sec.getNumsec(), sec.getSession().getAnnee(), sec.getSouscentre().getNomsouscent(), sec.getEtablissement().getAbreviation());
                    specsecs = metier.findAllSpecialisationsecD1Secretariat(sec.getNumsec(), sec.getSession().getAnnee(), sec.getSouscentre().getNomsouscent(), sec.getEtablissement().getAbreviation());

                    String naturesecPourAffichage = "";
                    if (!naturesec.isEmpty()) {
                        for (Naturesecretariat natsec : naturesec) {
                            if (naturesecPourAffichage.equals("")) {
                                naturesecPourAffichage += natsec.getActivite().getNomact();
                            } else {
                                naturesecPourAffichage += ", " + natsec.getActivite().getNomact();
                            }
                        }
                    }

                    String optionsecPourAffichage = "";
                    String examensecPourAffichage = "";
                    ArrayList<Examen> sesExamens = new ArrayList<>();
                    if (!specsecs.isEmpty()) {
                        for (Specialisationsec specsec : specsecs) {
                            if (!sesExamens.contains(specsec.getExamen())) {
                                sesExamens.add(specsec.getExamen());
                            }
                            if (optionsecPourAffichage.equals("")) {
                                optionsecPourAffichage += specsec.getOption().getSigle();
                            } else {
                                optionsecPourAffichage += ", " + specsec.getOption().getSigle();
                            }
                        }
                        for (Examen exam : sesExamens) {
                            if (examensecPourAffichage.equals("")) {
                                examensecPourAffichage += exam.getSigle();
                            } else {
                                examensecPourAffichage += ", " + exam.getSigle();
                            }
                        }
                    }

                    if (!naturesecPourAffichage.equals("") && !optionsecPourAffichage.equals("")) {
                        model.insertRow(model.getRowCount(), new Object[]{souscentreSelected.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), souscentreSelected.getEtablissement().getArrondissement().getDepartement().getNomdepart(), souscentreSelected.getEtablissement().getArrondissement().getNomarr(), souscentreSelected.getNomsouscent(), sec.getNumsec(), sec.getEtablissement().getAbreviation(), examensecPourAffichage, anneeSelected, naturesecPourAffichage, optionsecPourAffichage});
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Aucun secrétariat n'existe pour ce sous-centre !");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs session et sous-centre sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonRechercherActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        videFrame();
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jButtonCreerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerActionPerformed
        infoSaisies();
        model.setRowCount(0);//vide la jTable
        if (!anneeEnString.equals("---") && !nomSouscentreSelected.equals("---") && !listeExamensSelected.isEmpty() && !numsecSelected.equals("---") && !nomEtablissementSelected.equals("---") && !listeActivitesSelected.isEmpty() && !listeOptionsSelected.isEmpty()) {
            anneeSelected = Integer.parseInt(anneeEnString);
            numsec = Integer.parseInt(numsecSelected);
            for (Souscentre s : souscentres) {
                if (s.getNomsouscent().equals(nomSouscentreSelected)) {
                    souscentreSelected = s;
                    break;
                }
            }
            for (Etablissement etab : etablissements) {
                if (etab.getAbreviation().equals(nomEtablissementSelected)) {
                    etablissementSelected = etab;
                    break;
                }
            }
            for (Session s : sessions) {
                if (s.getAnnee() == anneeSelected) {
                    sessionSelected = s;
                    break;
                }
            }

            for (int i = 0; i < listeExamensSelected.size(); i++) {
                for (Examen e : examens) {
                    if (e.getSigle().equals(listeExamensSelected.get(i))) {
                        examensSelected.add(e);
                        break;
                    }
                }
            }

            for (int i = 0; i < listeActivitesSelected.size(); i++) {
                for (Activite a : activites) {
                    if (a.getNomact().equals(listeActivitesSelected.get(i))) {
                        activitesSelected.add(a);
                        break;
                    }
                }
            }

            for (int i = 0; i < listeOptionsSelected.size(); i++) {
                for (Option o : options) {
                    if (o.getSigle().equals(listeOptionsSelected.get(i))) {
                        optionsSelected.add(o);
                        break;
                    }
                }
            }
            Secretariat secretariatCreated = null;
            boolean testSiCreerSecretariat = false;
            boolean testSiCreerAutres = false;
            try {
                secretariatCreated = new Secretariat(numsec, sessionSelected, souscentreSelected, etablissementSelected);
                metier.creerSecretariat(secretariatCreated);
                testSiCreerSecretariat = true;
            } catch (ObcbudgetException ex) {
                testSiCreerSecretariat = false;
            }
            if (testSiCreerSecretariat) {
                try {
                    for (Activite a : activitesSelected) {
                        metier.creerNaturesecretariat(new Naturesecretariat(a, secretariatCreated));
                    }
                    for (Examen e : examensSelected) {
                        tousNbepreuveprofs = metier.findAllNbepreuveprofsD1Examen(e.getSigle());
                        for (Option o : optionsSelected) {
                            for (Nbepreuveprof nbepreuveprof : tousNbepreuveprofs) {
                                if (nbepreuveprof.getOption().getSigle().equals(o.getSigle())) {
                                    metier.creerSpecialisationsec(new Specialisationsec(e, o, secretariatCreated));
                                    break;
                                }
                            }
                        }

                    }
                    testSiCreerAutres = true;
                } catch (ObcbudgetException ex) {
                    testSiCreerAutres = false;
                }
            }
            if (!testSiCreerAutres) {
                JOptionPane.showMessageDialog(this, "Impossible de créer le secrétariat " + numsec + " au sous-centre [" + nomSouscentreSelected + "]");
            } else {
                JOptionPane.showMessageDialog(this, "Secrétariat " + numsec + " créé avec succès !");
                naturesec = metier.findAllNaturesecretariatD1Secretariat(numsec, anneeSelected, nomSouscentreSelected, nomEtablissementSelected);
                String naturesecPourAffichage = "";
                if (!naturesec.isEmpty()) {
                    souscentreSelected = naturesec.get(0).getSecretariat().getSouscentre();
                    etablissementSelected = naturesec.get(0).getSecretariat().getEtablissement();
                    sessionSelected = naturesec.get(0).getSecretariat().getSession();
                    for (Naturesecretariat s : naturesec) {
                        if (naturesecPourAffichage.equals("")) {
                            naturesecPourAffichage += s.getActivite().getNomact();
                        } else {
                            naturesecPourAffichage += ", " + s.getActivite().getNomact();
                        }
                    }
                }
                specsecs = metier.findAllSpecialisationsecD1Secretariat(numsec, anneeSelected, nomSouscentreSelected, nomEtablissementSelected);
                String optionsecPourAffichage = "";
                String examensecPourAffichage = "";
                ArrayList<Examen> sesExamens = new ArrayList<>();
                if (!specsecs.isEmpty()) {
                    for (Specialisationsec specsec : specsecs) {
                        if (!sesExamens.contains(specsec.getExamen())) {
                            sesExamens.add(specsec.getExamen());
                        }
                        if (optionsecPourAffichage.equals("")) {
                            optionsecPourAffichage += specsec.getOption().getSigle();
                        } else {
                            optionsecPourAffichage += ", " + specsec.getOption().getSigle();
                        }
                    }
                    for (Examen exam : sesExamens) {
                        if (examensecPourAffichage.equals("")) {
                            examensecPourAffichage += exam.getSigle();
                        } else {
                            examensecPourAffichage += ", " + exam.getSigle();
                        }
                    }
                }

                if (!naturesecPourAffichage.equals("") && !optionsecPourAffichage.equals("") && !examensecPourAffichage.equals("")) {
                    model.insertRow(model.getRowCount(), new Object[]{souscentreSelected.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), souscentreSelected.getEtablissement().getArrondissement().getDepartement().getNomdepart(), souscentreSelected.getEtablissement().getArrondissement().getNomarr(), souscentreSelected.getNomsouscent(), numsec, etablissementSelected.getAbreviation(), examensecPourAffichage, sessionSelected.getAnnee(), naturesecPourAffichage, optionsecPourAffichage});
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Tous les champs sont obligatoires !");
        }
        activitesSelected.clear();
        optionsSelected.clear();
        examensSelected.clear();
    }//GEN-LAST:event_jButtonCreerActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer ce secrétariat ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            infoSaisies();
            if (!anneeEnString.equals("---") && !nomSouscentreSelected.equals("---") && !numsecSelected.equals("---") && !nomEtablissementSelected.equals("---")) {
                anneeSelected = Integer.parseInt(anneeEnString);
                //optionsec = metier.findAllOptionssecretariatsD1ExamensD1Session(anneeSelected, sigleExamenSelected);
                numsec = Integer.parseInt(numsecSelected);
                try {
                    Secretariat secretariat = metier.findSecretariatD1NumeroD1SessionD1SouscentreD1Etablissement(numsec, anneeSelected, nomSouscentreSelected, nomEtablissementSelected);
                    metier.supprimerSecretariat(secretariat);
                    JOptionPane.showMessageDialog(this, "Secrétariat supprimé avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer ce secrétariat\n Raison:" + ex.getMessage() + " !");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Tous les champs sont obligatoires !");
            }
        }
        model.setRowCount(0);//vide la jTableOptions
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jButtonVisualiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserActionPerformed
        //secrétariats d'une session donnée
        model.setRowCount(0);//vide la jTable
        anneeEnString = (String) jComboBoxSession.getSelectedItem();
        if (!anneeEnString.equals("---")) {
            anneeSelected = Integer.parseInt(anneeEnString);
            secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
            if (!secretariats.isEmpty()) {
                for (Secretariat sec : secretariats) {
                    naturesec = metier.findAllNaturesecretariatD1Secretariat(sec.getNumsec(), sec.getSession().getAnnee(), sec.getSouscentre().getNomsouscent(), sec.getEtablissement().getAbreviation());
                    specsecs = metier.findAllSpecialisationsecD1Secretariat(sec.getNumsec(), sec.getSession().getAnnee(), sec.getSouscentre().getNomsouscent(), sec.getEtablissement().getAbreviation());

                    String naturesecPourAffichage = "";
                    if (!naturesec.isEmpty()) {
                        for (Naturesecretariat natsec : naturesec) {
                            if (naturesecPourAffichage.equals("")) {
                                naturesecPourAffichage += natsec.getActivite().getNomact();
                            } else {
                                naturesecPourAffichage += ", " + natsec.getActivite().getNomact();
                            }
                        }
                    }

                    String optionsecPourAffichage = "";
                    String examensecPourAffichage = "";
                    ArrayList<Examen> sesExamens=new ArrayList<>();
                    if (!specsecs.isEmpty()) {
                        for (Specialisationsec specsec : specsecs) {
                            if(!sesExamens.contains(specsec.getExamen())) sesExamens.add(specsec.getExamen());
                            if (optionsecPourAffichage.equals("")) {
                                optionsecPourAffichage += specsec.getOption().getSigle();
                            } else {
                                optionsecPourAffichage += ", " + specsec.getOption().getSigle();
                            }
                        }
                        for (Examen exam : sesExamens) {
                            if (examensecPourAffichage.equals("")) {
                                examensecPourAffichage += exam.getSigle();
                            } else {
                                examensecPourAffichage += ", " + exam.getSigle();
                            }
                        }
                    }
                    if (!naturesecPourAffichage.equals("") && !optionsecPourAffichage.equals("")) {
                        model.insertRow(model.getRowCount(), new Object[]{sec.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), sec.getEtablissement().getArrondissement().getDepartement().getNomdepart(), sec.getEtablissement().getArrondissement().getNomarr(), sec.getSouscentre().getNomsouscent(), sec.getNumsec(), sec.getEtablissement().getAbreviation(), examensecPourAffichage, anneeSelected, naturesecPourAffichage, optionsecPourAffichage});
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Aucun secrétariat n'existe pour cette session !");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. La session est obligatoire !");
        }
    }//GEN-LAST:event_jButtonVisualiserActionPerformed

    private void jComboBoxDepartementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementActionPerformed
        remplirArrondissementCombobox();
    }//GEN-LAST:event_jComboBoxDepartementActionPerformed

    private void jComboBoxArrondissementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementActionPerformed
        remplirSouscentreCombobox();
        remplirEtablissementCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementActionPerformed

    private void jComboBoxSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSouscentreActionPerformed
        /*
        remplirExamenJList();
        remplirOptionJList();
        remplirActivitesJList();
         */
    }//GEN-LAST:event_jComboBoxSouscentreActionPerformed

    private void jComboBoxRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionActionPerformed
        remplirDepartementCombobox();
    }//GEN-LAST:event_jComboBoxRegionActionPerformed

    private void jComboBoxNumsecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNumsecActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxNumsecActionPerformed

    private void jComboBoxEtablissementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEtablissementActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxEtablissementActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        anneeEnString = (String) jComboBoxSession.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        if (!anneeEnString.equals("---") && !nomSouscentreSelected.equals("---")) {
            anneeSelected = Integer.parseInt(anneeEnString);
            naturesEnstring = metier.findAllNaturesD1SouscentreDans1Session(nomSouscentreSelected, anneeSelected);
            specialisations = metier.findAllSpecialisationsD1SouscentreEtSession(anneeSelected, nomSouscentreSelected);
            if (!naturesEnstring.isEmpty() && !specialisations.isEmpty()) {
                //on remplit la jList des examens
                List<Examen> sesExamens = new ArrayList<>();
                for (Specialisation spec : specialisations) {
                    if (!sesExamens.contains(spec.getExamen())) {
                        sesExamens.add(spec.getExamen());
                    }
                }
                examensList = new String[sesExamens.size()];
                int i = 0;
                for (Examen exam : sesExamens) {
                    examensList[i++] = exam.getSigle();
                }
                jListExamen.setListData(examensList);

                jListExamen.setLayoutOrientation(2);

                //on remplit la jList des activités
                activitesList = new String[naturesEnstring.size()];
                int j = 0;
                for (String act : naturesEnstring) {
                    activitesList[j++] = act;
                }
                jListActivite.setListData(activitesList);

                jListActivite.setLayoutOrientation(2);//affiche la jlist sur plusieurs colonnes

                //nbeupreuveprofs = metier.findAllOptionsD1Examen(sigleExamenSelected);
                //on remplit la jList des options
                optionsList = new String[specialisations.size()];
                int k = 0;
                for (Specialisation spec : specialisations) {
                    optionsList[k++] = spec.getOption().getSigle();
                }
                jListOption.setListData(optionsList);
                jListOption.setLayoutOrientation(2);
            } else {
                JOptionPane.showMessageDialog(this, "Ce sous-centre n'a certainement pas de rattachements d'activités à la session sélectionnée !");
            }
        }
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        //remplit les champs
        int ligne = jTable1.getSelectedRow();
        jComboBoxRegion.setSelectedItem((String) model.getValueAt(ligne, 0));
        jComboBoxDepartement.setSelectedItem((String) model.getValueAt(ligne, 1));
        jComboBoxArrondissement.setSelectedItem((String) model.getValueAt(ligne, 2));
        jComboBoxSouscentre.setSelectedItem((String) model.getValueAt(ligne, 3));
        jComboBoxNumsec.setSelectedItem("" + model.getValueAt(ligne, 4));
        jComboBoxEtablissement.setSelectedItem((String) model.getValueAt(ligne, 5));
        jComboBoxSession.setSelectedItem(model.getValueAt(ligne, 7));

        //remplirOptionJList();
        String act = (String) model.getValueAt(ligne, 8);//chaîne d'activités cliquées
        String separateur = ", ";
        String[] listAct = act.split(separateur);
        List<Integer> indicesActArray = new ArrayList<Integer>();//indices des activités en arraylist

        ListModel myModel1 = jListActivite.getModel();
        ListModel myModel2 = jListOption.getModel();
        ListModel myModel3 = jListExamen.getModel();
        int nbAct = myModel1.getSize();//fournit le nombre d'éléments de la jListActivite
        int nbOpt = myModel2.getSize();//fournit le nombre d'éléments de la jListOption
        int nbExam = myModel3.getSize();//fournit le nombre d'éléments de la jListExamen

        for (int i = 0; i < nbAct; i++) {
            for (int j = 0; j < listAct.length; j++) {
                if (myModel1.getElementAt(i).equals(listAct[j])) {
                    indicesActArray.add(i);
                }
            }
        }
        int[] indicesAct = new int[indicesActArray.size()];//indices des activités en array
        for (int i = 0; i < indicesAct.length; i++) {
            indicesAct[i] = indicesActArray.get(i);
        }
        jListActivite.setSelectedIndices(indicesAct);

        String opt = (String) model.getValueAt(ligne, 9);//chaîne d'options cliquées
        String[] listOpt = opt.split(separateur);
        List<Integer> indicesOptArray = new ArrayList<Integer>();//indices des options en arraylist

        for (int i = 0; i < nbOpt; i++) {
            for (int j = 0; j < listOpt.length; j++) {
                if (myModel2.getElementAt(i).equals(listOpt[j])) {
                    indicesOptArray.add(i);
                }
            }
        }
        int[] indicesOpt = new int[indicesOptArray.size()];//indices des specialisations en array
        for (int i = 0; i < indicesOpt.length; i++) {
            indicesOpt[i] = indicesOptArray.get(i);
        }
        jListOption.setSelectedIndices(indicesOpt);

        String exam = (String) model.getValueAt(ligne, 6);//chaîne d'options cliquées
        String[] listExam = exam.split(separateur);
        List<Integer> indicesExamArray = new ArrayList<Integer>();//indices des examens en arraylist

        for (int i = 0; i < nbExam; i++) {
            for (int j = 0; j < listExam.length; j++) {
                if (myModel3.getElementAt(i).equals(listExam[j])) {
                    indicesExamArray.add(i);
                }
            }
        }
        int[] indicesExam = new int[indicesExamArray.size()];//indices des examens en array
        for (int i = 0; i < indicesExam.length; i++) {
            indicesExam[i] = indicesExamArray.get(i);
        }
        jListExamen.setSelectedIndices(indicesExam);
    }//GEN-LAST:event_jTable1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueDemultiplicationSecretariat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueDemultiplicationSecretariat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueDemultiplicationSecretariat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueDemultiplicationSecretariat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueDemultiplicationSecretariat().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonCreer;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonRechercher;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JButton jButtonVisualiser;
    private javax.swing.JComboBox<String> jComboBoxArrondissement;
    private javax.swing.JComboBox<String> jComboBoxDepartement;
    private javax.swing.JComboBox<String> jComboBoxEtablissement;
    private javax.swing.JComboBox<String> jComboBoxNumsec;
    private javax.swing.JComboBox<String> jComboBoxRegion;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxSouscentre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelActivite;
    private javax.swing.JLabel jLabelArrondissement;
    private javax.swing.JLabel jLabelDepartement;
    private javax.swing.JLabel jLabelEtablissement;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelNumsec;
    private javax.swing.JLabel jLabelOption;
    private javax.swing.JLabel jLabelRegion;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelSouscentre;
    private javax.swing.JList<String> jListActivite;
    private javax.swing.JList<String> jListExamen;
    private javax.swing.JList<String> jListOption;
    private javax.swing.JPanel jPanelChoixSouscentre;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    //variables d'instance
    private IMetier metier = null;
    private List<Region> regions = null;
    private String[] regionsCombo = null;
    private List<Departement> departements = null;
    private List<Arrondissement> arrondissements = null;
    private List<Examen> examens = null;
    private Examen examenSelected = null;
    private List<Examen> examensSelected = new ArrayList<>();
    private String[] examensList = null;
    private String[] naturesList = null;
    private List<String> listeExamensSelected = null;
    private List<Souscentre> souscentres = null;
    private List<Etablissement> etablissements = null;
    private String[] souscentresCombo = null;
    private String[] departementsCombo = null;
    private String[] arrondissementsCombo = null;
    private String[] etablissementsCombo = null;
    private Departement departementSelected = null;
    private Arrondissement arrondissementSelected = null;
    private String nomRegionSelected = "";
    private String nomDepartementSelected = "";
    private String nomArrondissementSelected = "";
    private String nomSouscentreSelected = "";
    private Etablissement etablissementSelected = null;
    private String nomEtablissementSelected = "";
    private String numsecSelected = "";
    private int numsec = 0;
    private String[] numsecCombo = null;
    private List<Option> options = null;
    private List<Secretariat> secretariats = null;
    private List<Specialisation> specialisations = null;
    private List<Naturesecretariat> naturesec = null;
    private List<Nature> natures = null;
    private List<Specialisationsec> specsecs = null;
    private List<Activite> activites = null;
    private List<Activite> activitesSelected = new ArrayList<Activite>();
    private List<Option> optionsSelected = new ArrayList<Option>();
    private List<String> listeActivitesSelected = null;
    private List<String> listeOptionsSelected = null;
    private String[] activitesList = null;
    private String[] optionsList = null;
    private List<String> naturesEnstring = null;
    private List<Nbepreuveprof> tousNbepreuveprofs = null;
    private List<Session> sessions = null;
    private Session sessionSelected = null;
    private Souscentre souscentreSelected = null;
    private int anneeSelected = 0;
    private String anneeEnString = "";
    private String[] sessionsCombo = null;
    //naturesec, optionsec
    //Map<Activite, ArrayList<Integer>> numsecparActiviteMap = new HashMap<>();//contient pour chaque activité la liste des numéros de secrétariats la couvrant 
    //private ArrayList<Numsecparphase> numsecparphaseList = new ArrayList<>();//fournit la liste des numsecparphase constitué des tableaux de numéros de secrétariat par phase

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        examens = metier.findAllExamens();
        regions = metier.findAllRegions();
        options = metier.findAllOptions();
        activites = metier.findAllActivites();
        etablissements = metier.findAllEtablissements();

        //on remplit la combobox des niveaux
        numsecCombo = new String[]{"---", "1", "2", "3"};
        jComboBoxNumsec.setModel(new DefaultComboBoxModel(numsecCombo));

        //on remplit la combobox des régions
        regionsCombo = new String[regions.size() + 1];
        regionsCombo[0] = "---";
        int j = 1;
        for (Region region : regions) {
            regionsCombo[j++] = region.getNomreg();
        }
        jComboBoxRegion.setModel(new DefaultComboBoxModel(regionsCombo));

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int i = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[i++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        remplirDepartementCombobox();
        remplirArrondissementCombobox();
        remplirSouscentreCombobox();
        remplirEtablissementCombobox();
    }

    private void infoSaisies() {
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        numsecSelected = (String) jComboBoxNumsec.getSelectedItem();
        anneeEnString = (String) jComboBoxSession.getSelectedItem();
        nomEtablissementSelected = (String) jComboBoxEtablissement.getSelectedItem();
        listeActivitesSelected = jListActivite.getSelectedValuesList();
        listeOptionsSelected = jListOption.getSelectedValuesList();
        listeExamensSelected = jListExamen.getSelectedValuesList();
    }

    private void videFrame() {
        jComboBoxRegion.setSelectedIndex(0);
        jComboBoxDepartement.setSelectedIndex(0);
        jComboBoxArrondissement.setSelectedIndex(0);
        jComboBoxNumsec.setSelectedIndex(0);
        jComboBoxSouscentre.setSelectedIndex(0);
        jComboBoxEtablissement.setSelectedIndex(0);
        jComboBoxSession.setSelectedIndex(0);
        activitesList = new String[0];
        jListActivite.setListData(activitesList);
        optionsList = new String[0];
        jListOption.setListData(optionsList);
        optionsList = new String[0];
        jListOption.setListData(optionsList);
        examensList = new String[0];
        jListExamen.setListData(examensList);
        model.setRowCount(0);//vide la jTableOptions
    }

    private void remplirDepartementCombobox() {
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        departements = metier.findAllDepartementsD1Region(nomRegionSelected);
        //on remplit la combobox des départements
        departementsCombo = new String[departements.size() + 1];
        departementsCombo[0] = "---";
        int i = 1;
        for (Departement departement : departements) {
            departementsCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartement.setModel(new DefaultComboBoxModel(departementsCombo));
    }

    private void remplirArrondissementCombobox() {
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        arrondissements = metier.findAllArrondissementsD1Departement(nomDepartementSelected);
        //on remplit la combobox des arrondissements
        arrondissementsCombo = new String[arrondissements.size() + 1];
        arrondissementsCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissements) {
            arrondissementsCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissement.setModel(new DefaultComboBoxModel(arrondissementsCombo));
    }

    private void remplirSouscentreCombobox() {
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        souscentres = metier.findAllSouscentresD1Arrondissement(nomArrondissementSelected);
        //on remplit la combobox des sous-centres
        souscentresCombo = new String[souscentres.size() + 1];
        souscentresCombo[0] = "---";
        int i = 1;
        for (Souscentre souscentre : souscentres) {
            souscentresCombo[i++] = souscentre.getNomsouscent();
        }
        jComboBoxSouscentre.setModel(new DefaultComboBoxModel(souscentresCombo));
    }

    private void remplirEtablissementCombobox() {
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        etablissements = metier.findAllEtablissementsD1Arrondissement(nomArrondissementSelected);
        //on remplit la combobox des Etablissements
        etablissementsCombo = new String[etablissements.size() + 1];
        etablissementsCombo[0] = "---";
        int i = 1;
        for (Etablissement etablissement : etablissements) {
            etablissementsCombo[i++] = etablissement.getAbreviation();
        }
        jComboBoxEtablissement.setModel(new DefaultComboBoxModel(etablissementsCombo));
    }
    /*
    private void remplirActivitesJList() {
        anneeEnString = (String) jComboBoxSession.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        anneeSelected = Integer.parseInt(anneeEnString);       
        natures = metier.findAllPhasesD1SouscentreDans1Session(nomSouscentreSelected, anneeSelected);//sélection avec distinct
        naturesList = new String[natures.size()];
        int l = 0;
        for (Nature nat:natures) {
            naturesList[l++] = nat.getActivite().getNomact();
        }
        jListActivite.setListData(naturesList);
    }

    private void remplirOptionJList() {
        anneeEnString = (String) jComboBoxSession.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        anneeSelected = Integer.parseInt(anneeEnString);
        specialisations=metier.findAllSpecialisationsD1SouscentreEtSession(anneeSelected, nomSouscentreSelected);
        optionsList = new String[specialisations.size()];
        int i = 0;
        for (Specialisation spec : specialisations) {
            optionsList[i++] = spec.getOption().getSigle();
        }
        jListOption.setListData(optionsList);
    }

    private void remplirExamenJList() {
        anneeEnString = (String) jComboBoxSession.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        anneeSelected = Integer.parseInt(anneeEnString);       
        natures = metier.findAllPhasesD1SouscentreDans1Session(nomSouscentreSelected, anneeSelected);//sélection avec distinct
        List<Examen> exams = null;
        for(Nature nat:natures){
            if(!exams.contains(nat.getExamen())) exams.add(nat.getExamen());
        }
        examensList = new String[exams.size()];
        int l = 0;
        for (Examen exam : exams) {
            examensList[l++] = exam.getSigle();
        }
        jListExamen.setListData(examensList);
    }
     */
}
