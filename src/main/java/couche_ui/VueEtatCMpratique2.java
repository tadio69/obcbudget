package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Activite;
import couche_jpa.Arrondissement;
import couche_jpa.Caisse;
import couche_jpa.Centrebilletage;
import couche_jpa.Departement;
import couche_jpa.Eltcmpratique2;
import couche_jpa.Eltcmpratique2sansnoms;
import couche_jpa.Examen;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Intervenant;
import couche_jpa.Nature;
import couche_jpa.Personnel;
import couche_jpa.Qualite;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueEtatCMpratique2 extends javax.swing.JFrame {

    public VueEtatCMpratique2() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButtonFermer = new javax.swing.JButton();
        jPanelExaminateurs = new javax.swing.JPanel();
        jComboBoxDepartementListe = new javax.swing.JComboBox<>();
        jLabelDepartementListe = new javax.swing.JLabel();
        jLabelResponsable = new javax.swing.JLabel();
        jComboBoxArrondissementListe = new javax.swing.JComboBox<>();
        jComboBoxNomsEtPrenoms = new javax.swing.JComboBox<>();
        jLabelArrondissementListe = new javax.swing.JLabel();
        jComboBoxRegionListe = new javax.swing.JComboBox<>();
        jLabelRegionListe = new javax.swing.JLabel();
        jButtonSupprimerPersonnel = new javax.swing.JButton();
        jButtonAnnulerPersonnel = new javax.swing.JButton();
        jButtonCreerPersonnel = new javax.swing.JButton();
        jButtonListerPersonnels = new javax.swing.JButton();
        jPanelValeur = new javax.swing.JPanel();
        jLabeValeur = new javax.swing.JLabel();
        jComboBoxDuree = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jPanelChoixExamen = new javax.swing.JPanel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixExamen = new javax.swing.JButton();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelExamen = new javax.swing.JLabel();
        jPanelGestionEtat = new javax.swing.JPanel();
        jLabelImputation = new javax.swing.JLabel();
        jComboBoxImputation = new javax.swing.JComboBox<>();
        jButtonCreerEtats = new javax.swing.JButton();
        jButtonMettreAjourEtats = new javax.swing.JButton();
        jButtonVisualiserEtats = new javax.swing.JButton();
        jButtonSupprimerEtats = new javax.swing.JButton();
        jPanelChoixSouscentre1 = new javax.swing.JPanel();
        jLabelSouscentre = new javax.swing.JLabel();
        jComboBoxSouscentre = new javax.swing.JComboBox<>();
        jComboBoxRegionSouscentre = new javax.swing.JComboBox<>();
        jLabelRegionSouscentre = new javax.swing.JLabel();
        jButtonAnnulerChoixCentreTemoin = new javax.swing.JButton();
        jLabelDepartementSouscentre = new javax.swing.JLabel();
        jComboBoxDepartementSouscentre = new javax.swing.JComboBox<>();
        jLabelArrondissementSouscentre = new javax.swing.JLabel();
        jComboBoxArrondissementSouscentre = new javax.swing.JComboBox<>();
        jCheckBoxSansNoms = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT DES CM DE PRATIQUE 2");

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jPanelExaminateurs.setBackground(new java.awt.Color(255, 204, 0));
        jPanelExaminateurs.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer la liste des CM et la durée de pratique 2", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jComboBoxDepartementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartementListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementListeActionPerformed(evt);
            }
        });

        jLabelDepartementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartementListe.setText("Département :");

        jLabelResponsable.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelResponsable.setText("Noms et prénoms :");

        jComboBoxArrondissementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissementListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementListeActionPerformed(evt);
            }
        });

        jComboBoxNomsEtPrenoms.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxNomsEtPrenoms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNomsEtPrenomsActionPerformed(evt);
            }
        });

        jLabelArrondissementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissementListe.setText("Arrondissement :");

        jComboBoxRegionListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegionListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionListeActionPerformed(evt);
            }
        });

        jLabelRegionListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegionListe.setText("Région :");

        jButtonSupprimerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerPersonnel.setText("Supprimer");
        jButtonSupprimerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerPersonnelActionPerformed(evt);
            }
        });

        jButtonAnnulerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerPersonnel.setText("Annuler");
        jButtonAnnulerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerPersonnelActionPerformed(evt);
            }
        });

        jButtonCreerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerPersonnel.setText("Créer");
        jButtonCreerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerPersonnelActionPerformed(evt);
            }
        });

        jButtonListerPersonnels.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonListerPersonnels.setText("Lister");
        jButtonListerPersonnels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerPersonnelsActionPerformed(evt);
            }
        });

        jPanelValeur.setBackground(new java.awt.Color(204, 255, 102));
        jPanelValeur.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Durée effective de pratique", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(51, 0, 255))); // NOI18N
        jPanelValeur.setEnabled(false);

        jLabeValeur.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabeValeur.setText("Durée :");

        jComboBoxDuree.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDuree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDureeActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Jours");

        javax.swing.GroupLayout jPanelValeurLayout = new javax.swing.GroupLayout(jPanelValeur);
        jPanelValeur.setLayout(jPanelValeurLayout);
        jPanelValeurLayout.setHorizontalGroup(
            jPanelValeurLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelValeurLayout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addComponent(jLabeValeur)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxDuree, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(33, 33, 33))
        );
        jPanelValeurLayout.setVerticalGroup(
            jPanelValeurLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelValeurLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanelValeurLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelValeurLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabeValeur, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxDuree, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelExaminateursLayout = new javax.swing.GroupLayout(jPanelExaminateurs);
        jPanelExaminateurs.setLayout(jPanelExaminateursLayout);
        jPanelExaminateursLayout.setHorizontalGroup(
            jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelDepartementListe)
                    .addComponent(jLabelRegionListe))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBoxRegionListe, 0, 238, Short.MAX_VALUE)
                    .addComponent(jComboBoxDepartementListe, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                        .addComponent(jButtonCreerPersonnel)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSupprimerPersonnel)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnulerPersonnel)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonListerPersonnels)
                        .addGap(95, 95, 95))
                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelArrondissementListe)
                            .addComponent(jLabelResponsable))
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBoxNomsEtPrenoms, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jPanelValeur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelExaminateursLayout.setVerticalGroup(
            jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelExaminateursLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelValeur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jComboBoxRegionListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBoxArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabelRegionListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelDepartementListe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jComboBoxDepartementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelResponsable, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBoxNomsEtPrenoms, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButtonAnnulerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonSupprimerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonListerPersonnels, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButtonCreerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(1, 1, 1))
        );

        jPanelChoixExamen.setBackground(new java.awt.Color(102, 255, 153));
        jPanelChoixExamen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un groupe d'examens et une session", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixExamen.setText("Annuler");
        jButtonAnnulerChoixExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixExamenActionPerformed(evt);
            }
        });

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        javax.swing.GroupLayout jPanelChoixExamenLayout = new javax.swing.GroupLayout(jPanelChoixExamen);
        jPanelChoixExamen.setLayout(jPanelChoixExamenLayout);
        jPanelChoixExamenLayout.setHorizontalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(0, 10, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabelSession)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixExamenLayout.setVerticalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        jPanelGestionEtat.setBackground(new java.awt.Color(0, 255, 255));
        jPanelGestionEtat.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer l'état", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 102, 255))); // NOI18N

        jLabelImputation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelImputation.setText("Imputation budgetaire :");

        jComboBoxImputation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxImputation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxImputation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxImputationActionPerformed(evt);
            }
        });

        jButtonCreerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEtats.setText("Créer");
        jButtonCreerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEtatsActionPerformed(evt);
            }
        });

        jButtonMettreAjourEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjourEtats.setText("Mettre à jour");
        jButtonMettreAjourEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourEtatsActionPerformed(evt);
            }
        });

        jButtonVisualiserEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserEtats.setText("Visualiser");
        jButtonVisualiserEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserEtatsActionPerformed(evt);
            }
        });

        jButtonSupprimerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEtats.setText("Supprimer");
        jButtonSupprimerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEtatsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelGestionEtatLayout = new javax.swing.GroupLayout(jPanelGestionEtat);
        jPanelGestionEtat.setLayout(jPanelGestionEtatLayout);
        jPanelGestionEtatLayout.setHorizontalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabelImputation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxImputation, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jButtonCreerEtats)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonMettreAjourEtats)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonVisualiserEtats)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSupprimerEtats)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanelGestionEtatLayout.setVerticalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelImputation, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxImputation, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonMettreAjourEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCreerEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonSupprimerEtats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVisualiserEtats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelChoixSouscentre1.setBackground(new java.awt.Color(204, 255, 0));
        jPanelChoixSouscentre1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un sous-centre", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jLabelSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSouscentre.setText("Sous-centre pratique :");

        jComboBoxSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSouscentreActionPerformed(evt);
            }
        });

        jComboBoxRegionSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegionSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionSouscentreActionPerformed(evt);
            }
        });

        jLabelRegionSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegionSouscentre.setText("Région :");

        jButtonAnnulerChoixCentreTemoin.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixCentreTemoin.setText("Annuler");
        jButtonAnnulerChoixCentreTemoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixCentreTemoinActionPerformed(evt);
            }
        });

        jLabelDepartementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartementSouscentre.setText("Département :");

        jComboBoxDepartementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartementSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementSouscentreActionPerformed(evt);
            }
        });

        jLabelArrondissementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissementSouscentre.setText("Arrondissement :");

        jComboBoxArrondissementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissementSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementSouscentreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixSouscentre1Layout = new javax.swing.GroupLayout(jPanelChoixSouscentre1);
        jPanelChoixSouscentre1.setLayout(jPanelChoixSouscentre1Layout);
        jPanelChoixSouscentre1Layout.setHorizontalGroup(
            jPanelChoixSouscentre1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentre1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanelChoixSouscentre1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelArrondissementSouscentre)
                    .addComponent(jLabelDepartementSouscentre)
                    .addComponent(jLabelSouscentre)
                    .addComponent(jLabelRegionSouscentre))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixSouscentre1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixSouscentre1Layout.createSequentialGroup()
                        .addGroup(jPanelChoixSouscentre1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelChoixSouscentre1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanelChoixSouscentre1Layout.createSequentialGroup()
                                    .addComponent(jComboBoxRegionSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(166, 166, 166))
                                .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jComboBoxDepartementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(20, Short.MAX_VALUE))
                    .addGroup(jPanelChoixSouscentre1Layout.createSequentialGroup()
                        .addComponent(jComboBoxArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonAnnulerChoixCentreTemoin, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))))
        );
        jPanelChoixSouscentre1Layout.setVerticalGroup(
            jPanelChoixSouscentre1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentre1Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanelChoixSouscentre1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxRegionSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRegionSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentre1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDepartementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxDepartementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentre1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixCentreTemoin, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentre1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jCheckBoxSansNoms.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jCheckBoxSansNoms.setText("Sans noms");
        jCheckBoxSansNoms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSansNomsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanelChoixSouscentre1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(351, 351, 351)
                        .addComponent(jLabel1)
                        .addGap(71, 71, 71)
                        .addComponent(jCheckBoxSansNoms))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(381, 381, 381)
                        .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanelExaminateurs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jCheckBoxSansNoms)
                        .addGap(16, 16, 16)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelChoixSouscentre1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelExaminateurs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVisualiserEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserEtatsActionPerformed
        infoSaisies();
        if (!jCheckBoxSansNoms.isSelected()) {
            Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
            List<Souscentre> souscentresRattachesList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session
            Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
            ArrayList<String> typesBruts = new ArrayList<>();
            ArrayList<String> typesAconsiderer = new ArrayList<>();
            ArrayList<String> niveauxAconsiderer = new ArrayList<>();
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE CM PRATIQUE 2 ET CONVOYAGE IV (ESTI)");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);

                boolean continuer = false;
                for (Caisse c : caisses) {
                    if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                        continuer = true;
                        break;
                    }
                }
                if (!continuer) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états de prise en charge des CM pratique 2 n'ont pas encore été créés pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    for (Examen e : examensSelected) {
                        List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                        for (Nature n : lesNats) {
                            Souscentre unSouscentre = n.getSouscentre();
                            if (!souscentresRattachesList.contains(unSouscentre)) {
                                souscentresRattachesList.add(unSouscentre);
                            }
                        }
                        for (int j = 0; j < souscentresRattachesList.size(); j++) {
                            ArrayList<Character> phasesList = new ArrayList<>();
                            Souscentre s = souscentresRattachesList.get(j);
                            for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                    if (!phasesList.contains(n.getActivite().getInitiale())) {
                                        phasesList.add(n.getActivite().getInitiale());
                                    }
                                    //pas de break ici car on doit parcourir tous lesNats
                                }
                            }
                            if (!souscentrePhasesMap.containsKey(s)) {
                                souscentrePhasesMap.put(s, phasesList);
                            } else {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                for (int k = 0; k < phasesList.size(); k++) {
                                    if (!phasesList1.contains(phasesList.get(k))) {
                                        phasesList1.add(phasesList.get(k));
                                    }
                                }
                                Collections.sort(phasesList1);
                                souscentrePhasesMap.put(s, phasesList1);
                            }
                        }
                    }

                    //recherche des types des examens à utiliser
                    for (Examen examen : examensSelected) {
                        System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                        if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                            typesBruts.add("ESG");
                        }
                        if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                            typesBruts.add("ESTP");
                        }
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 2) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    //recherche des niveaux des examens à utiliser
                    if (!niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add(niveauSelected);
                        niveauxAconsiderer.add("TOUT");
                    }
                    if (niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add("PROB");
                        niveauxAconsiderer.add("BACC");
                        niveauxAconsiderer.add("TOUT");
                    }
                    //recherche des centres de billetage
                    for (String niveau : niveauxAconsiderer) {
                        for (String type : typesAconsiderer) {
                            List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                            for (Centrebilletage centrebilletage : desCentrebilletages) {
                                ArrayList<Souscentre> souscentresList = new ArrayList<>();
                                if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                    List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                    for (Secteurcouv sect : secteurs) {
                                        if (!souscentresList.contains(sect.getSouscentre())) {
                                            souscentresList.add(sect.getSouscentre());
                                        }
                                    }
                                    centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                                }
                            }
                        }
                    }

                    intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION");
                    desEltcmpratique2 = metier.findAllEltcmpratique2D1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!intervenants.isEmpty()) {
                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            for (Region region : regions) {
                                for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                    if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                        int num = 1;
                                        int totalMontant = 0;
                                        ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                        for (int i = 0; i < souscentresList.size(); i++) {
                                            Souscentre souscentre = souscentresList.get(i);
                                            for (Intervenant cm : intervenants) {
                                                Eltcmpratique2 sonEltcmpratique2 = null;
                                                if (cm.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                                    for (Eltcmpratique2 elt : desEltcmpratique2) {
                                                        if (Objects.equals(elt.getIntervenant().getIdinterv(), cm.getIdinterv())) {
                                                            sonEltcmpratique2 = elt;
                                                            break;
                                                        }
                                                    }

                                                    determinerCout(souscentrePhasesMap, souscentre, sonEltcmpratique2);

                                                    Map<String, Object> row = new HashMap<>();
                                                    row.put("examen", groupedexamensEnstring);
                                                    row.put("session", anneeSelected);
                                                    row.put("reference", "");
                                                    row.put("region", region.getNomreg());
                                                    row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                    row.put("num", num++);
                                                    row.put("souscentre", souscentre.getNomsouscent());
                                                    row.put("cm", cm.getPersonnel().getNompers() + " " + cm.getPersonnel().getPrenom());
                                                    row.put("provenance", cm.getPersonnel().getStructure());
                                                    row.put("baspage", "OBC/AR/"+centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                    row.put("total", total);
                                                    totalMontant += total;
                                                    row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                    datasource.add(row);
                                                    break;
                                                }
                                            }

                                        }
                                    }
                                }
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatCMpratique2Report.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun CM pratique 2 trouvé dans la base de données !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
            }
        } else {//jCheckbox est cliquée
            Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
            List<Souscentre> souscentresRattachesList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session
            Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
            ArrayList<String> typesBruts = new ArrayList<>();
            ArrayList<String> typesAconsiderer = new ArrayList<>();
            ArrayList<String> niveauxAconsiderer = new ArrayList<>();
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE CM PRATIQUE 2 ET CONVOYAGE IV (ESTI)");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);

                boolean continuer = false;
                for (Caisse c : caisses) {
                    if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                        continuer = true;
                        break;
                    }
                }
                if (!continuer) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états de prise en charge des CM pratique 2 n'ont pas encore été créés pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    for (Examen e : examensSelected) {
                        List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                        for (Nature n : lesNats) {
                            Souscentre unSouscentre = n.getSouscentre();
                            if (!souscentresRattachesList.contains(unSouscentre)) {
                                souscentresRattachesList.add(unSouscentre);
                            }
                        }
                        for (int j = 0; j < souscentresRattachesList.size(); j++) {
                            ArrayList<Character> phasesList = new ArrayList<>();
                            Souscentre s = souscentresRattachesList.get(j);
                            for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                    if (!phasesList.contains(n.getActivite().getInitiale())) {
                                        phasesList.add(n.getActivite().getInitiale());
                                    }
                                    //pas de break ici car on doit parcourir tous lesNats
                                }
                            }
                            if (!souscentrePhasesMap.containsKey(s)) {
                                souscentrePhasesMap.put(s, phasesList);
                            } else {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                for (int k = 0; k < phasesList.size(); k++) {
                                    if (!phasesList1.contains(phasesList.get(k))) {
                                        phasesList1.add(phasesList.get(k));
                                    }
                                }
                                Collections.sort(phasesList1);
                                souscentrePhasesMap.put(s, phasesList1);
                            }
                        }
                    }

                    //recherche des types des examens à utiliser
                    for (Examen examen : examensSelected) {
                        System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                        if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                            typesBruts.add("ESG");
                        }
                        if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                            typesBruts.add("ESTP");
                        }
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 2) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    //recherche des niveaux des examens à utiliser
                    if (!niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add(niveauSelected);
                        niveauxAconsiderer.add("TOUT");
                    }
                    if (niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add("PROB");
                        niveauxAconsiderer.add("BACC");
                        niveauxAconsiderer.add("TOUT");
                    }
                    //recherche des centres de billetage
                    for (String niveau : niveauxAconsiderer) {
                        for (String type : typesAconsiderer) {
                            List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                            for (Centrebilletage centrebilletage : desCentrebilletages) {
                                ArrayList<Souscentre> souscentresList = new ArrayList<>();
                                if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                    List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                    for (Secteurcouv sect : secteurs) {
                                        if (!souscentresList.contains(sect.getSouscentre())) {
                                            souscentresList.add(sect.getSouscentre());
                                        }
                                    }
                                    centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                                }
                            }
                        }
                    }
                    desEltcmpratique2sansnoms = metier.findAllEltcmpratique2sansnomsD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!desEltcmpratique2sansnoms.isEmpty()) {
                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            for (Region region : regions) {
                                for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                    if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                        int num = 1;
                                        int totalMontant = 0;
                                        ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                        for (int i = 0; i < souscentresList.size(); i++) {
                                            Souscentre souscentre = souscentresList.get(i);
                                            for (Eltcmpratique2sansnoms eltcmpratique2sansnoms : desEltcmpratique2sansnoms) {
                                                if (eltcmpratique2sansnoms.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                                    determinerCoutSansnoms(souscentrePhasesMap, eltcmpratique2sansnoms);

                                                    Map<String, Object> row = new HashMap<>();
                                                    row.put("examen", groupedexamensEnstring);
                                                    row.put("session", anneeSelected);
                                                    row.put("reference", "");
                                                    row.put("region", region.getNomreg());
                                                    row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                    row.put("num", num++);
                                                    row.put("souscentre", souscentre.getNomsouscent());
                                                    row.put("baspage", "OBC/AR/"+centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                    row.put("total", total);
                                                    totalMontant += total;
                                                    row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                    datasource.add(row);
                                                    break;
                                                }
                                            }

                                        }
                                    }
                                }
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatCMpratique2sansnomsReport.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucune durée de pratique 2 trouvée dans la base de données !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
            }
        }
    }//GEN-LAST:event_jButtonVisualiserEtatsActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jComboBoxImputationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxImputationActionPerformed
        //jTextField1.setText();
    }//GEN-LAST:event_jComboBoxImputationActionPerformed

    private void jButtonCreerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEtatsActionPerformed
        infoSaisies();
        if (!jCheckBoxSansNoms.isSelected()) {
            Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
            List<Souscentre> souscentresRattachesList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE CM PRATIQUE 2 ET CONVOYAGE IV (ESTI)");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (!caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états de prise en charge des CM pratique 2 existent déjà pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }                   

                    for (Examen e : examensSelected) {
                        List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                        for (Nature n : lesNats) {
                            Souscentre unSouscentre = n.getSouscentre();
                            if (!souscentresRattachesList.contains(unSouscentre)) {
                                souscentresRattachesList.add(unSouscentre);
                            }
                        }
                        for (int j = 0; j < souscentresRattachesList.size(); j++) {
                            ArrayList<Character> phasesList = new ArrayList<>();
                            Souscentre s = souscentresRattachesList.get(j);
                            for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                    if (!phasesList.contains(n.getActivite().getInitiale())) {
                                        phasesList.add(n.getActivite().getInitiale());
                                    }
                                    //pas de break ici car on doit parcourir tous lesNats
                                }
                            }
                            if (!souscentrePhasesMap.containsKey(s)) {
                                souscentrePhasesMap.put(s, phasesList);
                            } else {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                for (int k = 0; k < phasesList.size(); k++) {
                                    if (!phasesList1.contains(phasesList.get(k))) {
                                        phasesList1.add(phasesList.get(k));
                                    }
                                }
                                Collections.sort(phasesList1);
                                souscentrePhasesMap.put(s, phasesList1);
                            }
                        }
                    }

                    intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION");
                    desEltcmpratique2 = metier.findAllEltcmpratique2D1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    boolean testSicreer = false;
                    if (!intervenants.isEmpty()) {
                        try {
                            for (Intervenant intervenant : intervenants) {
                                Eltcmpratique2 sonEltcmpratique2 = null;
                                for (Eltcmpratique2 elt : desEltcmpratique2) {
                                    if (Objects.equals(elt.getIntervenant().getIdinterv(), intervenant.getIdinterv())) {
                                        sonEltcmpratique2 = elt;
                                        break;
                                    }
                                }
                                determinerCout(souscentrePhasesMap, intervenant.getSouscentre(), sonEltcmpratique2);
                                metier.creerCaisse(new Caisse(total, 0, 0, 0, groupe, rubetat, sessionSelected, intervenant.getSouscentre(), false));
                                testSicreer = true;
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testSicreer) {
                            JOptionPane.showMessageDialog(this, "Etats de prise en charge des CM pratique 2 créés avec succès pour ce groupe d'examens !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun CM pratique 2 trouvé dans la base de données !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
            }
        } else {//jCheckbox est cliquée
            Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
            List<Souscentre> souscentresRattachesList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE CM PRATIQUE 2 ET CONVOYAGE IV (ESTI)");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (!caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états de prise en charge des CM pratique 2 existent déjà pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }                    

                    for (Examen e : examensSelected) {
                        List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                        for (Nature n : lesNats) {
                            Souscentre unSouscentre = n.getSouscentre();
                            if (!souscentresRattachesList.contains(unSouscentre)) {
                                souscentresRattachesList.add(unSouscentre);
                            }
                        }
                        for (int j = 0; j < souscentresRattachesList.size(); j++) {
                            ArrayList<Character> phasesList = new ArrayList<>();
                            Souscentre s = souscentresRattachesList.get(j);
                            for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                    if (!phasesList.contains(n.getActivite().getInitiale())) {
                                        phasesList.add(n.getActivite().getInitiale());
                                    }
                                    //pas de break ici car on doit parcourir tous lesNats
                                }
                            }
                            if (!souscentrePhasesMap.containsKey(s)) {
                                souscentrePhasesMap.put(s, phasesList);
                            } else {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                for (int k = 0; k < phasesList.size(); k++) {
                                    if (!phasesList1.contains(phasesList.get(k))) {
                                        phasesList1.add(phasesList.get(k));
                                    }
                                }
                                Collections.sort(phasesList1);
                                souscentrePhasesMap.put(s, phasesList1);
                            }
                        }
                    }
                    desEltcmpratique2sansnoms = metier.findAllEltcmpratique2sansnomsD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    boolean testSicreer = false;
                    if (!desEltcmpratique2sansnoms.isEmpty()) {
                        try {
                            for (Eltcmpratique2sansnoms eltcmpratique2sansnoms : desEltcmpratique2sansnoms) {
                                determinerCoutSansnoms(souscentrePhasesMap, eltcmpratique2sansnoms);
                                metier.creerCaisse(new Caisse(total, 0, 0, 0, groupe, rubetat, sessionSelected, eltcmpratique2sansnoms.getSouscentre(), false));
                                testSicreer = true;
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testSicreer) {
                            JOptionPane.showMessageDialog(this, "Etats de prise en charge des CM pratique 2 (sans noms) créés avec succès pour ce groupe d'examens !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucune durée de pratique 2 trouvée dans la base de données !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
            }
        }
    }//GEN-LAST:event_jButtonCreerEtatsActionPerformed

    private void jButtonMettreAjourEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourEtatsActionPerformed
        infoSaisies();
        if (!jCheckBoxSansNoms.isSelected()) {
            Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
            List<Souscentre> souscentresRattachesList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de prise en charge des CM pratique 2 pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE CM PRATIQUE 2 ET CONVOYAGE IV (ESTI)");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état de prise en charge des CM pratique 2 n'existe pour ce groupe d'examens !");
                    } else {
                        String separateur = ", ";
                        examensList = groupedexamensEnstring.split(separateur);
                        for (int i = 0; i < examensList.length; i++) {
                            for (Examen e : examens) {
                                if (e.getSigle().equals(examensList[i])) {
                                    examensSelected.add(e);
                                    break;
                                }
                            }
                        }
                        //on conserve quelques info de ces anciennes caisses
                        Groupe groupe = caisses.get(0).getGroupe();
                        sessionSelected = caisses.get(0).getSession();
                        //on supprime toutes les anciennes caisses du groupe d'examens ainsi que les intervsec
                        for (Caisse c : caisses) {
                            metier.supprimerCaisse(c);
                        }

                        for (Examen e : examensSelected) {
                            List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                            for (Nature n : lesNats) {
                                Souscentre unSouscentre = n.getSouscentre();
                                if (!souscentresRattachesList.contains(unSouscentre)) {
                                    souscentresRattachesList.add(unSouscentre);
                                }
                            }
                            for (int j = 0; j < souscentresRattachesList.size(); j++) {
                                ArrayList<Character> phasesList = new ArrayList<>();
                                Souscentre s = souscentresRattachesList.get(j);
                                for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                    if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                        if (!phasesList.contains(n.getActivite().getInitiale())) {
                                            phasesList.add(n.getActivite().getInitiale());
                                        }
                                        //pas de break ici car on doit parcourir tous lesNats
                                    }
                                }
                                if (!souscentrePhasesMap.containsKey(s)) {
                                    souscentrePhasesMap.put(s, phasesList);
                                } else {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                    ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                    for (int k = 0; k < phasesList.size(); k++) {
                                        if (!phasesList1.contains(phasesList.get(k))) {
                                            phasesList1.add(phasesList.get(k));
                                        }
                                    }
                                    Collections.sort(phasesList1);
                                    souscentrePhasesMap.put(s, phasesList1);
                                }
                            }
                        }

                        intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION");
                        desEltcmpratique2 = metier.findAllEltcmpratique2D1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                        boolean testSimodifier = false;
                        if (!intervenants.isEmpty()) {
                            try {
                                for (Intervenant intervenant : intervenants) {
                                    Eltcmpratique2 sonEltcmpratique2 = null;
                                    for (Eltcmpratique2 elt : desEltcmpratique2) {
                                        if (Objects.equals(elt.getIntervenant().getIdinterv(), intervenant.getIdinterv())) {
                                            sonEltcmpratique2 = elt;
                                            break;
                                        }
                                    }
                                    determinerCout(souscentrePhasesMap, intervenant.getSouscentre(), sonEltcmpratique2);
                                    metier.creerCaisse(new Caisse(total, 0, 0, 0, groupe, rubetat, sessionSelected, intervenant.getSouscentre(), false));
                                    testSimodifier = true;
                                }
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                            if (testSimodifier) {
                                JOptionPane.showMessageDialog(this, "Etats de prise en charge des CM pratique 2 mis à jour avec succès pour ce groupe d'examens !");
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Aucun CM pratique 2 trouvé dans la base de données !");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
                }
            }
        } else {//jCheckbox est cliquée
            Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
            List<Souscentre> souscentresRattachesList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de prise en charge des CM pratique 2 pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE CM PRATIQUE 2 ET CONVOYAGE IV (ESTI)");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état de prise en charge des CM pratique 2 n'existe pour ce groupe d'examens !");
                    } else {
                        String separateur = ", ";
                        examensList = groupedexamensEnstring.split(separateur);
                        for (int i = 0; i < examensList.length; i++) {
                            for (Examen e : examens) {
                                if (e.getSigle().equals(examensList[i])) {
                                    examensSelected.add(e);
                                    break;
                                }
                            }
                        }
                        //on conserve quelques info de ces anciennes caisses
                        Groupe groupe = caisses.get(0).getGroupe();
                        sessionSelected = caisses.get(0).getSession();
                        //on supprime toutes les anciennes caisses du groupe d'examens ainsi que les intervsec
                        for (Caisse c : caisses) {
                            metier.supprimerCaisse(c);
                        }

                        for (Examen e : examensSelected) {
                            List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                            for (Nature n : lesNats) {
                                Souscentre unSouscentre = n.getSouscentre();
                                if (!souscentresRattachesList.contains(unSouscentre)) {
                                    souscentresRattachesList.add(unSouscentre);
                                }
                            }
                            for (int j = 0; j < souscentresRattachesList.size(); j++) {
                                ArrayList<Character> phasesList = new ArrayList<>();
                                Souscentre s = souscentresRattachesList.get(j);
                                for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                    if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                        if (!phasesList.contains(n.getActivite().getInitiale())) {
                                            phasesList.add(n.getActivite().getInitiale());
                                        }
                                        //pas de break ici car on doit parcourir tous lesNats
                                    }
                                }
                                if (!souscentrePhasesMap.containsKey(s)) {
                                    souscentrePhasesMap.put(s, phasesList);
                                } else {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                    ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                    for (int k = 0; k < phasesList.size(); k++) {
                                        if (!phasesList1.contains(phasesList.get(k))) {
                                            phasesList1.add(phasesList.get(k));
                                        }
                                    }
                                    Collections.sort(phasesList1);
                                    souscentrePhasesMap.put(s, phasesList1);
                                }
                            }
                        }

                        desEltcmpratique2sansnoms = metier.findAllEltcmpratique2sansnomsD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                        boolean testSicreer = false;
                        if (!desEltcmpratique2sansnoms.isEmpty()) {
                            try {
                                for (Eltcmpratique2sansnoms eltcmpratique2sansnoms : desEltcmpratique2sansnoms) {
                                    determinerCoutSansnoms(souscentrePhasesMap, eltcmpratique2sansnoms);
                                    metier.creerCaisse(new Caisse(total, 0, 0, 0, groupe, rubetat, sessionSelected, eltcmpratique2sansnoms.getSouscentre(), false));
                                    testSicreer = true;
                                }
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                            if (testSicreer) {
                                JOptionPane.showMessageDialog(this, "Etats de prise en charge des CM pratique 2 (sans noms) mis à jour avec succès pour ce groupe d'examens !");
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Aucune durée de pratique 2 trouvée dans la base de données !");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
                }
            }
        }
    }//GEN-LAST:event_jButtonMettreAjourEtatsActionPerformed

    private void jButtonSupprimerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEtatsActionPerformed
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de prise en charge des CM pratique 2  pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE CM PRATIQUE 2 ET CONVOYAGE IV (ESTI)");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de prise en charge des CM pratique 2 n'existe pour ce groupe d'examens !");
                } else {
                    try {
                        for (Caisse caisse : caisses) {
                            metier.supprimerCaisse(caisse);
                        }
                        JOptionPane.showMessageDialog(this, "Etats de prise en charge des CM pratique 2 supprimés avec succès pour ce groupe d'examens !");
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerEtatsActionPerformed

    private void jComboBoxDepartementListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementListeActionPerformed
        remplirArrondissementListeCombobox();
        remplirPersonnelsDuDepartementCombobox();
    }//GEN-LAST:event_jComboBoxDepartementListeActionPerformed

    private void jComboBoxArrondissementListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementListeActionPerformed
        remplirPersonnelsDelArrondissementCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementListeActionPerformed

    private void jComboBoxNomsEtPrenomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNomsEtPrenomsActionPerformed
        nomsEtPrenomsSelected = (String) jComboBoxNomsEtPrenoms.getSelectedItem();
        if (!nomsEtPrenomsSelected.equals("---")) {
            for (Personnel p : personnels) {
                if ((p.getNompers() + " " + p.getPrenom()).equals(nomsEtPrenomsSelected)) {
                    personnelSelected = p;
                    break;
                }
            }
        }
    }//GEN-LAST:event_jComboBoxNomsEtPrenomsActionPerformed

    private void jComboBoxRegionListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionListeActionPerformed
        remplirDepartementListeCombobox();
    }//GEN-LAST:event_jComboBoxRegionListeActionPerformed

    private void jButtonSupprimerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerPersonnelActionPerformed
        infoSaisies();
        if (!jCheckBoxSansNoms.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nomsEtPrenomsSelected.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre et un personnel !");
            } else {
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer ce chargé de mission et la durée de pratique 2 du sous-centre [" + nomSouscentreSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    anneeSelected = Integer.parseInt(anneeString);
                    try {
                        Intervenant cm = metier.findIntervenantByNomEtPrenomD1GroupeDexamensD1SessionD1SouscentreD1ActiviteEt1Qualite(personnelSelected.getNompers(), personnelSelected.getPrenom(), anneeSelected, nomSouscentreSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION");
                        metier.supprimerIntervenant(cm);// cette suppression supprimera aussi eltacmtemoin associé
                        JOptionPane.showMessageDialog(this, "Chargé de mission et durée de pratique supprimés avec succès !");
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de supprimer ce chargé de mission et la durée de pratique du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                    }
                }
            }
        } else {//jCheckbox est cliquée
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session et un sous-centre !");
            } else {
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer cette durée de pratique 2 du sous-centre [" + nomSouscentreSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    anneeSelected = Integer.parseInt(anneeString);
                    try {
                        Eltcmpratique2sansnoms eltsansnoms = metier.findEltcmpratique2sansnomsD1GroupeDexamensD1SessionD1Souscentre(anneeSelected, nomSouscentreSelected, niveauSelected, typeSelected);
                        metier.supprimerEltcmpratique2sansnoms(eltsansnoms);
                        JOptionPane.showMessageDialog(this, "Durée de pratique supprimée avec succès !");
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de supprimer la durée de pratique du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerPersonnelActionPerformed

    private void jButtonAnnulerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerPersonnelActionPerformed
        jComboBoxRegionListe.setSelectedIndex(0);
        jComboBoxDepartementListe.setSelectedIndex(0);
        jComboBoxArrondissementListe.setSelectedIndex(0);
        jComboBoxNomsEtPrenoms.setSelectedIndex(0);
        jComboBoxDuree.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerPersonnelActionPerformed

    private void jButtonCreerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerPersonnelActionPerformed
        infoSaisies();
        if (!jCheckBoxSansNoms.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nomsEtPrenomsSelected.equals("---") || dureeString.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre, un personnel et une durée !");
            } else {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                duree = Integer.parseInt(dureeString);
                Intervenant intervenantCreated = null;
                boolean testSiCreerIntervenant = false;
                boolean testSiCreerEltcmpratique2 = false;
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                for (Souscentre souscentre : souscentres) {
                    if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                        souscentreSelected = souscentre;
                        break;
                    }
                }

                try {
                    //personnelSelected est déterminé au moment du clic sur la jcombox
                    Activite activite = metier.findActiviteByNom(phase);
                    Qualite qualite = metier.findQualiteByTitre("CHARGÉ DE MISSION");
                    boolean resident = false;
                    intervenantCreated = new Intervenant(groupe, sessionSelected, personnelSelected, souscentreSelected, activite, qualite, resident);
                    metier.creerIntervenant(intervenantCreated);
                    testSiCreerIntervenant = true;
                } catch (ObcbudgetException ex) {
                    testSiCreerIntervenant = false;
                }
                if (testSiCreerIntervenant) {
                    try {
                        metier.creerEltcmpratique2(new Eltcmpratique2(duree, intervenantCreated));
                        testSiCreerEltcmpratique2 = true;
                    } catch (ObcbudgetException ex) {
                        testSiCreerEltcmpratique2 = false;
                    }
                }
                if (!testSiCreerEltcmpratique2) {
                    JOptionPane.showMessageDialog(this, "Impossible de créer le chargé de mission et la durée de pratique pour le sous-centre [" + nomSouscentreSelected + "]");
                } else {
                    JOptionPane.showMessageDialog(this, "Chargé de mission et durée pratique 2 créés avec succès !");
                }
            }
        } else {//jCheckbox est cliquée
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || dureeString.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre et une durée !");
            } else {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                duree = Integer.parseInt(dureeString);
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                for (Souscentre souscentre : souscentres) {
                    if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                        souscentreSelected = souscentre;
                        break;
                    }
                }
                try {
                    metier.creerEltcmpratique2sansnoms(new Eltcmpratique2sansnoms(duree, groupe, sessionSelected, souscentreSelected));
                    JOptionPane.showMessageDialog(this, "Durée pratique 2 créée avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de créer la durée de pratique pour le sous-centre [" + nomSouscentreSelected + "]");
                }
            }
        }

    }//GEN-LAST:event_jButtonCreerPersonnelActionPerformed

    private void jButtonListerPersonnelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerPersonnelsActionPerformed
        infoSaisies();
        if (!jCheckBoxSansNoms.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens et une session !");
            } else {
                anneeSelected = Integer.parseInt(anneeString);
                intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION");
                desEltcmpratique2 = metier.findAllEltcmpratique2D1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                if (!intervenants.isEmpty()) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                        for (Region region : regions) {
                            int i = 1;
                            for (Intervenant intervenant : intervenants) {
                                Eltcmpratique2 sonEltcmpratique2 = null;
                                if (intervenant.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                                    for (Eltcmpratique2 elt : desEltcmpratique2) {
                                        if (elt.getIntervenant().getPersonnel().getNompers().equals(intervenant.getPersonnel().getNompers()) && elt.getIntervenant().getPersonnel().getPrenom().equals(intervenant.getPersonnel().getPrenom())) {
                                            sonEltcmpratique2 = elt;
                                            break;
                                        }
                                    }
                                    Map<String, Object> row = new HashMap<>();
                                    row.put("session", anneeSelected);
                                    row.put("examen", groupedexamensEnstring);
                                    row.put("region", region.getNomreg());
                                    row.put("num", i++);
                                    row.put("souscentre", intervenant.getSouscentre().getNomsouscent());
                                    row.put("cm", intervenant.getPersonnel().getNompers() + " " + intervenant.getPersonnel().getPrenom());
                                    row.put("duree", sonEltcmpratique2.getDuree());
                                    datasource.add(row);
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeCMpratique2Report.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Aucun CM de pratique 2 trouvé dans la base de données !");
                }
            }
            intervenants.clear();
        } else {//jCheckbox est cliquée
            if (groupedexamensEnstring.equals("") || anneeString.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens et une session !");
            } else {
                anneeSelected = Integer.parseInt(anneeString);
                desEltcmpratique2sansnoms = metier.findAllEltcmpratique2sansnomsD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                if (!desEltcmpratique2sansnoms.isEmpty()) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                        for (Region region : regions) {
                            int i = 1;
                            for (Eltcmpratique2sansnoms eltsansnoms : desEltcmpratique2sansnoms) {
                                if (eltsansnoms.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {

                                    Map<String, Object> row = new HashMap<>();
                                    row.put("session", anneeSelected);
                                    row.put("examen", groupedexamensEnstring);
                                    row.put("region", region.getNomreg());
                                    row.put("num", i++);
                                    row.put("souscentre", eltsansnoms.getSouscentre().getNomsouscent());
                                    row.put("duree", eltsansnoms.getDuree());
                                    datasource.add(row);
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeCMpratique2sansnomsReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Aucune de pratique 2 trouvée dans la base de données !");
                }
            }
        }
    }//GEN-LAST:event_jButtonListerPersonnelsActionPerformed

    private void jButtonAnnulerChoixExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixExamenActionPerformed
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        jComboBoxSession.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixExamenActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jComboBoxSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSouscentreActionPerformed
        //
    }//GEN-LAST:event_jComboBoxSouscentreActionPerformed

    private void jComboBoxRegionSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionSouscentreActionPerformed
        remplirDepartementSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxRegionSouscentreActionPerformed

    private void jButtonAnnulerChoixCentreTemoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixCentreTemoinActionPerformed
        jComboBoxRegionSouscentre.setSelectedIndex(0);
        jComboBoxDepartementSouscentre.setSelectedIndex(0);
        jComboBoxArrondissementSouscentre.setSelectedIndex(0);
        jComboBoxSouscentre.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixCentreTemoinActionPerformed

    private void jComboBoxDepartementSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementSouscentreActionPerformed
        remplirArrondissementSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxDepartementSouscentreActionPerformed

    private void jComboBoxArrondissementSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementSouscentreActionPerformed
        remplirSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementSouscentreActionPerformed

    private void jComboBoxDureeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDureeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxDureeActionPerformed

    private void jCheckBoxSansNomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSansNomsActionPerformed
        if(jCheckBoxSansNoms.isSelected()){
            jComboBoxRegionListe.setEnabled(false);
            jComboBoxDepartementListe.setEnabled(false);
            jComboBoxArrondissementListe.setEnabled(false);
            jComboBoxNomsEtPrenoms.setEnabled(false);
        }
        else{
            jComboBoxRegionListe.setEnabled(true);
            jComboBoxDepartementListe.setEnabled(true);
            jComboBoxArrondissementListe.setEnabled(true);
            jComboBoxNomsEtPrenoms.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBoxSansNomsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatCMpratique2.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatCMpratique2.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatCMpratique2.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatCMpratique2.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatCMpratique2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonAnnulerChoixCentreTemoin;
    private javax.swing.JButton jButtonAnnulerChoixExamen;
    private javax.swing.JButton jButtonAnnulerPersonnel;
    private javax.swing.JButton jButtonCreerEtats;
    private javax.swing.JButton jButtonCreerPersonnel;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonListerPersonnels;
    private javax.swing.JButton jButtonMettreAjourEtats;
    private javax.swing.JButton jButtonSupprimerEtats;
    private javax.swing.JButton jButtonSupprimerPersonnel;
    private javax.swing.JButton jButtonVisualiserEtats;
    private javax.swing.JCheckBox jCheckBoxSansNoms;
    private javax.swing.JComboBox<String> jComboBoxArrondissementListe;
    private javax.swing.JComboBox<String> jComboBoxArrondissementSouscentre;
    private javax.swing.JComboBox<String> jComboBoxDepartementListe;
    private javax.swing.JComboBox<String> jComboBoxDepartementSouscentre;
    private javax.swing.JComboBox<String> jComboBoxDuree;
    private javax.swing.JComboBox<String> jComboBoxImputation;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxNomsEtPrenoms;
    private javax.swing.JComboBox<String> jComboBoxRegionListe;
    private javax.swing.JComboBox<String> jComboBoxRegionSouscentre;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxSouscentre;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabeValeur;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelArrondissementListe;
    private javax.swing.JLabel jLabelArrondissementSouscentre;
    private javax.swing.JLabel jLabelDepartementListe;
    private javax.swing.JLabel jLabelDepartementSouscentre;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelImputation;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelRegionListe;
    private javax.swing.JLabel jLabelRegionSouscentre;
    private javax.swing.JLabel jLabelResponsable;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelSouscentre;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanelChoixExamen;
    private javax.swing.JPanel jPanelChoixSouscentre1;
    private javax.swing.JPanel jPanelExaminateurs;
    private javax.swing.JPanel jPanelGestionEtat;
    private javax.swing.JPanel jPanelValeur;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Region> regions = null;
    private List<Examen> examens = null;
    private Examen examenSelected = null;
    private String[] examensList = null;
    private List<Examen> examensSelected = new ArrayList<>();
    private List<Souscentre> souscentres = null;
    private Souscentre souscentreSelected = null;
    private List<Departement> departementsSouscentre = null;
    private List<Arrondissement> arrondissementsSouscentre = null;
    private List<Departement> departementsListe = null;
    private List<Arrondissement> arrondissementsListe = null;
    private String[] sessionsCombo = null;
    private String[] regionsSouscentreCombo = null;
    private String[] souscentresCombo = null;
    private String[] regionsListeCombo = null;
    private String[] departementsSouscentreCombo = null;
    private String[] arrondissementsSouscentreCombo = null;
    private String[] departementsListeCombo = null;
    private String[] arrondissementsListeCombo = null;
    private String[] dureesCombo = null;
    private String nomRegionSouscentreSelected = "";
    private String nomDepartementSouscentreSelected = "";
    private String nomArrondissementSouscentreSelected = "";
    private String nomRegionListeSelected = "";
    private String nomDepartementListeSelected = "";
    private String nomArrondissementListeSelected = "";
    private String nomSouscentreSelected = "";
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private String phase = "PRATIQUE";
    private List<Caisse> caisses = null;
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private String nomsEtPrenomsSelected = "";
    private Personnel personnelSelected = null;
    private List<Personnel> personnels = null;
    private String[] personnelsCombo = null;
    private List<Intervenant> intervenants = null;
    private boolean annule = false;
    private int duree = 0, fraismission = 25000, fraiscom = 5000, total = 0;
    private String dureeString = "";
    private List<Eltcmpratique2> desEltcmpratique2 = null;
    private List<Eltcmpratique2sansnoms> desEltcmpratique2sansnoms = null;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        regions = metier.findAllRegions();
        examens = metier.findAllExamens();
        souscentres = metier.findAllSouscentres();

        //on remplit la combobox des régions du sous-centre
        regionsSouscentreCombo = new String[regions.size() + 1];
        regionsSouscentreCombo[0] = "---";
        int i = 1;
        for (Region region : regions) {
            regionsSouscentreCombo[i++] = region.getNomreg();
        }
        jComboBoxRegionSouscentre.setModel(new DefaultComboBoxModel(regionsSouscentreCombo));

        //on remplit la combobox des régions des listes des CM
        regionsListeCombo = new String[regions.size() + 1];
        regionsListeCombo[0] = "---";
        int k = 1;
        for (Region region : regions) {
            regionsListeCombo[k++] = region.getNomreg();
        }
        jComboBoxRegionListe.setModel(new DefaultComboBoxModel(regionsListeCombo));

        //on remplit la combobox des régions des examinateurs
        regionsListeCombo = new String[regions.size() + 1];
        regionsListeCombo[0] = "---";
        int l = 1;
        for (Region region : regions) {
            regionsListeCombo[l++] = region.getNomreg();
        }
        jComboBoxRegionListe.setModel(new DefaultComboBoxModel(regionsListeCombo));

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int p = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[p++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "IND"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        //on remplit la combobox des valeurs de convoyage
        dureesCombo = new String[]{"---", "2", "3", "4", "5", "6", "7", "8", "9", "10"};
        jComboBoxDuree.setModel(new DefaultComboBoxModel(dureesCombo));

        remplirDepartementSouscentreCombobox();
        remplirArrondissementSouscentreCombobox();
        remplirSouscentreCombobox();
        remplirDepartementListeCombobox();
        remplirArrondissementListeCombobox();
        remplirPersonnelsDelArrondissementCombobox();
        remplirPersonnelsDuDepartementCombobox();
    }

    private void infoSaisies() {
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        nomsEtPrenomsSelected = (String) jComboBoxNomsEtPrenoms.getSelectedItem();
        //referenceImputationSelected = (String) jComboBoxImputation.getSelectedItem();
        dureeString = (String) jComboBoxDuree.getSelectedItem();
    }

    private void remplirDepartementSouscentreCombobox() {
        nomRegionSouscentreSelected = (String) jComboBoxRegionSouscentre.getSelectedItem();
        departementsSouscentre = metier.findAllDepartementsD1Region(nomRegionSouscentreSelected);
        //on remplit la combobox des départements du sous-centre
        departementsSouscentreCombo = new String[departementsSouscentre.size() + 1];
        departementsSouscentreCombo[0] = "---";
        int i = 1;
        for (Departement departement : departementsSouscentre) {
            departementsSouscentreCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartementSouscentre.setModel(new DefaultComboBoxModel(departementsSouscentreCombo));
    }

    private void remplirArrondissementSouscentreCombobox() {
        nomDepartementSouscentreSelected = (String) jComboBoxDepartementSouscentre.getSelectedItem();
        arrondissementsSouscentre = metier.findAllArrondissementsD1Departement(nomDepartementSouscentreSelected);
        //on remplit la combobox des centres destination
        arrondissementsSouscentreCombo = new String[arrondissementsSouscentre.size() + 1];
        arrondissementsSouscentreCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissementsSouscentre) {
            arrondissementsSouscentreCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissementSouscentre.setModel(new DefaultComboBoxModel(arrondissementsSouscentreCombo));
    }

    private void remplirSouscentreCombobox() {
        nomArrondissementSouscentreSelected = (String) jComboBoxArrondissementSouscentre.getSelectedItem();
        souscentres = metier.findAllSouscentresD1Arrondissement(nomArrondissementSouscentreSelected);
        //on remplit la combobox des sous-centres
        souscentresCombo = new String[souscentres.size() + 1];
        souscentresCombo[0] = "---";
        int i = 1;
        for (Souscentre souscentre : souscentres) {
            souscentresCombo[i++] = souscentre.getNomsouscent();
        }
        jComboBoxSouscentre.setModel(new DefaultComboBoxModel(souscentresCombo));
    }

    private void remplirDepartementListeCombobox() {
        nomRegionListeSelected = (String) jComboBoxRegionListe.getSelectedItem();
        departementsListe = metier.findAllDepartementsD1Region(nomRegionListeSelected);
        //on remplit la combobox des départements des examinateurs
        departementsListeCombo = new String[departementsListe.size() + 1];
        departementsListeCombo[0] = "---";
        int i = 1;
        for (Departement departement : departementsListe) {
            departementsListeCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartementListe.setModel(new DefaultComboBoxModel(departementsListeCombo));
    }

    private void remplirArrondissementListeCombobox() {
        nomDepartementListeSelected = (String) jComboBoxDepartementListe.getSelectedItem();
        arrondissementsListe = metier.findAllArrondissementsD1Departement(nomDepartementListeSelected);
        //on remplit la combobox des arrondissements des examinateurs
        arrondissementsListeCombo = new String[arrondissementsListe.size() + 1];
        arrondissementsListeCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissementsListe) {
            arrondissementsListeCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissementListe.setModel(new DefaultComboBoxModel(arrondissementsListeCombo));
    }

    private void remplirPersonnelsDelArrondissementCombobox() {
        nomArrondissementListeSelected = (String) jComboBoxArrondissementListe.getSelectedItem();
        personnels = metier.findAllPersonnelsD1Arrondissement(nomArrondissementListeSelected);
        //on remplit les combobox des responsables et des membres
        personnelsCombo = new String[personnels.size() + 1];
        personnelsCombo[0] = "---";
        int i = 1;
        for (Personnel personnel : personnels) {
            personnelsCombo[i] = personnel.getNompers() + " " + personnel.getPrenom();
            i++;
        }
        jComboBoxNomsEtPrenoms.setModel(new DefaultComboBoxModel(personnelsCombo));
    }

    private void remplirPersonnelsDuDepartementCombobox() {
        nomDepartementListeSelected = (String) jComboBoxDepartementListe.getSelectedItem();
        personnels = metier.findAllPersonnelsD1Departement(nomDepartementListeSelected);
        //on remplit les combobox des personnels       
        personnelsCombo = new String[personnels.size() + 1];
        personnelsCombo[0] = "---";
        int i = 1;
        for (Personnel personnel : personnels) {
            personnelsCombo[i] = personnel.getNompers() + " " + personnel.getPrenom();
            i++;
        }
        jComboBoxNomsEtPrenoms.setModel(new DefaultComboBoxModel(personnelsCombo));
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    private void determinerCout(Map<Souscentre, ArrayList<Character>> souscentrePhasesMap, Souscentre souscentre, Eltcmpratique2 eltcmpratique2) {
        ArrayList<Character> phasesList = souscentrePhasesMap.get(souscentre);
        String phasesEnchaine = "";
        if (!phasesList.isEmpty()) {
            for (char c : phasesList) {
                phasesEnchaine += c;
            }
        }
        duree = eltcmpratique2.getDuree();

        if (phasesEnchaine.equals("P") || phasesEnchaine.equals("PT") || phasesEnchaine.equals("EP") || phasesEnchaine.equals("EPT") || phasesEnchaine.equals("CP") || phasesEnchaine.equals("CPT") || phasesEnchaine.equals("CEP") || phasesEnchaine.equals("CEPT")) {
            total = (duree + 2) * fraismission + fraiscom;
        }
        if (phasesEnchaine.equals("CDEP") || phasesEnchaine.equals("CDEPT")) {
            total = (duree + 3) * fraismission + fraiscom;
        }
    }

    private void determinerCoutSansnoms(Map<Souscentre, ArrayList<Character>> souscentrePhasesMap, Eltcmpratique2sansnoms eltcmpratique2sansnoms) {
        ArrayList<Character> phasesList = souscentrePhasesMap.get(eltcmpratique2sansnoms.getSouscentre());
        String phasesEnchaine = "";
        if (!phasesList.isEmpty()) {
            for (char c : phasesList) {
                phasesEnchaine += c;
            }
        }
        duree = eltcmpratique2sansnoms.getDuree();

        if (phasesEnchaine.equals("P") || phasesEnchaine.equals("PT") || phasesEnchaine.equals("EP") || phasesEnchaine.equals("EPT") || phasesEnchaine.equals("CP") || phasesEnchaine.equals("CPT") || phasesEnchaine.equals("CEP") || phasesEnchaine.equals("CEPT")) {
            total = (duree + 2) * fraismission + fraiscom;
        }
        if (phasesEnchaine.equals("CDEP") || phasesEnchaine.equals("CDEPT")) {
            total = (duree + 3) * fraismission + fraiscom;
        }
    }
}
