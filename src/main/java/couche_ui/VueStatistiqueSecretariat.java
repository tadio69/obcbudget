package couche_ui;

import couche_jpa.Arrondissement;
import couche_jpa.Departement;
import couche_jpa.Examen;
import couche_jpa.Option;
import couche_jpa.Region;
import couche_jpa.Secretariat;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_jpa.Specialisationsec;
import couche_jpa.Statsecretariat;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueStatistiqueSecretariat extends javax.swing.JFrame {

    DefaultTableModel model;

    public VueStatistiqueSecretariat() {
        initComponents();
        model = (DefaultTableModel) jTable1.getModel();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabelSession = new javax.swing.JLabel();
        jLabelExamen = new javax.swing.JLabel();
        jLabelSouscentre = new javax.swing.JLabel();
        jLabelRegion = new javax.swing.JLabel();
        jLabelDepartement = new javax.swing.JLabel();
        jLabelArrondissement = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jComboBoxRegion = new javax.swing.JComboBox<>();
        jComboBoxDepartement = new javax.swing.JComboBox<>();
        jComboBoxArrondissement = new javax.swing.JComboBox<>();
        jComboBoxSouscentre = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonCreer = new javax.swing.JButton();
        jButtonRechercher = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jButtonVisualiser = new javax.swing.JButton();
        jLabelOption = new javax.swing.JLabel();
        jComboBoxOption = new javax.swing.JComboBox<>();
        jLabelEffectif = new javax.swing.JLabel();
        jTextFieldEffectif = new javax.swing.JTextField();
        jLabelExamen1 = new javax.swing.JLabel();
        jComboBoxNumeroSecretariat = new javax.swing.JComboBox<>();
        jComboBoxExamen = new javax.swing.JComboBox<>();
        jLabelEtab = new javax.swing.JLabel();
        jTextEtab = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("STATISTIQUE SECRETARIAT DEMULTIPLIE");

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen :");

        jLabelSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSouscentre.setText("Sous-centre :");

        jLabelRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegion.setText("Région :");

        jLabelDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartement.setText("Département :");

        jLabelArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissement.setText("Arrondissement :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jComboBoxRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionActionPerformed(evt);
            }
        });

        jComboBoxDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartement.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxDepartement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementActionPerformed(evt);
            }
        });

        jComboBoxArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissement.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxArrondissement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementActionPerformed(evt);
            }
        });

        jComboBoxSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSouscentre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSouscentreActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Région", "Département", "Arrondissement", "Sous-centre", "Etab. d'accueil", "Examen", "Session", "Secrétariat N°", "Série/Spécialité", "Effectif", "Version"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(true);
        jTable1.setShowVerticalLines(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButtonCreer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreer.setText("Créer");
        jButtonCreer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerActionPerformed(evt);
            }
        });

        jButtonRechercher.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonRechercher.setText("Rechercher");
        jButtonRechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRechercherActionPerformed(evt);
            }
        });

        jButtonModifier.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonModifier.setText("Modifier");
        jButtonModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierActionPerformed(evt);
            }
        });

        jButtonSupprimer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jButtonAnnuler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jButtonVisualiser.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiser.setText("Visualiser");
        jButtonVisualiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserActionPerformed(evt);
            }
        });

        jLabelOption.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelOption.setText("Série/Spécialité :");

        jComboBoxOption.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxOption.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));

        jLabelEffectif.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelEffectif.setText("Effectif :");

        jTextFieldEffectif.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldEffectif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldEffectifActionPerformed(evt);
            }
        });

        jLabelExamen1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen1.setText("Numéro secrétariat :");

        jComboBoxNumeroSecretariat.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxNumeroSecretariat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxNumeroSecretariat.setToolTipText("");
        jComboBoxNumeroSecretariat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNumeroSecretariatActionPerformed(evt);
            }
        });

        jComboBoxExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxExamen.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxExamen.setToolTipText("");
        jComboBoxExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxExamenActionPerformed(evt);
            }
        });

        jLabelEtab.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelEtab.setText("Etablissement :");

        jTextEtab.setEditable(false);
        jTextEtab.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextEtab.setEnabled(false);
        jTextEtab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextEtabActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(426, 426, 426)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(429, 429, 429)
                .addComponent(jButtonCreer)
                .addGap(18, 18, 18)
                .addComponent(jButtonRechercher)
                .addGap(18, 18, 18)
                .addComponent(jButtonModifier)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimer)
                .addGap(18, 18, 18)
                .addComponent(jButtonAnnuler)
                .addGap(18, 18, 18)
                .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiser)
                .addContainerGap(332, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelDepartement)
                            .addComponent(jLabelRegion)
                            .addComponent(jLabelArrondissement)
                            .addComponent(jLabelSouscentre)
                            .addComponent(jLabelSession))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBoxRegion, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(74, 74, 74)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelEffectif)
                                    .addComponent(jLabelOption)
                                    .addComponent(jLabelExamen)
                                    .addComponent(jLabelExamen1)
                                    .addComponent(jLabelEtab))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(148, 148, 148)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldEffectif, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxOption, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxNumeroSecretariat, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextEtab, javax.swing.GroupLayout.PREFERRED_SIZE, 578, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane1)))
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabelDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelExamen1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxNumeroSecretariat, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelEtab, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextEtab, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelOption, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxOption, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelEffectif, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldEffectif, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButtonFermer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonCreer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonRechercher, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonModifier, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonSupprimer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonAnnuler, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonVisualiser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jComboBoxSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSouscentreActionPerformed
        //inutile
    }//GEN-LAST:event_jComboBoxSouscentreActionPerformed

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        videFrame();
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jComboBoxRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionActionPerformed
        remplirDepartementCombobox();
    }//GEN-LAST:event_jComboBoxRegionActionPerformed

    private void jComboBoxDepartementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementActionPerformed
        remplirArrondissementCombobox();
    }//GEN-LAST:event_jComboBoxDepartementActionPerformed

    private void jComboBoxArrondissementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementActionPerformed
        remplirSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementActionPerformed

    private void jButtonCreerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        if (!anneeString.equals("---") && !nomSouscentreSelected.equals("---") && !sigleExamenSelected.equals("---") && !numsecSelected.equals("---") && !sigleOptionSelected.equals("---")) {
            validerNombre();
            if (continuer && nombre > 0) {
                anneeSelected = Integer.parseInt(anneeString);
                numsec = Integer.parseInt(numsecSelected);
                for (Souscentre s : souscentres) {
                    if (s.getNomsouscent().equals(nomSouscentreSelected)) {
                        souscentreSelected = s;
                        break;
                    }
                }
                for (Examen e : examens) {
                    if (e.getSigle().equals(sigleExamenSelected)) {
                        examenSelected = e;
                        break;
                    }
                }
                for (Option o : options) {
                    if (o.getSigle().equals(sigleOptionSelected)) {
                        optionSelected = o;
                        break;
                    }
                }

                for (Secretariat sec : secretariats) {
                    if (sec.getSouscentre().getNomsouscent().equals(nomSouscentreSelected) && sec.getSession().getAnnee() == anneeSelected && sec.getNumsec() == numsec) {
                        secretariatSelected = sec;
                        break;
                    }
                }

                try {
                    metier.creerStatsecretariat(new Statsecretariat(secretariatSelected, examenSelected, optionSelected, nombre));
                    JOptionPane.showMessageDialog(this, "Statistique créée avec succès !");
                    jTextFieldEffectif.setText("0");
                    lesStatsecretariat = metier.findAllStatsecretariatsD1SecretariatD1SouscentreA1ExamenDans1Session(numsec, anneeSelected, nomSouscentreSelected, sigleExamenSelected);//l'option varie
                    for (Statsecretariat s : lesStatsecretariat) {
                        model.insertRow(model.getRowCount(), new Object[]{s.getIdstatsec(), s.getSecretariat().getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), s.getSecretariat().getSouscentre().getEtablissement().getArrondissement().getDepartement().getNomdepart(), s.getSecretariat().getSouscentre().getEtablissement().getArrondissement().getNomarr(), s.getSecretariat().getSouscentre().getNomsouscent(), s.getSecretariat().getEtablissement().getAbreviation(), s.getExamen().getSigle(), s.getSecretariat().getSession().getAnnee(), s.getSecretariat().getNumsec(), s.getOption().getSigle(), s.getNombre(), s.getVersion()});
                    }
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de créer la statistique souhaitée \n raison:" + ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "L'effectif doit être un entier positif !");
            }
        } else
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Tous les champs sont obligatoires !");
    }//GEN-LAST:event_jButtonCreerActionPerformed

    private void jButtonRechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRechercherActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        if (!anneeString.equals("---") && !nomSouscentreSelected.equals("---") && !sigleExamenSelected.equals("---")) {
            try {
                lesStatsecretariat = metier.findAllStatsecretariatsD1SouscentreA1ExamenDans1Session(anneeSelected, nomSouscentreSelected, sigleExamenSelected);//l'option et numsec varient
                for (Statsecretariat s : lesStatsecretariat) {
                    model.insertRow(model.getRowCount(), new Object[]{s.getIdstatsec(), s.getSecretariat().getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), s.getSecretariat().getSouscentre().getEtablissement().getArrondissement().getDepartement().getNomdepart(), s.getSecretariat().getSouscentre().getEtablissement().getArrondissement().getNomarr(), s.getSecretariat().getSouscentre().getNomsouscent(), s.getSecretariat().getEtablissement().getAbreviation(), s.getExamen().getSigle(), s.getSecretariat().getSession().getAnnee(), s.getSecretariat().getNumsec(), s.getOption().getSigle(), s.getNombre(), s.getVersion()});
                }
            } catch (ObcbudgetException ex) {
                JOptionPane.showMessageDialog(this, "Les statistiques recherchées n'existent sans doute pas ! ");
            }
        } else
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs sous-centre, examen et session sont obligatoires !");
    }//GEN-LAST:event_jButtonRechercherActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        //remplit les champs
        int ligne = jTable1.getSelectedRow();
        idStatsecretariatCliked = (int) model.getValueAt(ligne, 0);
        jComboBoxRegion.setSelectedItem((String) model.getValueAt(ligne, 1));
        jComboBoxDepartement.setSelectedItem((String) model.getValueAt(ligne, 2));
        jComboBoxArrondissement.setSelectedItem((String) model.getValueAt(ligne, 3));
        jComboBoxSouscentre.setSelectedItem((String) model.getValueAt(ligne, 4));
        jComboBoxSession.setSelectedItem("" + model.getValueAt(ligne, 7));
        jComboBoxNumeroSecretariat.setSelectedItem("" + model.getValueAt(ligne, 8));
        jTextEtab.setText((String) model.getValueAt(ligne, 5));
        jComboBoxExamen.setSelectedItem((String) model.getValueAt(ligne, 6));       
        jComboBoxOption.setSelectedItem((String) model.getValueAt(ligne, 9));
        jTextFieldEffectif.setText("" + model.getValueAt(ligne, 10));
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButtonModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierActionPerformed
        model.setRowCount(0);//vide la jTable
        validerNombre();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier cette statistique?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (continuer && nombre > 0) {
                infoSaisies();
                if (!anneeString.equals("---") && !nomSouscentreSelected.equals("---") && !sigleExamenSelected.equals("---") && !numsecSelected.equals("---") && !sigleOptionSelected.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    numsec = Integer.parseInt(numsecSelected);
                    statsecretariatCliked = metier.findStatsecretariatById(idStatsecretariatCliked);
                    for (Secretariat sec : secretariats) {
                        if (sec.getSouscentre().getNomsouscent().equals(nomSouscentreSelected) && sec.getSession().getAnnee() == anneeSelected && sec.getNumsec() == numsec) {
                            secretariatSelected = sec;
                            break;
                        }
                    }
                    for (Option o : options) {
                        if (o.getSigle().equals(sigleOptionSelected)) {
                            optionSelected = o;
                            break;
                        }
                    }
                    for (Examen e : examens) {
                        if (e.getSigle().equals(sigleExamenSelected)) {
                            examenSelected = e;
                            break;
                        }
                    }
                    statsecretariatCliked.setSecretariat(secretariatSelected);
                    statsecretariatCliked.setExamen(examenSelected);
                    statsecretariatCliked.setOption(optionSelected);
                    statsecretariatCliked.setNombre(nombre);
                    try {
                        metier.modifierStatsecretariat(statsecretariatCliked);
                        JOptionPane.showMessageDialog(this, "Statistique modifiée avec succès !");
                        jTextFieldEffectif.setText("0");
                        lesStatsecretariat = metier.findAllStatsecretariatsD1SecretariatD1SouscentreA1ExamenDans1Session(numsec, anneeSelected, nomSouscentreSelected, sigleExamenSelected);//l'option varie
                        for (Statsecretariat s : lesStatsecretariat) {
                            model.insertRow(model.getRowCount(), new Object[]{s.getIdstatsec(), s.getSecretariat().getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), s.getSecretariat().getSouscentre().getEtablissement().getArrondissement().getDepartement().getNomdepart(), s.getSecretariat().getSouscentre().getEtablissement().getArrondissement().getNomarr(), s.getSecretariat().getSouscentre().getNomsouscent(), s.getSecretariat().getEtablissement().getAbreviation(), s.getExamen().getSigle(), s.getSecretariat().getSession().getAnnee(), s.getSecretariat().getNumsec(), s.getOption().getSigle(), s.getNombre(), s.getVersion()});
                        }
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de modifier la statistique souhaitée \n raison:" + ex.getMessage());
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "L'effectif doit être un entier positif !");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Tous les champs sont obligatoires !");
            }
        }
    }//GEN-LAST:event_jButtonModifierActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        model.setRowCount(0);//vide la jTable       
        validerNombre();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer cette statistique?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (continuer && nombre > 0) {
                infoSaisies();
                if (!anneeString.equals("---") && !nomSouscentreSelected.equals("---") && !sigleExamenSelected.equals("---") && !numsecSelected.equals("---") && !sigleOptionSelected.equals("---")) {
                    try {
                        metier.supprimerStatsecretariat(metier.findStatsecretariatById(idStatsecretariatCliked));
                        JOptionPane.showMessageDialog(this, "Statistique supprimée avec succès !");
                        jTextFieldEffectif.setText("0");
                        lesStatsecretariat = metier.findAllStatsecretariatsD1SecretariatD1SouscentreA1ExamenDans1Session(numsec, anneeSelected, nomSouscentreSelected, sigleExamenSelected);//l'option varie
                        for (Statsecretariat s : lesStatsecretariat) {
                            model.insertRow(model.getRowCount(), new Object[]{s.getIdstatsec(), s.getSecretariat().getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), s.getSecretariat().getSouscentre().getEtablissement().getArrondissement().getDepartement().getNomdepart(), s.getSecretariat().getSouscentre().getEtablissement().getArrondissement().getNomarr(), s.getSecretariat().getSouscentre().getNomsouscent(), s.getSecretariat().getEtablissement().getAbreviation(), s.getExamen().getSigle(), s.getSecretariat().getSession().getAnnee(), s.getSecretariat().getNumsec(), s.getOption().getSigle(), s.getNombre(), s.getVersion()});
                        }
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de supprimer la statistique souhaitée \n raison:" + ex.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Tous les champs sont obligatoires !");
                }
            } else {
                JOptionPane.showMessageDialog(this, "L'effectif doit être un entier positif !");
            }
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jButtonVisualiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserActionPerformed
        anneeString = (String) jComboBoxSession.getSelectedItem();
        sigleExamenSelected = (String) jComboBoxExamen.getSelectedItem();
        if (!anneeString.equals("---") && !sigleExamenSelected.equals("---")) {
            Map<Secretariat, ArrayList<Statsecretariat>> secretariatEtStatsecMap = new HashMap<>();//contient l'ensemble des secrétariats d'un groupe d'examens avec chacun avec statsecretariats
            Map<Souscentre, ArrayList<Secretariat>> souscentreSecretariatsMap = new HashMap<>();//contient les sous-centres chacun avec la liste de ses secretariats le cas échéant
            List<Souscentre> souscentresList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des secrétariats pour l'examen sélectionné 
            List<Secretariat> secretariatsList = new ArrayList<>();//contient l'ensemble des secretariats ayant des stats 
            anneeSelected = Integer.parseInt(anneeString);
            lesStatsecretariat = metier.findAllStatsecretariatsD1ExamenDans1Session(anneeSelected, sigleExamenSelected);

            //remplissage de souscentreList et secretariatsList
            for (Statsecretariat stat : lesStatsecretariat) {
                if (!souscentresList.contains(stat.getSecretariat().getSouscentre())) {
                    souscentresList.add(stat.getSecretariat().getSouscentre());
                }
                if (!secretariatsList.contains(stat.getSecretariat())) {
                    secretariatsList.add(stat.getSecretariat());
                }
            }
            for (Souscentre souscentre : souscentresList) {
                ArrayList<Secretariat> sesSecretariatsList = new ArrayList<>();
                for (Statsecretariat stat : lesStatsecretariat) {
                    if (!sesSecretariatsList.contains(stat.getSecretariat()) && stat.getSecretariat().getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                        sesSecretariatsList.add(stat.getSecretariat());
                    }
                }
                souscentreSecretariatsMap.put(souscentre, sesSecretariatsList);
            }

            System.out.println("----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
            System.out.println("secretariatsList.size=" + secretariatsList.size());
            //remplissage de secretariatEtStatsecMap
            for (Secretariat sec : secretariatsList) {
                //System.out.println("----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
                //System.out.println("numsec="+sec.getNumsec()+"   souscentre="+sec.getSouscentre().getNomsouscent()+"    établissement="+sec.getEtablissement().getAbreviation());
                ArrayList<Statsecretariat> sesStatsecsList = new ArrayList<>();
                for (Statsecretariat stat : lesStatsecretariat) {
                    if (stat.getSecretariat().getNumsec() == sec.getNumsec() && stat.getSecretariat().getEtablissement().getNometab().equals(sec.getEtablissement().getNometab())) {
                        sesStatsecsList.add(stat);

                        //System.out.println("stat="+stat.getNombre()+"   option="+stat.getOption().getSigle());
                    }
                }
                secretariatEtStatsecMap.put(sec, sesStatsecsList);
            }

            try {
                List<Map<String, Object>> datasource = new ArrayList<>();
                List<Region> regions = metier.findAllRegions();
                for (Region region : regions) {
                    for (Souscentre souscentre : souscentreSecretariatsMap.keySet()) {
                        if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                            for (Secretariat sec : souscentreSecretariatsMap.get(souscentre)) {
                                for (Statsecretariat statsec : secretariatEtStatsecMap.get(sec)) {
                                    Map<String, Object> row = new HashMap<>();
                                    row.put("examen", statsec.getExamen().getSigle());
                                    String s = "" + statsec.getSecretariat().getSession().getAnnee();
                                    row.put("session", s);
                                    row.put("region", region.getNomreg());
                                    row.put("departement", statsec.getSecretariat().getSouscentre().getEtablissement().getArrondissement().getDepartement().getNomdepart());
                                    row.put("arrondissement", statsec.getSecretariat().getSouscentre().getEtablissement().getArrondissement().getNomarr());
                                    row.put("souscentre", statsec.getSecretariat().getSouscentre().getNomsouscent());
                                    row.put("numsec", statsec.getSecretariat().getNumsec() + " : (" + statsec.getSecretariat().getEtablissement().getAbreviation() + ")");
                                    row.put("option", statsec.getOption().getSigle());
                                    row.put("nombre", statsec.getNombre());

                                    datasource.add(row);
                                }
                            }
                        }

                    }
                }

                JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\statsecretariatReport.jrxml");
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                jasperViewer.setVisible(true);
            } catch (JRException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs session et examen sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonVisualiserActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        remplirNumeroSecretariatCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jTextFieldEffectifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldEffectifActionPerformed
        //
    }//GEN-LAST:event_jTextFieldEffectifActionPerformed

    private void jComboBoxNumeroSecretariatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNumeroSecretariatActionPerformed
        remplirExamenCombobox();
    }//GEN-LAST:event_jComboBoxNumeroSecretariatActionPerformed

    private void jComboBoxExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxExamenActionPerformed
        remplirOptionsCombobox();
    }//GEN-LAST:event_jComboBoxExamenActionPerformed

    private void jTextEtabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextEtabActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextEtabActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueStatistiqueSecretariat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueStatistiqueSecretariat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueStatistiqueSecretariat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueStatistiqueSecretariat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueStatistiqueSecretariat().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonCreer;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonRechercher;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JButton jButtonVisualiser;
    private javax.swing.JComboBox<String> jComboBoxArrondissement;
    private javax.swing.JComboBox<String> jComboBoxDepartement;
    private javax.swing.JComboBox<String> jComboBoxExamen;
    private javax.swing.JComboBox<String> jComboBoxNumeroSecretariat;
    private javax.swing.JComboBox<String> jComboBoxOption;
    private javax.swing.JComboBox<String> jComboBoxRegion;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxSouscentre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelArrondissement;
    private javax.swing.JLabel jLabelDepartement;
    private javax.swing.JLabel jLabelEffectif;
    private javax.swing.JLabel jLabelEtab;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelExamen1;
    private javax.swing.JLabel jLabelOption;
    private javax.swing.JLabel jLabelRegion;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelSouscentre;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextEtab;
    private javax.swing.JTextField jTextFieldEffectif;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Region> regions = null;
    private String[] regionsCombo = null;
    private List<Departement> departements = null;
    private List<Arrondissement> arrondissements = null;
    private List<Souscentre> souscentres = null;
    private List<Session> sessions = null;
    private List<Examen> examens = null;
    private List<Option> options = new ArrayList<Option>();
    private String[] departementsCombo = null;
    private String[] arrondissementsCombo = null;
    private String[] sessionsCombo = null;
    private String[] examensCombo = null;
    private String[] optionsCombo = null;
    private String[] souscentresCombo = null;
    private String[] numsecCombo = null;
    private Departement departementSelected = null;
    private Arrondissement arrondissementSelected = null;
    private String sigleExamenSelected = "";
    private String sigleOptionSelected = "";
    private String nomRegionSelected = "";
    private String nomDepartementSelected = "";
    private String nomArrondissementSelected = "";
    private String nomSouscentreSelected = "";
    private Souscentre souscentreSelected = null;
    private int anneeSelected = 0;
    private Session sessionSelected = null;
    private Examen examenSelected = null;
    private Option optionSelected = null;
    private int nombre = 0;
    private int numsec = 0;
    private String numsecSelected = "";
    private int idStatsecretariatCliked = 0;
    private Statsecretariat statsecretariatCliked = null;
    private List<Statsecretariat> lesStatsecretariat = null;
    private List<Secretariat> secretariats = null;
    private Secretariat secretariatSelected = null;
    boolean continuer = false;
    private String anneeString = "";
    private List<Specialisationsec> specsecs = null;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        examens = metier.findAllExamens();
        regions = metier.findAllRegions();
        secretariats = metier.findAllSecretariats();
        options = metier.findAllOptions();

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int i = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[i++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des régions
        regionsCombo = new String[regions.size() + 1];
        regionsCombo[0] = "---";
        int j = 1;
        for (Region region : regions) {
            regionsCombo[j++] = region.getNomreg();
        }
        jComboBoxRegion.setModel(new DefaultComboBoxModel(regionsCombo));

        jTextFieldEffectif.setText("0");

        remplirDepartementCombobox();

        remplirArrondissementCombobox();

        remplirSouscentreCombobox();
    }

    private void infoSaisies() {
        anneeString = (String) jComboBoxSession.getSelectedItem();
        sigleExamenSelected = (String) jComboBoxExamen.getSelectedItem();
        sigleOptionSelected = (String) jComboBoxOption.getSelectedItem();
        numsecSelected = (String) jComboBoxNumeroSecretariat.getSelectedItem();
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
    }

    private void videFrame() {
        jComboBoxRegion.setSelectedIndex(0);
        jComboBoxDepartement.setSelectedIndex(0);
        jComboBoxArrondissement.setSelectedIndex(0);
        jComboBoxSouscentre.setSelectedIndex(0);
        jComboBoxSession.setSelectedIndex(0);
        jComboBoxNumeroSecretariat.setSelectedIndex(0);
        jTextEtab.setText("");
        jComboBoxExamen.setSelectedIndex(0);
        jComboBoxOption.setSelectedIndex(0);

        jTextFieldEffectif.setText("0");
        model.setRowCount(0);//vide la jTable
    }

    private void remplirDepartementCombobox() {
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        departements = metier.findAllDepartementsD1Region(nomRegionSelected);
        //on remplit la combobox des départements
        departementsCombo = new String[departements.size() + 1];
        departementsCombo[0] = "---";
        int i = 1;
        for (Departement departement : departements) {
            departementsCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartement.setModel(new DefaultComboBoxModel(departementsCombo));
    }

    private void remplirArrondissementCombobox() {
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        arrondissements = metier.findAllArrondissementsD1Departement(nomDepartementSelected);
        //on remplit la combobox des arrondissements
        arrondissementsCombo = new String[arrondissements.size() + 1];
        arrondissementsCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissements) {
            arrondissementsCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissement.setModel(new DefaultComboBoxModel(arrondissementsCombo));
    }

    private void remplirSouscentreCombobox() {
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        souscentres = metier.findAllSouscentresD1Arrondissement(nomArrondissementSelected);
        //on remplit la combobox des sous-centres
        souscentresCombo = new String[souscentres.size() + 1];
        souscentresCombo[0] = "---";
        int i = 1;
        for (Souscentre souscentre : souscentres) {
            souscentresCombo[i++] = souscentre.getNomsouscent();
        }
        jComboBoxSouscentre.setModel(new DefaultComboBoxModel(souscentresCombo));
    }

    private void validerNombre() {
        String chaine = jTextFieldEffectif.getText();
        try {
            int nb = Integer.parseInt(chaine);
            nombre = nb;
            continuer = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, " L'effectif de candidats doit être fourni et contenir uniquement des chiffres !");
            continuer = false;
        }
    }

    private void remplirNumeroSecretariatCombobox() {
        anneeString = (String) jComboBoxSession.getSelectedItem();
        if (!anneeString.equals("---")) {
            anneeSelected = Integer.parseInt("" + jComboBoxSession.getSelectedItem());
            nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
            if (!nomSouscentreSelected.equals("---")) {
                secretariats = metier.findAllSecretariatsD1SouscentreEtSession(nomSouscentreSelected, anneeSelected);
                //on remplit la combobox des numéros de secretariat
                numsecCombo = new String[secretariats.size() + 1];
                numsecCombo[0] = "---";
                int i = 1;
                for (Secretariat s : secretariats) {
                    numsecCombo[i++] = "" + s.getNumsec();
                }
                jComboBoxNumeroSecretariat.setModel(new DefaultComboBoxModel(numsecCombo));
            }
        }
    }

    private void remplirExamenCombobox() {
        anneeString = (String) jComboBoxSession.getSelectedItem();
        if (!anneeString.equals("---")) {
            anneeSelected = Integer.parseInt("" + jComboBoxSession.getSelectedItem());
            nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
            numsec = Integer.parseInt((String) jComboBoxNumeroSecretariat.getSelectedItem());
            secretariatSelected = metier.findSecretariatD1SouscentreDeNumeroEtSessionDonnes(nomSouscentreSelected, numsec, anneeSelected);
            specsecs = metier.findAllSpecialisationsecD1Secretariat(numsec, anneeSelected, nomSouscentreSelected, secretariatSelected.getEtablissement().getAbreviation());
            jTextEtab.setText(secretariatSelected.getEtablissement().getAbreviation());
            ArrayList<Examen> sesExamens = new ArrayList<>();
            if (!specsecs.isEmpty()) {
                for (Specialisationsec specsec : specsecs) {
                    if (!sesExamens.contains(specsec.getExamen())) {
                        sesExamens.add(specsec.getExamen());
                    }
                }
                //on remplit la combobox des examens
                examensCombo = new String[sesExamens.size() + 1];
                examensCombo[0] = "---";
                int k = 1;
                for (Examen examen : sesExamens) {
                    examensCombo[k++] = examen.getSigle();
                }
                jComboBoxExamen.setModel(new DefaultComboBoxModel(examensCombo));
            }
        }
    }

    private void remplirOptionsCombobox() {
        numsecSelected = (String) jComboBoxNumeroSecretariat.getSelectedItem();
        if (!numsecSelected.equals("---")) {
            anneeSelected = Integer.parseInt("" + jComboBoxSession.getSelectedItem());
            nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
            numsec = Integer.parseInt((String) jComboBoxNumeroSecretariat.getSelectedItem());
            sigleExamenSelected = (String) jComboBoxExamen.getSelectedItem();
            secretariatSelected = metier.findSecretariatD1SouscentreDeNumeroEtSessionDonnes(nomSouscentreSelected, numsec, anneeSelected);
            specsecs = metier.findAllSpecialisationsecD1SecretariatEtExamen(numsec, anneeSelected, nomSouscentreSelected, secretariatSelected.getEtablissement().getAbreviation(), sigleExamenSelected);
            optionsCombo = new String[specsecs.size() + 1];
            optionsCombo[0] = "---";
            int i = 1;
            for (Specialisationsec specsec : specsecs) {
                optionsCombo[i++] = specsec.getOption().getSigle();
            }
            jComboBoxOption.setModel(new DefaultComboBoxModel(optionsCombo));
        }
    }
}
