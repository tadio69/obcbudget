package couche_ui;

import couche_jpa.Famille;
import couche_jpa.Grandcentre;
import couche_jpa.Region;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueGrandcentre extends javax.swing.JFrame {

    DefaultTableModel model;

    public VueGrandcentre() {
        initComponents();
        model = (DefaultTableModel) jTable1.getModel();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabelNom = new javax.swing.JLabel();
        jTextFieldNom = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonCreer = new javax.swing.JButton();
        jButtonRechercher = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jLabelRegion = new javax.swing.JLabel();
        jComboBoxRegion = new javax.swing.JComboBox<>();
        jPanelExamens = new javax.swing.JPanel();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType1 = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxFamille = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("GRAND CENTRE");

        jLabel2.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        jLabel2.setText("(STRUCTURE REGROUPANT PLUSIEURS CENTRES DE DELIBERATION)");

        jLabelNom.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNom.setText("Nom :");

        jTextFieldNom.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jTable1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "N° Ordre", "Région", "Nom", "Famille de séries", "Niveau", "Type", "Version"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(true);
        jTable1.setShowVerticalLines(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButtonCreer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreer.setText("Créer");
        jButtonCreer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerActionPerformed(evt);
            }
        });

        jButtonRechercher.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonRechercher.setText("Rechercher");
        jButtonRechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRechercherActionPerformed(evt);
            }
        });

        jButtonModifier.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonModifier.setText("Modifier");
        jButtonModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierActionPerformed(evt);
            }
        });

        jButtonSupprimer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jButtonAnnuler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jLabelRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegion.setText("Région :");

        jComboBoxRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jPanelExamens.setBackground(new java.awt.Color(153, 255, 153));
        jPanelExamens.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Examens concernés", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(51, 0, 204))); // NOI18N

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType1.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanelExamensLayout = new javax.swing.GroupLayout(jPanelExamens);
        jPanelExamens.setLayout(jPanelExamensLayout);
        jPanelExamensLayout.setHorizontalGroup(
            jPanelExamensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelExamensLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanelExamensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelType1)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelExamensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBoxNiveau, 0, 151, Short.MAX_VALUE)
                    .addComponent(jComboBoxType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanelExamensLayout.setVerticalGroup(
            jPanelExamensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelExamensLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelExamensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelExamensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelType1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("Famille de séries :");

        jComboBoxFamille.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(156, 156, 156)
                                .addComponent(jButtonCreer)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonRechercher)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonModifier)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonSupprimer)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonAnnuler)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonFermer))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(165, 165, 165)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(331, 331, 331)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelNom)
                                    .addComponent(jLabelRegion)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldNom, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxFamille, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(56, 56, 56)
                                .addComponent(jPanelExamens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 76, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addComponent(jPanelExamens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonCreer, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonRechercher, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonModifier, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonSupprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonAnnuler, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelNom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldNom, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxFamille, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                .addGap(13, 13, 13))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        //remplit les champs
        int ligne = jTable1.getSelectedRow();
        idGrandcentreCliked = (int) model.getValueAt(ligne, 0);
        jComboBoxRegion.setSelectedItem((String) model.getValueAt(ligne, 2));
        jTextFieldNom.setText((String) model.getValueAt(ligne, 3));
        jComboBoxFamille.setSelectedItem((String) model.getValueAt(ligne, 4));
        jComboBoxNiveau.setSelectedItem((String) model.getValueAt(ligne, 5));
        jComboBoxType.setSelectedItem((String) model.getValueAt(ligne, 6));

    }//GEN-LAST:event_jTable1MouseClicked

    private void jButtonCreerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        Grandcentre grandcentreCreated=null;
        boolean testSiGrandcentreExiste = false;
        if (!nomSaisi.equals("") && !nomRegionSelected.equals("---") && !niveauSelected.equals("---") && !typeSelected.equals("---") && !titreFamilleSelected.equals("---")) {
            for (Region r : regions) {
                if (r.getNomreg().equals(nomRegionSelected)) {
                    regionSelected = r;
                    break;
                }
            }
            grandcentres = metier.findAllGrandcentresD1Region(nomRegionSelected);
            for (Grandcentre grandcentre : grandcentres) {
                if (grandcentre.getNom().equals(nomSaisi) && grandcentre.getNiveau().equals(niveauSelected) && grandcentre.getType().equals(typeSelected) && grandcentre.getFamille().equals(titreFamilleSelected)) {
                    testSiGrandcentreExiste = true;
                    break;
                }
            }
            if (!testSiGrandcentreExiste) {
                try {
                    Famille famille =metier.findFamilleByTitre(titreFamilleSelected);
                    grandcentreCreated = new Grandcentre(nomSaisi.toUpperCase(), regionSelected, niveauSelected, typeSelected,famille);
                    metier.creerGrandcentre(grandcentreCreated);
                    JOptionPane.showMessageDialog(this, "Grand centre créé avec succès !");
                    //videFrame();
                    int i = 1;
                    grandcentres = metier.findAllGrandcentresD1Region(nomRegionSelected);
                    for (Grandcentre g : grandcentres) {
                        model.insertRow(model.getRowCount(), new Object[]{g.getIdgrandcent(), i++, g.getRegion().getNomreg(), g.getNom(),g.getFamille().getTitre(), g.getNiveau(), g.getType(), g.getVersion()});
                    }
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de créer le grand centre de nom [" + nomSaisi + "] \n raison:" + ex.getMessage());
                }
            }
            else JOptionPane.showMessageDialog(this, "Erreur, ce grand centre existe déjà.");
        } else {
            JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonCreerActionPerformed

    private void jButtonRechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRechercherActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        if (!nomSaisi.equals("")) {
            try {
                grandcentresRecherches = metier.findAllGrandcentresLikeName(nomSaisi.toUpperCase());
                int i = 1;
                for (Grandcentre g : grandcentresRecherches) {
                    model.insertRow(model.getRowCount(), new Object[]{g.getIdgrandcent(), i++, g.getRegion().getNomreg(), g.getNom(),g.getFamille().getTitre(), g.getNiveau(), g.getType(), g.getVersion()});
                }
            } catch (ObcbudgetException ex) {
                JOptionPane.showMessageDialog(this, "Impossible de trouver des grands centres de nom proche de [" + nomSaisi + "] \n raison:" + ex.getMessage());
            }
        } else {
            if (!nomRegionSelected.equals("---")) {
                try {
                    int i = 1;
                    grandcentres = metier.findAllGrandcentresD1Region(nomRegionSelected);
                    for (Grandcentre g : grandcentres) {
                        model.insertRow(model.getRowCount(), new Object[]{g.getIdgrandcent(), i++, g.getRegion().getNomreg(), g.getNom(),g.getFamille().getTitre(), g.getNiveau(), g.getType(), g.getVersion()});
                    }
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de trouver des grands centres dans la région [" + nomRegionSelected + "] \n raison:" + ex.getMessage());
                }

            } else {
                JOptionPane.showMessageDialog(this, "Le nom ou la région doit être fourni(e) !");
            }
        }
    }//GEN-LAST:event_jButtonRechercherActionPerformed

    private void jButtonModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier ce grand centre?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!nomSaisi.equals("") && !nomRegionSelected.equals("---") && !niveauSelected.equals("---") && !typeSelected.equals("---") && !titreFamilleSelected.equals("---")) {
                grandcentreCliked = metier.findGrandcentreById(idGrandcentreCliked);
                for (Region r : regions) {
                    if (r.getNomreg().equals(nomRegionSelected)) {
                        regionSelected = r;
                        break;
                    }
                }
                grandcentreCliked.setNom(nomSaisi.toUpperCase());
                grandcentreCliked.setRegion(regionSelected);
                
                Famille famille =metier.findFamilleByTitre(titreFamilleSelected);
                
                grandcentreCliked.setFamille(famille);
                grandcentreCliked.setNiveau(niveauSelected);
                grandcentreCliked.setType(typeSelected);
                try {
                    metier.modifierGrandcentre(grandcentreCliked);
                    JOptionPane.showMessageDialog(this, "Grand centre modifié avec succès !");
                    //videFrame();
                    int i = 1;
                    grandcentres = metier.findAllGrandcentresD1Region(nomRegionSelected);
                    for (Grandcentre g : grandcentres) {
                        model.insertRow(model.getRowCount(), new Object[]{g.getIdgrandcent(), i++, g.getRegion().getNomreg(), g.getNom(),g.getFamille().getTitre(), g.getNiveau(), g.getType(), g.getVersion()});
                    }
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de modifier le grand centre de nom [" + nomSaisi + "] \n raison:" + ex.getMessage());
                }

            } else {
                JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
            }
        }
        /*
        else if (result == JOptionPane.NO_OPTION){
            label.setText("You selected: No");
        }
         */
    }//GEN-LAST:event_jButtonModifierActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer ce grand centre?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!nomSaisi.equals("")) {
                try {
                    metier.supprimerGrandcentre(metier.findGrandcentreById(idGrandcentreCliked));
                    JOptionPane.showMessageDialog(this, "Grand Centre supprimé avec succès !");
                    int i = 1;
                    grandcentres = metier.findAllGrandcentresD1Region(nomRegionSelected);
                    for (Grandcentre g : grandcentres) {
                        model.insertRow(model.getRowCount(), new Object[]{g.getIdgrandcent(), i++, g.getRegion().getNomreg(), g.getNom(),g.getFamille().getTitre(), g.getNiveau(), g.getType(), g.getVersion()});
                    }
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer le grand centre de nom [" + nomSaisi + "] \n raison:" + ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, " Le champ nom est obligatoire !");
            }
        }
        /*
        else if (result == JOptionPane.NO_OPTION){
            label.setText("You selected: No");
        }
         */
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        videFrame();
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueGrandcentre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueGrandcentre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueGrandcentre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueGrandcentre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueGrandcentre().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonCreer;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonRechercher;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JComboBox<String> jComboBoxFamille;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxRegion;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelNom;
    private javax.swing.JLabel jLabelRegion;
    private javax.swing.JLabel jLabelType1;
    private javax.swing.JPanel jPanelExamens;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldNom;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Region> regions = null;
     private List<Famille> familles = null;
    private Region regionSelected = null;
    private String[] regionsCombo = null;
    private String[] niveauxCombo = null;
    private String[] typesCombo = null;
    private String[] famillesCombo = null;
    private String titreFamilleSelected = "";
    private Famille familleSelected = null;
    private String nomRegionSelected = "";
    private String niveauSelected = "";
    private String typeSelected = "";
    private String nomSaisi = "";
    private List<Grandcentre> grandcentresRecherches = null;
    private int idGrandcentreCliked = 0;
    private Grandcentre grandcentreCliked = null;
    private List<Grandcentre> grandcentres = null;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        regions = metier.findAllRegions();
        familles = metier.findAllFamilles();

        //on remplit la combobox des régions
        regionsCombo = new String[regions.size() + 1];
        regionsCombo[0] = "---";
        int i = 1;
        for (Region region : regions) {
            regionsCombo[i++] = region.getNomreg();
        }
        jComboBoxRegion.setModel(new DefaultComboBoxModel(regionsCombo));
        
        //on remplit la combobox des familles de séries
        famillesCombo = new String[familles.size() + 1];
        famillesCombo[0] = "---";
        int j = 1;
        for (Famille famille : familles) {
            famillesCombo[j++] = famille.getTitre();
        }
        jComboBoxFamille.setModel(new DefaultComboBoxModel(famillesCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "ESG", "ESTP", "TOUT"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC", "TOUT"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));
    }

    private void infoSaisies() {
        nomSaisi = jTextFieldNom.getText();
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        titreFamilleSelected=(String) jComboBoxFamille.getSelectedItem();
    }

    private void videFrame() {
        jTextFieldNom.setText("");
        jComboBoxRegion.setSelectedIndex(0);
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jComboBoxFamille.setSelectedIndex(0);
        model.setRowCount(0);//vide la jTable
    }
}
