package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Caisse;
import couche_jpa.Centrebilletage;
import couche_jpa.Examen;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Nature;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_jpa.Statistique;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueEtatFonctionnement1 extends javax.swing.JFrame {

    public VueEtatFonctionnement1() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButtonVisualiser = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonCreer = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonMettreAjour = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jLabelExamen = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT FONCTIONNEMENT 1 :");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel2.setText("(ACHAT PETIT MATERIEL)");

        jButtonVisualiser.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiser.setText("Visualiser l'état");
        jButtonVisualiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserActionPerformed(evt);
            }
        });

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jButtonAnnuler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonCreer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreer.setText("Créer");
        jButtonCreer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerActionPerformed(evt);
            }
        });

        jButtonSupprimer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jButtonMettreAjour.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjour.setText("Mettre à jour");
        jButtonMettreAjour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(204, 255, 0));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Groupe d'examens", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(390, 390, 390)
                .addComponent(jLabelSession)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(154, 415, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(193, 193, 193)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(jButtonCreer)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonMettreAjour)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonVisualiser)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSupprimer)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnuler)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(296, 296, 296)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(219, 219, 219)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(122, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonAnnuler, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonVisualiser, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonSupprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonMettreAjour, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCreer, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonFermer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVisualiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserActionPerformed
        infoSaisies();
        Map<Souscentre, Integer> souscentreMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
        Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
        Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
        List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session        
        ArrayList<String> typesBruts = new ArrayList<>();
        ArrayList<String> typesAconsiderer = new ArrayList<>();
        ArrayList<String> niveauxAconsiderer = new ArrayList<>();
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("INDEMNITE DE FONCTIONNEMENT 1 DES CENTRES ET SOUS-CENTRES");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected,niveauSelected,typeSelected);
            boolean continuer = false;
            for (Caisse c : caisses) {
                if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                    continuer = true;
                    break;
                }
            }
            if (!continuer) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de fonctionnement 1 n'ont pas encore été créés pour ce groupe d'examens !");
            } else {
                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                //recherche des statistiques par sous-centre
                for (Examen e : examensSelected) {
                    List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                    for (Statistique s : lesStats) {
                        if (souscentreMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                            int nbcand = souscentreMap.get(s.getSouscentre());//on récupère son nombre de candidats
                            souscentreMap.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                        } else {
                            souscentreMap.put(s.getSouscentre(), s.getNombre());
                        }
                    }
                    
                    //on détermine la liste des souscentre issus du rattachement
                    List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                    for (Nature n : lesNats) {
                        Souscentre unSouscentre = n.getSouscentre();
                        if (!souscentreList.contains(unSouscentre)) {
                            souscentreList.add(unSouscentre);
                        }
                    }
                    for (int j = 0; j < souscentreList.size(); j++) {
                        ArrayList<Character> phasesList = new ArrayList<>();
                        Souscentre s = souscentreList.get(j);
                        for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                            if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                if (!phasesList.contains(n.getActivite().getInitiale())) {
                                    phasesList.add(n.getActivite().getInitiale());
                                }
                                //pas de break ici car on doit parcourir tous lesNats
                            }
                        }
                        if (!souscentrePhasesMap.containsKey(s)) {
                            souscentrePhasesMap.put(s, phasesList);
                        } else {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                            ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                            for (int k = 0; k < phasesList.size(); k++) {
                                if (!phasesList1.contains(phasesList.get(k))) {
                                    phasesList1.add(phasesList.get(k));
                                }
                            }
                            Collections.sort(phasesList1);
                            souscentrePhasesMap.put(s, phasesList1);
                        }
                    }
                }                              
                               
                //recherche des types des examens à utiliser
                for (Examen examen : examensSelected) {
                    System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                    if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                        typesBruts.add("ESG");
                    }
                    if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                        typesBruts.add("ESTP");
                    }
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 2) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                //recherche des niveaux des examens à utiliser
                if (!niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add(niveauSelected);
                    niveauxAconsiderer.add("TOUT");
                }
                if (niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add("PROB");
                    niveauxAconsiderer.add("BACC");
                    niveauxAconsiderer.add("TOUT");
                }
                //recherche des centres de billetage et leurs souscentres
                for (String niveau : niveauxAconsiderer) {
                    for (String type : typesAconsiderer) {
                        List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                        for (Centrebilletage centrebilletage : desCentrebilletages) {
                            ArrayList<Souscentre> souscentresList = new ArrayList<>();
                            if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                for (Secteurcouv sect : secteurs) {
                                    if (!souscentresList.contains(sect.getSouscentre())) {
                                        souscentresList.add(sect.getSouscentre());
                                    }
                                }
                                centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                            }
                        }
                    }
                }
                try {
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    List<Region> regions=metier.findAllRegions();
                    for(Region region:regions){
                        for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                            if(region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())){
                                int num = 1;
                                int totalMontant = 0;
                                ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                for (int i = 0; i < souscentresList.size(); i++) {
                                    Souscentre souscentre = souscentresList.get(i);
                                    if (souscentreMap.containsKey(souscentre)) {
                                        int effectif=souscentreMap.get(souscentre);
                                        determinerCout(effectif);
                                        
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("examen", groupedexamensEnstring);
                                        row.put("session", anneeSelected);
                                        row.put("region", region.getNomreg());
                                        row.put("reference", "");
                                        row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                        row.put("num", num++);
                                        row.put("souscentre", souscentre.getNomsouscent());
                                        row.put("effectif", effectif);
                                        row.put("dotation", cout);
                                        row.put("netapercevoir", cout);
                                        row.put("baspage", "OBC/AR/"+centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                        totalMontant += cout;//jasperreport prendra la dernière valeur de cout
                                        row.put("totalNetEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                        datasource.add(row);
                                    }
                                }
                            }    
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatFonctionnement1Report.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                souscentreMap.clear();//on vide le hashmap
                examensSelected.clear();//on vide
                souscentreMap.clear();
                centrebilletageSouscentresMap.clear();
                typesBruts.clear();
                typesAconsiderer.clear();
                niveauxAconsiderer.clear();               
                souscentrePhasesMap.clear();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonVisualiserActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        videFrame();
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonCreerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerActionPerformed
        infoSaisies();
        Map<Souscentre, Integer> souscentreMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
        Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
        List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session 
        
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("INDEMNITE DE FONCTIONNEMENT 1 DES CENTRES ET SOUS-CENTRES");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected,niveauSelected,typeSelected);
            if (!caisses.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de fonctionnement 1 existent déjà pour ce groupe d'examens !");
            } else {
                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                
                //recherche des statistiques par sous-centre
                for (Examen e : examensSelected) {
                    List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                    for (Statistique s : lesStats) {
                        if (souscentreMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                            int nbcand = souscentreMap.get(s.getSouscentre());//on récupère son nombre de candidats
                            souscentreMap.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                        } else {
                            souscentreMap.put(s.getSouscentre(), s.getNombre());
                        }
                    }
                    
                    //on détermine la liste des souscentre issus du rattachement
                    List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                    for (Nature n : lesNats) {
                        Souscentre unSouscentre = n.getSouscentre();
                        if (!souscentreList.contains(unSouscentre)) {
                            souscentreList.add(unSouscentre);
                        }
                    }
                    for (int j = 0; j < souscentreList.size(); j++) {
                        ArrayList<Character> phasesList = new ArrayList<>();
                        Souscentre s = souscentreList.get(j);
                        for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                            if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                if (!phasesList.contains(n.getActivite().getInitiale())) {
                                    phasesList.add(n.getActivite().getInitiale());
                                }
                                //pas de break ici car on doit parcourir tous lesNats
                            }
                        }
                        if (!souscentrePhasesMap.containsKey(s)) {
                            souscentrePhasesMap.put(s, phasesList);
                        } else {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                            ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                            for (int k = 0; k < phasesList.size(); k++) {
                                if (!phasesList1.contains(phasesList.get(k))) {
                                    phasesList1.add(phasesList.get(k));
                                }
                            }
                            Collections.sort(phasesList1);
                            souscentrePhasesMap.put(s, phasesList1);
                        }
                    }                   
                }               
              
                boolean testsicreer = false;
                try {
                    for (Souscentre souscentre : souscentreMap.keySet()) {
                        int effectif = souscentreMap.get(souscentre);
                        determinerCout(effectif);
                        metier.creerCaisse(new Caisse(cout, 0,0,0, groupe, rubetat, sessionSelected, souscentre,false));
                        testsicreer = true;
                    }
                } catch (ObcbudgetException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                if (testsicreer) {
                    JOptionPane.showMessageDialog(this, "Etats de fonctionnement 1 créés avec succès pour ce groupe d'examens !");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
        }
        examensSelected.clear();
    }//GEN-LAST:event_jButtonCreerActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de fonctionnement 1 pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("INDEMNITE DE FONCTIONNEMENT 1 DES CENTRES ET SOUS-CENTRES");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected,niveauSelected,typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de fonctionnement 1 n'existe pour ce groupe d'examens !");
                } else {
                    boolean testsisupprimer = false;
                    try {
                        for (Caisse caisse : caisses) {
                            metier.supprimerCaisse(caisse);
                            testsisupprimer = true;
                        }
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testsisupprimer) {
                        JOptionPane.showMessageDialog(this, "Etats de fonctionnement 1 supprimés avec succès pour ce groupe d'examens !");
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jButtonMettreAjourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourActionPerformed
        infoSaisies();
        Map<Souscentre, Integer> souscentreMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
        Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
        List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session 
        
        int result = JOptionPane.showConfirmDialog(this,"Voulez-vous vraiment modifier les états de fonctionnement 1 pour ce groupe d'examens ?", "confirmation de modification",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if(result == JOptionPane.YES_OPTION){
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("INDEMNITE DE FONCTIONNEMENT 1 DES CENTRES ET SOUS-CENTRES");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected,niveauSelected,typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de fonctionnement 1 n'existe pour ce groupe d'examens !");
                } else {
                    //on conserve quelques info de ces anciennes caisses
                    Groupe groupe = caisses.get(0).getGroupe();
                    sessionSelected = caisses.get(0).getSession();
                    //on supprime toutes les anciennes caisses du groupe d'examens
                    for (Caisse c : caisses) {
                        metier.supprimerCaisse(c);
                    }

                    //on va les recréer
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }

                    //recherche des statistiques par sous-centre
                    for (Examen e : examensSelected) {
                        List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                        for (Statistique s : lesStats) {
                            if (souscentreMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                int nbcand = souscentreMap.get(s.getSouscentre());//on récupère son nombre de candidats
                                souscentreMap.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                            } else {
                                souscentreMap.put(s.getSouscentre(), s.getNombre());
                            }
                        }
                        
                        //on détermine la liste des souscentre issus du rattachement
                        List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                        for (Nature n : lesNats) {
                            Souscentre unSouscentre = n.getSouscentre();
                            if (!souscentreList.contains(unSouscentre)) {
                                souscentreList.add(unSouscentre);
                            }
                        }
                        for (int j = 0; j < souscentreList.size(); j++) {
                            ArrayList<Character> phasesList = new ArrayList<>();
                            Souscentre s = souscentreList.get(j);
                            for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                    if (!phasesList.contains(n.getActivite().getInitiale())) {
                                        phasesList.add(n.getActivite().getInitiale());
                                    }
                                    //pas de break ici car on doit parcourir tous lesNats
                                }
                            }
                            if (!souscentrePhasesMap.containsKey(s)) {
                                souscentrePhasesMap.put(s, phasesList);
                            } else {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                for (int k = 0; k < phasesList.size(); k++) {
                                    if (!phasesList1.contains(phasesList.get(k))) {
                                        phasesList1.add(phasesList.get(k));
                                    }
                                }
                                Collections.sort(phasesList1);
                                souscentrePhasesMap.put(s, phasesList1);
                            }
                        }  
                    }
                                    
                    boolean testsicreer = false;
                    try {
                        for (Souscentre souscentre : souscentreMap.keySet()) {
                            int effectif = souscentreMap.get(souscentre);
                            determinerCout(effectif);
                            metier.creerCaisse(new Caisse(cout, 0,0,0, groupe, rubetat, sessionSelected, souscentre,false));
                            testsicreer = true;
                        }
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testsicreer) {
                        JOptionPane.showMessageDialog(this, "Etats de fonctionnement 1 mis à jour avec succès pour ce groupe d'examens !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
            }
            examensSelected.clear();
        }    
    }//GEN-LAST:event_jButtonMettreAjourActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatFonctionnement1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatFonctionnement1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatFonctionnement1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatFonctionnement1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatFonctionnement1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonCreer;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonMettreAjour;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JButton jButtonVisualiser;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Examen> examens = null;
    private List<Examen> examensSelected = new ArrayList<Examen>();
    private String[] examensList = null;
    private String[] sessionsCombo = null;
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private int cout = 0;
    private String phase = "ECRIT";
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private List<Caisse> caisses = null;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        examens = metier.findAllExamens();

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int i = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[i++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "GEN", "IND", "IND PROF", "STT", "STT PROF", "TOUT", "TOUT ESTI", "TOUT STT", "TOUT ESTP"};//TOUT=tous les types; TOUT ESTI=INDUSTRIEL+INDUSTRIEL PROFESSIONNEL; TOUT STT=STT+STT PROFESSIONNEL; TOUT ESTP=TOUT SAUF ESG
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC", "TOUT"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

    }

    private void infoSaisies() {
        anneeString = (String) jComboBoxSession.getSelectedItem();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
    }

    private void videFrame() {
        jComboBoxSession.setSelectedIndex(0);
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
    }

    private void determinerCout(int nbcand) {
        if (nbcand >=0 && nbcand <= 100) {
            cout = 20000;
        }
        if (nbcand > 100 && nbcand <= 200) {
            cout = 35000;
        }
        if (nbcand > 200 && nbcand <= 300) {
            cout = 40000;
        }
        if (nbcand > 300 && nbcand <= 400) {
            cout = 45000;
        }
        if (nbcand > 400 && nbcand <= 500) {
            cout = 50000;
        }
        if (nbcand > 500 && nbcand <= 600) {
            cout = 55000;
        }
        if (nbcand > 600 && nbcand <= 700) {
            cout = 60000;
        }
        if (nbcand > 700 && nbcand <= 800) {
            cout = 65000;
        }
        if (nbcand > 800 && nbcand <= 900) {
            cout = 70000;
        }
        if (nbcand > 900 && nbcand <= 1000) {
            cout = 75000;
        }
        if (nbcand > 1000 && nbcand <= 1100) {
            cout = 80000;
        }
        if (nbcand > 1100 && nbcand <= 1200) {
            cout = 85000;
        }
        if (nbcand > 1200 && nbcand <= 1300) {
            cout = 90000;
        }
        if (nbcand > 1300 && nbcand <= 1400) {
            cout = 95000;
        }
        if (nbcand > 1400 && nbcand <= 1500) {
            cout = 100000;
        }
        if (nbcand > 1500 && nbcand <= 1600) {
            cout = 105000;
        }
        if (nbcand > 1600 && nbcand <= 1700) {
            cout = 110000;
        }
        if (nbcand > 1700 && nbcand <= 1800) {
            cout = 115000;
        }
        if (nbcand > 1800 && nbcand <= 1900) {
            cout = 120000;
        }
        if (nbcand > 1900 && nbcand <= 2000) {
            cout = 125000;
        }
        if (nbcand > 2000 && nbcand <= 2100) {
            cout = 130000;
        }
        if (nbcand > 2100) {
            cout = 135000;
        }
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }
}
