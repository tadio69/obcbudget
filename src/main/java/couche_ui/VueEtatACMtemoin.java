package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Activite;
import couche_jpa.Arrondissement;
import couche_jpa.Caisse;
import couche_jpa.Centre;
import couche_jpa.Centrebilletage;
import couche_jpa.Departement;
import couche_jpa.Eltacmtemoin;
import couche_jpa.Examen;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Intervenant;
import couche_jpa.Personnel;
import couche_jpa.Qualite;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueEtatACMtemoin extends javax.swing.JFrame {

    public VueEtatACMtemoin() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButtonFermer = new javax.swing.JButton();
        jPanelExaminateurs = new javax.swing.JPanel();
        jComboBoxDepartementListe = new javax.swing.JComboBox<>();
        jLabelDepartementListe = new javax.swing.JLabel();
        jLabelResponsable = new javax.swing.JLabel();
        jComboBoxArrondissementListe = new javax.swing.JComboBox<>();
        jComboBoxNomsEtPrenoms = new javax.swing.JComboBox<>();
        jLabelArrondissementListe = new javax.swing.JLabel();
        jComboBoxRegionListe = new javax.swing.JComboBox<>();
        jLabelRegionListe = new javax.swing.JLabel();
        jButtonSupprimerPersonnel = new javax.swing.JButton();
        jButtonAnnulerPersonnel = new javax.swing.JButton();
        jButtonCreerPersonnel = new javax.swing.JButton();
        jButtonListerPersonnels = new javax.swing.JButton();
        jPanelValeur = new javax.swing.JPanel();
        jLabeCout = new javax.swing.JLabel();
        jComboBoxCout = new javax.swing.JComboBox<>();
        jLabelTypeTransport = new javax.swing.JLabel();
        jComboBoxTypeTransport = new javax.swing.JComboBox<>();
        jPanelChoixExamen = new javax.swing.JPanel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixExamen = new javax.swing.JButton();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelExamen = new javax.swing.JLabel();
        jPanelChoixSouscentre = new javax.swing.JPanel();
        jComboBoxRegionCentreDestination = new javax.swing.JComboBox<>();
        jLabelRegionCentreDestination = new javax.swing.JLabel();
        jButtonAnnulerChoixCentreDestination = new javax.swing.JButton();
        jLabelDestination = new javax.swing.JLabel();
        jComboBoxDestination = new javax.swing.JComboBox<>();
        jPanelGestionEtat = new javax.swing.JPanel();
        jButtonCreerEtats = new javax.swing.JButton();
        jButtonMettreAjourEtats = new javax.swing.JButton();
        jButtonVisualiserEtats = new javax.swing.JButton();
        jButtonSupprimerEtats = new javax.swing.JButton();
        jPanelChoixSouscentre1 = new javax.swing.JPanel();
        jLabelCentreTemoin = new javax.swing.JLabel();
        jComboBoxCentreTemoin = new javax.swing.JComboBox<>();
        jComboBoxRegionCentreTemoin = new javax.swing.JComboBox<>();
        jLabelRegionCentreTemoin = new javax.swing.JLabel();
        jButtonAnnulerChoixCentreTemoin = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT DES ACM DES CENTRES TEMOINS");

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jPanelExaminateurs.setBackground(new java.awt.Color(255, 204, 0));
        jPanelExaminateurs.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer la liste des ACM des centres temoins", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jComboBoxDepartementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartementListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementListeActionPerformed(evt);
            }
        });

        jLabelDepartementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartementListe.setText("Département :");

        jLabelResponsable.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelResponsable.setText("Noms et prénoms :");

        jComboBoxArrondissementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissementListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementListeActionPerformed(evt);
            }
        });

        jComboBoxNomsEtPrenoms.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxNomsEtPrenoms.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxNomsEtPrenoms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNomsEtPrenomsActionPerformed(evt);
            }
        });

        jLabelArrondissementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissementListe.setText("Arrondissement :");

        jComboBoxRegionListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegionListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionListeActionPerformed(evt);
            }
        });

        jLabelRegionListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegionListe.setText("Région :");

        jButtonSupprimerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerPersonnel.setText("Supprimer");
        jButtonSupprimerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerPersonnelActionPerformed(evt);
            }
        });

        jButtonAnnulerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerPersonnel.setText("Annuler");
        jButtonAnnulerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerPersonnelActionPerformed(evt);
            }
        });

        jButtonCreerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerPersonnel.setText("Créer");
        jButtonCreerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerPersonnelActionPerformed(evt);
            }
        });

        jButtonListerPersonnels.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonListerPersonnels.setText("Lister");
        jButtonListerPersonnels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerPersonnelsActionPerformed(evt);
            }
        });

        jPanelValeur.setBackground(new java.awt.Color(204, 255, 102));
        jPanelValeur.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Type et coût de tranport", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanelValeur.setEnabled(false);

        jLabeCout.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabeCout.setText("Coût :");

        jComboBoxCout.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxCout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCoutActionPerformed(evt);
            }
        });

        jLabelTypeTransport.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelTypeTransport.setText("Type transport :");

        jComboBoxTypeTransport.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanelValeurLayout = new javax.swing.GroupLayout(jPanelValeur);
        jPanelValeur.setLayout(jPanelValeurLayout);
        jPanelValeurLayout.setHorizontalGroup(
            jPanelValeurLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelValeurLayout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(jPanelValeurLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabeCout)
                    .addComponent(jLabelTypeTransport))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelValeurLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxCout, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxTypeTransport, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11))
        );
        jPanelValeurLayout.setVerticalGroup(
            jPanelValeurLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelValeurLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanelValeurLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxTypeTransport, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTypeTransport, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelValeurLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabeCout, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxCout, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelExaminateursLayout = new javax.swing.GroupLayout(jPanelExaminateurs);
        jPanelExaminateurs.setLayout(jPanelExaminateursLayout);
        jPanelExaminateursLayout.setHorizontalGroup(
            jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelDepartementListe)
                    .addComponent(jLabelRegionListe))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBoxRegionListe, 0, 238, Short.MAX_VALUE)
                    .addComponent(jComboBoxDepartementListe, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                        .addComponent(jButtonCreerPersonnel)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSupprimerPersonnel)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnulerPersonnel)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonListerPersonnels))
                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelArrondissementListe)
                            .addComponent(jLabelResponsable))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxNomsEtPrenoms, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(10, 10, 10)
                .addComponent(jPanelValeur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelExaminateursLayout.setVerticalGroup(
            jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelExaminateursLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelValeur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jComboBoxRegionListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBoxArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabelRegionListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelDepartementListe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jComboBoxDepartementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelResponsable, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBoxNomsEtPrenoms, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButtonAnnulerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonSupprimerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonListerPersonnels, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButtonCreerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(1, 1, 1))
        );

        jPanelChoixExamen.setBackground(new java.awt.Color(102, 255, 153));
        jPanelChoixExamen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un groupe d'examens et une session", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixExamen.setText("Annuler");
        jButtonAnnulerChoixExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixExamenActionPerformed(evt);
            }
        });

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        javax.swing.GroupLayout jPanelChoixExamenLayout = new javax.swing.GroupLayout(jPanelChoixExamen);
        jPanelChoixExamen.setLayout(jPanelChoixExamenLayout);
        jPanelChoixExamenLayout.setHorizontalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(0, 10, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabelSession)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(jButtonAnnulerChoixExamen)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixExamenLayout.setVerticalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        jPanelChoixSouscentre.setBackground(new java.awt.Color(255, 255, 0));
        jPanelChoixSouscentre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un centre de destination", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jComboBoxRegionCentreDestination.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegionCentreDestination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionCentreDestinationActionPerformed(evt);
            }
        });

        jLabelRegionCentreDestination.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegionCentreDestination.setText("Région :");

        jButtonAnnulerChoixCentreDestination.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixCentreDestination.setText("Annuler");
        jButtonAnnulerChoixCentreDestination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixCentreDestinationActionPerformed(evt);
            }
        });

        jLabelDestination.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDestination.setText("Destination :");

        jComboBoxDestination.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDestination.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxDestination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDestinationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixSouscentreLayout = new javax.swing.GroupLayout(jPanelChoixSouscentre);
        jPanelChoixSouscentre.setLayout(jPanelChoixSouscentreLayout);
        jPanelChoixSouscentreLayout.setHorizontalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelDestination)
                    .addComponent(jLabelRegionCentreDestination))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addComponent(jComboBoxRegionCentreDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(jButtonAnnulerChoixCentreDestination)
                        .addGap(19, 19, 19))
                    .addComponent(jComboBoxDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanelChoixSouscentreLayout.setVerticalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxRegionCentreDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonAnnulerChoixCentreDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelRegionCentreDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanelGestionEtat.setBackground(new java.awt.Color(0, 255, 255));
        jPanelGestionEtat.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer l'état", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 102, 255))); // NOI18N

        jButtonCreerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEtats.setText("Créer");
        jButtonCreerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEtatsActionPerformed(evt);
            }
        });

        jButtonMettreAjourEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjourEtats.setText("Mettre à jour");
        jButtonMettreAjourEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourEtatsActionPerformed(evt);
            }
        });

        jButtonVisualiserEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserEtats.setText("Visualiser");
        jButtonVisualiserEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserEtatsActionPerformed(evt);
            }
        });

        jButtonSupprimerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEtats.setText("Supprimer");
        jButtonSupprimerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEtatsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelGestionEtatLayout = new javax.swing.GroupLayout(jPanelGestionEtat);
        jPanelGestionEtat.setLayout(jPanelGestionEtatLayout);
        jPanelGestionEtatLayout.setHorizontalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jButtonCreerEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonMettreAjourEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiserEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerEtats)
                .addContainerGap(57, Short.MAX_VALUE))
        );
        jPanelGestionEtatLayout.setVerticalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonMettreAjourEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCreerEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonSupprimerEtats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVisualiserEtats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelChoixSouscentre1.setBackground(new java.awt.Color(204, 255, 0));
        jPanelChoixSouscentre1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un centre temoin", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jLabelCentreTemoin.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelCentreTemoin.setText("Centre temoin :");

        jComboBoxCentreTemoin.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxCentreTemoin.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxCentreTemoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCentreTemoinActionPerformed(evt);
            }
        });

        jComboBoxRegionCentreTemoin.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegionCentreTemoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionCentreTemoinActionPerformed(evt);
            }
        });

        jLabelRegionCentreTemoin.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegionCentreTemoin.setText("Région :");

        jButtonAnnulerChoixCentreTemoin.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixCentreTemoin.setText("Annuler");
        jButtonAnnulerChoixCentreTemoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixCentreTemoinActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixSouscentre1Layout = new javax.swing.GroupLayout(jPanelChoixSouscentre1);
        jPanelChoixSouscentre1.setLayout(jPanelChoixSouscentre1Layout);
        jPanelChoixSouscentre1Layout.setHorizontalGroup(
            jPanelChoixSouscentre1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentre1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanelChoixSouscentre1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelCentreTemoin)
                    .addComponent(jLabelRegionCentreTemoin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixSouscentre1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelChoixSouscentre1Layout.createSequentialGroup()
                        .addComponent(jComboBoxRegionCentreTemoin, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jButtonAnnulerChoixCentreTemoin)
                        .addGap(19, 19, 19))
                    .addComponent(jComboBoxCentreTemoin, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanelChoixSouscentre1Layout.setVerticalGroup(
            jPanelChoixSouscentre1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentre1Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanelChoixSouscentre1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixSouscentre1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxRegionCentreTemoin, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonAnnulerChoixCentreTemoin, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelRegionCentreTemoin, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentre1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCentreTemoin, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxCentreTemoin, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(86, 86, 86)
                                .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanelChoixSouscentre1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(351, 351, 351)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(381, 381, 381)
                                .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(jButtonFermer)))
                        .addGap(0, 75, Short.MAX_VALUE))
                    .addComponent(jPanelExaminateurs, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelChoixSouscentre1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelExaminateurs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVisualiserEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserEtatsActionPerformed
        infoSaisies();
        Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
        ArrayList<String> typesBruts = new ArrayList<>();
        ArrayList<String> typesAconsiderer = new ArrayList<>();
        ArrayList<String> niveauxAconsiderer = new ArrayList<>();
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE ACM CENTRES TEMOINS");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);

            boolean continuer = false;
            for (Caisse c : caisses) {
                if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                    continuer = true;
                    break;
                }
            }
            if (!continuer) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de prise en charge des ACM des centres temoins n'ont pas encore été créés pour ce groupe d'examens !");
            } else {
                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                //recherche des types des examens à utiliser
                for (Examen examen : examensSelected) {
                    System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                    if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                        typesBruts.add("ESG");
                    }
                    if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                        typesBruts.add("ESTP");
                    }
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 2) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                //recherche des niveaux des examens à utiliser
                if (!niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add(niveauSelected);
                    niveauxAconsiderer.add("TOUT");
                }
                if (niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add("PROB");
                    niveauxAconsiderer.add("BACC");
                    niveauxAconsiderer.add("TOUT");
                }
                //recherche des centres de billetage
                for (String niveau : niveauxAconsiderer) {
                    for (String type : typesAconsiderer) {
                        List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                        for (Centrebilletage centrebilletage : desCentrebilletages) {
                            ArrayList<Souscentre> souscentresList = new ArrayList<>();
                            if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                for (Secteurcouv sect : secteurs) {
                                    if (!souscentresList.contains(sect.getSouscentre())) {
                                        souscentresList.add(sect.getSouscentre());
                                    }
                                }
                                centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                            }
                        }
                    }
                }
                
                intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION AUXILIAIRE");
                eltacmtemoins = metier.findAllEltacmtemoinsD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                if (!intervenants.isEmpty()) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    int num = 1;
                                    int totalMontant = 0;
                                    ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                    for (int i = 0; i < souscentresList.size(); i++) {
                                        Souscentre souscentre = souscentresList.get(i);
                                        for (Intervenant acm : intervenants) {
                                            Eltacmtemoin sonEltacmtemoin = null;
                                            int complement = 40000;
                                            int convoyage = 0;
                                            int net = 0;
                                            if (acm.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                                for (Eltacmtemoin elt : eltacmtemoins) {
                                                    if (Objects.equals(elt.getIntervenant().getIdinterv(), acm.getIdinterv())) {
                                                        sonEltacmtemoin = elt;
                                                        break;
                                                    }
                                                }
                                                convoyage = sonEltacmtemoin.getFraisconv();
                                                net = complement + convoyage;
                   
                                                Map<String, Object> row = new HashMap<>();
                                                row.put("examen", groupedexamensEnstring);
                                                row.put("session", anneeSelected);             
                                                row.put("region", region.getNomreg());
                                                row.put("reference", "");
                                                row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                row.put("num", num++);
                                                row.put("centretemoin", souscentre.getNomsouscent());
                                                row.put("acm", acm.getPersonnel().getNompers() + " " + acm.getPersonnel().getPrenom());
                                                row.put("provenance", acm.getPersonnel().getStructure());
                                                row.put("destination",sonEltacmtemoin.getCentre().getEtablissement().getAbreviation() );
                                                row.put("complement", complement);
                                                row.put("fraisconv", convoyage);
                                                row.put("baspage", "OBC/AR/"+centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                row.put("net", net);
                                                totalMontant += net;
                                                row.put("totalAvanceEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                datasource.add(row);
                                                break;
                                            }
                                        }

                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatACMcentrestemoinsReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Aucun ACM des centres temoins trouvé dans la base de données !");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonVisualiserEtatsActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonCreerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEtatsActionPerformed
        infoSaisies();
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE ACM CENTRES TEMOINS");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
            if (!caisses.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de prise en charge des ACM des centres temoins existent déjà pour ce groupe d'examens !");
            } else {
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
               
                intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION AUXILIAIRE");
                eltacmtemoins = metier.findAllEltacmtemoinsD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                boolean testSicreer = false;
                if (!intervenants.isEmpty()) {
                    try {
                        for (Intervenant intervenant : intervenants) {
                            Eltacmtemoin sonEltacmtemoin = null;
                            for (Eltacmtemoin elt : eltacmtemoins) {
                                if (Objects.equals(elt.getIntervenant().getIdinterv(), intervenant.getIdinterv())) {
                                    sonEltacmtemoin = elt;
                                    break;
                                }
                            }
                            int net = 40000 + sonEltacmtemoin.getFraisconv();
                            metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, intervenant.getSouscentre(),false));
                            testSicreer = true;
                        }
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testSicreer) {
                        JOptionPane.showMessageDialog(this, "Etats de prise en charge des ACM des centres temoins créés avec succès pour ce groupe d'examens !");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Aucun ACM des centres temoins trouvé dans la base de données !");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonCreerEtatsActionPerformed

    private void jButtonMettreAjourEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourEtatsActionPerformed
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de prise en charge des ACM des centres temoins pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE ACM CENTRES TEMOINS");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de prise en charge des ACM des centres temoins n'existe pour ce groupe d'examens !");
                } else {
                    //on conserve quelques info de ces anciennes caisses
                    Groupe groupe = caisses.get(0).getGroupe();
                    sessionSelected = caisses.get(0).getSession();
                    //on supprime toutes les anciennes caisses du groupe d'examens ainsi que les intervsec
                    for (Caisse c : caisses) {
                        metier.supprimerCaisse(c);
                    }

                    intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION AUXILIAIRE");
                    eltacmtemoins = metier.findAllEltacmtemoinsD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    boolean testSimodifier = false;
                    if (!intervenants.isEmpty()) {
                        try {
                            for (Intervenant intervenant : intervenants) {
                                Eltacmtemoin sonEltacmtemoin = null;
                                for (Eltacmtemoin elt : eltacmtemoins) {
                                    if (Objects.equals(elt.getIntervenant().getIdinterv(), intervenant.getIdinterv())) {
                                        sonEltacmtemoin = elt;
                                        break;
                                    }
                                }
                                int net = 40000 + sonEltacmtemoin.getFraisconv();
                                metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, intervenant.getSouscentre(),false));
                                testSimodifier = true;
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testSimodifier) {
                            JOptionPane.showMessageDialog(this, "Etats de prise en charge des ACM des centres temoins modifiés avec succès pour ce groupe d'examens !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun ACM des centres temoins trouvé dans la base de données !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
            }
        }
    }//GEN-LAST:event_jButtonMettreAjourEtatsActionPerformed

    private void jButtonSupprimerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEtatsActionPerformed
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de prise en charge des ACM des centres temoins  pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE ACM CENTRES TEMOINS");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de prise en charge des ACM des centres temoins n'existe pour ce groupe d'examens !");
                } else {
                    try {
                        for (Caisse caisse : caisses) {
                            metier.supprimerCaisse(caisse);
                        }
                        JOptionPane.showMessageDialog(this, "Etats de prise en charge des ACM des centres temoins supprimés avec succès pour ce groupe d'examens !");
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerEtatsActionPerformed

    private void jComboBoxRegionCentreDestinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionCentreDestinationActionPerformed
        remplirCentredestinationCombobox();
    }//GEN-LAST:event_jComboBoxRegionCentreDestinationActionPerformed

    private void jComboBoxDepartementListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementListeActionPerformed
        remplirArrondissementListeCombobox();
        remplirPersonnelsDuDepartementCombobox();
    }//GEN-LAST:event_jComboBoxDepartementListeActionPerformed

    private void jComboBoxArrondissementListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementListeActionPerformed
        remplirPersonnelsDelArrondissementCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementListeActionPerformed

    private void jComboBoxNomsEtPrenomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNomsEtPrenomsActionPerformed
        nomsEtPrenomsSelected = (String) jComboBoxNomsEtPrenoms.getSelectedItem();
        if (!nomsEtPrenomsSelected.equals("---")) {
            for (Personnel p : personnels) {
                if ((p.getNompers() + " " + p.getPrenom()).equals(nomsEtPrenomsSelected)) {
                    personnelSelected = p;
                    break;
                }
            }
        }
    }//GEN-LAST:event_jComboBoxNomsEtPrenomsActionPerformed

    private void jComboBoxRegionListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionListeActionPerformed
        remplirDepartementListeCombobox();
    }//GEN-LAST:event_jComboBoxRegionListeActionPerformed

    private void jButtonSupprimerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerPersonnelActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomCentretemoinSelected.equals("---") || nomsEtPrenomsSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre et un personnel !");
        } else {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer ce chargé de mission auxiliaire du centre temoin [" + nomCentretemoinSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                anneeSelected = Integer.parseInt(anneeString);
                try {
                    Souscentre souscentre = metier.findSouscentreByEtablissement(centretemoinSelected.getEtablissement().getAbreviation());
                    Intervenant cm = metier.findIntervenantByNomEtPrenomD1GroupeDexamensD1SessionD1SouscentreD1ActiviteEt1Qualite(personnelSelected.getNompers(), personnelSelected.getPrenom(), anneeSelected, souscentre.getNomsouscent(), niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION AUXILIAIRE");
                    metier.supprimerIntervenant(cm);// cette suppression supprimera aussi eltacmtemoin associé
                    JOptionPane.showMessageDialog(this, "Chargé de mission auxiliaire supprimé avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer ce chargé de mission auxiliaire du centre temoin [" + nomCentretemoinSelected + "] \n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerPersonnelActionPerformed

    private void jButtonAnnulerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerPersonnelActionPerformed
        jComboBoxRegionListe.setSelectedIndex(0);
        jComboBoxDepartementListe.setSelectedIndex(0);
        jComboBoxArrondissementListe.setSelectedIndex(0);
        jComboBoxNomsEtPrenoms.setSelectedIndex(0);
        jComboBoxTypeTransport.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerPersonnelActionPerformed

    private void jButtonCreerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerPersonnelActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomCentretemoinSelected.equals("---") || nomCentredestinationSelected.equals("---") || nomsEtPrenomsSelected.equals("---") || typeTransportSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un centre temoin, un centre de destination, un personnel et un type de transport !");
        } else {
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            anneeSelected = Integer.parseInt(anneeString);
            Intervenant intervenantCreated = null;
            boolean testSiCreerIntervenant = false;
            boolean testSiCreerEltacmtemoin = false;
            for (Session s : sessions) {
                if (s.getAnnee() == anneeSelected) {
                    sessionSelected = s;
                    break;
                }
            }
            for (Centre centre : centresTemoins) {
                if (centre.getNomcent().equals(nomCentretemoinSelected)) {
                    centretemoinSelected = centre;
                    break;
                }
            }

            try {
                //personnelSelected est déterminé au moment du clic sur la jcombox
                Activite activite = metier.findActiviteByNom(phase);
                Qualite qualite = metier.findQualiteByTitre("CHARGÉ DE MISSION AUXILIAIRE");
                boolean resident = false;//tous sont considérés comme non résidents. c'est le frais de transport qui les différencie
                Souscentre souscentre = metier.findSouscentreByEtablissement(centretemoinSelected.getEtablissement().getAbreviation());//l'intervenant est créé dans le sous-centre correspondant au centre
                intervenantCreated = new Intervenant(groupe, sessionSelected, personnelSelected, souscentre, activite, qualite, resident);
                metier.creerIntervenant(intervenantCreated);
                testSiCreerIntervenant = true;
            } catch (ObcbudgetException ex) {
                testSiCreerIntervenant = false;
            }
            if (testSiCreerIntervenant) {
                try {
                    fraisconv = Integer.parseInt(fraisconvString);
                    metier.creerEltacmtemoin(new Eltacmtemoin(intervenantCreated, centredestinationSelected, fraisconv));
                    testSiCreerEltacmtemoin = true;
                } catch (ObcbudgetException ex) {
                    testSiCreerEltacmtemoin = false;
                }
            }
            if (!testSiCreerEltacmtemoin) {
                JOptionPane.showMessageDialog(this, "Impossible de créer le chargé de mission auxiliaire pour le centre temoin [" + nomCentretemoinSelected + "]");
            } else {
                JOptionPane.showMessageDialog(this, "Chargé de mission auxiliaire créé avec succès !");
            }
        }
    }//GEN-LAST:event_jButtonCreerPersonnelActionPerformed

    private void jButtonListerPersonnelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerPersonnelsActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens et une session !");
        } else {
            anneeSelected = Integer.parseInt(anneeString);
            intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION AUXILIAIRE");
            eltacmtemoins = metier.findAllEltacmtemoinsD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
            if (!intervenants.isEmpty()) {
                try {
                    List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                    for (Region region : regions) {
                        int i = 1;
                        for (Intervenant intervenant : intervenants) {
                            Eltacmtemoin sonEltacmtemoin = null;
                            if (intervenant.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                                for (Eltacmtemoin elt : eltacmtemoins) {
                                    if (Objects.equals(elt.getIntervenant().getIdinterv(), intervenant.getIdinterv())) {
                                        sonEltacmtemoin = elt;
                                        break;
                                    }
                                }
                                Map<String, Object> row = new HashMap<>();
                                row.put("session", anneeSelected);
                                row.put("examen", groupedexamensEnstring);
                                row.put("region", region.getNomreg());
                                row.put("num", i++);
                                row.put("centre", intervenant.getSouscentre().getNomsouscent());
                                row.put("acm", intervenant.getPersonnel().getNompers() + " " + intervenant.getPersonnel().getPrenom());
                                row.put("destination", sonEltacmtemoin.getCentre().getNomcent());
                                row.put("fraisconv", sonEltacmtemoin.getFraisconv());
                                datasource.add(row);
                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeACMtemoinsReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Aucun ACM trouvé dans la base de données !");
            }
        }
        intervenants.clear();
    }//GEN-LAST:event_jButtonListerPersonnelsActionPerformed

    private void jButtonAnnulerChoixExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixExamenActionPerformed
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        jComboBoxSession.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixExamenActionPerformed

    private void jButtonAnnulerChoixCentreDestinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixCentreDestinationActionPerformed
        jComboBoxRegionCentreDestination.setSelectedIndex(0);
        jComboBoxDestination.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixCentreDestinationActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jComboBoxDestinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDestinationActionPerformed
        nomCentredestinationSelected = (String) jComboBoxDestination.getSelectedItem();
        if (!nomCentredestinationSelected.equals("---")) {
            centredestinationSelected = metier.findCentreByNom(nomCentredestinationSelected);
        }
    }//GEN-LAST:event_jComboBoxDestinationActionPerformed

    private void jComboBoxCentreTemoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCentreTemoinActionPerformed
        nomCentretemoinSelected = (String) jComboBoxCentreTemoin.getSelectedItem();
        if (!nomCentretemoinSelected.equals("---")) {
            centretemoinSelected = metier.findCentreByNom(nomCentretemoinSelected);
        }
    }//GEN-LAST:event_jComboBoxCentreTemoinActionPerformed

    private void jComboBoxRegionCentreTemoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionCentreTemoinActionPerformed
        remplirCentretemoinCombobox();
    }//GEN-LAST:event_jComboBoxRegionCentreTemoinActionPerformed

    private void jButtonAnnulerChoixCentreTemoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixCentreTemoinActionPerformed
        jComboBoxRegionCentreTemoin.setSelectedIndex(0);
        jComboBoxCentreTemoin.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixCentreTemoinActionPerformed

    private void jComboBoxCoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCoutActionPerformed
        fraisconvString=(String) jComboBoxCout.getSelectedItem();
        typeTransportSelected=(String) jComboBoxTypeTransport.getSelectedItem();
        if(typeTransportSelected.equals("URBAIN") && !fraisconvString.equals("3000")){
            JOptionPane.showMessageDialog(this, "Veuillez recommencer svp. En transport urbain le coût est de 3 000 F seulement. !");
            jComboBoxCout.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jComboBoxCoutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatACMtemoin.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatACMtemoin.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatACMtemoin.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatACMtemoin.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatACMtemoin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonAnnulerChoixCentreDestination;
    private javax.swing.JButton jButtonAnnulerChoixCentreTemoin;
    private javax.swing.JButton jButtonAnnulerChoixExamen;
    private javax.swing.JButton jButtonAnnulerPersonnel;
    private javax.swing.JButton jButtonCreerEtats;
    private javax.swing.JButton jButtonCreerPersonnel;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonListerPersonnels;
    private javax.swing.JButton jButtonMettreAjourEtats;
    private javax.swing.JButton jButtonSupprimerEtats;
    private javax.swing.JButton jButtonSupprimerPersonnel;
    private javax.swing.JButton jButtonVisualiserEtats;
    private javax.swing.JComboBox<String> jComboBoxArrondissementListe;
    private javax.swing.JComboBox<String> jComboBoxCentreTemoin;
    private javax.swing.JComboBox<String> jComboBoxCout;
    private javax.swing.JComboBox<String> jComboBoxDepartementListe;
    private javax.swing.JComboBox<String> jComboBoxDestination;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxNomsEtPrenoms;
    private javax.swing.JComboBox<String> jComboBoxRegionCentreDestination;
    private javax.swing.JComboBox<String> jComboBoxRegionCentreTemoin;
    private javax.swing.JComboBox<String> jComboBoxRegionListe;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JComboBox<String> jComboBoxTypeTransport;
    private javax.swing.JLabel jLabeCout;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelArrondissementListe;
    private javax.swing.JLabel jLabelCentreTemoin;
    private javax.swing.JLabel jLabelDepartementListe;
    private javax.swing.JLabel jLabelDestination;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelRegionCentreDestination;
    private javax.swing.JLabel jLabelRegionCentreTemoin;
    private javax.swing.JLabel jLabelRegionListe;
    private javax.swing.JLabel jLabelResponsable;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JLabel jLabelTypeTransport;
    private javax.swing.JPanel jPanelChoixExamen;
    private javax.swing.JPanel jPanelChoixSouscentre;
    private javax.swing.JPanel jPanelChoixSouscentre1;
    private javax.swing.JPanel jPanelExaminateurs;
    private javax.swing.JPanel jPanelGestionEtat;
    private javax.swing.JPanel jPanelValeur;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Region> regions = null;
    private List<Examen> examens = null;
    private Examen examenSelected = null;
    private String[] examensList = null;
    private List<Examen> examensSelected = new ArrayList<>();
    private List<Centre> centresDestinations = null;
    private List<Centre> centresTemoins = null;
    private Centre centretemoinSelected = null;
    private Centre centredestinationSelected = null;
    private List<Departement> departementsListe = null;
    private List<Arrondissement> arrondissementsListe = null;
    private String[] sessionsCombo = null;
    private String[] regionsCentrestemoinsCombo = null;
    private String[] regionsCentresdestinationCombo = null;
    private String[] centrestemoinsCombo = null;
    private String[] centresdestinationsCombo = null;
    private String[] regionsListeCombo = null;
    private String[] departementsListeCombo = null;
    private String[] arrondissementsListeCombo = null;
    private String[] valeursCombo = null;
    private String[] typeTransportsCombo=null;
    private String nomRegionCentretemoinSelected = "";
    private String nomRegionCentredestinationSelected = "";
    private String nomRegionListeSelected = "";
    private String nomDepartementListeSelected = "";
    private String nomArrondissementListeSelected = "";
    private String nomCentretemoinSelected = "";
    private String nomCentredestinationSelected = "";
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private String phase = "DÉLIBÉRATION";
    private List<Caisse> caisses = null;
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private String nomsEtPrenomsSelected = "";
    private Personnel personnelSelected = null;
    private List<Personnel> personnels = null;
    private String[] personnelsCombo = null;
    private List<Intervenant> intervenants = null;
    private boolean annule = false;
    private int fraisconv = 0;
    private String fraisconvString = "";
    private List<Eltacmtemoin> eltacmtemoins = null;
    private String typeTransportSelected="";

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        regions = metier.findAllRegions();
        examens = metier.findAllExamens();

        //on remplit la combobox des régions du centre temoin
        regionsCentrestemoinsCombo = new String[regions.size() + 1];
        regionsCentrestemoinsCombo[0] = "---";
        int i = 1;
        for (Region region : regions) {
            regionsCentrestemoinsCombo[i++] = region.getNomreg();
        }
        jComboBoxRegionCentreTemoin.setModel(new DefaultComboBoxModel(regionsCentrestemoinsCombo));

        //on remplit la combobox des régions du centre destination
        regionsCentresdestinationCombo = new String[regions.size() + 1];
        regionsCentresdestinationCombo[0] = "---";
        int j = 1;
        for (Region region : regions) {
            regionsCentresdestinationCombo[j++] = region.getNomreg();
        }
        jComboBoxRegionCentreDestination.setModel(new DefaultComboBoxModel(regionsCentresdestinationCombo));

        //on remplit la combobox des régions des examinateurs
        regionsListeCombo = new String[regions.size() + 1];
        regionsListeCombo[0] = "---";
        int k = 1;
        for (Region region : regions) {
            regionsListeCombo[k++] = region.getNomreg();
        }
        jComboBoxRegionListe.setModel(new DefaultComboBoxModel(regionsListeCombo));

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int l = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[l++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "GEN", "IND", "IND PROF", "STT", "STT PROF", "TOUT", "TOUT ESTI", "TOUT STT", "TOUT ESTP"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC", "TOUT"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));
        
        //on remplit la combobox des types de déplacement
        typeTransportsCombo = new String[]{"---", "URBAIN", "INTER URBAIN"};
        jComboBoxTypeTransport.setModel(new DefaultComboBoxModel(typeTransportsCombo));

        //on remplit la combobox des valeurs de convoyage
        valeursCombo = new String[]{"---", "3000","5000", "10000", "15000", "20000"};
        jComboBoxCout.setModel(new DefaultComboBoxModel(valeursCombo));

        remplirDepartementListeCombobox();
        remplirArrondissementListeCombobox();
        remplirPersonnelsDelArrondissementCombobox();
        remplirPersonnelsDuDepartementCombobox();
    }

    private void infoSaisies() {
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        nomCentretemoinSelected = (String) jComboBoxCentreTemoin.getSelectedItem();
        nomCentredestinationSelected = (String) jComboBoxDestination.getSelectedItem();
        nomsEtPrenomsSelected = (String) jComboBoxNomsEtPrenoms.getSelectedItem();
        typeTransportSelected=(String) jComboBoxTypeTransport.getSelectedItem();
        fraisconvString = (String) jComboBoxCout.getSelectedItem();
    }

    private void remplirCentretemoinCombobox() {
        nomRegionCentretemoinSelected = (String) jComboBoxRegionCentreTemoin.getSelectedItem();
        centresTemoins = metier.findAllCentresD1Region(nomRegionCentretemoinSelected);
        //on remplit la combobox des centres temoins
        centrestemoinsCombo = new String[centresTemoins.size() + 1];
        centrestemoinsCombo[0] = "---";
        int i = 1;
        for (Centre centre : centresTemoins) {
            centrestemoinsCombo[i++] = centre.getNomcent();
        }
        jComboBoxCentreTemoin.setModel(new DefaultComboBoxModel(centrestemoinsCombo));
    }

    private void remplirCentredestinationCombobox() {
        nomRegionCentredestinationSelected = (String) jComboBoxRegionCentreDestination.getSelectedItem();
        centresDestinations = metier.findAllCentresD1Region(nomRegionCentredestinationSelected);
        //on remplit la combobox des centres destination
        centresdestinationsCombo = new String[centresDestinations.size() + 1];
        centresdestinationsCombo[0] = "---";
        int i = 1;
        for (Centre centre : centresDestinations) {
            centresdestinationsCombo[i++] = centre.getNomcent();
        }
        jComboBoxDestination.setModel(new DefaultComboBoxModel(centresdestinationsCombo));
    }

    private void remplirDepartementListeCombobox() {
        nomRegionListeSelected = (String) jComboBoxRegionListe.getSelectedItem();
        departementsListe = metier.findAllDepartementsD1Region(nomRegionListeSelected);
        //on remplit la combobox des départements des examinateurs
        departementsListeCombo = new String[departementsListe.size() + 1];
        departementsListeCombo[0] = "---";
        int i = 1;
        for (Departement departement : departementsListe) {
            departementsListeCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartementListe.setModel(new DefaultComboBoxModel(departementsListeCombo));
    }

    private void remplirArrondissementListeCombobox() {
        nomDepartementListeSelected = (String) jComboBoxDepartementListe.getSelectedItem();
        arrondissementsListe = metier.findAllArrondissementsD1Departement(nomDepartementListeSelected);
        //on remplit la combobox des arrondissements des examinateurs
        arrondissementsListeCombo = new String[arrondissementsListe.size() + 1];
        arrondissementsListeCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissementsListe) {
            arrondissementsListeCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissementListe.setModel(new DefaultComboBoxModel(arrondissementsListeCombo));
    }

    private void remplirPersonnelsDelArrondissementCombobox() {
        nomArrondissementListeSelected = (String) jComboBoxArrondissementListe.getSelectedItem();
        personnels = metier.findAllPersonnelsD1Arrondissement(nomArrondissementListeSelected);
        //on remplit les combobox des responsables et des membres
        personnelsCombo = new String[personnels.size() + 1];
        personnelsCombo[0] = "---";
        int i = 1;
        for (Personnel personnel : personnels) {
            personnelsCombo[i] = personnel.getNompers() + " " + personnel.getPrenom();
            i++;
        }
        jComboBoxNomsEtPrenoms.setModel(new DefaultComboBoxModel(personnelsCombo));
    }

    private void remplirPersonnelsDuDepartementCombobox() {
        nomDepartementListeSelected = (String) jComboBoxDepartementListe.getSelectedItem();
        personnels = metier.findAllPersonnelsD1Departement(nomDepartementListeSelected);
        //on remplit les combobox des personnels       
        personnelsCombo = new String[personnels.size() + 1];
        personnelsCombo[0] = "---";
        int i = 1;
        for (Personnel personnel : personnels) {
            personnelsCombo[i] = personnel.getNompers() + " " + personnel.getPrenom();
            i++;
        }
        jComboBoxNomsEtPrenoms.setModel(new DefaultComboBoxModel(personnelsCombo));
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }
}
