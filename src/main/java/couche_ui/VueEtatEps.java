package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Caissesport;
import couche_jpa.Centrebilletage;
import couche_jpa.Etablissement;
import couche_jpa.Examen;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Nature;
import couche_jpa.Rattachetab;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_jpa.Stataptes;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueEtatEps extends javax.swing.JFrame {

    public VueEtatEps() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonVisualiser = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jButtonCreer = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jLabelExamen = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonMettreAjour = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 600));
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT DE PAIEMENT D'EPS");

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonVisualiser.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiser.setText("Visualiser l'état");
        jButtonVisualiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserActionPerformed(evt);
            }
        });

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jButtonAnnuler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jButtonCreer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreer.setText("Créer");
        jButtonCreer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(204, 255, 0));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Groupe d'examens", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE))
                .addContainerGap())
        );

        jButtonSupprimer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jButtonMettreAjour.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjour.setText("Mettre à jour");
        jButtonMettreAjour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(331, 331, 331)
                .addComponent(jLabelSession)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(jButtonCreer)
                .addGap(18, 18, 18)
                .addComponent(jButtonMettreAjour)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiser)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimer)
                .addGap(18, 18, 18)
                .addComponent(jButtonAnnuler)
                .addGap(18, 18, 18)
                .addComponent(jButtonFermer)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonVisualiser, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnuler, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCreer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSupprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonMettreAjour, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        videFrame();
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jButtonVisualiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserActionPerformed
        infoSaisies();
        etablissementsCentres.clear();
        etablissementsSouscentres.clear();
        Map<Etablissement, Integer> etablissementsMap = new HashMap<>();//contient l'ensemble des Etablissements sous-centres d'EPS avec leur nombre de candidats aptes
        Map<Centrebilletage, ArrayList<Etablissement>> centrebilletageEtablissementsMap = new HashMap<>();//contient chaque centre de billetage avec la liste de ses établissements situés dans ses secteurs de couverture
        ArrayList<String> typesBruts = new ArrayList<>();
        ArrayList<String> typesAconsiderer = new ArrayList<>();
        ArrayList<String> niveauxAconsiderer = new ArrayList<>();
        Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture

        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            caissesports = metier.findAllCaissesportD1Session(anneeSelected);
            boolean continuer = false;
            for (Caissesport c : caissesports) {
                if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                    continuer = true;
                    break;
                }
            }
            if (!continuer) {
                JOptionPane.showMessageDialog(this, "Erreur, les états d'EPS n'ont pas encore été créés pour ce groupe d'examens !");
            } else {
                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                for (Examen e : examensSelected) {
                    List<Stataptes> lesStataptes = metier.findAllStataptesD1ExamenDans1Session(anneeSelected, e.getSigle());
                    for (Stataptes s : lesStataptes) {
                        Etablissement unEtab = s.getEtablissement();
                        if (etablissementsMap.containsKey(unEtab)) {//si le présent établissement est dans etablissementsMap
                            int nbcand = etablissementsMap.get(unEtab);//on récupère son nombre de candidats
                            etablissementsMap.put(unEtab, nbcand + s.getNbaptes());//on lui ajoute le nombre de candidats de s
                        } else {
                            etablissementsMap.put(unEtab, s.getNbaptes());
                        }
                    }
                }              
                //recherche des types des examens à utiliser
                for (Examen examen : examensSelected) {
                    System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                    if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                        typesBruts.add("ESG");
                    }
                    if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                        typesBruts.add("ESTP");
                    }
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 2) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                //recherche des niveaux des examens à utiliser
                if (!niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add(niveauSelected);
                    niveauxAconsiderer.add("TOUT");
                }
                if (niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add("PROB");
                    niveauxAconsiderer.add("BACC");
                    niveauxAconsiderer.add("TOUT");
                }
                //recherche des centres de billetage
                for (String niveau : niveauxAconsiderer) {
                    for (String type : typesAconsiderer) {
                        List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                        for (Centrebilletage centrebilletage : desCentrebilletages) {
                            ArrayList<Souscentre> souscentresList = new ArrayList<>();
                            if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                for (Secteurcouv sect : secteurs) {
                                    if (!souscentresList.contains(sect.getSouscentre())) {
                                        souscentresList.add(sect.getSouscentre());
                                    }
                                }
                                centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                            }
                        }
                    }
                }
                //on cherche la liste des établissements de chaque centre de billetage
                for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                    ArrayList<Etablissement> etablissementsList = new ArrayList<>();
                    for (Souscentre souscentre : centrebilletageSouscentresMap.get(centrebilletage)) {
                        List<Rattachetab> rattachetabList = metier.findAllRattachetabD1Souscentre(souscentre.getNomsouscent());
                        for (Rattachetab rattachetab : rattachetabList) {
                            if (!etablissementsList.contains(rattachetab.getEtablissement())) {
                                etablissementsList.add(rattachetab.getEtablissement());
                            }                      
                        }
                    }
                    centrebilletageEtablissementsMap.put(centrebilletage, etablissementsList);
                }
                try {
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    listerLesCentresEtSoucentres(anneeSelected, examensList);                    
                    List<Region> regions=metier.findAllRegions();
                    for(Region region:regions){
                        for (Centrebilletage centrebilletage : centrebilletageEtablissementsMap.keySet()) {
                            if(region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())){
                                int num = 1;
                                int totalMontant = 0;
                                ArrayList<Etablissement> etablissementsList =centrebilletageEtablissementsMap.get(centrebilletage);
                                for(int i=0;i<etablissementsList.size();i++){
                                    Etablissement etablissement=etablissementsList.get(i);
                                    if(etablissementsMap.containsKey(etablissement)){
                                        int effectif = etablissementsMap.get(etablissement);
                                        determinerCoutEPS(etablissement, effectif);
                                        int totalArrondi=(int) Math.ceil((double)total/(double)1000)*1000;
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("examen", groupedexamensEnstring);
                                        row.put("session", sessionSelected.getAnnee());
                                        row.put("region",region.getNomreg()); 
                                        row.put("reference", "obcbudget-v.3");
                                        row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                        row.put("num", num++);
                                        row.put("etablissement", etablissement.getAbreviation());
                                        row.put("nbreCandaptes", effectif);
                                        row.put("nbexamin", nbexamin);
                                        row.put("nbpesappui", nbPersAppui);
                                        row.put("nbvacparpers", nbVacParpers);
                                        row.put("ensvacsec", nbVacsec);
                                        row.put("coutvacexaminappui", coutVacExaminEtPersApui);
                                        row.put("coutvacprimesec", coutVacEtPrimeSec);
                                        row.put("indetprimechefsec", indEtPrimeChefsec);
                                        row.put("indchefstade", indChefstade);
                                        row.put("montant", totalArrondi);
                                        row.put("baspage", "OBC/AR/"+centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                        totalMontant += totalArrondi;//jasperreport prendra la dernière valeur de totalMontant
                                        row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatPaiementEpsReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }

        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Tous les champs sont obligatoires à l'exception de l'imputation !");
        }
        examensSelected.clear();
        etablissementsMap.clear();
        centrebilletageEtablissementsMap.clear();
        typesBruts.clear();
        typesAconsiderer.clear();
        niveauxAconsiderer.clear();
        centrebilletageSouscentresMap.clear();
    }//GEN-LAST:event_jButtonVisualiserActionPerformed

    private void jButtonCreerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerActionPerformed
        infoSaisies();
        Map<Etablissement, Integer> etablissementsMap = new HashMap<>();//contient l'ensemble des Etablissements avec leur nombre de candidats aptes
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            anneeSelected = Integer.parseInt(anneeString);
            caissesports = metier.findAllCaissesportD1Session(anneeSelected);//caissesports existantes
            boolean continuer = true;
            for (Caissesport c : caissesports) {
                if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                    continuer = false;
                    break;
                }
            }
            if (!continuer) {
                JOptionPane.showMessageDialog(this, "Erreur, les états d'EPS existent déjà pour ce groupe d'examens !");
            } else {
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE D'EPS");
                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
               
                for (Examen e : examensSelected) {
                    List<Stataptes> lesStataptes = metier.findAllStataptesD1ExamenDans1Session(anneeSelected, e.getSigle());
                    for (Stataptes s : lesStataptes) {
                        Etablissement unEtab = s.getEtablissement();
                        if (etablissementsMap.containsKey(unEtab)) {//si le présent établissement est dans etablissementsMap
                            int nbcand = etablissementsMap.get(unEtab);//on récupère son nombre de candidats
                            etablissementsMap.put(unEtab, nbcand + s.getNbaptes());//on lui ajoute le nombre de candidats de s
                        } else {
                            etablissementsMap.put(unEtab, s.getNbaptes());
                        }
                    }
                }
                boolean testsicreer = false;
                listerLesCentresEtSoucentres(anneeSelected, examensList);
                try {
                    for (Etablissement etablissement : etablissementsMap.keySet()) {
                        int effectif = etablissementsMap.get(etablissement);
                        determinerCoutEPS(etablissement, effectif);
                        int totalArrondi=(int) Math.ceil((double)total/(double)1000)*1000;
                        metier.creerCaissesport(new Caissesport(totalArrondi, 0, groupe, rubetat, sessionSelected, etablissement));
                        testsicreer = true;
                    }
                } catch (ObcbudgetException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                if (testsicreer) {
                    JOptionPane.showMessageDialog(this, "Etats d'EPS créés avec succès pour ce groupe d'examens !");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
        }
        examensSelected.clear();
    }//GEN-LAST:event_jButtonCreerActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états d'EPS pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                caissesports = metier.findAllCaissesportD1Session(anneeSelected);//caissesports existantes
                ArrayList<Caissesport> caissesportAsupprimer = new ArrayList<>();
                for (Caissesport c : caissesports) {
                    if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                        caissesportAsupprimer.add(c);
                    }
                }
                if (caissesportAsupprimer.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état d'EPS n'existe pour ce groupe d'examens !");
                } else {
                    boolean testsisupprimer = false;
                    try {
                        for (Caissesport caisse : caissesportAsupprimer) {
                            metier.supprimerCaissesport(caisse);
                            testsisupprimer = true;
                        }
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testsisupprimer) {
                        JOptionPane.showMessageDialog(this, "Etats d'EPS supprimés avec succès pour ce groupe d'examens !");
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jButtonMettreAjourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourActionPerformed
        infoSaisies();
        Map<Etablissement, Integer> etablissementsMap = new HashMap<>();//contient l'ensemble des Etablissements avec leur nombre de candidats aptes
        int result = JOptionPane.showConfirmDialog(this,"Voulez-vous vraiment modifier les états d'EPS pour ce groupe d'examens ?", "confirmation de modification",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if(result == JOptionPane.YES_OPTION){
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                Groupe groupe =null;
                Rubriquetat rubriquetat=null;
                anneeSelected = Integer.parseInt(anneeString);
                caissesports = metier.findAllCaissesportD1Session(anneeSelected);//caissesports existantes
                boolean continuer = false;
                Caissesport uneCaissesportArecreer=null;
                for (Caissesport c : caissesports) {
                    if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                        continuer = true;
                        uneCaissesportArecreer=c;//permet de garder quelques info des caissesports à supprimer
                        break;
                    }
                }
                if (!continuer) {
                    JOptionPane.showMessageDialog(this, "Désolé, les états d'EPS n'existent pas encore pour ce groupe d'examens !");
                } else {
                    caissesports=metier.findAllCaissesportsD1SessionPour1Groupedexamens(anneeSelected,niveauSelected,typeSelected);
                    for(Caissesport c : caissesports) metier.supprimerCaissesport(c);//on supprime toutes les anciennes caissesport du groupe d'examens

                    groupe=uneCaissesportArecreer.getGroupe();
                    rubriquetat=uneCaissesportArecreer.getRubetat();
                    sessionSelected=uneCaissesportArecreer.getSession();

                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }

                    for (Examen e : examensSelected) {
                        List<Stataptes> lesStataptes = metier.findAllStataptesD1ExamenDans1Session(anneeSelected, e.getSigle());
                        for (Stataptes s : lesStataptes) {
                            Etablissement unEtab = s.getEtablissement();
                            if (etablissementsMap.containsKey(unEtab)) {//si le présent établissement est dans etablissementsMap
                                int nbcand = etablissementsMap.get(unEtab);//on récupère son nombre de candidats
                                etablissementsMap.put(unEtab, nbcand + s.getNbaptes());//on lui ajoute le nombre de candidats de s
                            } else {
                                etablissementsMap.put(unEtab, s.getNbaptes());
                            }
                        }
                    }
                    boolean testsicreer = false;
                    listerLesCentresEtSoucentres(anneeSelected, examensList);
                    try {
                        for (Etablissement etablissement : etablissementsMap.keySet()) {
                            int effectif = etablissementsMap.get(etablissement);
                            determinerCoutEPS(etablissement, effectif);
                            int totalArrondi=(int) Math.ceil((double)total/(double)1000)*1000;
                            metier.creerCaissesport(new Caissesport(totalArrondi, 0, groupe, rubriquetat, sessionSelected, etablissement));//et on recrée
                            testsicreer = true;
                        }
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testsicreer) {
                        JOptionPane.showMessageDialog(this, "Etats d'EPS mis à jour avec succès pour ce groupe d'examens !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
            }
            examensSelected.clear();
        }    
    }//GEN-LAST:event_jButtonMettreAjourActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatEps.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatEps.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatEps.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatEps.class
                        .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatEps().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonCreer;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonMettreAjour;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JButton jButtonVisualiser;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Examen> examens = null;
    private List<Examen> examensSelected = new ArrayList<Examen>();
    private String[] examensList = null;
    private String[] sessionsCombo = null;
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private int nbexamin = 0, nbPersAppui = 0, nbVacParpers = 0, nbVacsec = 0, coutVacExaminEtPersApui = 0, coutVacEtPrimeSec = 0, indEtPrimeChefsec = 0, indChefstade = 0, total = 0;
    private NumberFormat nf = NumberFormat.getInstance();
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private List<Caissesport> caissesports = null;
    private ArrayList<Etablissement> etablissementsCentres = new ArrayList<>();
    private ArrayList<Etablissement> etablissementsSouscentres = new ArrayList<>();

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        examens = metier.findAllExamens();

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int i = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[i++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "GEN", "IND", "IND PROF", "STT", "STT PROF", "TOUT", "TOUT ESTI", "TOUT STT", "TOUT ESTP"};//TOUT=tous les types; TOUT ESTI=INDUSTRIEL+INDUSTRIEL PROFESSIONNEL; TOUT STT=STT+STT PROFESSIONNEL; TOUTN ESTP=TOUT SAUF ESG
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC", "TOUT"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));
    }

    private void infoSaisies() {
        anneeString = (String) jComboBoxSession.getSelectedItem();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
    }

    private void videFrame() {
        jComboBoxSession.setSelectedIndex(0);
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
    }

    private void listerLesCentresEtSoucentres(int annee, String[] listexamens) {
        for (String ex : listexamens) {
            List<Nature> lesNaturesDesCentres = metier.findAllNaturesDesCentreD1ExamenDans1Session(annee, ex);
            List<Nature> lesNaturesDesSousCentres = metier.findAllNaturesDesSousCentreD1ExamenDans1Session(annee, ex);
            for (Nature nat : lesNaturesDesCentres) {
                Etablissement etab = nat.getSouscentre().getEtablissement();
                if (!etablissementsCentres.contains(etab)) {
                    etablissementsCentres.add(etab);
                }
                if (etablissementsSouscentres.contains(etab)) {
                    etablissementsSouscentres.remove(etab);
                }
            }
            for (Nature nat : lesNaturesDesSousCentres) {
                Etablissement etab = nat.getSouscentre().getEtablissement();
                if (!etablissementsSouscentres.contains(etab) && !etablissementsCentres.contains(etab)) {
                    etablissementsSouscentres.add(etab);
                }
            }
        }
    }

    private void determinerCoutEPS(Etablissement etablissement, int nbcand) {
        if (nbcand <= 20) {
            nbexamin = 2;
            nbPersAppui = 2;
            nbVacParpers = 2;
            nbVacsec = 2;
            coutVacExaminEtPersApui = (nbexamin + nbPersAppui) * nbVacParpers * 1500;
            coutVacEtPrimeSec = 5000;
            if (etablissementsSouscentres.contains(etablissement)) {
                indEtPrimeChefsec = 5000;
                indChefstade = 5000;
            }
            if (!etablissementsCentres.contains(etablissement) && !etablissementsSouscentres.contains(etablissement)) {
                indEtPrimeChefsec = 0;
                indChefstade = 0;
            }
            total = coutVacExaminEtPersApui + coutVacEtPrimeSec + indEtPrimeChefsec + indChefstade;
        }
        if (nbcand >= 21 && nbcand <= 50) {
            nbexamin = 4;
            nbPersAppui = 2;
            nbVacParpers = 2;
            nbVacsec = 2;
            coutVacExaminEtPersApui = (nbexamin + nbPersAppui) * nbVacParpers * 1500;
            coutVacEtPrimeSec = 5000;
            if (etablissementsCentres.contains(etablissement)) {
                indEtPrimeChefsec = 15000;
                indChefstade = 10000;
            }
            if (etablissementsSouscentres.contains(etablissement)) {
                indEtPrimeChefsec = 8000;
                indChefstade = 5000;
            }
            if (!etablissementsCentres.contains(etablissement) && !etablissementsSouscentres.contains(etablissement)) {
                indEtPrimeChefsec = 0;
                indChefstade = 0;
            }
            total = coutVacExaminEtPersApui + coutVacEtPrimeSec + indEtPrimeChefsec + indChefstade;
        }
        if (nbcand >= 51 && nbcand <= 100) {
            nbexamin = 4;
            nbPersAppui = 2;
            nbVacParpers = 2;
            nbVacsec = 2;
            coutVacExaminEtPersApui = (nbexamin + nbPersAppui) * nbVacParpers * 1500;
            coutVacEtPrimeSec = 7000;
            if (etablissementsCentres.contains(etablissement)) {
                indEtPrimeChefsec = 15000;
                indChefstade = 10000;
            }
            if (etablissementsSouscentres.contains(etablissement)) {
                indEtPrimeChefsec = 8000;
                indChefstade = 5000;
            }
            if (!etablissementsCentres.contains(etablissement) && !etablissementsSouscentres.contains(etablissement)) {
                indEtPrimeChefsec = 0;
                indChefstade = 0;
            }
            total = coutVacExaminEtPersApui + coutVacEtPrimeSec + indEtPrimeChefsec + indChefstade;
        }
        if (nbcand >= 101 && nbcand <= 150) {
            nbexamin = 4;
            nbPersAppui = 2;
            nbVacParpers = 3;
            nbVacsec = 4;
            coutVacExaminEtPersApui = (nbexamin + nbPersAppui) * nbVacParpers * 1500;
            coutVacEtPrimeSec = 12000;
            if (etablissementsCentres.contains(etablissement)) {
                indEtPrimeChefsec = 15000;
                indChefstade = 10000;
            }
            if (etablissementsSouscentres.contains(etablissement)) {
                indEtPrimeChefsec = 8000;
                indChefstade = 5000;
            }
            if (!etablissementsCentres.contains(etablissement) && !etablissementsSouscentres.contains(etablissement)) {
                indEtPrimeChefsec = 0;
                indChefstade = 0;
            }
            total = coutVacExaminEtPersApui + coutVacEtPrimeSec + indEtPrimeChefsec + indChefstade;
        }
        if (nbcand >= 151 && nbcand <= 300) {
            nbexamin = 6;
            nbPersAppui = 2;
            nbVacParpers = 3;
            nbVacsec = 6;
            coutVacExaminEtPersApui = (nbexamin + nbPersAppui) * nbVacParpers * 1500;
            coutVacEtPrimeSec = 15000;
            if (etablissementsCentres.contains(etablissement)) {
                indEtPrimeChefsec = 15000;
                indChefstade = 10000;
            }
            if (etablissementsSouscentres.contains(etablissement)) {
                indEtPrimeChefsec = 8000;
                indChefstade = 5000;
            }
            if (!etablissementsCentres.contains(etablissement) && !etablissementsSouscentres.contains(etablissement)) {
                indEtPrimeChefsec = 0;
                indChefstade = 0;
            }
            total = coutVacExaminEtPersApui + coutVacEtPrimeSec + indEtPrimeChefsec + indChefstade;
        }
        if (nbcand >= 301 && nbcand <= 500) {
            nbexamin = 8;
            nbPersAppui = 2;
            nbVacParpers = 4;
            nbVacsec = 8;
            coutVacExaminEtPersApui = (nbexamin + nbPersAppui) * nbVacParpers * 1500;
            coutVacEtPrimeSec = 20000;
            if (etablissementsCentres.contains(etablissement)) {
                indEtPrimeChefsec = 15000;
                indChefstade = 10000;
            }
            if (etablissementsSouscentres.contains(etablissement)) {
                indEtPrimeChefsec = 8000;
                indChefstade = 5000;
            }
            if (!etablissementsCentres.contains(etablissement) && !etablissementsSouscentres.contains(etablissement)) {
                indEtPrimeChefsec = 0;
                indChefstade = 0;
            }
            total = coutVacExaminEtPersApui + coutVacEtPrimeSec + indEtPrimeChefsec + indChefstade;
        }
        if (nbcand >= 501 && nbcand <= 700) {
            nbexamin = 10;
            nbPersAppui = 3;
            nbVacParpers = 6;
            nbVacsec = 10;
            coutVacExaminEtPersApui = (nbexamin + nbPersAppui) * nbVacParpers * 1500;
            coutVacEtPrimeSec = 23000;
            if (etablissementsCentres.contains(etablissement)) {
                indEtPrimeChefsec = 15000;
                indChefstade = 10000;
            }
            if (etablissementsSouscentres.contains(etablissement)) {
                indEtPrimeChefsec = 8000;
                indChefstade = 5000;
            }
            if (!etablissementsCentres.contains(etablissement) && !etablissementsSouscentres.contains(etablissement)) {
                indEtPrimeChefsec = 0;
                indChefstade = 0;
            }
            total = coutVacExaminEtPersApui + coutVacEtPrimeSec + indEtPrimeChefsec + indChefstade;
        }
        if (nbcand >= 701 && nbcand <= 900) {
            nbexamin = 10;
            nbPersAppui = 3;
            nbVacParpers = 8;
            nbVacsec = 12;
            coutVacExaminEtPersApui = (nbexamin + nbPersAppui) * nbVacParpers * 1500;
            coutVacEtPrimeSec = 28000;
            if (etablissementsCentres.contains(etablissement)) {
                indEtPrimeChefsec = 15000;
                indChefstade = 10000;
            }
            if (etablissementsSouscentres.contains(etablissement)) {
                indEtPrimeChefsec = 8000;
                indChefstade = 5000;
            }
            if (!etablissementsCentres.contains(etablissement) && !etablissementsSouscentres.contains(etablissement)) {
                indEtPrimeChefsec = 0;
                indChefstade = 0;
            }
            total = coutVacExaminEtPersApui + coutVacEtPrimeSec + indEtPrimeChefsec + indChefstade;
        }
        if (nbcand >= 901 && nbcand <= 1100) {
            nbexamin = 12;
            nbPersAppui = 3;
            nbVacParpers = 9;
            nbVacsec = 14;
            coutVacExaminEtPersApui = (nbexamin + nbPersAppui) * nbVacParpers * 1500;
            coutVacEtPrimeSec = 31000;
            if (etablissementsCentres.contains(etablissement)) {
                indEtPrimeChefsec = 15000;
                indChefstade = 10000;
            }
            if (etablissementsSouscentres.contains(etablissement)) {
                indEtPrimeChefsec = 8000;
                indChefstade = 5000;
            }
            if (!etablissementsCentres.contains(etablissement) && !etablissementsSouscentres.contains(etablissement)) {
                indEtPrimeChefsec = 0;
                indChefstade = 0;
            }
            total = coutVacExaminEtPersApui + coutVacEtPrimeSec + indEtPrimeChefsec + indChefstade;
        }
        if (nbcand >= 1101) {
            nbexamin = 12;
            nbPersAppui = 3;
            nbVacParpers = 10;
            nbVacsec = 16;
            coutVacExaminEtPersApui = (nbexamin + nbPersAppui) * nbVacParpers * 1500;
            coutVacEtPrimeSec = 36000;
            if (etablissementsCentres.contains(etablissement)) {
                indEtPrimeChefsec = 15000;
                indChefstade = 10000;
            }
            if (etablissementsSouscentres.contains(etablissement)) {
                indEtPrimeChefsec = 8000;
                indChefstade = 5000;
            }
            if (!etablissementsCentres.contains(etablissement) && !etablissementsSouscentres.contains(etablissement)) {
                indEtPrimeChefsec = 0;
                indChefstade = 0;
            }
            total = coutVacExaminEtPersApui + coutVacEtPrimeSec + indEtPrimeChefsec + indChefstade;
        }
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }
}
