package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Caisse;
import couche_jpa.Centrebilletage;
import couche_jpa.Elementsurvdeficient;
import couche_jpa.Examen;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Secretariat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_jpa.Statistique;
import couche_jpa.Statsecretariat;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.Box;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueEtatSurveillance extends javax.swing.JFrame {

    public VueEtatSurveillance() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButtonVisualiser = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jLabelExamen = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonCreer = new javax.swing.JButton();
        jButtonMettreAjour = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jRadioButtonAdditif = new javax.swing.JRadioButton();
        jRadioButtonAvecHandicap = new javax.swing.JRadioButton();
        jRadioButtonSansHandicap = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT DE PAIEMENT DE SURVEILLANCE");

        jButtonVisualiser.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiser.setText("Visualiser l'état");
        jButtonVisualiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserActionPerformed(evt);
            }
        });

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jButtonAnnuler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(204, 255, 0));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Groupe d'examens", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonCreer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreer.setText("Créer");
        jButtonCreer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerActionPerformed(evt);
            }
        });

        jButtonMettreAjour.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjour.setText("Mettre à jour");
        jButtonMettreAjour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourActionPerformed(evt);
            }
        });

        jButtonSupprimer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jRadioButtonAdditif.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jRadioButtonAdditif.setText("Additif");

        jRadioButtonAvecHandicap.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jRadioButtonAvecHandicap.setText(" Des candidats avec handicap (moteur ou sensoriel)");
        jRadioButtonAvecHandicap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonAvecHandicapActionPerformed(evt);
            }
        });

        jRadioButtonSansHandicap.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jRadioButtonSansHandicap.setText(" Des candidats sans handicap");
        jRadioButtonSansHandicap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonSansHandicapActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 253, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(280, 280, 280))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(294, 294, 294)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonSansHandicap)
                            .addComponent(jRadioButtonAvecHandicap)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addComponent(jButtonCreer)
                        .addGap(28, 28, 28)
                        .addComponent(jButtonMettreAjour)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRadioButtonAdditif)
                                .addGap(19, 19, 19)
                                .addComponent(jLabelSession)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonVisualiser)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonSupprimer)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonAnnuler)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(142, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel1)
                .addGap(39, 39, 39)
                .addComponent(jRadioButtonSansHandicap)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButtonAvecHandicap)
                .addGap(21, 21, 21)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonAdditif))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonMettreAjour, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCreer, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonAnnuler, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonSupprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonFermer, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(jButtonVisualiser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVisualiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserActionPerformed
        infoSaisies();
        if (!jRadioButtonAdditif.isSelected()) {
            if (jRadioButtonSansHandicap.isSelected()) {
                Map<Souscentre, Integer> souscentreMap1 = new HashMap<>();//contient des sous-centres avec leur nombre de candidats pour un examen donné
                //Map<Souscentre, Integer> souscentreMap2 = new HashMap<>();//contient des sous-centres avec leur nombre de candidats pour le deuxième examen du groupe sélectionné le cas écheant
                //Map<Souscentre, Integer> souscentreMap = new HashMap<>();//contient les sous-centres issus de souscentreMap1 et souscentreMap2 avec leur nombre de candidats (additionnés si les sous-centres sont identiques)                              

                Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
                ArrayList<String> typesBruts = new ArrayList<>();
                ArrayList<String> typesAconsiderer = new ArrayList<>();
                ArrayList<String> niveauxAconsiderer = new ArrayList<>();

                Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueABIMap = new HashMap<>();//contient des sous-centres avec leurs statistiques ABI
                Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueAutresLitterairesMap = new HashMap<>();//contient des sous-centres avec leurs statistiques littéraires non ABI
                Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueScientifiquesMap = new HashMap<>();//contient des sous-centres chacun avec leurs statistiques scientifiques
                Map<Souscentre, ArrayList<Salle>> souscentreSalleSimplesABIMap = new HashMap<>();//contient des sous-centres avec la liste de ses salles simples ABI (ie d'ffectif>=15)
                Map<Souscentre, SalleCumulee> souscentreSalleCumuleeABIMap = new HashMap<>();//contient des sous-centres avec sa salle cumulée ABI
                Map<Souscentre, ArrayList<Salle>> souscentreSalleSimplesAutresLitterairesMap = new HashMap<>();//contient des sous-centres avec la liste de ses salles simples AutresLitteraires (ie d'ffectif>=15)
                Map<Souscentre, SalleCumulee> souscentreSalleCumuleeAutresLitterairesMap = new HashMap<>();//contient des sous-centres avec la sa salle cumulée AutresLitteraires
                Map<Souscentre, ArrayList<Salle>> souscentreSalleSimplesScientifiquesMap = new HashMap<>();//contient des sous-centres avec la liste de ses salles simples Scientifiques (ie d'ffectif>=15)
                Map<Souscentre, SalleCumulee> souscentreSalleCumuleeScientifiquesMap = new HashMap<>();//contient des sous-centre avec sa salle cumulée Scientifiques
                Map<Souscentre, ArrayList<Salle>> souscentreSallesMap = new HashMap<>();//contient des sous-centres chacun avec la liste de ses salles cumulées ou simples
                ArrayList<Souscentre> souscentresList = new ArrayList<>();//contient tous les souscentres trouvés dans les statistiques
                Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
                Map<Secretariat, Integer> secretariatEffectifMap = new HashMap<>();//contient l'ensemble des secrétariats d'un groupe d'examens avec chacun avec son nombre de candidats
                List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats 
                Map<Souscentre, ArrayList<Secretariat>> souscentreSecretariatsMap = new HashMap<>();//contient les sous-centres chacun avec la liste de ses secretariats le cas échéant
                Map<Secretariat, ArrayList<Statsecretariat>> secretariatStatsecABIMap = new HashMap<>();//contient des secretariats avec ses statsecretariat ABI
                Map<Secretariat, ArrayList<Statsecretariat>> secretariatStatsecAutresLitterairesMap = new HashMap<>();//contient des secretariats avec ses statsecretariat littéraires non ABI
                Map<Secretariat, ArrayList<Statsecretariat>> secretariatStatsecScientifiquesMap = new HashMap<>();//contient des secretariats avec ses statsecretariat scientifiques
                Map<Secretariat, ArrayList<Sallesecret>> secretariatSalleSimplesABIMap = new HashMap<>();//contient des Secretariats avec la liste de ses salles simples ABI (ie d'ffectif>=15)
                Map<Secretariat, SalleCumuleesecret> secretariatSalleCumuleeABIMap = new HashMap<>();//contient des Secretariats avec sa salle cumulée ABI
                Map<Secretariat, ArrayList<Sallesecret>> secretariatSalleSimplesAutresLitterairesMap = new HashMap<>();//contient des Secretariat avec la liste de ses salles simples AutresLitteraires (ie d'ffectif>=15)
                Map<Secretariat, SalleCumuleesecret> secretariatSalleCumuleeAutresLitterairesMap = new HashMap<>();//contient des Secretariats avec la sa salle cumulée AutresLitteraires
                Map<Secretariat, ArrayList<Sallesecret>> secretariatSalleSimplesScientifiquesMap = new HashMap<>();//contient des Secretariat avec la liste de ses salles simples Scientifiques (ie d'ffectif>=15)
                Map<Secretariat, SalleCumuleesecret> secretariatSalleCumuleeScientifiquesMap = new HashMap<>();//contient des Secretariats avec sa salle cumulée Scientifiques
                Map<Secretariat, ArrayList<Sallesecret>> secretariatSallesMap = new HashMap<>();//contient des Secretariats chacun avec la liste de ses salles cumulées ou simples
                Map<Souscentre, ArrayList<Statistique>> souscentreStatistiquesMap = new HashMap<>();//contient des sous-centres avec leurs statistiques
                Map<Souscentre, ArrayList<Salletech>> souscentreSalletechsMap = new HashMap<>();//contient des sous-centres avec la liste de ses salletechs                       
                Map<Secretariat, ArrayList<Statsecretariat>> secretariatStatsecretariatsMap = new HashMap<>();//contient des secretariats avec ses statsecretariats
                Map<Secretariat, ArrayList<Salletechsecret>> secretariatSalletechsecretsMap = new HashMap<>();//contient des Secretariats avec la liste de ses salles simples
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("SURVEILLANCE CANDIDATS SANS HANDICAP");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    boolean continuer = false;
                    for (Caisse c : caisses) {
                        if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                            continuer = true;
                            break;
                        }
                    }
                    if (!continuer) {
                        JOptionPane.showMessageDialog(this, "Erreur, les états de surveillance de candidats sans handicap n'ont pas encore été créés pour ce groupe d'examens !");
                    } else {
                        String separateur = ", ";
                        examensList = groupedexamensEnstring.split(separateur);
                        for (int i = 0; i < examensList.length; i++) {
                            for (Examen e : examens) {
                                if (e.getSigle().equals(examensList[i])) {
                                    examensSelected.add(e);
                                    break;
                                }
                            }
                        }
                        for (Session s : sessions) {
                            if (s.getAnnee() == anneeSelected) {
                                sessionSelected = s;
                                break;
                            }
                        }

                        //remplissage souscentreAsecretariatsDemultipliesList
                        secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                        if (!secretariats.isEmpty()) {
                            for (Secretariat sec : secretariats) {
                                if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                                    souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                                }
                            }
                        }

                        if (typeSelected.equals("GEN")) {
                            List<Statistique> statABI = metier.findAllStatistiquesABID1ExamenDans1Session(examensSelected.get(0).getSigle(), anneeSelected);
                            List<Statistique> statAutresLitteraires = metier.findAllStatistiquesAutresLitterairesD1ExamenDans1Session(examensSelected.get(0).getSigle(), anneeSelected);
                            List<Statistique> statScientifiques = metier.findAllStatistiquesScientifiquesD1ExamenDans1Session(examensSelected.get(0).getSigle(), anneeSelected);

                            //remplissage de souscentreStatistiqueABIMap et souscentresList en partie
                            for (Statistique s : statABI) {
                                if (!souscentreAsecretariatsDemultipliesList.contains(s.getSouscentre())) {
                                    if (souscentreStatistiqueABIMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueABIMap
                                        souscentreStatistiqueABIMap.get(s.getSouscentre()).add(s);//on lui ajoute s
                                    } else {
                                        ArrayList<Statistique> liste = new ArrayList<>();
                                        liste.add(s);
                                        souscentreStatistiqueABIMap.put(s.getSouscentre(), liste);
                                    }
                                }
                                if (!souscentresList.contains(s.getSouscentre())) {
                                    souscentresList.add(s.getSouscentre());//on charge tous les sous-centres ABI
                                }
                            }

                            //remplissage de souscentreStatistiqueAutresLitterairesMap et souscentresList en partie
                            for (Statistique s : statAutresLitteraires) {
                                if (!souscentreAsecretariatsDemultipliesList.contains(s.getSouscentre())) {
                                    if (souscentreStatistiqueAutresLitterairesMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueAutresLitterairesMap
                                        souscentreStatistiqueAutresLitterairesMap.get(s.getSouscentre()).add(s);//on lui ajoute s
                                    } else {
                                        ArrayList<Statistique> liste = new ArrayList<>();
                                        liste.add(s);
                                        souscentreStatistiqueAutresLitterairesMap.put(s.getSouscentre(), liste);
                                    }
                                }
                                if (!souscentresList.contains(s.getSouscentre())) {
                                    souscentresList.add(s.getSouscentre());//on charge tous les sous-centres litteraires non ABI
                                }
                            }

                            //remplissage de souscentreStatistiqueScientifiquesMap et souscentresList en partie
                            for (Statistique s : statScientifiques) {
                                if (!souscentreAsecretariatsDemultipliesList.contains(s.getSouscentre())) {
                                    if (souscentreStatistiqueScientifiquesMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueScientifiquesMap
                                        souscentreStatistiqueScientifiquesMap.get(s.getSouscentre()).add(s);//on lui ajoute s
                                    } else {
                                        ArrayList<Statistique> liste = new ArrayList<>();
                                        liste.add(s);
                                        souscentreStatistiqueScientifiquesMap.put(s.getSouscentre(), liste);
                                    }
                                }
                                if (!souscentresList.contains(s.getSouscentre())) {
                                    souscentresList.add(s.getSouscentre());//on charge tous les sous-centres scientifiques
                                }
                            }

                            int nbrecandparsalle=nombreCandidatsParSalle(niveauSelected, typeSelected);
                            //remplissage de souscentreSalleSimplesABIMap et souscentreSalleCumuleeABIMap
                            for (Souscentre souscentre : souscentreStatistiqueABIMap.keySet()) {
                                ArrayList<Salle> salsimplesList = new ArrayList<>();
                                for (Statistique stat : souscentreStatistiqueABIMap.get(souscentre)) {
                                    if (stat.getNombre() >= 20) {
                                        Salle sal = new Salle();
                                        sal.setSouscentre(souscentre);
                                        sal.setSerie(stat.getOption().getSigle());
                                        sal.setEffectif(stat.getNombre());
                                        sal.setNbcandsal(nbrecandparsalle);
                                        salsimplesList.add(sal);
                                    } else {
                                        SalleCumulee salcu = new SalleCumulee();
                                        if (!souscentreSalleCumuleeABIMap.containsKey(souscentre)) {
                                            salcu.setSouscentre(souscentre);
                                            salcu.setSerie(stat.getOption().getSigle());
                                            salcu.setEffectif(stat.getNombre());
                                            salcu.setNbcandsal(nbrecandparsalle);
                                            //salcu.setPaquet("ABI"); //le paquet est ABI par défaut
                                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                salcu.setZone("NOSO");
                                            }
                                        }
                                        if (!souscentreSalleCumuleeABIMap.isEmpty() && souscentreSalleCumuleeABIMap.containsKey(souscentre)) {
                                            salcu = souscentreSalleCumuleeABIMap.get(souscentre);
                                            salcu.setSerie(salcu.getSerie() + "/" + stat.getOption().getSigle());
                                            salcu.setEffectif(salcu.getEffectif() + stat.getNombre());
                                            //souscentre, zone et paquet déjà connus ici
                                        }
                                        souscentreSalleCumuleeABIMap.put(souscentre, salcu);
                                    }
                                }
                                souscentreSalleSimplesABIMap.put(souscentre, salsimplesList);
                            }

                            //remplissage de souscentreSalleSimplesAutresLitterairesMap et souscentreSalleCumuleeAutresLitterairesMap
                            for (Souscentre souscentre : souscentreStatistiqueAutresLitterairesMap.keySet()) {
                                ArrayList<Salle> salsimplesList = new ArrayList<>();
                                for (Statistique stat : souscentreStatistiqueAutresLitterairesMap.get(souscentre)) {
                                    if (stat.getNombre() >= 20) {
                                        Salle sal = new Salle();
                                        sal.setSouscentre(souscentre);
                                        sal.setSerie(stat.getOption().getSigle());
                                        sal.setEffectif(stat.getNombre());
                                        sal.setNbcandsal(nbrecandparsalle);
                                        salsimplesList.add(sal);
                                    } else {
                                        SalleCumulee salcu = new SalleCumulee();
                                        if (!souscentreSalleCumuleeAutresLitterairesMap.containsKey(souscentre)) {
                                            salcu.setSouscentre(souscentre);
                                            salcu.setSerie(stat.getOption().getSigle());
                                            salcu.setEffectif(stat.getNombre());
                                            salcu.setNbcandsal(nbrecandparsalle);
                                            salcu.setPaquet("AUTRES");
                                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                salcu.setZone("NOSO");
                                            }
                                        }
                                        if (!souscentreSalleCumuleeAutresLitterairesMap.isEmpty() && souscentreSalleCumuleeAutresLitterairesMap.containsKey(souscentre)) {
                                            salcu = souscentreSalleCumuleeAutresLitterairesMap.get(souscentre);
                                            salcu.setSerie(salcu.getSerie() + "/" + stat.getOption().getSigle());
                                            salcu.setEffectif(salcu.getEffectif() + stat.getNombre());
                                            //souscentre, zone et paquet déjà connus ici
                                        }
                                        souscentreSalleCumuleeAutresLitterairesMap.put(souscentre, salcu);
                                    }
                                }
                                souscentreSalleSimplesAutresLitterairesMap.put(souscentre, salsimplesList);
                            }

                            //remplissage de souscentreSalleSimplesScientifiquesMap et souscentreSalleCumuleeScientifiquesMap
                            for (Souscentre souscentre : souscentreStatistiqueScientifiquesMap.keySet()) {
                                ArrayList<Salle> salsimplesList = new ArrayList<>();
                                for (Statistique stat : souscentreStatistiqueScientifiquesMap.get(souscentre)) {
                                    if (stat.getNombre() >= 20) {
                                        Salle sal = new Salle();
                                        sal.setSouscentre(souscentre);
                                        sal.setSerie(stat.getOption().getSigle());
                                        sal.setEffectif(stat.getNombre());
                                        sal.setNbcandsal(nbrecandparsalle);
                                        salsimplesList.add(sal);
                                    } else {
                                        SalleCumulee salcu = new SalleCumulee();
                                        if (!souscentreSalleCumuleeScientifiquesMap.containsKey(souscentre)) {
                                            salcu.setSouscentre(souscentre);
                                            salcu.setSerie(stat.getOption().getSigle());
                                            salcu.setEffectif(stat.getNombre());
                                            salcu.setNbcandsal(nbrecandparsalle);
                                            salcu.setPaquet("SCIENTIFIQUE");
                                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                salcu.setZone("NOSO");
                                            }
                                            souscentreSalleCumuleeScientifiquesMap.put(souscentre, salcu);
                                        }
                                        if (!souscentreSalleCumuleeScientifiquesMap.isEmpty() && souscentreSalleCumuleeScientifiquesMap.containsKey(souscentre)) {
                                            salcu = souscentreSalleCumuleeScientifiquesMap.get(souscentre);
                                            if (!stat.getOption().getSigle().equals(salcu.getSerie())) {
                                                salcu.setSerie(salcu.getSerie() + "/" + stat.getOption().getSigle());
                                                salcu.setEffectif(salcu.getEffectif() + stat.getNombre());
                                            }
                                            //souscentre, zone et paquet déjà connus ici
                                            souscentreSalleCumuleeScientifiquesMap.put(souscentre, salcu);
                                        }
                                    }
                                }
                                souscentreSalleSimplesScientifiquesMap.put(souscentre, salsimplesList);
                            }
                            //remplissage de souscentreSallesMap avec calcul de nbsal et de nbsurvdessurv
                            for (Souscentre souscentre : souscentresList) {
                                ArrayList<Salle> sallesList = new ArrayList<>();
                                if (souscentreSalleCumuleeABIMap.containsKey(souscentre)) {
                                    souscentreSalleCumuleeABIMap.get(souscentre).calculNbsal();
                                    Salle sal = new Salle();
                                    sal.setSouscentre(souscentre);
                                    sal.setSerie(souscentreSalleCumuleeABIMap.get(souscentre).getSerie());
                                    sal.setEffectif(souscentreSalleCumuleeABIMap.get(souscentre).getEffectif());
                                    sal.setNbsal(souscentreSalleCumuleeABIMap.get(souscentre).getNbsal());
                                    sallesList.add(sal);
                                }
                                if (souscentreSalleSimplesABIMap.containsKey(souscentre)) {
                                    for (Salle salle : souscentreSalleSimplesABIMap.get(souscentre)) {
                                        salle.calculNbsal();
                                        sallesList.add(salle);
                                    }
                                }
                                if (souscentreSalleCumuleeAutresLitterairesMap.containsKey(souscentre)) {
                                    souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).calculNbsal();
                                    Salle sal = new Salle();
                                    sal.setSouscentre(souscentre);
                                    sal.setSerie(souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).getSerie());
                                    sal.setEffectif(souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).getEffectif());
                                    sal.setNbsal(souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).getNbsal());
                                    sallesList.add(sal);
                                }
                                if (souscentreSalleSimplesAutresLitterairesMap.containsKey(souscentre)) {
                                    for (Salle salle : souscentreSalleSimplesAutresLitterairesMap.get(souscentre)) {
                                        salle.calculNbsal();
                                        sallesList.add(salle);
                                    }
                                }
                                if (souscentreSalleCumuleeScientifiquesMap.containsKey(souscentre)) {
                                    souscentreSalleCumuleeScientifiquesMap.get(souscentre).calculNbsal();
                                    Salle sal = new Salle();
                                    sal.setSouscentre(souscentre);
                                    sal.setSerie(souscentreSalleCumuleeScientifiquesMap.get(souscentre).getSerie());
                                    sal.setEffectif(souscentreSalleCumuleeScientifiquesMap.get(souscentre).getEffectif());
                                    sal.setNbsal(souscentreSalleCumuleeScientifiquesMap.get(souscentre).getNbsal());
                                    sallesList.add(sal);
                                }
                                if (souscentreSalleSimplesScientifiquesMap.containsKey(souscentre)) {
                                    for (Salle salle : souscentreSalleSimplesScientifiquesMap.get(souscentre)) {
                                        salle.calculNbsal();
                                        sallesList.add(salle);
                                    }
                                }
                                souscentreSallesMap.put(souscentre, sallesList);
                            }
                            List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(examensSelected.get(0).getSigle(), anneeSelected);
                            //remplissage de souscentreMap1
                            for (Statistique s : lesStats) {
                                if (souscentreMap1.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap1
                                    int nbcand = souscentreMap1.get(s.getSouscentre());//on récupère son nombre de candidats
                                    souscentreMap1.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                } else {
                                    souscentreMap1.put(s.getSouscentre(), s.getNombre());
                                }
                            }

                            //remplissage secretariatEffectifMap
                            for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                                List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreEtSession(souscentre.getNomsouscent(), anneeSelected);
                                if (!secretariatsList.isEmpty()) {
                                    for (Secretariat sec : secretariatsList) {
                                        int stat = 0;
                                        List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                                        for (Statsecretariat statsec : statsecretariatsList) {
                                            if (statsec.getSecretariat().getNumsec() == sec.getNumsec() && statsec.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                                stat += statsec.getNombre();
                                            }
                                        }
                                        secretariatEffectifMap.put(sec, stat);
                                    }
                                }
                            }
                            //remplissage de souscentreSecretariatsMap
                            for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                                ArrayList<Secretariat> secretariatsList = new ArrayList<>();
                                for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                    if (sec.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                        if (!secretariatsList.contains(sec)) {
                                            secretariatsList.add(sec);
                                        }
                                    }
                                }
                                if (!secretariatsList.isEmpty()) {
                                    souscentreSecretariatsMap.put(souscentre, secretariatsList);
                                }
                            }

                            List<Statsecretariat> statsecABI = metier.findAllStatsecretariatsABID1ExamenDans1Session(examensSelected.get(0).getSigle(), anneeSelected);
                            List<Statsecretariat> statsecAutresLitteraires = metier.findAllStatsecretariatsAutresLitterairesD1ExamenDans1Session(examensSelected.get(0).getSigle(), anneeSelected);
                            List<Statsecretariat> statsecScientifiques = metier.findAllStatsecretariatsScientifiquesD1ExamenDans1Session(examensSelected.get(0).getSigle(), anneeSelected);

                            //remplissage de secretariatStatsecABIMap et souscentresList en partie
                            for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                for (Statsecretariat s : statsecABI) {
                                    if (s.getSecretariat().getNumsec() == sec.getNumsec() && s.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                        if (secretariatStatsecABIMap.containsKey(sec)) {//si le présent secretariat est dans secretariatStatsecABIMap
                                            secretariatStatsecABIMap.get(s.getSecretariat()).add(s);//on lui ajoute s
                                        } else {
                                            ArrayList<Statsecretariat> liste = new ArrayList<>();
                                            liste.add(s);
                                            secretariatStatsecABIMap.put(s.getSecretariat(), liste);
                                        }
                                    }
                                }
                            }

                            //remplissage de secretariatStatsecAutresLitterairesMap et souscentresList en partie
                            for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                for (Statsecretariat s : statsecAutresLitteraires) {
                                    if (s.getSecretariat().getNumsec() == sec.getNumsec() && s.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                        if (secretariatStatsecAutresLitterairesMap.containsKey(s.getSecretariat())) {//si le présent secretariat est dans secretariatStatsecAutresLitterairesMap
                                            secretariatStatsecAutresLitterairesMap.get(s.getSecretariat()).add(s);//on lui ajoute s
                                        } else {
                                            ArrayList<Statsecretariat> liste = new ArrayList<>();
                                            liste.add(s);
                                            secretariatStatsecAutresLitterairesMap.put(s.getSecretariat(), liste);
                                        }
                                    }
                                }
                            }

                            //remplissage de secretariatStatsecScientifiquesMap et souscentresList en partie
                            for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                for (Statsecretariat s : statsecScientifiques) {
                                    if (s.getSecretariat().getNumsec() == sec.getNumsec() && s.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                        if (secretariatStatsecScientifiquesMap.containsKey(s.getSecretariat())) {//si le présent secretariat est dans secretariatStatsecScientifiquesMap
                                            secretariatStatsecScientifiquesMap.get(s.getSecretariat()).add(s);//on lui ajoute s
                                        } else {
                                            ArrayList<Statsecretariat> liste = new ArrayList<>();
                                            liste.add(s);
                                            secretariatStatsecScientifiquesMap.put(s.getSecretariat(), liste);
                                        }
                                    }
                                }
                            }

                            //remplissage de secretariatSalleSimplesABIMap et secretariatSalleCumuleeABIMap
                            for (Secretariat secretariat : secretariatStatsecABIMap.keySet()) {
                                ArrayList<Sallesecret> salsimplesList = new ArrayList<>();
                                for (Statsecretariat statsec : secretariatStatsecABIMap.get(secretariat)) {
                                    if (statsec.getNombre() >= 20) {
                                        Sallesecret sal = new Sallesecret();
                                        sal.setSecretariat(secretariat);
                                        sal.setSerie(statsec.getOption().getSigle());
                                        sal.setEffectif(statsec.getNombre());
                                        sal.setNbcandsal(nbrecandparsalle);
                                        salsimplesList.add(sal);
                                    } else {
                                        SalleCumuleesecret salcu = new SalleCumuleesecret();
                                        if (!secretariatSalleCumuleeABIMap.containsKey(secretariat)) {
                                            salcu.setSecretariat(secretariat);
                                            salcu.setSerie(statsec.getOption().getSigle());
                                            salcu.setEffectif(statsec.getNombre());
                                            salcu.setNbcandsal(nbrecandparsalle);
                                            //salcu.setPaquet("ABI"); //le paquet est ABI par défaut
                                            if (secretariat.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || secretariat.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                salcu.setZone("NOSO");
                                            }
                                        }
                                        if (!secretariatSalleCumuleeABIMap.isEmpty() && secretariatSalleCumuleeABIMap.containsKey(secretariat)) {
                                            salcu = secretariatSalleCumuleeABIMap.get(secretariat);
                                            salcu.setSerie(salcu.getSerie() + "/" + statsec.getOption().getSigle());
                                            salcu.setEffectif(salcu.getEffectif() + statsec.getNombre());
                                            //secretariat, zone et paquet déjà connus ici
                                        }
                                        secretariatSalleCumuleeABIMap.put(secretariat, salcu);
                                    }
                                }
                                secretariatSalleSimplesABIMap.put(secretariat, salsimplesList);
                            }

                            //remplissage de secretariatSalleSimplesAutresLitterairesMap et secretariatSalleCumuleeAutresLitterairesMap
                            for (Secretariat secretariat : secretariatStatsecAutresLitterairesMap.keySet()) {
                                ArrayList<Sallesecret> salsimplesList = new ArrayList<>();
                                for (Statsecretariat statsec : secretariatStatsecAutresLitterairesMap.get(secretariat)) {
                                    if (statsec.getNombre() >= 20) {
                                        Sallesecret sal = new Sallesecret();
                                        sal.setSecretariat(secretariat);
                                        sal.setSerie(statsec.getOption().getSigle());
                                        sal.setEffectif(statsec.getNombre());
                                        sal.setNbcandsal(nbrecandparsalle);
                                        salsimplesList.add(sal);
                                    } else {
                                        SalleCumuleesecret salcu = new SalleCumuleesecret();
                                        if (!secretariatSalleCumuleeAutresLitterairesMap.containsKey(secretariat)) {
                                            salcu.setSecretariat(secretariat);
                                            salcu.setSerie(statsec.getOption().getSigle());
                                            salcu.setEffectif(statsec.getNombre());
                                            salcu.setNbcandsal(nbrecandparsalle);
                                            salcu.setPaquet("AUTRES");
                                            if (secretariat.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || secretariat.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                salcu.setZone("NOSO");
                                            }
                                        }
                                        if (!secretariatSalleCumuleeAutresLitterairesMap.isEmpty() && secretariatSalleCumuleeAutresLitterairesMap.containsKey(secretariat)) {
                                            salcu = secretariatSalleCumuleeAutresLitterairesMap.get(secretariat);
                                            salcu.setSerie(salcu.getSerie() + "/" + statsec.getOption().getSigle());
                                            salcu.setEffectif(salcu.getEffectif() + statsec.getNombre());
                                            //souscentre, zone et paquet déjà connus ici
                                        }
                                        secretariatSalleCumuleeAutresLitterairesMap.put(secretariat, salcu);
                                    }
                                }
                                secretariatSalleSimplesAutresLitterairesMap.put(secretariat, salsimplesList);
                            }

                            //remplissage de secretariatSalleSimplesScientifiquesMap et secretariatSalleCumuleeScientifiquesMap
                            for (Secretariat secretariat : secretariatStatsecScientifiquesMap.keySet()) {
                                ArrayList<Sallesecret> salsimplesList = new ArrayList<>();
                                for (Statsecretariat statsec : secretariatStatsecScientifiquesMap.get(secretariat)) {
                                    if (statsec.getNombre() >= 20) {
                                        Sallesecret sal = new Sallesecret();
                                        sal.setSecretariat(secretariat);
                                        sal.setSerie(statsec.getOption().getSigle());
                                        sal.setEffectif(statsec.getNombre());
                                        sal.setNbcandsal(nbrecandparsalle);
                                        salsimplesList.add(sal);
                                    } else {
                                        SalleCumuleesecret salcu = new SalleCumuleesecret();
                                        if (!secretariatSalleCumuleeScientifiquesMap.containsKey(secretariat)) {
                                            salcu.setSecretariat(secretariat);
                                            salcu.setSerie(statsec.getOption().getSigle());
                                            salcu.setEffectif(statsec.getNombre());
                                            salcu.setNbcandsal(nbrecandparsalle);
                                            salcu.setPaquet("SCIENTIFIQUE");
                                            if (secretariat.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || secretariat.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                salcu.setZone("NOSO");
                                            }
                                        }
                                        if (!secretariatSalleCumuleeScientifiquesMap.isEmpty() && secretariatSalleCumuleeScientifiquesMap.containsKey(secretariat)) {
                                            salcu = secretariatSalleCumuleeScientifiquesMap.get(secretariat);
                                            salcu.setSerie(salcu.getSerie() + "/" + statsec.getOption().getSigle());
                                            salcu.setEffectif(salcu.getEffectif() + statsec.getNombre());
                                            //souscentre, zone et paquet déjà connus ici
                                        }
                                        secretariatSalleCumuleeScientifiquesMap.put(secretariat, salcu);
                                    }
                                }
                                secretariatSalleSimplesScientifiquesMap.put(secretariat, salsimplesList);
                            }
                            //remplissage de secretariatSallesMap avec calcul de nbsal et de nbsurvdessurv
                            for (Secretariat secretariat : secretariatEffectifMap.keySet()) {
                                ArrayList<Sallesecret> sallesList = new ArrayList<>();
                                if (secretariatSalleCumuleeABIMap.containsKey(secretariat)) {
                                    secretariatSalleCumuleeABIMap.get(secretariat).calculNbsal();
                                    Sallesecret sal = new Sallesecret();
                                    sal.setSecretariat(secretariat);
                                    sal.setSerie(secretariatSalleCumuleeABIMap.get(secretariat).getSerie());
                                    sal.setEffectif(secretariatSalleCumuleeABIMap.get(secretariat).getEffectif());
                                    sal.setNbsal(secretariatSalleCumuleeABIMap.get(secretariat).getNbsal());
                                    sallesList.add(sal);
                                }
                                if (secretariatSalleSimplesABIMap.containsKey(secretariat)) {
                                    for (Sallesecret salle : secretariatSalleSimplesABIMap.get(secretariat)) {
                                        salle.calculNbsal();
                                        sallesList.add(salle);
                                    }
                                }
                                if (secretariatSalleCumuleeAutresLitterairesMap.containsKey(secretariat)) {
                                    secretariatSalleCumuleeAutresLitterairesMap.get(secretariat).calculNbsal();
                                    Sallesecret sal = new Sallesecret();
                                    sal.setSecretariat(secretariat);
                                    sal.setSerie(secretariatSalleCumuleeAutresLitterairesMap.get(secretariat).getSerie());
                                    sal.setEffectif(secretariatSalleCumuleeAutresLitterairesMap.get(secretariat).getEffectif());
                                    sal.setNbsal(secretariatSalleCumuleeAutresLitterairesMap.get(secretariat).getNbsal());
                                    sallesList.add(sal);
                                }
                                if (secretariatSalleSimplesAutresLitterairesMap.containsKey(secretariat)) {
                                    for (Sallesecret salle : secretariatSalleSimplesAutresLitterairesMap.get(secretariat)) {
                                        salle.calculNbsal();
                                        sallesList.add(salle);
                                    }
                                }
                                if (secretariatSalleCumuleeScientifiquesMap.containsKey(secretariat)) {
                                    secretariatSalleCumuleeScientifiquesMap.get(secretariat).calculNbsal();
                                    Sallesecret sal = new Sallesecret();
                                    sal.setSecretariat(secretariat);
                                    sal.setSerie(secretariatSalleCumuleeScientifiquesMap.get(secretariat).getSerie());
                                    sal.setEffectif(secretariatSalleCumuleeScientifiquesMap.get(secretariat).getEffectif());
                                    sal.setNbsal(secretariatSalleCumuleeScientifiquesMap.get(secretariat).getNbsal());
                                    sallesList.add(sal);
                                }
                                if (secretariatSalleSimplesScientifiquesMap.containsKey(secretariat)) {
                                    for (Sallesecret salle : secretariatSalleSimplesScientifiquesMap.get(secretariat)) {
                                        salle.calculNbsal();
                                        sallesList.add(salle);
                                    }
                                }
                                secretariatSallesMap.put(secretariat, sallesList);
                            }

                            //recherche des types des examens à utiliser
                            for (Examen examen : examensSelected) {
                                System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                                if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                                    typesBruts.add("ESG");
                                }
                                if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                                    typesBruts.add("ESTP");
                                }
                            }
                            if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                                typesAconsiderer.add("ESG");
                                typesAconsiderer.add("TOUT");
                            }
                            if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                                typesAconsiderer.add("ESTP");
                                typesAconsiderer.add("TOUT");
                            }
                            if (typesBruts.size() == 2) {
                                typesAconsiderer.add("ESG");
                                typesAconsiderer.add("ESTP");
                                typesAconsiderer.add("TOUT");
                            }
                            //recherche des niveaux des examens à utiliser
                            if (!niveauSelected.equals("TOUT")) {
                                niveauxAconsiderer.add(niveauSelected);
                                niveauxAconsiderer.add("TOUT");
                            }
                            if (niveauSelected.equals("TOUT")) {
                                niveauxAconsiderer.add("PROB");
                                niveauxAconsiderer.add("BACC");
                                niveauxAconsiderer.add("TOUT");
                            }
                            //recherche des sous-centres par centre de billetage
                            for (String niveau : niveauxAconsiderer) {
                                for (String type : typesAconsiderer) {
                                    List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                                    for (Centrebilletage centrebilletage : desCentrebilletages) {
                                        ArrayList<Souscentre> scentresList = new ArrayList<>();
                                        if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                            List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                            for (Secteurcouv sect : secteurs) {
                                                if (!scentresList.contains(sect.getSouscentre())) {
                                                    scentresList.add(sect.getSouscentre());
                                                }
                                            }
                                            centrebilletageSouscentresMap.put(centrebilletage, scentresList);
                                        }
                                    }
                                }
                            }
                            if (!jRadioButtonAdditif.isSelected()) {
                                try {
                                    List<Map<String, Object>> datasource = new ArrayList<>();
                                    List<Region> regions = metier.findAllRegions();
                                    int nbVac = nombreVacations(examensSelected.get(0));
                                    for (Region region : regions) {
                                        for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                            if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                                int num = 1;
                                                int totalMontant = 0;
                                                int effectif = 0;
                                                ArrayList<Souscentre> scentresList1 = centrebilletageSouscentresMap.get(centrebilletage);
                                                for (int i = 0; i < scentresList1.size(); i++) {
                                                    Souscentre souscentre = scentresList1.get(i);
                                                    int nbSurveillants = 0;
                                                    int nbSurvDesSurv = 0;
                                                    int nbVacSurv = 0;
                                                    int nbVacSurvDesSurv = 0;
                                                    int cout = 0;
                                                    int nbtours = 0;
                                                    String souscentreAffiche = "";

                                                    if (souscentreSallesMap.containsKey(souscentre)) {//souscentre à un unique secrétariat
                                                        nbtours = 1;
                                                    }
                                                    if (souscentreSecretariatsMap.containsKey(souscentre)) {//souscentre à plusieurs secrétariats
                                                        nbtours = souscentreSecretariatsMap.get(souscentre).size();
                                                    }

                                                    for (int j = 0; j < nbtours; j++) {
                                                        int nbSalles = 0;
                                                        if (j == 0 && souscentreSallesMap.containsKey(souscentre)) {//souscentre à un unique secrétariat
                                                            effectif = souscentreMap1.get(souscentre);
                                                            souscentreAffiche = souscentre.getNomsouscent();
                                                            for (Salle sal : souscentreSallesMap.get(souscentre)) {
                                                                nbSalles += sal.getNbsal();
                                                            }
                                                        }
                                                        if (j == 0 && souscentreSecretariatsMap.containsKey(souscentre)) {//souscentre à 2 secrétariats                                                                
                                                            Secretariat premiersec = souscentreSecretariatsMap.get(souscentre).get(j);
                                                            effectif = secretariatEffectifMap.get(premiersec);
                                                            if (premiersec.getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                                                                souscentreAffiche = premiersec.getEtablissement().getAbreviation() + " (Sec. " + premiersec.getNumsec() + ")";
                                                            } else {
                                                                souscentreAffiche = premiersec.getEtablissement().getAbreviation() + " (Sec. " + premiersec.getNumsec() + " du sous-centre " + souscentre.getEtablissement().getAbreviation() + ")";
                                                            }
                                                            for (Sallesecret sal : secretariatSallesMap.get(premiersec)) {
                                                                nbSalles += sal.getNbsal();
                                                            }
                                                        }
                                                        if (j == 1 && souscentreSecretariatsMap.containsKey(souscentre)) {//souscentre à 2 secrétariats
                                                            Secretariat deuxiemesec = souscentreSecretariatsMap.get(souscentre).get(j);
                                                            effectif = secretariatEffectifMap.get(deuxiemesec);
                                                            if (deuxiemesec.getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                                                                souscentreAffiche = deuxiemesec.getEtablissement().getAbreviation() + " (Sec. " + deuxiemesec.getNumsec() + ")";
                                                            } else {
                                                                souscentreAffiche = deuxiemesec.getEtablissement().getAbreviation() + " (Sec. " + deuxiemesec.getNumsec() + " du sous-centre " + souscentre.getEtablissement().getAbreviation() + ")";
                                                            }
                                                            for (Sallesecret sal : secretariatSallesMap.get(deuxiemesec)) {
                                                                nbSalles += sal.getNbsal();
                                                            }
                                                        }
                                                        if (nbtours > 2 && j == 2 && souscentreSecretariatsMap.containsKey(souscentre)) {//souscentre à 3 secrétariats
                                                            Secretariat troisiemesec = souscentreSecretariatsMap.get(souscentre).get(j);
                                                            effectif = secretariatEffectifMap.get(troisiemesec);
                                                            if (troisiemesec.getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                                                                souscentreAffiche = troisiemesec.getEtablissement().getAbreviation() + " (Sec. " + troisiemesec.getNumsec() + ")";
                                                            } else {
                                                                souscentreAffiche = troisiemesec.getEtablissement().getAbreviation() + " (Sec. " + troisiemesec.getNumsec() + " du sous-centre " + souscentre.getEtablissement().getAbreviation() + ")";
                                                            }
                                                            for (Sallesecret sal : secretariatSallesMap.get(troisiemesec)) {
                                                                nbSalles += sal.getNbsal();
                                                            }
                                                        }
                                                        nbSurveillants = 2 * nbSalles;
                                                        nbSurvDesSurv = calculNombreSurvDesSurv(nbSalles);
                                                        //calcul du coût
                                                        nbVacSurv = nbVac * nbSurveillants;
                                                        nbVacSurvDesSurv = nbVac * nbSurvDesSurv;
                                                        cout = (nbVacSurv + nbVacSurvDesSurv) * 1500;

                                                        Map<String, Object> row = new HashMap<>();
                                                        row.put("num", num++);
                                                        row.put("region", region.getNomreg());
                                                        row.put("reference", "");
                                                        row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                        row.put("session", anneeSelected);
                                                        row.put("examen", groupedexamensEnstring);
                                                        row.put("souscentre", souscentreAffiche);
                                                        row.put("effectif", effectif);
                                                        row.put("nbSalles", nbSalles);
                                                        row.put("nbSurv", nbSurveillants);
                                                        row.put("nbVacSurv", nbVacSurv);
                                                        row.put("nbSurvDesSurv", nbSurvDesSurv);
                                                        row.put("nbVacSurvDesSurv", nbVacSurvDesSurv);
                                                        row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                        int coutArrondi = (int) Math.ceil((double) cout / (double) 1000) * 1000;
                                                        row.put("montant", coutArrondi);
                                                        totalMontant += coutArrondi;//jasperreport prendra la dernière valeur de cout
                                                        row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                        datasource.add(row);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatSurveillanceReport.jrxml");
                                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                                    jasperViewer.setVisible(true);
                                } catch (JRException e) {
                                    JOptionPane.showMessageDialog(this, e.getMessage());
                                }
                            } else {
                                /*
                                    try {
                                        List<Map<String, Object>> datasource = new ArrayList<>();
                                        List<Region> regions = metier.findAllRegions();
                                        for (Region region : regions) {
                                            for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                                if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                                    int num = 1;
                                                    int totalMontant = 0;
                                                    int effectif = 0;
                                                    ArrayList<Souscentre> scentresList1 = centrebilletageSouscentresMap.get(centrebilletage);
                                                    for (int i = 0; i < scentresList1.size(); i++) {
                                                        Souscentre souscentre = scentresList1.get(i);
                                                        if (souscentreSallesMap.containsKey(souscentre)) {
                                                            effectif = souscentreMap1.get(souscentre);
                                                            int nbVac = nombreVacations(examensSelected.get(0));
                                                            //int ncandParSalle = nombreCandidatsParSalle(examensSelected.get(0));
                                                            int nbSalles = 0;
                                                            for (Salle sal : souscentreSallesMap.get(souscentre)) {
                                                                nbSalles += sal.getNbsal();
                                                            }
                                                            int nbSurveillants = 2 * nbSalles;
                                                            int nbSurvDesSurv = calculNombreSurvDesSurv(nbSalles);

                                                            //calcul du coût
                                                            int nbVacSurv = nbVac * nbSurveillants;
                                                            int nbVacSurvDesSurv = nbVac * nbSurvDesSurv;
                                                            int cout = (nbVacSurv + nbVacSurvDesSurv) * 1500;

                                                            Map<String, Object> row = new HashMap<>();
                                                            row.put("num", num++);
                                                            row.put("region", region.getNomreg());
                                                            row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                            row.put("session", anneeSelected);
                                                            row.put("examen", groupedexamensEnstring);
                                                            row.put("souscentre", souscentre.getNomsouscent());
                                                            row.put("reference", "");
                                                            row.put("effectif", effectif);
                                                            row.put("nbSalles", nbSalles);
                                                            row.put("nbSurv", nbSurveillants);
                                                            row.put("nbVacSurv", nbVacSurv);
                                                            row.put("nbSurvDesSurv", nbSurvDesSurv);
                                                            row.put("nbVacSurvDesSurv", nbVacSurvDesSurv);
                                                            int coutArrondi = (int) Math.ceil((double) cout / (double) 1000) * 1000;
                                                            row.put("montant", coutArrondi);
                                                            totalMontant += coutArrondi;//jasperreport prendra la dernière valeur de cout
                                                            row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                            datasource.add(row);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatAdditifSurveillanceReport.jrxml");
                                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                                        jasperViewer.setVisible(true);
                                    } catch (JRException e) {
                                        JOptionPane.showMessageDialog(this, e.getMessage());
                                    }
                                 */
                            }
                            souscentreMap1.clear();//on vide le hashmap
                            examensSelected.clear();//on vide 
                            centrebilletageSouscentresMap.clear();
                            typesBruts.clear();
                            typesAconsiderer.clear();
                            niveauxAconsiderer.clear();
                        } else {//type technique                           
                            for (Examen e : examensSelected) {
                                List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                                for (Statistique s : lesStats) {
                                    ArrayList<Statistique> statsList = new ArrayList<>();
                                    if (souscentreStatistiquesMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                        statsList = souscentreStatistiquesMap.get(s.getSouscentre());
                                    }
                                    statsList.add(s);
                                    souscentreStatistiquesMap.put(s.getSouscentre(), statsList);
                                }
                            }

                            for (Souscentre scentre : souscentreStatistiquesMap.keySet()) {
                                for (Statistique s : souscentreStatistiquesMap.get(scentre)) {
                                    if (souscentreEffectifMap.containsKey(scentre) && s.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {//si le présent sous-centre est dans souscentreMap
                                        int nbcand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                                        souscentreEffectifMap.put(scentre, nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                    } else {
                                        souscentreEffectifMap.put(scentre, s.getNombre());
                                    }
                                }
                            }

                            //remplissage souscentreAsecretariatsDemultipliesList
                            secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                            if (!secretariats.isEmpty()) {
                                for (Secretariat sec : secretariats) {
                                    if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                                        souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                                    }
                                }
                            }

                            //remplissage secretariatStatsecretariatsMap
                            for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                                List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreEtSession(souscentre.getNomsouscent(), anneeSelected);
                                List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                                for (Secretariat sec : secretariatsList) {
                                    ArrayList<Statsecretariat> statsList = new ArrayList<>();
                                    for (Statsecretariat statsec : statsecretariatsList) {
                                        if (statsec.getSecretariat().getNumsec() == sec.getNumsec()) {
                                            if (secretariatStatsecretariatsMap.containsKey(sec)) {//si le présent secretariat est dans secretariatStatsecretariatsMap
                                                statsList = secretariatStatsecretariatsMap.get(sec);
                                            }
                                            statsList.add(statsec);
                                            secretariatStatsecretariatsMap.put(sec, statsList);
                                        }
                                    }
                                }
                            }
                            //remplissage de souscentreSecretariatsMap
                            for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                                ArrayList<Secretariat> secretariatsList = new ArrayList<>();
                                for (Secretariat sec : secretariatStatsecretariatsMap.keySet()) {
                                    if (sec.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                        if (!secretariatsList.contains(sec)) {
                                            secretariatsList.add(sec);
                                        }
                                    }
                                }
                                if (!secretariatsList.isEmpty()) {
                                    souscentreSecretariatsMap.put(souscentre, secretariatsList);
                                }
                            }
                            //remplissage secretariatEffectifMap     
                            for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                                List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreEtSession(souscentre.getNomsouscent(), anneeSelected);
                                if (!secretariatsList.isEmpty()) {
                                    for (Secretariat sec : secretariatsList) {
                                        int stat = 0;
                                        List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                                        for (Statsecretariat statsec : statsecretariatsList) {
                                            if (statsec.getSecretariat().getNumsec() == sec.getNumsec() && statsec.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                                stat += statsec.getNombre();
                                            }
                                        }
                                        secretariatEffectifMap.put(sec, stat);
                                    }
                                }
                            }
                            //remplissage souscentreSalletechsMap et secretariatSalletechsecretsMap
                            int nbcandsal = nombreCandidatsParSalle(niveauSelected, typeSelected);
                            for (Souscentre souscentre : souscentreStatistiquesMap.keySet()) {
                                if (!souscentreAsecretariatsDemultipliesList.contains(souscentre)) {//le souscentre ne doit pas être à secrétariats démultipliés                       
                                    ArrayList<Salletech> salletechsList = new ArrayList<>();
                                    ArrayList<Statistique> restestatsList = new ArrayList<>();
                                    for (Statistique stat : souscentreStatistiquesMap.get(souscentre)) {
                                        int reste = stat.getNombre();
                                        Salletech sal = new Salletech();
                                        int nbsal = 0;
                                        if (reste >= nbcandsal) {
                                            sal.setSouscentre(souscentre);
                                            sal.setSerie(stat.getOption().getSigle());
                                            while (reste >= nbcandsal) {
                                                sal.setEffectif(sal.getEffectif() + nbcandsal);
                                                reste -= nbcandsal;
                                                nbsal += 1;
                                            }
                                            sal.setNbsal(nbsal);
                                            salletechsList.add(sal);
                                            if (reste != 0) {
                                                Statistique uneStat = new Statistique(reste, stat.getExamen(), stat.getOption(), stat.getSession(), stat.getSouscentre());
                                                restestatsList.add(uneStat);
                                            }
                                        } else {
                                            restestatsList.add(stat);
                                        }
                                    }
                                    //constituer les salletech de 2 spécialités ou 1 lorsque restestatsList à 1 seule stat
                                    if (restestatsList.size() > 1) {
                                        int i = 0;
                                        while (i < restestatsList.size() - 1) {
                                            boolean trouver1 = false;
                                            for (int j = i + 1; j < restestatsList.size(); j++) {
                                                int nb = restestatsList.get(i).getNombre() + restestatsList.get(j).getNombre();
                                                if (nb >= nbcandsal) {
                                                    trouver1 = true;
                                                    Salletech sal = new Salletech();
                                                    sal.setSouscentre(souscentre);
                                                    sal.setSerie(restestatsList.get(i).getOption().getSigle() + "/" + restestatsList.get(j).getOption().getSigle());
                                                    sal.setEffectif(nbcandsal);
                                                    sal.setNbsal(1);
                                                    salletechsList.add(sal);
                                                    if (restestatsList.get(i).getNombre() >= restestatsList.get(j).getNombre()) {
                                                        if (nb - nbcandsal > 0) {
                                                            restestatsList.get(j).setNombre(nb - nbcandsal);
                                                        } else {
                                                            restestatsList.remove(j);
                                                        }
                                                        restestatsList.remove(i);
                                                    } else {
                                                        if (nb - nbcandsal > 0) {
                                                            restestatsList.get(i).setNombre(nb - nbcandsal);
                                                        } else {
                                                            restestatsList.remove(i);
                                                        }
                                                        if (nb - nbcandsal == 0) {//on a remove i donc j a décalé d'une position
                                                            restestatsList.remove(j - 1);
                                                        } else {
                                                            restestatsList.remove(j);
                                                        }
                                                    }
                                                    break;
                                                }
                                            }
                                            if (!trouver1 && i < restestatsList.size() - 2) {
                                                i++;
                                            }
                                            if (i == restestatsList.size() - 2) {
                                                break;
                                            }
                                        }
                                    }
                                    while (restestatsList.size() > 1) {
                                        Salletech sal = new Salletech();
                                        sal.setSouscentre(souscentre);
                                        sal.setSerie(restestatsList.get(0).getOption().getSigle() + "/" + restestatsList.get(1).getOption().getSigle());
                                        sal.setEffectif(restestatsList.get(0).getNombre() + restestatsList.get(1).getNombre());
                                        sal.setNbsal(1);
                                        salletechsList.add(sal);
                                        restestatsList.remove(0);
                                        restestatsList.remove(0);//au lieu de remove(1) à cause du décalage
                                    }
                                    if (restestatsList.size() == 1) {//restestatsList n'a qu'une spécialité donc pas moyen de combiner
                                        Salletech sal = new Salletech();
                                        sal.setSouscentre(souscentre);
                                        sal.setSerie(restestatsList.get(0).getOption().getSigle());
                                        sal.setEffectif(restestatsList.get(0).getNombre());
                                        sal.setNbsal(1);
                                        salletechsList.add(sal);
                                    }
                                    for (int i = 0; i < salletechsList.size(); i++) {
                                        if (salletechsList.get(i).getEffectif() > nbcandsal && salletechsList.get(i).getNbsal()== 1) {
                                            int diff = salletechsList.get(i).getEffectif() - nbcandsal;
                                            salletechsList.get(i).setEffectif(nbcandsal);
                                            if (diff > 0) {
                                                Salletech nouvellesal = new Salletech();
                                                nouvellesal.setSouscentre(souscentre);
                                                nouvellesal.setSerie(salletechsList.get(i).getSerie());
                                                nouvellesal.setEffectif(diff);
                                                nouvellesal.setNbsal(1);
                                                salletechsList.add(nouvellesal);
                                            }
                                        }
                                    }
                                    souscentreSalletechsMap.put(souscentre, salletechsList);
                                } else {
                                    //cas souscentre à secrétariats démultipliés
                                    ArrayList<Secretariat> lesSecretariatsD1souscentre = souscentreSecretariatsMap.get(souscentre);
                                    for (Secretariat sec : lesSecretariatsD1souscentre) {
                                        ArrayList<Salletechsecret> salletechsecretsList = new ArrayList<>();
                                        ArrayList<Statsecretariat> restestatsecList = new ArrayList<>();
                                        for (Statsecretariat statsec : secretariatStatsecretariatsMap.get(sec)) {
                                            int reste = statsec.getNombre();
                                            Salletechsecret sal = new Salletechsecret();
                                            int nbsal = 0;
                                            if (reste >= nbcandsal) {
                                                sal.setSecretariat(sec);
                                                sal.setSerie(statsec.getOption().getSigle());
                                                while (reste >= nbcandsal) {
                                                    sal.setEffectif(sal.getEffectif() + nbcandsal);
                                                    reste -= nbcandsal;
                                                    nbsal += 1;
                                                }
                                                sal.setNbsal(nbsal);
                                                salletechsecretsList.add(sal);
                                                if (reste != 0) {
                                                    Statsecretariat uneStat = new Statsecretariat(sec, statsec.getExamen(), statsec.getOption(), reste);
                                                    restestatsecList.add(uneStat);
                                                }
                                            } else {
                                                restestatsecList.add(statsec);
                                            }
                                        }
                                        //constituer les salletechsecret de 2 spécialités
                                        if (restestatsecList.size() > 1) {
                                            int i = 0;
                                            while (i < restestatsecList.size() - 1) {
                                                boolean trouver1 = false;
                                                for (int j = i + 1; j < restestatsecList.size(); j++) {
                                                    int nb = restestatsecList.get(i).getNombre() + restestatsecList.get(j).getNombre();
                                                    if (nb >= nbcandsal) {
                                                        trouver1 = true;
                                                        Salletechsecret sal = new Salletechsecret();
                                                        sal.setSecretariat(sec);
                                                        sal.setSerie(restestatsecList.get(i).getOption().getSigle() + "/" + restestatsecList.get(j).getOption().getSigle());
                                                        sal.setEffectif(nbcandsal);
                                                        sal.setNbsal(1);
                                                        salletechsecretsList.add(sal);
                                                        if (restestatsecList.get(i).getNombre() >= restestatsecList.get(j).getNombre()) {
                                                            if (nb - nbcandsal > 0) {
                                                                restestatsecList.get(j).setNombre(nb - nbcandsal);
                                                            } else {
                                                                restestatsecList.remove(j);
                                                            }
                                                            restestatsecList.remove(i);
                                                        } else {
                                                            if (nb - nbcandsal > 0) {
                                                                restestatsecList.get(i).setNombre(nb - nbcandsal);
                                                            } else {
                                                                restestatsecList.remove(i);
                                                            }
                                                            if (nb - nbcandsal == 0) {
                                                                restestatsecList.remove(j - 1);//on a remove i donc j a décalé d'une position
                                                            } else {
                                                                restestatsecList.remove(j);
                                                            }
                                                        }
                                                        break;
                                                    }
                                                }
                                                if (!trouver1 && i < restestatsecList.size() - 2) {
                                                    i++;
                                                }
                                                if (i == restestatsecList.size() - 2) {
                                                    break;
                                                }
                                            }
                                        }
                                        while (restestatsecList.size() > 1) {
                                            Salletechsecret sal = new Salletechsecret();
                                            sal.setSecretariat(sec);
                                            sal.setSerie(restestatsecList.get(0).getOption().getSigle() + "/" + restestatsecList.get(1).getOption().getSigle());
                                            sal.setEffectif(restestatsecList.get(0).getNombre() + restestatsecList.get(1).getNombre());
                                            sal.setNbsal(1);
                                            salletechsecretsList.add(sal);
                                            restestatsecList.remove(0);
                                            restestatsecList.remove(0);
                                        }
                                        if (restestatsecList.size() == 1) {//restestatsList n'a qu'une spécialité donc pas moyen de combiner
                                            Salletechsecret sal = new Salletechsecret();
                                            sal.setSecretariat(sec);
                                            sal.setSerie(restestatsecList.get(0).getOption().getSigle());
                                            sal.setEffectif(restestatsecList.get(0).getNombre());
                                            sal.setNbsal(1);
                                            salletechsecretsList.add(sal);
                                        }
                                        for (int i = 0; i < salletechsecretsList.size(); i++) {
                                            if (salletechsecretsList.get(i).getEffectif() > nbcandsal && salletechsecretsList.get(i).getNbsal()== 1) {
                                                int diff = salletechsecretsList.get(i).getEffectif() - nbcandsal;
                                                salletechsecretsList.get(i).setEffectif(nbcandsal);
                                                if (diff > 0) {
                                                    Salletechsecret nouvellesal = new Salletechsecret();
                                                    nouvellesal.setSecretariat(sec);
                                                    nouvellesal.setSerie(salletechsecretsList.get(i).getSerie());
                                                    nouvellesal.setEffectif(diff);
                                                    nouvellesal.setNbsal(1);
                                                    salletechsecretsList.add(nouvellesal);
                                                }
                                            }
                                        }
                                        secretariatSalletechsecretsMap.put(sec, salletechsecretsList);
                                    }
                                }
                            }

                            //recherche des types des examens à utiliser
                            for (Examen examen : examensSelected) {
                                System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                                if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                                    typesBruts.add("ESG");
                                }
                                if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                                    typesBruts.add("ESTP");
                                }
                            }
                            if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                                typesAconsiderer.add("ESG");
                                typesAconsiderer.add("TOUT");
                            }
                            if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                                typesAconsiderer.add("ESTP");
                                typesAconsiderer.add("TOUT");
                            }
                            if (typesBruts.size() == 2) {
                                typesAconsiderer.add("ESG");
                                typesAconsiderer.add("ESTP");
                                typesAconsiderer.add("TOUT");
                            }
                            //recherche des niveaux des examens à utiliser
                            if (!niveauSelected.equals("TOUT")) {
                                niveauxAconsiderer.add(niveauSelected);
                                niveauxAconsiderer.add("TOUT");
                            }
                            if (niveauSelected.equals("TOUT")) {
                                niveauxAconsiderer.add("PROB");
                                niveauxAconsiderer.add("BACC");
                                niveauxAconsiderer.add("TOUT");
                            }
                            //recherche des sous-centres par centre de billetage
                            for (String niveau : niveauxAconsiderer) {
                                for (String type : typesAconsiderer) {
                                    List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                                    for (Centrebilletage centrebilletage : desCentrebilletages) {
                                        ArrayList<Souscentre> scentresList = new ArrayList<>();
                                        if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                            List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                            for (Secteurcouv sect : secteurs) {
                                                if (!scentresList.contains(sect.getSouscentre())) {
                                                    scentresList.add(sect.getSouscentre());
                                                }
                                            }
                                            centrebilletageSouscentresMap.put(centrebilletage, scentresList);
                                        }
                                    }
                                }
                            }
                            if (!jRadioButtonAdditif.isSelected()) {
                                try {
                                    List<Map<String, Object>> datasource = new ArrayList<>();
                                    List<Region> regions = metier.findAllRegions();
                                    int nbVac = nombreVacations(examensSelected.get(0));
                                    for (Region region : regions) {
                                        for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                            if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                                int num = 1;
                                                int totalMontant = 0;
                                                int effectif = 0;
                                                ArrayList<Souscentre> scentresList1 = centrebilletageSouscentresMap.get(centrebilletage);
                                                for (int i = 0; i < scentresList1.size(); i++) {
                                                    Souscentre souscentre = scentresList1.get(i);
                                                    int nbSurveillants = 0;
                                                    int nbSurvDesSurv = 0;
                                                    int nbVacSurv = 0;
                                                    int nbVacSurvDesSurv = 0;
                                                    int cout = 0;
                                                    int nbtours = 0;
                                                    String souscentreAffiche = "";

                                                    if (souscentreSalletechsMap.containsKey(souscentre)) {//souscentre à un unique secrétariat
                                                        nbtours = 1;
                                                    }
                                                    if (souscentreSecretariatsMap.containsKey(souscentre)) {//souscentre à plusieurs secrétariats
                                                        nbtours = souscentreSecretariatsMap.get(souscentre).size();
                                                    }

                                                    for (int j = 0; j < nbtours; j++) {
                                                        int nbSalles = 0;
                                                        if (j == 0 && souscentreSalletechsMap.containsKey(souscentre)) {//souscentre à un unique secrétariat
                                                            effectif = souscentreEffectifMap.get(souscentre);
                                                            souscentreAffiche = souscentre.getNomsouscent();
                                                            for (Salletech sal : souscentreSalletechsMap.get(souscentre)) {
                                                                nbSalles += sal.getNbsal();
                                                            }
                                                        }
                                                        if (j == 0 && souscentreSecretariatsMap.containsKey(souscentre)) {//souscentre à 2 secrétariats                                                                
                                                            Secretariat premiersec = souscentreSecretariatsMap.get(souscentre).get(j);
                                                            effectif = secretariatEffectifMap.get(premiersec);
                                                            if (premiersec.getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                                                                souscentreAffiche = premiersec.getEtablissement().getAbreviation() + " (Sec. " + premiersec.getNumsec() + ")";
                                                            } else {
                                                                souscentreAffiche = premiersec.getEtablissement().getAbreviation() + " (Sec. " + premiersec.getNumsec() + " du sous-centre " + souscentre.getEtablissement().getAbreviation() + ")";
                                                            }
                                                            for (Salletechsecret sal : secretariatSalletechsecretsMap.get(premiersec)) {
                                                                nbSalles += sal.getNbsal();
                                                            }
                                                        }
                                                        if (j == 1 && souscentreSecretariatsMap.containsKey(souscentre)) {//souscentre à 2 secrétariats
                                                            Secretariat deuxiemesec = souscentreSecretariatsMap.get(souscentre).get(j);
                                                            effectif = secretariatEffectifMap.get(deuxiemesec);
                                                            if (deuxiemesec.getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                                                                souscentreAffiche = deuxiemesec.getEtablissement().getAbreviation() + " (Sec. " + deuxiemesec.getNumsec() + ")";
                                                            } else {
                                                                souscentreAffiche = deuxiemesec.getEtablissement().getAbreviation() + " (Sec. " + deuxiemesec.getNumsec() + " du sous-centre " + souscentre.getEtablissement().getAbreviation() + ")";
                                                            }
                                                            for (Salletechsecret sal : secretariatSalletechsecretsMap.get(deuxiemesec)) {
                                                                nbSalles += sal.getNbsal();
                                                            }
                                                        }
                                                        if (nbtours > 2 && j == 2 && souscentreSecretariatsMap.containsKey(souscentre)) {//souscentre à 3 secrétariats
                                                            Secretariat troisiemesec = souscentreSecretariatsMap.get(souscentre).get(j);
                                                            effectif = secretariatEffectifMap.get(troisiemesec);
                                                            if (troisiemesec.getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                                                                souscentreAffiche = troisiemesec.getEtablissement().getAbreviation() + " (Sec. " + troisiemesec.getNumsec() + ")";
                                                            } else {
                                                                souscentreAffiche = troisiemesec.getEtablissement().getAbreviation() + " (Sec. " + troisiemesec.getNumsec() + " du sous-centre " + souscentre.getEtablissement().getAbreviation() + ")";
                                                            }
                                                            for (Salletechsecret sal : secretariatSalletechsecretsMap.get(troisiemesec)) {
                                                                nbSalles += sal.getNbsal();
                                                            }
                                                        }
                                                        nbSurveillants = 2 * nbSalles;
                                                        nbSurvDesSurv = calculNombreSurvDesSurv(nbSalles);
                                                        //calcul du coût
                                                        nbVacSurv = nbVac * nbSurveillants;
                                                        nbVacSurvDesSurv = nbVac * nbSurvDesSurv;
                                                        cout = (nbVacSurv + nbVacSurvDesSurv) * 1500;

                                                        Map<String, Object> row = new HashMap<>();
                                                        row.put("num", num++);
                                                        row.put("region", region.getNomreg());
                                                        row.put("reference", "");
                                                        row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                        row.put("session", anneeSelected);
                                                        row.put("examen", groupedexamensEnstring);
                                                        row.put("souscentre", souscentreAffiche);
                                                        row.put("effectif", effectif);
                                                        row.put("nbSalles", nbSalles);
                                                        row.put("nbSurv", nbSurveillants);
                                                        row.put("nbVacSurv", nbVacSurv);
                                                        row.put("nbSurvDesSurv", nbSurvDesSurv);
                                                        row.put("nbVacSurvDesSurv", nbVacSurvDesSurv);
                                                        row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                        int coutArrondi = (int) Math.ceil((double) cout / (double) 1000) * 1000;
                                                        row.put("montant", coutArrondi);
                                                        totalMontant += coutArrondi;//jasperreport prendra la dernière valeur de cout
                                                        row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                        datasource.add(row);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatSurveillanceReport.jrxml");
                                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                                    jasperViewer.setVisible(true);
                                } catch (JRException e) {
                                    JOptionPane.showMessageDialog(this, e.getMessage());
                                }
                            } else {
                                /*
                                    try {
                                        List<Map<String, Object>> datasource = new ArrayList<>();
                                        List<Region> regions = metier.findAllRegions();
                                        for (Region region : regions) {
                                            for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                                if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                                    int num = 1;
                                                    int totalMontant = 0;
                                                    int effectif = 0;
                                                    ArrayList<Souscentre> scentresList1 = centrebilletageSouscentresMap.get(centrebilletage);
                                                    for (int i = 0; i < scentresList1.size(); i++) {
                                                        Souscentre souscentre = scentresList1.get(i);
                                                        if (souscentreSallesMap.containsKey(souscentre)) {
                                                            effectif = souscentreMap1.get(souscentre);
                                                            int nbVac = nombreVacations(examensSelected.get(0));
                                                            //int ncandParSalle = nombreCandidatsParSalle(examensSelected.get(0));
                                                            int nbSalles = 0;
                                                            for (Salle sal : souscentreSallesMap.get(souscentre)) {
                                                                nbSalles += sal.getNbsal();
                                                            }
                                                            int nbSurveillants = 2 * nbSalles;
                                                            int nbSurvDesSurv = calculNombreSurvDesSurv(nbSalles);

                                                            //calcul du coût
                                                            int nbVacSurv = nbVac * nbSurveillants;
                                                            int nbVacSurvDesSurv = nbVac * nbSurvDesSurv;
                                                            int cout = (nbVacSurv + nbVacSurvDesSurv) * 1500;

                                                            Map<String, Object> row = new HashMap<>();
                                                            row.put("num", num++);
                                                            row.put("region", region.getNomreg());
                                                            row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                            row.put("session", anneeSelected);
                                                            row.put("examen", groupedexamensEnstring);
                                                            row.put("souscentre", souscentre.getNomsouscent());
                                                            row.put("reference", "");
                                                            row.put("effectif", effectif);
                                                            row.put("nbSalles", nbSalles);
                                                            row.put("nbSurv", nbSurveillants);
                                                            row.put("nbVacSurv", nbVacSurv);
                                                            row.put("nbSurvDesSurv", nbSurvDesSurv);
                                                            row.put("nbVacSurvDesSurv", nbVacSurvDesSurv);
                                                            int coutArrondi = (int) Math.ceil((double) cout / (double) 1000) * 1000;
                                                            row.put("montant", coutArrondi);
                                                            totalMontant += coutArrondi;//jasperreport prendra la dernière valeur de cout
                                                            row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                            datasource.add(row);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatAdditifSurveillanceReport.jrxml");
                                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                                        jasperViewer.setVisible(true);
                                    } catch (JRException e) {
                                        JOptionPane.showMessageDialog(this, e.getMessage());
                                    }
                                 */
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
                }
            }
            if (jRadioButtonAvecHandicap.isSelected()) {
                Map<Souscentre, Integer> souscentreMap1 = new HashMap<>();//contient des sous-centres avec leur nombre de candidats
                Map<Souscentre, Integer> souscentreMap2 = new HashMap<>();//contient des sous-centres avec leur nombre de candidats
                Map<Souscentre, Integer> souscentreMap = new HashMap<>();//contient les sous-centres issus de souscentreMap1 et souscentreMap2 avec leur nombre de candidats (additionnés si les sous-centres sont identiques)
                //Map<Souscentre, ArrayList<Secretariat>> scentresecMap = new HashMap<>();//contient les sous-centres et leurs secrétariats démultipliés
                Map<Souscentre, ArrayList<Integer>> souscentreHandicapesMap = new HashMap<>();//liste des sous-centres des déficients chacun avec la liste de ses elements sur l'état de surveillance
                Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
                ArrayList<String> typesBruts = new ArrayList<>();
                ArrayList<String> typesAconsiderer = new ArrayList<>();
                ArrayList<String> niveauxAconsiderer = new ArrayList<>();
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("SURVEILLANCE CANDIDATS AVEC HANDICAP (MOTEUR OU SENSORIEL)");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    boolean continuer = false;
                    for (Caisse c : caisses) {
                        if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                            continuer = true;
                            break;
                        }
                    }
                    if (!continuer) {
                        JOptionPane.showMessageDialog(this, "Erreur, les états de surveillance de candidats avec handicap (moteur ou sensoriel) n'ont pas encore été créés pour ce groupe d'examens !");
                    } else {
                        String separateur = ", ";
                        examensList = groupedexamensEnstring.split(separateur);
                        for (int i = 0; i < examensList.length; i++) {
                            for (Examen e : examens) {
                                if (e.getSigle().equals(examensList[i])) {
                                    examensSelected.add(e);
                                    break;
                                }
                            }
                        }
                        for (Session s : sessions) {
                            if (s.getAnnee() == anneeSelected) {
                                sessionSelected = s;
                                break;
                            }
                        }
                        if (examensSelected.size() == 1) {
                            /*
                        if (examensSelected.get(0).getSigle().equals("BP IND")) {
                            groupedexamensEnstring += " <<COUTURE FLOU>>";
                        }
                             */
                            elementsurvdeficients = metier.findAllElementsurvdeficientsD1groupedexamenA1Session(anneeSelected, niveauSelected, typeSelected);
                            ArrayList<Souscentre> souscentreHandicapesList = new ArrayList<>();
                            if (!elementsurvdeficients.isEmpty()) {
                                for (Elementsurvdeficient eltsurvdef : elementsurvdeficients) {
                                    souscentreHandicapesList.add(eltsurvdef.getSouscentre());
                                }
                                //recherche des types des examens à utiliser
                                for (Examen examen : examensSelected) {
                                    System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                                    if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                                        typesBruts.add("ESG");
                                    }
                                    if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                                        typesBruts.add("ESTP");
                                    }
                                }
                                if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                                    typesAconsiderer.add("ESG");
                                    typesAconsiderer.add("TOUT");
                                }
                                if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                                    typesAconsiderer.add("ESTP");
                                    typesAconsiderer.add("TOUT");
                                }
                                if (typesBruts.size() == 2) {
                                    typesAconsiderer.add("ESG");
                                    typesAconsiderer.add("ESTP");
                                    typesAconsiderer.add("TOUT");
                                }
                                //recherche des niveaux des examens à utiliser
                                if (!niveauSelected.equals("TOUT")) {
                                    niveauxAconsiderer.add(niveauSelected);
                                    niveauxAconsiderer.add("TOUT");
                                }
                                if (niveauSelected.equals("TOUT")) {
                                    niveauxAconsiderer.add("PROB");
                                    niveauxAconsiderer.add("BACC");
                                    niveauxAconsiderer.add("TOUT");
                                }
                                //recherche des centres de billetage
                                for (String niveau : niveauxAconsiderer) {
                                    for (String type : typesAconsiderer) {
                                        List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                                        for (Centrebilletage centrebilletage : desCentrebilletages) {
                                            ArrayList<Souscentre> souscentresList = new ArrayList<>();
                                            if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                                List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                                for (Secteurcouv sect : secteurs) {
                                                    if (!souscentresList.contains(sect.getSouscentre())) {
                                                        souscentresList.add(sect.getSouscentre());
                                                    }
                                                }
                                                centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                                            }
                                        }
                                    }
                                }
                                try {
                                    List<Map<String, Object>> datasource = new ArrayList<>();
                                    List<Region> regions = metier.findAllRegions();
                                    for (Region region : regions) {
                                        for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                            if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                                int num = 1;
                                                int totalMontant = 0;
                                                ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                                for (int i = 0; i < souscentresList.size(); i++) {
                                                    Souscentre souscentre = souscentresList.get(i);
                                                    int effectif = 0, nbSurv = 0, nbVacSurv = 0, nbTranscript = 0, nbVacTranscript = 0, cout = 0;
                                                    if (souscentreHandicapesList.contains(souscentre)) {
                                                        for (Elementsurvdeficient eltsurvdef : elementsurvdeficients) {
                                                            if (eltsurvdef.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                                                effectif = eltsurvdef.getEffectif();
                                                                nbSurv = eltsurvdef.getNbsurv();
                                                                nbVacSurv = eltsurvdef.getVacsurv();
                                                                nbTranscript = eltsurvdef.getNbtranscript();
                                                                nbVacTranscript = eltsurvdef.getVactranscript();
                                                                cout = nbVacSurv + nbVacTranscript;
                                                                break;
                                                            }
                                                        }
                                                        Map<String, Object> row = new HashMap<>();
                                                        row.put("num", num++);
                                                        row.put("region", region.getNomreg());
                                                        row.put("reference", "");
                                                        row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                        row.put("session", anneeSelected);
                                                        row.put("examen", groupedexamensEnstring);
                                                        row.put("souscentre", souscentre.getNomsouscent());
                                                        row.put("effectif", effectif);
                                                        row.put("nbSurv", nbSurv);
                                                        row.put("vacSurv", nbVacSurv);
                                                        row.put("nbTranscript", nbTranscript);
                                                        row.put("vacTranscript", nbVacTranscript);
                                                        row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                        int coutArrondi = (int) Math.ceil((double) cout / (double) 1000) * 1000;
                                                        row.put("montant", coutArrondi);
                                                        totalMontant += coutArrondi;//jasperreport prendra la dernière valeur de cout
                                                        row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                        datasource.add(row);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatSurveillanceHandicapeReport.jrxml");
                                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                                    jasperViewer.setVisible(true);
                                } catch (JRException e) {
                                    JOptionPane.showMessageDialog(this, e.getMessage());
                                }
                                souscentreMap1.clear();//on vide le hashmap
                                examensSelected.clear();//on vide 
                                centrebilletageSouscentresMap.clear();
                                typesBruts.clear();
                                typesAconsiderer.clear();
                                niveauxAconsiderer.clear();
                                souscentreHandicapesMap.clear();
                            } else {
                                JOptionPane.showMessageDialog(this, "Aucun candidat déficient moteur ou sensoriel trouvé pour ce groupe d'examen !");
                            }
                        } else {
                            if (examensSelected.size() == 2) {
                                if (!examensSelected.get(0).getNiveau().equals(examensSelected.get(1).getNiveau())) {
                                    JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Vous devez choisir un groupe 2 examens de même niveau !");
                                } else {
                                    elementsurvdeficients = metier.findAllElementsurvdeficientsD1groupedexamenA1Session(anneeSelected, niveauSelected, typeSelected);
                                    ArrayList<Souscentre> souscentreHandicapesList = new ArrayList<>();
                                    if (!elementsurvdeficients.isEmpty()) {
                                        for (Elementsurvdeficient eltsurvdef : elementsurvdeficients) {
                                            souscentreHandicapesList.add(eltsurvdef.getSouscentre());
                                        }
                                        //recherche des types des examens à utiliser
                                        for (Examen examen : examensSelected) {
                                            System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                                            if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                                                typesBruts.add("ESG");
                                            }
                                            if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                                                typesBruts.add("ESTP");
                                            }
                                        }
                                        if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                                            typesAconsiderer.add("ESG");
                                            typesAconsiderer.add("TOUT");
                                        }
                                        if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                                            typesAconsiderer.add("ESTP");
                                            typesAconsiderer.add("TOUT");
                                        }
                                        if (typesBruts.size() == 2) {
                                            typesAconsiderer.add("ESG");
                                            typesAconsiderer.add("ESTP");
                                            typesAconsiderer.add("TOUT");
                                        }
                                        //recherche des niveaux des examens à utiliser
                                        if (!niveauSelected.equals("TOUT")) {
                                            niveauxAconsiderer.add(niveauSelected);
                                            niveauxAconsiderer.add("TOUT");
                                        }
                                        if (niveauSelected.equals("TOUT")) {
                                            niveauxAconsiderer.add("PROB");
                                            niveauxAconsiderer.add("BACC");
                                            niveauxAconsiderer.add("TOUT");
                                        }
                                        //recherche des centres de billetage
                                        for (String niveau : niveauxAconsiderer) {
                                            for (String type : typesAconsiderer) {
                                                List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                                                for (Centrebilletage centrebilletage : desCentrebilletages) {
                                                    ArrayList<Souscentre> souscentresList = new ArrayList<>();
                                                    if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                                        List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                                        for (Secteurcouv sect : secteurs) {
                                                            if (!souscentresList.contains(sect.getSouscentre())) {
                                                                souscentresList.add(sect.getSouscentre());
                                                            }
                                                        }
                                                        centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                                                    }
                                                }
                                            }
                                        }
                                        try {
                                            List<Map<String, Object>> datasource = new ArrayList<>();
                                            List<Region> regions = metier.findAllRegions();
                                            for (Region region : regions) {
                                                for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                                    if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                                        int num = 1;
                                                        int totalMontant = 0;
                                                        ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                                        for (int i = 0; i < souscentresList.size(); i++) {
                                                            Souscentre souscentre = souscentresList.get(i);
                                                            int effectif = 0, nbSurv = 0, nbVacSurv = 0, nbTranscript = 0, nbVacTranscript = 0, cout = 0;
                                                            if (souscentreHandicapesList.contains(souscentre)) {
                                                                for (Elementsurvdeficient eltsurvdef : elementsurvdeficients) {
                                                                    if (eltsurvdef.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                                                        effectif = eltsurvdef.getEffectif();
                                                                        nbSurv = eltsurvdef.getNbsurv();
                                                                        nbVacSurv = eltsurvdef.getVacsurv();
                                                                        nbTranscript = eltsurvdef.getNbtranscript();
                                                                        nbVacTranscript = eltsurvdef.getVactranscript();
                                                                        cout = nbVacSurv + nbVacTranscript;
                                                                        break;
                                                                    }
                                                                }

                                                                Map<String, Object> row = new HashMap<>();
                                                                row.put("num", num++);
                                                                row.put("region", region.getNomreg());
                                                                row.put("reference", "");
                                                                row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                                row.put("session", anneeSelected);
                                                                row.put("examen", groupedexamensEnstring);
                                                                row.put("souscentre", souscentre.getNomsouscent());
                                                                row.put("effectif", effectif);
                                                                row.put("nbSurv", nbSurv);
                                                                row.put("vacSurv", nbVacSurv);
                                                                row.put("nbTranscript", nbTranscript);
                                                                row.put("vacTranscript", nbVacTranscript);
                                                                row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                                int coutArrondi = (int) Math.ceil((double) cout / (double) 1000) * 1000;
                                                                row.put("montant", coutArrondi);
                                                                totalMontant += coutArrondi;//jasperreport prendra la dernière valeur de cout
                                                                row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                                datasource.add(row);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatSurveillanceHandicapeReport.jrxml");
                                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                                            jasperViewer.setVisible(true);
                                        } catch (JRException e) {
                                            JOptionPane.showMessageDialog(this, e.getMessage());
                                        }
                                        souscentreMap1.clear();//on vide le hashmap
                                        souscentreMap2.clear();//on vide le hashmap
                                        souscentreMap.clear();//on vide le hashmap
                                        examensSelected.clear();//on vide
                                        centrebilletageSouscentresMap.clear();
                                        typesBruts.clear();
                                        typesAconsiderer.clear();
                                        niveauxAconsiderer.clear();
                                        souscentreHandicapesMap.clear();
                                    } else {
                                        JOptionPane.showMessageDialog(this, "Aucun candidat déficient moteur ou sensoriel trouvé pour ce groupe d'examen !");
                                    }
                                }
                            } else {
                                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Vous avez choisi un groupe de plus de 2 examens !");
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
                }
            }
            if (!jRadioButtonSansHandicap.isSelected() && !jRadioButtonAvecHandicap.isSelected()) {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Vous devez choisir le type d'état de surveillance à visualiser !");
            }
        } else {//jRadioButtonAdditif est sélectionné
            /*
            //jRadioButtonSansHandicap est déjà sélectionné en amont
            Map<Souscentre, Integer> souscentreMap1 = new HashMap<>();//contient des sous-centres avec leur nombre de candidats
            Map<Souscentre, Integer> souscentreMap2 = new HashMap<>();//contient des sous-centres avec leur nombre de candidats
            Map<Souscentre, Integer> souscentreMap = new HashMap<>();//contient les sous-centres issus de souscentreMap1 et souscentreMap2 avec leur nombre de candidats (additionnés si les sous-centres sont identiques)
            Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
            ArrayList<String> typesBruts = new ArrayList<>();
            ArrayList<String> typesAconsiderer = new ArrayList<>();
            ArrayList<String> niveauxAconsiderer = new ArrayList<>();

            Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueABIMap = new HashMap<>();//contient des sous-centres avec leurs statistiques ABI
            Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueAutresLitterairesMap = new HashMap<>();//contient des sous-centres avec leurs statistiques littéraires non ABI
            Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueScientifiquesMap = new HashMap<>();//contient des sous-centres chacun avec leurs statistiques scientifiques
            Map<Souscentre, ArrayList<Salle>> souscentreSalleSimplesABIMap = new HashMap<>();//contient des sous-centres avec la liste de ses salles simples ABI (ie d'ffectif>=15)
            Map<Souscentre, SalleCumulee> souscentreSalleCumuleeABIMap = new HashMap<>();//contient des sous-centres avec sa salle cumulée ABI
            Map<Souscentre, ArrayList<Salle>> souscentreSalleSimplesAutresLitterairesMap = new HashMap<>();//contient des sous-centres avec la liste de ses salles simples AutresLitteraires (ie d'ffectif>=15)
            Map<Souscentre, SalleCumulee> souscentreSalleCumuleeAutresLitterairesMap = new HashMap<>();//contient des sous-centres avec la sa salle cumulée AutresLitteraires
            Map<Souscentre, ArrayList<Salle>> souscentreSalleSimplesScientifiquesMap = new HashMap<>();//contient des sous-centres avec la liste de ses salles simples Scientifiques (ie d'ffectif>=15)
            Map<Souscentre, SalleCumulee> souscentreSalleCumuleeScientifiquesMap = new HashMap<>();//contient des sous-centre avec sa salle cumulée Scientifiques
            Map<Souscentre, ArrayList<Salle>> souscentreSallesMap = new HashMap<>();//contient des sous-centres chacun avec la liste de ses salles cumulées ou simples
            ArrayList<Souscentre> souscentresList = new ArrayList<>();//contient tous les souscentres trouvés dans les statistiques

            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("SURVEILLANCE CANDIDATS SANS HANDICAP");
                caisses = metier.findAllCaissesAdditivesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                boolean continuer = false;
                for (Caisse c : caisses) {
                    if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                        imputationSelected = c.getImputation();//aide à l'affichage sur l'état
                        continuer = true;
                        break;
                    }
                }
                if (!continuer) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états additifs de surveillance de candidats sans handicap n'ont pas encore été créés pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }
                    if (examensSelected.size() == 1) {
                        if (niveauSelected.equals("PROB") && typeSelected.equals("GEN")) {
                            List<Statistique> statABI = metier.findAllStatistiquesABID1ExamenDans1SessionEt1phase(examensSelected.get(0).getSigle(), anneeSelected, phase);
                            List<Statistique> statAutresLitteraires = metier.findAllStatistiquesAutresLitterairesD1ExamenDans1SessionEt1phase(examensSelected.get(0).getSigle(), anneeSelected, phase);
                            List<Statistique> statScientifiques = metier.findAllStatistiquesScientifiquesD1ExamenDans1SessionEt1phase(examensSelected.get(0).getSigle(), anneeSelected, phase);

                            //remplissage de souscentreStatistiqueABIMap et souscentresList en partie
                            for (Statistique s : statABI) {
                                if (souscentreStatistiqueABIMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueABIMap
                                    souscentreStatistiqueABIMap.get(s.getSouscentre()).add(s);//on lui ajoute s
                                } else {
                                    ArrayList<Statistique> liste = new ArrayList<>();
                                    liste.add(s);
                                    souscentreStatistiqueABIMap.put(s.getSouscentre(), liste);
                                }
                                if (!souscentresList.contains(s.getSouscentre())) {
                                    souscentresList.add(s.getSouscentre());//on charge tous les sous-centres ABI
                                }
                            }

                            //remplissage de souscentreStatistiqueAutresLitterairesMap et souscentresList en partie
                            for (Statistique s : statAutresLitteraires) {
                                if (souscentreStatistiqueAutresLitterairesMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueAutresLitterairesMap
                                    souscentreStatistiqueAutresLitterairesMap.get(s.getSouscentre()).add(s);//on lui ajoute s
                                } else {
                                    ArrayList<Statistique> liste = new ArrayList<>();
                                    liste.add(s);
                                    souscentreStatistiqueAutresLitterairesMap.put(s.getSouscentre(), liste);
                                }
                                if (!souscentresList.contains(s.getSouscentre())) {
                                    souscentresList.add(s.getSouscentre());//on charge tous les sous-centres ABI
                                }
                            }

                            //remplissage de souscentreStatistiqueScientifiquesMap et souscentresList en partie
                            for (Statistique s : statScientifiques) {
                                if (souscentreStatistiqueScientifiquesMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueScientifiquesMap
                                    souscentreStatistiqueScientifiquesMap.get(s.getSouscentre()).add(s);//on lui ajoute s
                                } else {
                                    ArrayList<Statistique> liste = new ArrayList<>();
                                    liste.add(s);
                                    souscentreStatistiqueScientifiquesMap.put(s.getSouscentre(), liste);
                                }
                                if (!souscentresList.contains(s.getSouscentre())) {
                                    souscentresList.add(s.getSouscentre());//on charge tous les sous-centres ABI
                                }
                            }

                            //remplissage de souscentreSalleSimplesABIMap et souscentreSalleCumuleeABIMap
                            for (Souscentre souscentre : souscentreStatistiqueABIMap.keySet()) {
                                ArrayList<Salle> salsimplesList = new ArrayList<>();
                                for (Statistique stat : souscentreStatistiqueABIMap.get(souscentre)) {
                                    if (stat.getNombre() >= 15) {
                                        Salle sal = new Salle();
                                        sal.setSouscentre(souscentre);
                                        sal.setSerie(stat.getOption().getSigle());
                                        sal.setEffectif(stat.getNombre());
                                        salsimplesList.add(sal);
                                    } else {
                                        SalleCumulee salcu = new SalleCumulee();
                                        if (!souscentreSalleCumuleeABIMap.containsKey(souscentre)) {
                                            salcu.setSouscentre(souscentre);
                                            salcu.setSerie(stat.getOption().getSigle());
                                            salcu.setEffectif(stat.getNombre());
                                            //salcu.setPaquet("ABI"); //le paquet est ABI par défaut
                                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                salcu.setZone("NOSO");
                                            }
                                        }
                                        if (!souscentreSalleCumuleeABIMap.isEmpty() && souscentreSalleCumuleeABIMap.containsKey(souscentre)) {
                                            salcu = souscentreSalleCumuleeABIMap.get(souscentre);
                                            salcu.setSerie(salcu.getSerie() + "/" + stat.getOption().getSigle());
                                            salcu.setEffectif(salcu.getEffectif() + stat.getNombre());
                                            //souscentre, zone et paquet déjà connus ici
                                        }
                                        souscentreSalleCumuleeABIMap.put(souscentre, salcu);
                                    }
                                }
                                souscentreSalleSimplesABIMap.put(souscentre, salsimplesList);
                            }

                            //remplissage de souscentreSalleSimplesAutresLitterairesMap et souscentreSalleCumuleeAutresLitterairesMap
                            for (Souscentre souscentre : souscentreStatistiqueAutresLitterairesMap.keySet()) {
                                ArrayList<Salle> salsimplesList = new ArrayList<>();
                                for (Statistique stat : souscentreStatistiqueAutresLitterairesMap.get(souscentre)) {
                                    if (stat.getNombre() >= 15) {
                                        Salle sal = new Salle();
                                        sal.setSouscentre(souscentre);
                                        sal.setSerie(stat.getOption().getSigle());
                                        sal.setEffectif(stat.getNombre());
                                        salsimplesList.add(sal);
                                    } else {
                                        SalleCumulee salcu = new SalleCumulee();
                                        if (!souscentreSalleCumuleeAutresLitterairesMap.containsKey(souscentre)) {
                                            salcu.setSouscentre(souscentre);
                                            salcu.setSerie(stat.getOption().getSigle());
                                            salcu.setEffectif(stat.getNombre());
                                            salcu.setPaquet("AUTRES");
                                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                salcu.setZone("NOSO");
                                            }
                                        }
                                        if (!souscentreSalleCumuleeAutresLitterairesMap.isEmpty() && souscentreSalleCumuleeAutresLitterairesMap.containsKey(souscentre)) {
                                            salcu = souscentreSalleCumuleeAutresLitterairesMap.get(souscentre);
                                            salcu.setSerie(salcu.getSerie() + "/" + stat.getOption().getSigle());
                                            salcu.setEffectif(salcu.getEffectif() + stat.getNombre());
                                            //souscentre, zone et paquet déjà connus ici
                                        }
                                        souscentreSalleCumuleeAutresLitterairesMap.put(souscentre, salcu);
                                    }
                                }
                                souscentreSalleSimplesAutresLitterairesMap.put(souscentre, salsimplesList);
                            }

                            //remplissage de souscentreSalleSimplesScientifiquesMap et souscentreSalleCumuleeScientifiquesMap
                            for (Souscentre souscentre : souscentreStatistiqueScientifiquesMap.keySet()) {
                                ArrayList<Salle> salsimplesList = new ArrayList<>();
                                for (Statistique stat : souscentreStatistiqueScientifiquesMap.get(souscentre)) {
                                    if (stat.getNombre() >= 15) {
                                        Salle sal = new Salle();
                                        sal.setSouscentre(souscentre);
                                        sal.setSerie(stat.getOption().getSigle());
                                        sal.setEffectif(stat.getNombre());
                                        salsimplesList.add(sal);
                                    } else {
                                        SalleCumulee salcu = new SalleCumulee();
                                        if (!souscentreSalleCumuleeScientifiquesMap.containsKey(souscentre)) {
                                            salcu.setSouscentre(souscentre);
                                            salcu.setSerie(stat.getOption().getSigle());
                                            salcu.setEffectif(stat.getNombre());
                                            salcu.setPaquet("SCIENTIFIQUE");
                                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                salcu.setZone("NOSO");
                                            }
                                            souscentreSalleCumuleeScientifiquesMap.put(souscentre, salcu);
                                        }
                                        if (!souscentreSalleCumuleeScientifiquesMap.isEmpty() && souscentreSalleCumuleeScientifiquesMap.containsKey(souscentre)) {
                                            salcu = souscentreSalleCumuleeScientifiquesMap.get(souscentre);
                                            if (!stat.getOption().getSigle().equals(salcu.getSerie())) {
                                                salcu.setSerie(salcu.getSerie() + "/" + stat.getOption().getSigle());
                                                salcu.setEffectif(salcu.getEffectif() + stat.getNombre());
                                            }
                                            //souscentre, zone et paquet déjà connus ici
                                            souscentreSalleCumuleeScientifiquesMap.put(souscentre, salcu);
                                        }
                                    }
                                }
                                souscentreSalleSimplesScientifiquesMap.put(souscentre, salsimplesList);
                            }
                            //remplissage de souscentreSallesMap avec calcul de nbsal et de nbsurvdessurv
                            for (Souscentre souscentre : souscentresList) {
                                ArrayList<Salle> sallesList = new ArrayList<>();
                                if (souscentreSalleCumuleeABIMap.containsKey(souscentre)) {
                                    souscentreSalleCumuleeABIMap.get(souscentre).calculNbsal();
                                    Salle sal = new Salle();
                                    sal.setSouscentre(souscentre);
                                    sal.setSerie(souscentreSalleCumuleeABIMap.get(souscentre).getSerie());
                                    sal.setEffectif(souscentreSalleCumuleeABIMap.get(souscentre).getEffectif());
                                    sal.setNbsal(souscentreSalleCumuleeABIMap.get(souscentre).getNbsal());
                                    sallesList.add(sal);
                                }
                                if (souscentreSalleSimplesABIMap.containsKey(souscentre)) {
                                    for (Salle salle : souscentreSalleSimplesABIMap.get(souscentre)) {
                                        salle.calculNbsal();
                                        sallesList.add(salle);
                                    }
                                }
                                if (souscentreSalleCumuleeAutresLitterairesMap.containsKey(souscentre)) {
                                    souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).calculNbsal();
                                    Salle sal = new Salle();
                                    sal.setSouscentre(souscentre);
                                    sal.setSerie(souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).getSerie());
                                    sal.setEffectif(souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).getEffectif());
                                    sal.setNbsal(souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).getNbsal());
                                    sallesList.add(sal);
                                }
                                if (souscentreSalleSimplesAutresLitterairesMap.containsKey(souscentre)) {
                                    for (Salle salle : souscentreSalleSimplesAutresLitterairesMap.get(souscentre)) {
                                        salle.calculNbsal();
                                        sallesList.add(salle);
                                    }
                                }
                                if (souscentreSalleCumuleeScientifiquesMap.containsKey(souscentre)) {
                                    souscentreSalleCumuleeScientifiquesMap.get(souscentre).calculNbsal();
                                    Salle sal = new Salle();
                                    sal.setSouscentre(souscentre);
                                    sal.setSerie(souscentreSalleCumuleeScientifiquesMap.get(souscentre).getSerie());
                                    sal.setEffectif(souscentreSalleCumuleeScientifiquesMap.get(souscentre).getEffectif());
                                    sal.setNbsal(souscentreSalleCumuleeScientifiquesMap.get(souscentre).getNbsal());
                                    sallesList.add(sal);
                                }
                                if (souscentreSalleSimplesScientifiquesMap.containsKey(souscentre)) {
                                    for (Salle salle : souscentreSalleSimplesScientifiquesMap.get(souscentre)) {
                                        salle.calculNbsal();
                                        sallesList.add(salle);
                                    }
                                }
                                souscentreSallesMap.put(souscentre, sallesList);
                            }
                            List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1SessionEt1phase(examensSelected.get(0).getSigle(), anneeSelected, phase);
                            //remplissage de souscentreMap1
                            for (Statistique s : lesStats) {
                                if (souscentreMap1.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap1
                                    int nbcand = souscentreMap1.get(s.getSouscentre());//on récupère son nombre de candidats
                                    souscentreMap1.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                } else {
                                    souscentreMap1.put(s.getSouscentre(), s.getNombre());
                                }
                            }

                            //recherche des types des examens à utiliser
                            for (Examen examen : examensSelected) {
                                System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                                if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                                    typesBruts.add("ESG");
                                }
                                if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                                    typesBruts.add("ESTP");
                                }
                            }
                            if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                                typesAconsiderer.add("ESG");
                                typesAconsiderer.add("TOUT");
                            }
                            if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                                typesAconsiderer.add("ESTP");
                                typesAconsiderer.add("TOUT");
                            }
                            if (typesBruts.size() == 2) {
                                typesAconsiderer.add("ESG");
                                typesAconsiderer.add("ESTP");
                                typesAconsiderer.add("TOUT");
                            }
                            //recherche des niveaux des examens à utiliser
                            if (!niveauSelected.equals("TOUT")) {
                                niveauxAconsiderer.add(niveauSelected);
                                niveauxAconsiderer.add("TOUT");
                            }
                            if (niveauSelected.equals("TOUT")) {
                                niveauxAconsiderer.add("PROB");
                                niveauxAconsiderer.add("BACC");
                                niveauxAconsiderer.add("TOUT");
                            }
                            //recherche des sous-centres par centre de billetage
                            for (String niveau : niveauxAconsiderer) {
                                for (String type : typesAconsiderer) {
                                    List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                                    for (Centrebilletage centrebilletage : desCentrebilletages) {
                                        ArrayList<Souscentre> scentresList = new ArrayList<>();
                                        if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                            List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                            for (Secteurcouv sect : secteurs) {
                                                if (!scentresList.contains(sect.getSouscentre())) {
                                                    scentresList.add(sect.getSouscentre());
                                                }
                                            }
                                            centrebilletageSouscentresMap.put(centrebilletage, scentresList);
                                        }
                                    }
                                }
                            }

                            try {
                                List<Map<String, Object>> datasource = new ArrayList<>();
                                List<Region> regions = metier.findAllRegions();
                                for (Region region : regions) {
                                    for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                        if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                            int num = 1;
                                            int totalMontant = 0;
                                            int effectif = 0;
                                            ArrayList<Souscentre> scentresList1 = centrebilletageSouscentresMap.get(centrebilletage);
                                            for (int i = 0; i < scentresList1.size(); i++) {
                                                Souscentre souscentre = scentresList1.get(i);
                                                if (souscentreSallesMap.containsKey(souscentre)) {
                                                    effectif = souscentreMap1.get(souscentre);
                                                    int nbVac = nombreAdditifVacations(examensSelected.get(0));
                                                    //int ncandParSalle = nombreCandidatsParSalle(examensSelected.get(0));
                                                    int nbSalles = 0;
                                                    for (Salle sal : souscentreSallesMap.get(souscentre)) {
                                                        nbSalles += sal.getNbsal();
                                                    }
                                                    int nbSurveillants = 2 * nbSalles;
                                                    int nbSurvDesSurv = calculNombreSurvDesSurv(nbSalles);

                                                    //calcul du coût
                                                    int nbVacSurv = nbVac * nbSurveillants;
                                                    int nbVacSurvDesSurv = nbVac * nbSurvDesSurv;
                                                    int cout = (nbVacSurv + nbVacSurvDesSurv) * 1500;

                                                    Map<String, Object> row = new HashMap<>();
                                                    row.put("num", num++);
                                                    row.put("region", region.getNomreg());
                                                    row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                    row.put("session", anneeSelected);
                                                    row.put("examen", groupedexamensEnstring);
                                                    row.put("souscentre", souscentre.getNomsouscent());
                                                    row.put("reference", "");
                                                    row.put("effectif", effectif);
                                                    row.put("nbSalles", nbSalles);
                                                    row.put("nbSurv", nbSurveillants);
                                                    row.put("nbVacSurv", nbVacSurv);
                                                    row.put("nbSurvDesSurv", nbSurvDesSurv);
                                                    row.put("nbVacSurvDesSurv", nbVacSurvDesSurv);
                                                    int coutArrondi = (int) Math.ceil((double) cout / (double) 1000) * 1000;
                                                    row.put("montant", coutArrondi);
                                                    totalMontant += coutArrondi;//jasperreport prendra la dernière valeur de cout
                                                    row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                    datasource.add(row);
                                                }
                                            }
                                        }
                                    }
                                }
                                JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                                JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatSurveillanceReport.jrxml");
                                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                                JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                                jasperViewer.setVisible(true);
                            } catch (JRException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }

                            souscentreMap1.clear();//on vide le hashmap
                            examensSelected.clear();//on vide 
                            centrebilletageSouscentresMap.clear();
                            typesBruts.clear();
                            typesAconsiderer.clear();
                            niveauxAconsiderer.clear();
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
            }
             */
        }
    }//GEN-LAST:event_jButtonVisualiserActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        videFrame();
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonCreerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerActionPerformed
        infoSaisies();
        if (!jRadioButtonAdditif.isSelected()) {
            if (jRadioButtonSansHandicap.isSelected()) {
                Map<Souscentre, Integer> souscentreMap1 = new HashMap<>();//contient des sous-centres avec leur nombre de candidats pour un examen donné
                //Map<Souscentre, Integer> souscentreMap2 = new HashMap<>();//contient des sous-centres avec leur nombre de candidats pour le deuxième examen du groupe sélectionné le cas écheant
                //Map<Souscentre, Integer> souscentreMap = new HashMap<>();//contient les sous-centres issus de souscentreMap1 et souscentreMap2 avec leur nombre de candidats (additionnés si les sous-centres sont identiques)               

                Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueABIMap = new HashMap<>();//contient des sous-centres avec leurs statistiques ABI
                Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueAutresLitterairesMap = new HashMap<>();//contient des sous-centres avec leurs statistiques littéraires non ABI
                Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueScientifiquesMap = new HashMap<>();//contient des sous-centres chacun avec ses statistiques scientifiques
                Map<Souscentre, ArrayList<Salle>> souscentreSalleSimplesABIMap = new HashMap<>();//contient des sous-centres avec la liste de ses salles simples ABI (ie d'ffectif>=15)
                Map<Souscentre, SalleCumulee> souscentreSalleCumuleeABIMap = new HashMap<>();//contient des sous-centres avec sa salle cumulée ABI
                Map<Souscentre, ArrayList<Salle>> souscentreSalleSimplesAutresLitterairesMap = new HashMap<>();//contient des sous-centres avec la liste de ses salles simples AutresLitteraires (ie d'ffectif>=15)
                Map<Souscentre, SalleCumulee> souscentreSalleCumuleeAutresLitterairesMap = new HashMap<>();//contient des sous-centres avec la sa salle cumulée AutresLitteraires
                Map<Souscentre, ArrayList<Salle>> souscentreSalleSimplesScientifiquesMap = new HashMap<>();//contient des sous-centres avec la liste de ses salles simples Scientifiques (ie d'ffectif>=15)
                Map<Souscentre, SalleCumulee> souscentreSalleCumuleeScientifiquesMap = new HashMap<>();//contient des sous-centre avec sa salle cumulée Scientifiques
                Map<Souscentre, ArrayList<Salle>> souscentreSallesMap = new HashMap<>();//contient des sous-centres chacun avec la liste de ses salles cumulées ou simples
                ArrayList<Souscentre> souscentresList = new ArrayList<>();//contient tous les souscentres trouvés dans les statistiques

                Map<Secretariat, Integer> secretariatEffectifMap = new HashMap<>();//contient l'ensemble des secrétariats d'un groupe d'examens avec chacun avec son nombre de candidats
                List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats 
                Map<Souscentre, ArrayList<Secretariat>> souscentreSecretariatsMap = new HashMap<>();//contient les sous-centres chacun avec la liste de ses secretariats le cas échéant
                Map<Secretariat, ArrayList<Statsecretariat>> secretariatStatsecABIMap = new HashMap<>();//contient des secretariats avec ses statsecretariat ABI
                Map<Secretariat, ArrayList<Statsecretariat>> secretariatStatsecAutresLitterairesMap = new HashMap<>();//contient des secretariats avec ses statsecretariat littéraires non ABI
                Map<Secretariat, ArrayList<Statsecretariat>> secretariatStatsecScientifiquesMap = new HashMap<>();//contient des secretariats avec ses statsecretariat scientifiques
                Map<Secretariat, ArrayList<Sallesecret>> secretariatSalleSimplesABIMap = new HashMap<>();//contient des Secretariats avec la liste de ses salles simples ABI (ie d'ffectif>=15)
                Map<Secretariat, SalleCumuleesecret> secretariatSalleCumuleeABIMap = new HashMap<>();//contient des Secretariats avec sa salle cumulée ABI
                Map<Secretariat, ArrayList<Sallesecret>> secretariatSalleSimplesAutresLitterairesMap = new HashMap<>();//contient des Secretariat avec la liste de ses salles simples AutresLitteraires (ie d'ffectif>=15)
                Map<Secretariat, SalleCumuleesecret> secretariatSalleCumuleeAutresLitterairesMap = new HashMap<>();//contient des Secretariats avec la sa salle cumulée AutresLitteraires
                Map<Secretariat, ArrayList<Sallesecret>> secretariatSalleSimplesScientifiquesMap = new HashMap<>();//contient des Secretariat avec la liste de ses salles simples Scientifiques (ie d'ffectif>=15)
                Map<Secretariat, SalleCumuleesecret> secretariatSalleCumuleeScientifiquesMap = new HashMap<>();//contient des Secretariats avec sa salle cumulée Scientifiques
                Map<Secretariat, ArrayList<Sallesecret>> secretariatSallesMap = new HashMap<>();//contient des Secretariats chacun avec la liste de ses salles cumulées ou simples

                Map<Souscentre, ArrayList<Statistique>> souscentreStatistiquesMap = new HashMap<>();//contient des sous-centres avec leurs statistiques
                Map<Souscentre, ArrayList<Salletech>> souscentreSalletechsMap = new HashMap<>();//contient des sous-centres avec la liste de ses salletechs                
                Map<Secretariat, ArrayList<Statsecretariat>> secretariatStatsecretariatsMap = new HashMap<>();//contient des secretariats avec ses statsecretariats
                Map<Secretariat, ArrayList<Salletechsecret>> secretariatSalletechsecretsMap = new HashMap<>();//contient des Secretariats avec la liste de ses salles simples
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("SURVEILLANCE CANDIDATS SANS HANDICAP");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (!caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, les états de surveillance de candidats sans handicap existent déjà pour ce groupe d'examens !");
                    } else {
                        String separateur = ", ";
                        examensList = groupedexamensEnstring.split(separateur);
                        for (int i = 0; i < examensList.length; i++) {
                            for (Examen e : examens) {
                                if (e.getSigle().equals(examensList[i])) {
                                    examensSelected.add(e);
                                    break;
                                }
                            }
                        }
                        for (Session s : sessions) {
                            if (s.getAnnee() == anneeSelected) {
                                sessionSelected = s;
                                break;
                            }
                        }

                        //remplissage souscentreAsecretariatsDemultipliesList
                        secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                        if (!secretariats.isEmpty()) {
                            for (Secretariat sec : secretariats) {
                                if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                                    souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                                }
                            }
                        }

                        /*
                        if (examensSelected.get(0).getSigle().equals("BP IND")) {
                            groupedexamensEnstring += " <<COUTURE FLOU>>";
                        }
                         */
                        if (typeSelected.equals("GEN")) {
                            List<Statistique> statABI = metier.findAllStatistiquesABID1ExamenDans1Session(examensSelected.get(0).getSigle(), anneeSelected);
                            List<Statistique> statAutresLitteraires = metier.findAllStatistiquesAutresLitterairesD1ExamenDans1Session(examensSelected.get(0).getSigle(), anneeSelected);
                            List<Statistique> statScientifiques = metier.findAllStatistiquesScientifiquesD1ExamenDans1Session(examensSelected.get(0).getSigle(), anneeSelected);

                            //remplissage de souscentreStatistiqueABIMap et souscentresList en partie
                            for (Statistique s : statABI) {
                                if (!souscentreAsecretariatsDemultipliesList.contains(s.getSouscentre())) {
                                    if (souscentreStatistiqueABIMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueABIMap
                                        souscentreStatistiqueABIMap.get(s.getSouscentre()).add(s);//on lui ajoute s
                                    } else {
                                        ArrayList<Statistique> liste = new ArrayList<>();
                                        liste.add(s);
                                        souscentreStatistiqueABIMap.put(s.getSouscentre(), liste);
                                    }
                                }
                                if (!souscentresList.contains(s.getSouscentre())) {
                                    souscentresList.add(s.getSouscentre());//on charge tous les sous-centres ABI
                                }
                            }

                            //remplissage de souscentreStatistiqueAutresLitterairesMap et souscentresList en partie
                            for (Statistique s : statAutresLitteraires) {
                                if (!souscentreAsecretariatsDemultipliesList.contains(s.getSouscentre())) {
                                    if (souscentreStatistiqueAutresLitterairesMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueAutresLitterairesMap
                                        souscentreStatistiqueAutresLitterairesMap.get(s.getSouscentre()).add(s);//on lui ajoute s
                                    } else {
                                        ArrayList<Statistique> liste = new ArrayList<>();
                                        liste.add(s);
                                        souscentreStatistiqueAutresLitterairesMap.put(s.getSouscentre(), liste);
                                    }
                                }
                                if (!souscentresList.contains(s.getSouscentre())) {
                                    souscentresList.add(s.getSouscentre());//on charge tous les sous-centres litteraires non ABI
                                }
                            }

                            //remplissage de souscentreStatistiqueScientifiquesMap et souscentresList en partie
                            for (Statistique s : statScientifiques) {
                                if (!souscentreAsecretariatsDemultipliesList.contains(s.getSouscentre())) {
                                    if (souscentreStatistiqueScientifiquesMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueScientifiquesMap
                                        souscentreStatistiqueScientifiquesMap.get(s.getSouscentre()).add(s);//on lui ajoute s
                                    } else {
                                        ArrayList<Statistique> liste = new ArrayList<>();
                                        liste.add(s);
                                        souscentreStatistiqueScientifiquesMap.put(s.getSouscentre(), liste);
                                    }
                                }
                                if (!souscentresList.contains(s.getSouscentre())) {
                                    souscentresList.add(s.getSouscentre());//on charge tous les sous-centres scientifiques
                                }
                            }

                            int nbrecandparsalle=nombreCandidatsParSalle(niveauSelected, typeSelected);
                            //remplissage de souscentreSalleSimplesABIMap et souscentreSalleCumuleeABIMap
                            for (Souscentre souscentre : souscentreStatistiqueABIMap.keySet()) {
                                ArrayList<Salle> salsimplesList = new ArrayList<>();
                                for (Statistique stat : souscentreStatistiqueABIMap.get(souscentre)) {
                                    if (stat.getNombre() >= 20) {
                                        Salle sal = new Salle();
                                        sal.setSouscentre(souscentre);
                                        sal.setSerie(stat.getOption().getSigle());
                                        sal.setEffectif(stat.getNombre());
                                        sal.setNbcandsal(nbrecandparsalle);
                                        salsimplesList.add(sal);
                                    } else {
                                        SalleCumulee salcu = new SalleCumulee();
                                        if (!souscentreSalleCumuleeABIMap.containsKey(souscentre)) {
                                            salcu.setSouscentre(souscentre);
                                            salcu.setSerie(stat.getOption().getSigle());
                                            salcu.setEffectif(stat.getNombre());
                                            salcu.setNbcandsal(nbrecandparsalle);
                                            //salcu.setPaquet("ABI"); //le paquet est ABI par défaut
                                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                salcu.setZone("NOSO");
                                            }
                                        }
                                        if (!souscentreSalleCumuleeABIMap.isEmpty() && souscentreSalleCumuleeABIMap.containsKey(souscentre)) {
                                            salcu = souscentreSalleCumuleeABIMap.get(souscentre);
                                            salcu.setSerie(salcu.getSerie() + "/" + stat.getOption().getSigle());
                                            salcu.setEffectif(salcu.getEffectif() + stat.getNombre());
                                            //souscentre, zone et paquet déjà connus ici
                                        }
                                        souscentreSalleCumuleeABIMap.put(souscentre, salcu);
                                    }
                                }
                                souscentreSalleSimplesABIMap.put(souscentre, salsimplesList);
                            }

                            //remplissage de souscentreSalleSimplesAutresLitterairesMap et souscentreSalleCumuleeAutresLitterairesMap
                            for (Souscentre souscentre : souscentreStatistiqueAutresLitterairesMap.keySet()) {
                                ArrayList<Salle> salsimplesList = new ArrayList<>();
                                for (Statistique stat : souscentreStatistiqueAutresLitterairesMap.get(souscentre)) {
                                    if (stat.getNombre() >= 20) {
                                        Salle sal = new Salle();
                                        sal.setSouscentre(souscentre);
                                        sal.setSerie(stat.getOption().getSigle());
                                        sal.setEffectif(stat.getNombre());
                                        sal.setNbcandsal(nbrecandparsalle);
                                        salsimplesList.add(sal);
                                    } else {
                                        SalleCumulee salcu = new SalleCumulee();
                                        if (!souscentreSalleCumuleeAutresLitterairesMap.containsKey(souscentre)) {
                                            salcu.setSouscentre(souscentre);
                                            salcu.setSerie(stat.getOption().getSigle());
                                            salcu.setEffectif(stat.getNombre());
                                            salcu.setNbcandsal(nbrecandparsalle);
                                            salcu.setPaquet("AUTRES");
                                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                salcu.setZone("NOSO");
                                            }
                                        }
                                        if (!souscentreSalleCumuleeAutresLitterairesMap.isEmpty() && souscentreSalleCumuleeAutresLitterairesMap.containsKey(souscentre)) {
                                            salcu = souscentreSalleCumuleeAutresLitterairesMap.get(souscentre);
                                            salcu.setSerie(salcu.getSerie() + "/" + stat.getOption().getSigle());
                                            salcu.setEffectif(salcu.getEffectif() + stat.getNombre());
                                            //souscentre, zone et paquet déjà connus ici
                                        }
                                        souscentreSalleCumuleeAutresLitterairesMap.put(souscentre, salcu);
                                    }
                                }
                                souscentreSalleSimplesAutresLitterairesMap.put(souscentre, salsimplesList);
                            }

                            //remplissage de souscentreSalleSimplesScientifiquesMap et souscentreSalleCumuleeScientifiquesMap
                            for (Souscentre souscentre : souscentreStatistiqueScientifiquesMap.keySet()) {
                                ArrayList<Salle> salsimplesList = new ArrayList<>();
                                for (Statistique stat : souscentreStatistiqueScientifiquesMap.get(souscentre)) {
                                    if (stat.getNombre() >= 20) {
                                        Salle sal = new Salle();
                                        sal.setSouscentre(souscentre);
                                        sal.setSerie(stat.getOption().getSigle());
                                        sal.setEffectif(stat.getNombre());
                                        sal.setNbcandsal(nbrecandparsalle);
                                        salsimplesList.add(sal);
                                    } else {
                                        SalleCumulee salcu = new SalleCumulee();
                                        if (!souscentreSalleCumuleeScientifiquesMap.containsKey(souscentre)) {
                                            salcu.setSouscentre(souscentre);
                                            salcu.setSerie(stat.getOption().getSigle());
                                            salcu.setEffectif(stat.getNombre());
                                            salcu.setNbcandsal(nbrecandparsalle);
                                            salcu.setPaquet("SCIENTIFIQUE");
                                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                salcu.setZone("NOSO");
                                            }
                                        }
                                        if (!souscentreSalleCumuleeScientifiquesMap.isEmpty() && souscentreSalleCumuleeScientifiquesMap.containsKey(souscentre)) {
                                            salcu = souscentreSalleCumuleeScientifiquesMap.get(souscentre);
                                            salcu.setSerie(salcu.getSerie() + "/" + stat.getOption().getSigle());
                                            salcu.setEffectif(salcu.getEffectif() + stat.getNombre());
                                            //souscentre, zone et paquet déjà connus ici
                                        }
                                        souscentreSalleCumuleeScientifiquesMap.put(souscentre, salcu);
                                    }
                                }
                                souscentreSalleSimplesScientifiquesMap.put(souscentre, salsimplesList);
                            }
                            //remplissage de souscentreSallesMap avec calcul de nbsal et de nbsurvdessurv
                            for (Souscentre souscentre : souscentresList) {
                                ArrayList<Salle> sallesList = new ArrayList<>();
                                if (souscentreSalleCumuleeABIMap.containsKey(souscentre)) {
                                    souscentreSalleCumuleeABIMap.get(souscentre).calculNbsal();
                                    Salle sal = new Salle();
                                    sal.setSouscentre(souscentre);
                                    sal.setSerie(souscentreSalleCumuleeABIMap.get(souscentre).getSerie());
                                    sal.setEffectif(souscentreSalleCumuleeABIMap.get(souscentre).getEffectif());
                                    sal.setNbsal(souscentreSalleCumuleeABIMap.get(souscentre).getNbsal());
                                    sallesList.add(sal);
                                }
                                if (souscentreSalleSimplesABIMap.containsKey(souscentre)) {
                                    for (Salle salle : souscentreSalleSimplesABIMap.get(souscentre)) {
                                        salle.calculNbsal();
                                        sallesList.add(salle);
                                    }
                                }
                                if (souscentreSalleCumuleeAutresLitterairesMap.containsKey(souscentre)) {
                                    souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).calculNbsal();
                                    Salle sal = new Salle();
                                    sal.setSouscentre(souscentre);
                                    sal.setSerie(souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).getSerie());
                                    sal.setEffectif(souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).getEffectif());
                                    sal.setNbsal(souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).getNbsal());
                                    sallesList.add(sal);
                                }
                                if (souscentreSalleSimplesAutresLitterairesMap.containsKey(souscentre)) {
                                    for (Salle salle : souscentreSalleSimplesAutresLitterairesMap.get(souscentre)) {
                                        salle.calculNbsal();
                                        sallesList.add(salle);
                                    }
                                }
                                if (souscentreSalleCumuleeScientifiquesMap.containsKey(souscentre)) {
                                    souscentreSalleCumuleeScientifiquesMap.get(souscentre).calculNbsal();
                                    Salle sal = new Salle();
                                    sal.setSouscentre(souscentre);
                                    sal.setSerie(souscentreSalleCumuleeScientifiquesMap.get(souscentre).getSerie());
                                    sal.setEffectif(souscentreSalleCumuleeScientifiquesMap.get(souscentre).getEffectif());
                                    sal.setNbsal(souscentreSalleCumuleeScientifiquesMap.get(souscentre).getNbsal());
                                    sallesList.add(sal);
                                }
                                if (souscentreSalleSimplesScientifiquesMap.containsKey(souscentre)) {
                                    for (Salle salle : souscentreSalleSimplesScientifiquesMap.get(souscentre)) {
                                        salle.calculNbsal();
                                        sallesList.add(salle);
                                    }
                                }
                                souscentreSallesMap.put(souscentre, sallesList);
                            }
                            List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(examensSelected.get(0).getSigle(), anneeSelected);
                            //remplissage de souscentreMap1
                            for (Statistique s : lesStats) {
                                if (souscentreMap1.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap1
                                    int nbcand = souscentreMap1.get(s.getSouscentre());//on récupère son nombre de candidats
                                    souscentreMap1.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                } else {
                                    souscentreMap1.put(s.getSouscentre(), s.getNombre());
                                }
                            }

                            //remplissage secretariatEffectifMap
                            for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                                List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreEtSession(souscentre.getNomsouscent(), anneeSelected);
                                if (!secretariatsList.isEmpty()) {
                                    for (Secretariat sec : secretariatsList) {
                                        int stat = 0;
                                        List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                                        for (Statsecretariat statsec : statsecretariatsList) {
                                            if (statsec.getSecretariat().getNumsec() == sec.getNumsec() && statsec.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                                stat += statsec.getNombre();
                                            }
                                        }
                                        secretariatEffectifMap.put(sec, stat);
                                    }
                                }
                            }
                            //remplissage de souscentreSecretariatsMap
                            for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                                ArrayList<Secretariat> secretariatsList = new ArrayList<>();
                                for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                    if (sec.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                        if (!secretariatsList.contains(sec)) {
                                            secretariatsList.add(sec);
                                        }
                                    }
                                }
                                if (!secretariatsList.isEmpty()) {
                                    souscentreSecretariatsMap.put(souscentre, secretariatsList);
                                }
                            }

                            List<Statsecretariat> statsecABI = metier.findAllStatsecretariatsABID1ExamenDans1Session(examensSelected.get(0).getSigle(), anneeSelected);
                            List<Statsecretariat> statsecAutresLitteraires = metier.findAllStatsecretariatsAutresLitterairesD1ExamenDans1Session(examensSelected.get(0).getSigle(), anneeSelected);
                            List<Statsecretariat> statsecScientifiques = metier.findAllStatsecretariatsScientifiquesD1ExamenDans1Session(examensSelected.get(0).getSigle(), anneeSelected);

                            //remplissage de secretariatStatsecABIMap et souscentresList en partie
                            for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                for (Statsecretariat s : statsecABI) {
                                    if (s.getSecretariat().getNumsec() == sec.getNumsec() && s.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                        if (secretariatStatsecABIMap.containsKey(sec)) {//si le présent secretariat est dans secretariatStatsecABIMap
                                            secretariatStatsecABIMap.get(s.getSecretariat()).add(s);//on lui ajoute s
                                        } else {
                                            ArrayList<Statsecretariat> liste = new ArrayList<>();
                                            liste.add(s);
                                            secretariatStatsecABIMap.put(s.getSecretariat(), liste);
                                        }
                                    }
                                }
                            }

                            //remplissage de secretariatStatsecAutresLitterairesMap et souscentresList en partie
                            for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                for (Statsecretariat s : statsecAutresLitteraires) {
                                    if (s.getSecretariat().getNumsec() == sec.getNumsec() && s.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                        if (secretariatStatsecAutresLitterairesMap.containsKey(s.getSecretariat())) {//si le présent secretariat est dans secretariatStatsecAutresLitterairesMap
                                            secretariatStatsecAutresLitterairesMap.get(s.getSecretariat()).add(s);//on lui ajoute s
                                        } else {
                                            ArrayList<Statsecretariat> liste = new ArrayList<>();
                                            liste.add(s);
                                            secretariatStatsecAutresLitterairesMap.put(s.getSecretariat(), liste);
                                        }
                                    }
                                }
                            }

                            //remplissage de secretariatStatsecScientifiquesMap et souscentresList en partie
                            for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                for (Statsecretariat s : statsecScientifiques) {
                                    if (s.getSecretariat().getNumsec() == sec.getNumsec() && s.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                        if (secretariatStatsecScientifiquesMap.containsKey(s.getSecretariat())) {//si le présent secretariat est dans secretariatStatsecScientifiquesMap
                                            secretariatStatsecScientifiquesMap.get(s.getSecretariat()).add(s);//on lui ajoute s
                                        } else {
                                            ArrayList<Statsecretariat> liste = new ArrayList<>();
                                            liste.add(s);
                                            secretariatStatsecScientifiquesMap.put(s.getSecretariat(), liste);
                                        }
                                    }
                                }
                            }

                            //remplissage de secretariatSalleSimplesABIMap et secretariatSalleCumuleeABIMap
                            for (Secretariat secretariat : secretariatStatsecABIMap.keySet()) {
                                ArrayList<Sallesecret> salsimplesList = new ArrayList<>();
                                for (Statsecretariat statsec : secretariatStatsecABIMap.get(secretariat)) {
                                    if (statsec.getNombre() >= 20) {
                                        Sallesecret sal = new Sallesecret();
                                        sal.setSecretariat(secretariat);
                                        sal.setSerie(statsec.getOption().getSigle());
                                        sal.setEffectif(statsec.getNombre());
                                        sal.setNbcandsal(nbrecandparsalle);
                                        salsimplesList.add(sal);
                                    } else {
                                        SalleCumuleesecret salcu = new SalleCumuleesecret();
                                        if (!secretariatSalleCumuleeABIMap.containsKey(secretariat)) {
                                            salcu.setSecretariat(secretariat);
                                            salcu.setSerie(statsec.getOption().getSigle());
                                            salcu.setEffectif(statsec.getNombre());
                                            salcu.setNbcandsal(nbrecandparsalle);
                                            //salcu.setPaquet("ABI"); //le paquet est ABI par défaut
                                            if (secretariat.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || secretariat.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                salcu.setZone("NOSO");
                                            }
                                        }
                                        if (!secretariatSalleCumuleeABIMap.isEmpty() && secretariatSalleCumuleeABIMap.containsKey(secretariat)) {
                                            salcu = secretariatSalleCumuleeABIMap.get(secretariat);
                                            salcu.setSerie(salcu.getSerie() + "/" + statsec.getOption().getSigle());
                                            salcu.setEffectif(salcu.getEffectif() + statsec.getNombre());
                                            //secretariat, zone et paquet déjà connus ici
                                        }
                                        secretariatSalleCumuleeABIMap.put(secretariat, salcu);
                                    }
                                }
                                secretariatSalleSimplesABIMap.put(secretariat, salsimplesList);
                            }

                            //remplissage de secretariatSalleSimplesAutresLitterairesMap et secretariatSalleCumuleeAutresLitterairesMap
                            for (Secretariat secretariat : secretariatStatsecAutresLitterairesMap.keySet()) {
                                ArrayList<Sallesecret> salsimplesList = new ArrayList<>();
                                for (Statsecretariat statsec : secretariatStatsecAutresLitterairesMap.get(secretariat)) {
                                    if (statsec.getNombre() >= 20) {
                                        Sallesecret sal = new Sallesecret();
                                        sal.setSecretariat(secretariat);
                                        sal.setSerie(statsec.getOption().getSigle());
                                        sal.setEffectif(statsec.getNombre());
                                        sal.setNbcandsal(nbrecandparsalle);
                                        salsimplesList.add(sal);
                                    } else {
                                        SalleCumuleesecret salcu = new SalleCumuleesecret();
                                        if (!secretariatSalleCumuleeAutresLitterairesMap.containsKey(secretariat)) {
                                            salcu.setSecretariat(secretariat);
                                            salcu.setSerie(statsec.getOption().getSigle());
                                            salcu.setEffectif(statsec.getNombre());
                                            salcu.setNbcandsal(nbrecandparsalle);
                                            salcu.setPaquet("AUTRES");
                                            if (secretariat.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || secretariat.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                salcu.setZone("NOSO");
                                            }
                                        }
                                        if (!secretariatSalleCumuleeAutresLitterairesMap.isEmpty() && secretariatSalleCumuleeAutresLitterairesMap.containsKey(secretariat)) {
                                            salcu = secretariatSalleCumuleeAutresLitterairesMap.get(secretariat);
                                            salcu.setSerie(salcu.getSerie() + "/" + statsec.getOption().getSigle());
                                            salcu.setEffectif(salcu.getEffectif() + statsec.getNombre());
                                            //souscentre, zone et paquet déjà connus ici
                                        }
                                        secretariatSalleCumuleeAutresLitterairesMap.put(secretariat, salcu);
                                    }
                                }
                                secretariatSalleSimplesAutresLitterairesMap.put(secretariat, salsimplesList);
                            }

                            //remplissage de secretariatSalleSimplesScientifiquesMap et secretariatSalleCumuleeScientifiquesMap
                            for (Secretariat secretariat : secretariatStatsecScientifiquesMap.keySet()) {
                                ArrayList<Sallesecret> salsimplesList = new ArrayList<>();
                                for (Statsecretariat statsec : secretariatStatsecScientifiquesMap.get(secretariat)) {
                                    if (statsec.getNombre() >= 20) {
                                        Sallesecret sal = new Sallesecret();
                                        sal.setSecretariat(secretariat);
                                        sal.setSerie(statsec.getOption().getSigle());
                                        sal.setEffectif(statsec.getNombre());
                                        sal.setNbcandsal(nbrecandparsalle);
                                        salsimplesList.add(sal);
                                    } else {
                                        SalleCumuleesecret salcu = new SalleCumuleesecret();
                                        if (!secretariatSalleCumuleeScientifiquesMap.containsKey(secretariat)) {
                                            salcu.setSecretariat(secretariat);
                                            salcu.setSerie(statsec.getOption().getSigle());
                                            salcu.setEffectif(statsec.getNombre());
                                            salcu.setNbcandsal(nbrecandparsalle);
                                            salcu.setPaquet("SCIENTIFIQUE");
                                            if (secretariat.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || secretariat.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                salcu.setZone("NOSO");
                                            }
                                        }
                                        if (!secretariatSalleCumuleeScientifiquesMap.isEmpty() && secretariatSalleCumuleeScientifiquesMap.containsKey(secretariat)) {
                                            salcu = secretariatSalleCumuleeScientifiquesMap.get(secretariat);
                                            salcu.setSerie(salcu.getSerie() + "/" + statsec.getOption().getSigle());
                                            salcu.setEffectif(salcu.getEffectif() + statsec.getNombre());
                                            //souscentre, zone et paquet déjà connus ici
                                        }
                                        secretariatSalleCumuleeScientifiquesMap.put(secretariat, salcu);
                                    }
                                }
                                secretariatSalleSimplesScientifiquesMap.put(secretariat, salsimplesList);
                            }
                            //remplissage de secretariatSallesMap avec calcul de nbsal et de nbsurvdessurv
                            for (Secretariat secretariat : secretariatEffectifMap.keySet()) {
                                ArrayList<Sallesecret> sallesList = new ArrayList<>();
                                if (secretariatSalleCumuleeABIMap.containsKey(secretariat)) {
                                    secretariatSalleCumuleeABIMap.get(secretariat).calculNbsal();
                                    Sallesecret sal = new Sallesecret();
                                    sal.setSecretariat(secretariat);
                                    sal.setSerie(secretariatSalleCumuleeABIMap.get(secretariat).getSerie());
                                    sal.setEffectif(secretariatSalleCumuleeABIMap.get(secretariat).getEffectif());
                                    sal.setNbsal(secretariatSalleCumuleeABIMap.get(secretariat).getNbsal());
                                    sallesList.add(sal);
                                }
                                if (secretariatSalleSimplesABIMap.containsKey(secretariat)) {
                                    for (Sallesecret salle : secretariatSalleSimplesABIMap.get(secretariat)) {
                                        salle.calculNbsal();
                                        sallesList.add(salle);
                                    }
                                }
                                if (secretariatSalleCumuleeAutresLitterairesMap.containsKey(secretariat)) {
                                    secretariatSalleCumuleeAutresLitterairesMap.get(secretariat).calculNbsal();
                                    Sallesecret sal = new Sallesecret();
                                    sal.setSecretariat(secretariat);
                                    sal.setSerie(secretariatSalleCumuleeAutresLitterairesMap.get(secretariat).getSerie());
                                    sal.setEffectif(secretariatSalleCumuleeAutresLitterairesMap.get(secretariat).getEffectif());
                                    sal.setNbsal(secretariatSalleCumuleeAutresLitterairesMap.get(secretariat).getNbsal());
                                    sallesList.add(sal);
                                }
                                if (secretariatSalleSimplesAutresLitterairesMap.containsKey(secretariat)) {
                                    for (Sallesecret salle : secretariatSalleSimplesAutresLitterairesMap.get(secretariat)) {
                                        salle.calculNbsal();
                                        sallesList.add(salle);
                                    }
                                }
                                if (secretariatSalleCumuleeScientifiquesMap.containsKey(secretariat)) {
                                    secretariatSalleCumuleeScientifiquesMap.get(secretariat).calculNbsal();
                                    Sallesecret sal = new Sallesecret();
                                    sal.setSecretariat(secretariat);
                                    sal.setSerie(secretariatSalleCumuleeScientifiquesMap.get(secretariat).getSerie());
                                    sal.setEffectif(secretariatSalleCumuleeScientifiquesMap.get(secretariat).getEffectif());
                                    sal.setNbsal(secretariatSalleCumuleeScientifiquesMap.get(secretariat).getNbsal());
                                    sallesList.add(sal);
                                }
                                if (secretariatSalleSimplesScientifiquesMap.containsKey(secretariat)) {
                                    for (Sallesecret salle : secretariatSalleSimplesScientifiquesMap.get(secretariat)) {
                                        salle.calculNbsal();
                                        sallesList.add(salle);
                                    }
                                }
                                secretariatSallesMap.put(secretariat, sallesList);
                            }

                            boolean testsicreer = false;
                            try {
                                int nbVac = nombreVacations(examensSelected.get(0));
                                for (Souscentre souscentre : souscentreMap1.keySet()) {
                                    int nbSalles = 0;
                                    int nbSurveillants = 0;
                                    int nbSurvDesSurv = 0;
                                    int nbVacSurv = 0;
                                    int nbVacSurvDesSurv = 0;
                                    int cout = 0;
                                    int coutArrondi = 0;
                                    if (souscentreSallesMap.containsKey(souscentre)) {//souscentre à un unique secrétariat
                                        for (Salle sal : souscentreSallesMap.get(souscentre)) {
                                            nbSalles += sal.getNbsal();
                                        }
                                        nbSurveillants = 2 * nbSalles;
                                        nbSurvDesSurv = calculNombreSurvDesSurv(nbSalles);
                                        //calcul du coût
                                        nbVacSurv = nbVac * nbSurveillants;
                                        nbVacSurvDesSurv = nbVac * nbSurvDesSurv;
                                        cout = (nbVacSurv + nbVacSurvDesSurv) * 1500;
                                        coutArrondi = (int) Math.ceil((double) cout / (double) 1000) * 1000;
                                    }
                                    if (souscentreSecretariatsMap.containsKey(souscentre)) {//souscentre à plusieurs secrétariats
                                        coutArrondi = 0;
                                        for (Secretariat sec : souscentreSecretariatsMap.get(souscentre)) {
                                            nbSalles = 0;
                                            for (Sallesecret sal : secretariatSallesMap.get(sec)) {
                                                nbSalles += sal.getNbsal();
                                            }
                                            nbSurveillants = 2 * nbSalles;
                                            nbSurvDesSurv = calculNombreSurvDesSurv(nbSalles);
                                            //calcul du coût
                                            nbVacSurv = nbVac * nbSurveillants;
                                            nbVacSurvDesSurv = nbVac * nbSurvDesSurv;
                                            cout = (nbVacSurv + nbVacSurvDesSurv) * 1500;
                                            coutArrondi += (int) Math.ceil((double) cout / (double) 1000) * 1000;
                                        }
                                    }

                                    metier.creerCaisse(new Caisse(coutArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                    testsicreer = true;
                                }
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                            if (testsicreer) {
                                JOptionPane.showMessageDialog(this, "Etats de surveillance de candidats sans handicap créés avec succès pour ce groupe d'examens !");
                            }
                        } else {//cas technique                          
                            for (Examen e : examensSelected) {
                                List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                                for (Statistique s : lesStats) {
                                    ArrayList<Statistique> statsList = new ArrayList<>();
                                    if (souscentreStatistiquesMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                        statsList = souscentreStatistiquesMap.get(s.getSouscentre());
                                    }
                                    statsList.add(s);
                                    souscentreStatistiquesMap.put(s.getSouscentre(), statsList);
                                }
                            }

                            //remplissage souscentreAsecretariatsDemultipliesList
                            secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                            if (!secretariats.isEmpty()) {
                                for (Secretariat sec : secretariats) {
                                    if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                                        souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                                    }
                                }
                            }

                            //remplissage secretariatStatsecretariatsMap
                            for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                                List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreEtSession(souscentre.getNomsouscent(), anneeSelected);
                                List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                                for (Secretariat sec : secretariatsList) {
                                    ArrayList<Statsecretariat> statsList = new ArrayList<>();
                                    for (Statsecretariat statsec : statsecretariatsList) {
                                        if (statsec.getSecretariat().getNumsec() == sec.getNumsec()) {
                                            if (secretariatStatsecretariatsMap.containsKey(sec)) {//si le présent secretariat est dans secretariatStatsecretariatsMap
                                                statsList = secretariatStatsecretariatsMap.get(sec);
                                            }
                                            statsList.add(statsec);
                                            secretariatStatsecretariatsMap.put(sec, statsList);
                                        }
                                    }
                                }
                            }
                            //remplissage de souscentreSecretariatsMap
                            for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                                ArrayList<Secretariat> secretariatsList = new ArrayList<>();
                                for (Secretariat sec : secretariatStatsecretariatsMap.keySet()) {
                                    if (sec.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                        if (!secretariatsList.contains(sec)) {
                                            secretariatsList.add(sec);
                                        }
                                    }
                                }
                                if (!secretariatsList.isEmpty()) {
                                    souscentreSecretariatsMap.put(souscentre, secretariatsList);
                                }
                            }
                            //remplissage souscentreSalletechsMap et secretariatSalletechsecretsMap
                            int nbcandsal = nombreCandidatsParSalle(niveauSelected, typeSelected);
                            for (Souscentre souscentre : souscentreStatistiquesMap.keySet()) {
                                if (!souscentreAsecretariatsDemultipliesList.contains(souscentre)) {//le souscentre ne doit pas être à secrétariats démultipliés                       
                                    ArrayList<Salletech> salletechsList = new ArrayList<>();
                                    ArrayList<Statistique> restestatsList = new ArrayList<>();
                                    for (Statistique stat : souscentreStatistiquesMap.get(souscentre)) {
                                        int reste = stat.getNombre();
                                        Salletech sal = new Salletech();
                                        int nbsal = 0;
                                        if (reste >= nbcandsal) {
                                            sal.setSouscentre(souscentre);
                                            sal.setSerie(stat.getOption().getSigle());
                                            while (reste >= nbcandsal) {
                                                sal.setEffectif(sal.getEffectif() + nbcandsal);
                                                reste -= nbcandsal;
                                                nbsal += 1;
                                            }
                                            sal.setNbsal(nbsal);
                                            salletechsList.add(sal);
                                            if (reste != 0) {
                                                Statistique uneStat = new Statistique(reste, stat.getExamen(), stat.getOption(), stat.getSession(), stat.getSouscentre());
                                                restestatsList.add(uneStat);
                                            }
                                        } else {
                                            restestatsList.add(stat);
                                        }
                                    }
                                    //constituer les salletech de 2 spécialités ou 1 lorsque restestatsList à 1 seule stat
                                    if (restestatsList.size() > 1) {
                                        int i = 0;
                                        while (i < restestatsList.size() - 1) {
                                            boolean trouver1 = false;
                                            for (int j = i + 1; j < restestatsList.size(); j++) {
                                                int nb = restestatsList.get(i).getNombre() + restestatsList.get(j).getNombre();
                                                if (nb >= nbcandsal) {
                                                    trouver1 = true;
                                                    Salletech sal = new Salletech();
                                                    sal.setSouscentre(souscentre);
                                                    sal.setSerie(restestatsList.get(i).getOption().getSigle() + "/" + restestatsList.get(j).getOption().getSigle());
                                                    sal.setEffectif(nbcandsal);
                                                    sal.setNbsal(1);
                                                    salletechsList.add(sal);
                                                    if (restestatsList.get(i).getNombre() >= restestatsList.get(j).getNombre()) {
                                                        if (nb - nbcandsal > 0) {
                                                            restestatsList.get(j).setNombre(nb - nbcandsal);
                                                        } else {
                                                            restestatsList.remove(j);
                                                        }
                                                        restestatsList.remove(i);
                                                    } else {
                                                        if (nb - nbcandsal > 0) {
                                                            restestatsList.get(i).setNombre(nb - nbcandsal);
                                                        } else {
                                                            restestatsList.remove(i);
                                                        }
                                                        if (nb - nbcandsal == 0) {//on a remove i donc j a décalé d'une position
                                                            restestatsList.remove(j - 1);
                                                        } else {
                                                            restestatsList.remove(j);
                                                        }
                                                    }
                                                    break;
                                                }
                                            }
                                            if (!trouver1 && i < restestatsList.size() - 2) {
                                                i++;
                                            }
                                            if (i == restestatsList.size() - 2) {
                                                break;
                                            }
                                        }
                                    }
                                    while (restestatsList.size() > 1) {
                                        Salletech sal = new Salletech();
                                        sal.setSouscentre(souscentre);
                                        sal.setSerie(restestatsList.get(0).getOption().getSigle() + "/" + restestatsList.get(1).getOption().getSigle());
                                        sal.setEffectif(restestatsList.get(0).getNombre() + restestatsList.get(1).getNombre());
                                        sal.setNbsal(1);
                                        salletechsList.add(sal);
                                        restestatsList.remove(0);
                                        restestatsList.remove(0);//au lieu de remove(1) à cause du décalage
                                    }
                                    if (restestatsList.size() == 1) {//restestatsList n'a qu'une spécialité donc pas moyen de combiner
                                        Salletech sal = new Salletech();
                                        sal.setSouscentre(souscentre);
                                        sal.setSerie(restestatsList.get(0).getOption().getSigle());
                                        sal.setEffectif(restestatsList.get(0).getNombre());
                                        sal.setNbsal(1);
                                        salletechsList.add(sal);
                                    }
                                    for (int i = 0; i < salletechsList.size(); i++) {
                                        if (salletechsList.get(i).getEffectif() > nbcandsal && salletechsList.get(i).getNbsal()== 1) {
                                            int diff = salletechsList.get(i).getEffectif() - nbcandsal;
                                            salletechsList.get(i).setEffectif(nbcandsal);
                                            if (diff > 0) {
                                                Salletech nouvellesal = new Salletech();
                                                nouvellesal.setSouscentre(souscentre);
                                                nouvellesal.setSerie(salletechsList.get(i).getSerie());
                                                nouvellesal.setEffectif(diff);
                                                nouvellesal.setNbsal(1);
                                                salletechsList.add(nouvellesal);
                                            }
                                        }
                                    }
                                    souscentreSalletechsMap.put(souscentre, salletechsList);
                                } else {
                                    //cas souscentre à secrétariats démultipliés
                                    ArrayList<Secretariat> lesSecretariatsD1souscentre = souscentreSecretariatsMap.get(souscentre);
                                    for (Secretariat sec : lesSecretariatsD1souscentre) {
                                        ArrayList<Salletechsecret> salletechsecretsList = new ArrayList<>();
                                        ArrayList<Statsecretariat> restestatsecList = new ArrayList<>();
                                        for (Statsecretariat statsec : secretariatStatsecretariatsMap.get(sec)) {
                                            int reste = statsec.getNombre();
                                            Salletechsecret sal = new Salletechsecret();
                                            int nbsal = 0;
                                            if (reste >= nbcandsal) {
                                                sal.setSecretariat(sec);
                                                sal.setSerie(statsec.getOption().getSigle());
                                                while (reste >= nbcandsal) {
                                                    sal.setEffectif(sal.getEffectif() + nbcandsal);
                                                    reste -= nbcandsal;
                                                    nbsal += 1;
                                                }
                                                sal.setNbsal(nbsal);
                                                salletechsecretsList.add(sal);
                                                if (reste != 0) {
                                                    Statsecretariat uneStat = new Statsecretariat(sec, statsec.getExamen(), statsec.getOption(), reste);
                                                    restestatsecList.add(uneStat);
                                                }
                                            } else {
                                                restestatsecList.add(statsec);
                                            }
                                        }
                                        //constituer les salletechsecret de 2 spécialités
                                        if (restestatsecList.size() > 1) {
                                            int i = 0;
                                            while (i < restestatsecList.size() - 1) {
                                                boolean trouver1 = false;
                                                for (int j = i + 1; j < restestatsecList.size(); j++) {
                                                    int nb = restestatsecList.get(i).getNombre() + restestatsecList.get(j).getNombre();
                                                    if (nb >= nbcandsal) {
                                                        trouver1 = true;
                                                        Salletechsecret sal = new Salletechsecret();
                                                        sal.setSecretariat(sec);
                                                        sal.setSerie(restestatsecList.get(i).getOption().getSigle() + "/" + restestatsecList.get(j).getOption().getSigle());
                                                        sal.setEffectif(nbcandsal);
                                                        sal.setNbsal(1);
                                                        salletechsecretsList.add(sal);
                                                        if (restestatsecList.get(i).getNombre() >= restestatsecList.get(j).getNombre()) {
                                                            if (nb - nbcandsal > 0) {
                                                                restestatsecList.get(j).setNombre(nb - nbcandsal);
                                                            } else {
                                                                restestatsecList.remove(j);
                                                            }
                                                            restestatsecList.remove(i);
                                                        } else {
                                                            if (nb - nbcandsal > 0) {
                                                                restestatsecList.get(i).setNombre(nb - nbcandsal);
                                                            } else {
                                                                restestatsecList.remove(i);
                                                            }
                                                            if (nb - nbcandsal == 0) {
                                                                restestatsecList.remove(j - 1);//on a remove i donc j a décalé d'une position
                                                            } else {
                                                                restestatsecList.remove(j);
                                                            }
                                                        }
                                                        break;
                                                    }
                                                }
                                                if (!trouver1 && i < restestatsecList.size() - 2) {
                                                    i++;
                                                }
                                                if (i == restestatsecList.size() - 2) {
                                                    break;
                                                }
                                            }
                                        }
                                        while (restestatsecList.size() > 1) {
                                            Salletechsecret sal = new Salletechsecret();
                                            sal.setSecretariat(sec);
                                            sal.setSerie(restestatsecList.get(0).getOption().getSigle() + "/" + restestatsecList.get(1).getOption().getSigle());
                                            sal.setEffectif(restestatsecList.get(0).getNombre() + restestatsecList.get(1).getNombre());
                                            sal.setNbsal(1);
                                            salletechsecretsList.add(sal);
                                            restestatsecList.remove(0);
                                            restestatsecList.remove(0);
                                        }
                                        if (restestatsecList.size() == 1) {//restestatsList n'a qu'une spécialité donc pas moyen de combiner
                                            Salletechsecret sal = new Salletechsecret();
                                            sal.setSecretariat(sec);
                                            sal.setSerie(restestatsecList.get(0).getOption().getSigle());
                                            sal.setEffectif(restestatsecList.get(0).getNombre());
                                            sal.setNbsal(1);
                                            salletechsecretsList.add(sal);
                                        }
                                        for (int i = 0; i < salletechsecretsList.size(); i++) {
                                            if (salletechsecretsList.get(i).getEffectif() > nbcandsal && salletechsecretsList.get(i).getNbsal()== 1) {
                                                int diff = salletechsecretsList.get(i).getEffectif() - nbcandsal;
                                                salletechsecretsList.get(i).setEffectif(nbcandsal);
                                                if (diff > 0) {
                                                    Salletechsecret nouvellesal = new Salletechsecret();
                                                    nouvellesal.setSecretariat(sec);
                                                    nouvellesal.setSerie(salletechsecretsList.get(i).getSerie());
                                                    nouvellesal.setEffectif(diff);
                                                    nouvellesal.setNbsal(1);
                                                    salletechsecretsList.add(nouvellesal);
                                                }
                                            }
                                        }
                                        secretariatSalletechsecretsMap.put(sec, salletechsecretsList);
                                    }
                                }
                            }

                            boolean testsicreer = false;
                            try {
                                int nbVac = nombreVacations(examensSelected.get(0));
                                for (Souscentre souscentre : souscentreStatistiquesMap.keySet()) {
                                    int nbSalles = 0;
                                    int nbSurveillants = 0;
                                    int nbSurvDesSurv = 0;
                                    int nbVacSurv = 0;
                                    int nbVacSurvDesSurv = 0;
                                    int cout = 0;
                                    int coutArrondi = 0;
                                    if (souscentreSalletechsMap.containsKey(souscentre)) {//souscentre à un unique secrétariat
                                        for (Salletech sal : souscentreSalletechsMap.get(souscentre)) {
                                            nbSalles += sal.getNbsal();
                                        }
                                        nbSurveillants = 2 * nbSalles;
                                        nbSurvDesSurv = calculNombreSurvDesSurv(nbSalles);
                                        //calcul du coût
                                        nbVacSurv = nbVac * nbSurveillants;
                                        nbVacSurvDesSurv = nbVac * nbSurvDesSurv;
                                        cout = (nbVacSurv + nbVacSurvDesSurv) * 1500;
                                        coutArrondi = (int) Math.ceil((double) cout / (double) 1000) * 1000;
                                    }
                                    if (souscentreSecretariatsMap.containsKey(souscentre)) {//souscentre à plusieurs secrétariats
                                        coutArrondi = 0;
                                        for (Secretariat sec : souscentreSecretariatsMap.get(souscentre)) {
                                            nbSalles = 0;
                                            for (Salletechsecret sal : secretariatSalletechsecretsMap.get(sec)) {
                                                nbSalles += sal.getNbsal();
                                            }
                                            nbSurveillants = 2 * nbSalles;
                                            nbSurvDesSurv = calculNombreSurvDesSurv(nbSalles);
                                            //calcul du coût
                                            nbVacSurv = nbVac * nbSurveillants;
                                            nbVacSurvDesSurv = nbVac * nbSurvDesSurv;
                                            cout = (nbVacSurv + nbVacSurvDesSurv) * 1500;
                                            coutArrondi += (int) Math.ceil((double) cout / (double) 1000) * 1000;
                                        }
                                    }

                                    metier.creerCaisse(new Caisse(coutArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                    testsicreer = true;
                                }
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                            if (testsicreer) {
                                JOptionPane.showMessageDialog(this, "Etats de surveillance de candidats sans handicap créés avec succès pour ce groupe d'examens !");
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
                }
                examensSelected.clear();
                souscentreStatistiquesMap.clear();
                souscentreSalletechsMap.clear();
            }
            if (jRadioButtonAvecHandicap.isSelected()) {
                Map<Souscentre, Integer> souscentreMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
                Map<Souscentre, Integer> souscentreMap1 = new HashMap<>();//contient des sous-centres avec leur nombre de candidats
                Map<Souscentre, Integer> souscentreMap2 = new HashMap<>();//contient des sous-centres avec leur nombre de candidats
                Map<Souscentre, ArrayList<Integer>> souscentreHandicapesMap = new HashMap<>();//liste des sous-centres des déficients chacun avec la liste de ses elements sur l'état de surveillance
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("SURVEILLANCE CANDIDATS AVEC HANDICAP (MOTEUR OU SENSORIEL)");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (!caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, les états de surveillance de candidats avec handicap (moteur ou sensoriel) existent déjà pour ce groupe d'examens !");
                    } else {
                        String separateur = ", ";
                        examensList = groupedexamensEnstring.split(separateur);
                        for (int i = 0; i < examensList.length; i++) {
                            for (Examen e : examens) {
                                if (e.getSigle().equals(examensList[i])) {
                                    examensSelected.add(e);
                                    break;
                                }
                            }
                        }
                        for (Session s : sessions) {
                            if (s.getAnnee() == anneeSelected) {
                                sessionSelected = s;
                                break;
                            }
                        }

                        if (examensSelected.size() == 1) {
                            /*
                        if (examensSelected.get(0).getSigle().equals("BP IND")) {
                            groupedexamensEnstring += " <<COUTURE FLOU>>";
                        }
                             */
                            List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(examensSelected.get(0).getSigle(), anneeSelected);
                            //remplissage de souscentreMap1
                            for (Statistique s : lesStats) {
                                if (souscentreMap1.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap1
                                    int nbcand = souscentreMap1.get(s.getSouscentre());//on récupère son nombre de candidats
                                    souscentreMap1.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                } else {
                                    souscentreMap1.put(s.getSouscentre(), s.getNombre());
                                }
                            }
                            //liste des sous-centres avec déficients ayant des candidats sans handicap à la session en cours 
                            for (Souscentre souscentre : souscentreMap1.keySet()) {
                                if (souscentre.getDeficients()) {
                                    ArrayList<Integer> elementsList = new ArrayList<>();
                                    surveillanceHandicapesDialogbox(souscentre);
                                    while (!donneesHandCorrectes) {
                                        JOptionPane.showMessageDialog(this, "Veuillez recommencer svp. Au moins une donnée du sous-centre" + souscentre.getNomsouscent() + " est incorrecte !");
                                        break;
                                        //surveillanceHandicapesDialogbox(souscentre);
                                    }
                                    if (donneesHandCorrectes) {
                                        elementsList.add(nbcandHandicap);
                                        elementsList.add(nbsurv);
                                        elementsList.add(vacsurv);
                                        elementsList.add(nbtranscript);
                                        elementsList.add(vactranscript);
                                        souscentreHandicapesMap.put(souscentre, elementsList);
                                    }
                                }
                            }
                            if (!souscentreHandicapesMap.isEmpty()) {
                                boolean testsicreer = false;
                                try {
                                    for (Souscentre souscentre : souscentreHandicapesMap.keySet()) {
                                        int total = souscentreHandicapesMap.get(souscentre).get(2) + souscentreHandicapesMap.get(souscentre).get(4);
                                        metier.creerElementsurvdeficient(new Elementsurvdeficient(souscentreHandicapesMap.get(souscentre).get(0), souscentreHandicapesMap.get(souscentre).get(1), souscentreHandicapesMap.get(souscentre).get(2), souscentreHandicapesMap.get(souscentre).get(3), souscentreHandicapesMap.get(souscentre).get(4), groupe, sessionSelected, souscentre));
                                        int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                        metier.creerCaisse(new Caisse(totalArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                        testsicreer = true;
                                    }
                                } catch (ObcbudgetException e) {
                                    JOptionPane.showMessageDialog(this, e.getMessage());
                                }
                                if (testsicreer) {
                                    JOptionPane.showMessageDialog(this, "Etats de surveillance de candidats avec handicap (moteur ou sensoriel) créés avec succès pour ce groupe d'examens !");
                                } else {
                                    JOptionPane.showMessageDialog(this, "Impossible de créer les états de surveillance de candidats avec handicap (moteur ou sensoriel) pour ce groupe d'examen !");
                                }
                            } else {
                                JOptionPane.showMessageDialog(this, "Aucun candidat avec handicap (moteur ou sensoriel) n'existe pour ce groupe d'examen !");
                            }
                        } else {
                            if (examensSelected.size() == 2) {
                                if (!examensSelected.get(0).getNiveau().equals(examensSelected.get(1).getNiveau())) {
                                    JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Vous devez choisir un groupe 2 examens de même niveau !");
                                } else {
                                    List<Statistique> lesStats1 = metier.findAllStatistiquesD1ExamenDans1Session(examensSelected.get(0).getSigle(), anneeSelected);// stats du premier examen                  
                                    List<Statistique> lesStats2 = metier.findAllStatistiquesD1ExamenDans1Session(examensSelected.get(1).getSigle(), anneeSelected);// stats du deuxième examen                  

                                    //remplissage de souscentreMap1
                                    for (Statistique s : lesStats1) {
                                        if (souscentreMap1.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap1
                                            int nbcand = souscentreMap1.get(s.getSouscentre());//on récupère son nombre de candidats
                                            souscentreMap1.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                        } else {
                                            souscentreMap1.put(s.getSouscentre(), s.getNombre());
                                        }
                                    }
                                    //remplissage de souscentreMap2
                                    for (Statistique s : lesStats2) {
                                        if (souscentreMap2.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap2
                                            int nbcand = souscentreMap2.get(s.getSouscentre());//on récupère son nombre de candidats
                                            souscentreMap2.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                        } else {
                                            souscentreMap2.put(s.getSouscentre(), s.getNombre());
                                        }
                                    }
                                    //remplissage de souscentreMap avec souscentreMap1
                                    for (Souscentre souscentre : souscentreMap1.keySet()) {
                                        souscentreMap.put(souscentre, souscentreMap1.get(souscentre));
                                    }
                                    //on complète souscentreMap avec souscentreMap2
                                    for (Souscentre souscentre : souscentreMap2.keySet()) {
                                        if (souscentreMap.containsKey(souscentre)) {//si le présent sous-centre est dans souscentreMap
                                            int nbcand = souscentreMap.get(souscentre);//on récupère son nombre de candidats dans souscentreMap
                                            souscentreMap.put(souscentre, nbcand + souscentreMap2.get(souscentre));//on lui ajoute celui souscentreMap2
                                        } else {
                                            souscentreMap.put(souscentre, souscentreMap2.get(souscentre));//sinon on l'ajoute dans souscentreMap
                                        }
                                    }
                                }
                                //liste des sous-centres avec déficients ayant des candidats sans handicap à la session en cours 
                                for (Souscentre souscentre : souscentreMap.keySet()) {
                                    if (souscentre.getDeficients()) {
                                        ArrayList<Integer> elementsList = new ArrayList<>();
                                        surveillanceHandicapesDialogbox(souscentre);
                                        while (!donneesHandCorrectes) {
                                            JOptionPane.showMessageDialog(this, "Veuillez recommencer svp. Au moins une donnée du sous-centre" + souscentre.getNomsouscent() + " est incorrecte !");
                                            break;
                                            //surveillanceHandicapesDialogbox(souscentre);
                                        }
                                        if (donneesHandCorrectes) {
                                            elementsList.add(nbcandHandicap);
                                            elementsList.add(nbsurv);
                                            elementsList.add(vacsurv);
                                            elementsList.add(nbtranscript);
                                            elementsList.add(vactranscript);
                                            souscentreHandicapesMap.put(souscentre, elementsList);
                                        }
                                    }
                                }
                                if (!souscentreHandicapesMap.isEmpty()) {
                                    boolean testsicreer = false;
                                    try {
                                        for (Souscentre souscentre : souscentreHandicapesMap.keySet()) {
                                            int total = souscentreHandicapesMap.get(souscentre).get(2) + souscentreHandicapesMap.get(souscentre).get(4);
                                            metier.creerElementsurvdeficient(new Elementsurvdeficient(souscentreHandicapesMap.get(souscentre).get(0), souscentreHandicapesMap.get(souscentre).get(1), souscentreHandicapesMap.get(souscentre).get(2), souscentreHandicapesMap.get(souscentre).get(3), souscentreHandicapesMap.get(souscentre).get(4), groupe, sessionSelected, souscentre));
                                            int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                            metier.creerCaisse(new Caisse(totalArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                            testsicreer = true;
                                        }

                                    } catch (ObcbudgetException e) {
                                        JOptionPane.showMessageDialog(this, e.getMessage());
                                    }
                                    if (testsicreer) {
                                        JOptionPane.showMessageDialog(this, "Etats de surveillance de candidats avec handicap (moteur ou sensoriel) créés avec succès pour ce groupe d'examens !");
                                    } else {
                                        JOptionPane.showMessageDialog(this, "Impossible de créer les états de surveillance de candidats avec handicap (moteur ou sensoriel) pour ce groupe d'examen !");
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(this, "Aucun candidat avec handicap (moteur ou sensoriel) n'existe pour ce groupe d'examen !");
                                }
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
                }
                examensSelected.clear();
                souscentreMap.clear();
                souscentreMap1.clear();
                souscentreMap2.clear();
                souscentreHandicapesMap.clear();
            }
            if (!jRadioButtonSansHandicap.isSelected() && !jRadioButtonAvecHandicap.isSelected()) {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Vous devez choisir le type d'état de surveillance à créer !");
            }
        } else {//jRadioButtonAdditif selectionné
            //jRadioButtonSansHandicap est déjà sélectionné en amont
            /*
            Map<Souscentre, Integer> souscentreMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
            Map<Souscentre, Integer> souscentreMap1 = new HashMap<>();//contient des sous-centres avec leur nombre de candidats
            Map<Souscentre, Integer> souscentreMap2 = new HashMap<>();//contient des sous-centres avec leur nombre de candidats

            Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueABIMap = new HashMap<>();//contient des sous-centres avec leurs statistiques ABI
            Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueAutresLitterairesMap = new HashMap<>();//contient des sous-centres avec leurs statistiques littéraires non ABI
            Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueScientifiquesMap = new HashMap<>();//contient des sous-centres chacun avec leurs statistiques scientifiques
            Map<Souscentre, ArrayList<Salle>> souscentreSalleSimplesABIMap = new HashMap<>();//contient des sous-centres avec la liste de ses salles simples ABI (ie d'ffectif>=15)
            Map<Souscentre, SalleCumulee> souscentreSalleCumuleeABIMap = new HashMap<>();//contient des sous-centres avec sa salle cumulée ABI
            Map<Souscentre, ArrayList<Salle>> souscentreSalleSimplesAutresLitterairesMap = new HashMap<>();//contient des sous-centres avec la liste de ses salles simples AutresLitteraires (ie d'ffectif>=15)
            Map<Souscentre, SalleCumulee> souscentreSalleCumuleeAutresLitterairesMap = new HashMap<>();//contient des sous-centres avec la sa salle cumulée AutresLitteraires
            Map<Souscentre, ArrayList<Salle>> souscentreSalleSimplesScientifiquesMap = new HashMap<>();//contient des sous-centres avec la liste de ses salles simples Scientifiques (ie d'ffectif>=15)
            Map<Souscentre, SalleCumulee> souscentreSalleCumuleeScientifiquesMap = new HashMap<>();//contient des sous-centre avec sa salle cumulée Scientifiques
            Map<Souscentre, ArrayList<Salle>> souscentreSallesMap = new HashMap<>();//contient des sous-centres chacun avec la liste de ses salles cumulées ou simples
            ArrayList<Souscentre> souscentresList = new ArrayList<>();//contient tous les souscentres trouvés dans les statistiques

            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---") && !referenceImputationSelected.equals("---")) {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("SURVEILLANCE CANDIDATS SANS HANDICAP");
                caisses = metier.findAllCaissesAdditivesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (!caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états additifs de surveillance de candidats sans handicap existent déjà pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }
                    for (Imputation i : imputations) {
                        if (i.getReference().equals(referenceImputationSelected)) {
                            imputationSelected = i;
                            break;
                        }
                    }

                    if (examensSelected.size() == 1) {

                        if (niveauSelected.equals("PROB") && typeSelected.equals("GEN")) {
                            List<Statistique> statABI = metier.findAllStatistiquesABID1ExamenDans1SessionEt1phase(examensSelected.get(0).getSigle(), anneeSelected, phase);
                            List<Statistique> statAutresLitteraires = metier.findAllStatistiquesAutresLitterairesD1ExamenDans1SessionEt1phase(examensSelected.get(0).getSigle(), anneeSelected, phase);
                            List<Statistique> statScientifiques = metier.findAllStatistiquesScientifiquesD1ExamenDans1SessionEt1phase(examensSelected.get(0).getSigle(), anneeSelected, phase);

                            //remplissage de souscentreStatistiqueABIMap et souscentresList en partie
                            for (Statistique s : statABI) {
                                if (souscentreStatistiqueABIMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueABIMap
                                    souscentreStatistiqueABIMap.get(s.getSouscentre()).add(s);//on lui ajoute s
                                } else {
                                    ArrayList<Statistique> liste = new ArrayList<>();
                                    liste.add(s);
                                    souscentreStatistiqueABIMap.put(s.getSouscentre(), liste);
                                }
                                if (!souscentresList.contains(s.getSouscentre())) {
                                    souscentresList.add(s.getSouscentre());//on charge tous les sous-centres ABI
                                }
                            }

                            //remplissage de souscentreStatistiqueAutresLitterairesMap et souscentresList en partie
                            for (Statistique s : statAutresLitteraires) {
                                if (souscentreStatistiqueAutresLitterairesMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueAutresLitterairesMap
                                    souscentreStatistiqueAutresLitterairesMap.get(s.getSouscentre()).add(s);//on lui ajoute s
                                } else {
                                    ArrayList<Statistique> liste = new ArrayList<>();
                                    liste.add(s);
                                    souscentreStatistiqueAutresLitterairesMap.put(s.getSouscentre(), liste);
                                }
                                if (!souscentresList.contains(s.getSouscentre())) {
                                    souscentresList.add(s.getSouscentre());//on charge tous les sous-centres ABI
                                }
                            }

                            //remplissage de souscentreStatistiqueScientifiquesMap et souscentresList en partie
                            for (Statistique s : statScientifiques) {
                                if (souscentreStatistiqueScientifiquesMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueScientifiquesMap
                                    souscentreStatistiqueScientifiquesMap.get(s.getSouscentre()).add(s);//on lui ajoute s
                                } else {
                                    ArrayList<Statistique> liste = new ArrayList<>();
                                    liste.add(s);
                                    souscentreStatistiqueScientifiquesMap.put(s.getSouscentre(), liste);
                                }
                                if (!souscentresList.contains(s.getSouscentre())) {
                                    souscentresList.add(s.getSouscentre());//on charge tous les sous-centres ABI
                                }
                            }

                            //remplissage de souscentreSalleSimplesABIMap et souscentreSalleCumuleeABIMap
                            for (Souscentre souscentre : souscentreStatistiqueABIMap.keySet()) {
                                ArrayList<Salle> salsimplesList = new ArrayList<>();
                                for (Statistique stat : souscentreStatistiqueABIMap.get(souscentre)) {
                                    if (stat.getNombre() >= 15) {
                                        Salle sal = new Salle();
                                        sal.setSouscentre(souscentre);
                                        sal.setSerie(stat.getOption().getSigle());
                                        sal.setEffectif(stat.getNombre());
                                        salsimplesList.add(sal);
                                    } else {
                                        SalleCumulee salcu = new SalleCumulee();
                                        if (!souscentreSalleCumuleeABIMap.containsKey(souscentre)) {
                                            salcu.setSouscentre(souscentre);
                                            salcu.setSerie(stat.getOption().getSigle());
                                            salcu.setEffectif(stat.getNombre());
                                            //salcu.setPaquet("ABI"); //le paquet est ABI par défaut
                                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                salcu.setZone("NOSO");
                                            }
                                        }
                                        if (!souscentreSalleCumuleeABIMap.isEmpty() && souscentreSalleCumuleeABIMap.containsKey(souscentre)) {
                                            salcu = souscentreSalleCumuleeABIMap.get(souscentre);
                                            salcu.setSerie(salcu.getSerie() + "/" + stat.getOption().getSigle());
                                            salcu.setEffectif(salcu.getEffectif() + stat.getNombre());
                                            //souscentre, zone et paquet déjà connus ici
                                        }
                                        souscentreSalleCumuleeABIMap.put(souscentre, salcu);
                                    }
                                }
                                souscentreSalleSimplesABIMap.put(souscentre, salsimplesList);
                            }

                            //remplissage de souscentreSalleSimplesAutresLitterairesMap et souscentreSalleCumuleeAutresLitterairesMap
                            for (Souscentre souscentre : souscentreStatistiqueAutresLitterairesMap.keySet()) {
                                ArrayList<Salle> salsimplesList = new ArrayList<>();
                                for (Statistique stat : souscentreStatistiqueAutresLitterairesMap.get(souscentre)) {
                                    if (stat.getNombre() >= 15) {
                                        Salle sal = new Salle();
                                        sal.setSouscentre(souscentre);
                                        sal.setSerie(stat.getOption().getSigle());
                                        sal.setEffectif(stat.getNombre());
                                        salsimplesList.add(sal);
                                    } else {
                                        SalleCumulee salcu = new SalleCumulee();
                                        if (!souscentreSalleCumuleeAutresLitterairesMap.containsKey(souscentre)) {
                                            salcu.setSouscentre(souscentre);
                                            salcu.setSerie(stat.getOption().getSigle());
                                            salcu.setEffectif(stat.getNombre());
                                            salcu.setPaquet("AUTRES");
                                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                salcu.setZone("NOSO");
                                            }
                                        }
                                        if (!souscentreSalleCumuleeAutresLitterairesMap.isEmpty() && souscentreSalleCumuleeAutresLitterairesMap.containsKey(souscentre)) {
                                            salcu = souscentreSalleCumuleeAutresLitterairesMap.get(souscentre);
                                            salcu.setSerie(salcu.getSerie() + "/" + stat.getOption().getSigle());
                                            salcu.setEffectif(salcu.getEffectif() + stat.getNombre());
                                            //souscentre, zone et paquet déjà connus ici
                                        }
                                        souscentreSalleCumuleeAutresLitterairesMap.put(souscentre, salcu);
                                    }
                                }
                                souscentreSalleSimplesAutresLitterairesMap.put(souscentre, salsimplesList);
                            }

                            //remplissage de souscentreSalleSimplesScientifiquesMap et souscentreSalleCumuleeScientifiquesMap
                            for (Souscentre souscentre : souscentreStatistiqueScientifiquesMap.keySet()) {
                                ArrayList<Salle> salsimplesList = new ArrayList<>();
                                for (Statistique stat : souscentreStatistiqueScientifiquesMap.get(souscentre)) {
                                    if (stat.getNombre() >= 15) {
                                        Salle sal = new Salle();
                                        sal.setSouscentre(souscentre);
                                        sal.setSerie(stat.getOption().getSigle());
                                        sal.setEffectif(stat.getNombre());
                                        salsimplesList.add(sal);
                                    } else {
                                        SalleCumulee salcu = new SalleCumulee();
                                        if (!souscentreSalleCumuleeScientifiquesMap.containsKey(souscentre)) {
                                            salcu.setSouscentre(souscentre);
                                            salcu.setSerie(stat.getOption().getSigle());
                                            salcu.setEffectif(stat.getNombre());
                                            salcu.setPaquet("SCIENTIFIQUE");
                                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                salcu.setZone("NOSO");
                                            }
                                        }
                                        if (!souscentreSalleCumuleeScientifiquesMap.isEmpty() && souscentreSalleCumuleeScientifiquesMap.containsKey(souscentre)) {
                                            salcu = souscentreSalleCumuleeScientifiquesMap.get(souscentre);
                                            salcu.setSerie(salcu.getSerie() + "/" + stat.getOption().getSigle());
                                            salcu.setEffectif(salcu.getEffectif() + stat.getNombre());
                                            //souscentre, zone et paquet déjà connus ici
                                        }
                                        souscentreSalleCumuleeScientifiquesMap.put(souscentre, salcu);
                                    }
                                }
                                souscentreSalleSimplesScientifiquesMap.put(souscentre, salsimplesList);
                            }
                            //remplissage de souscentreSallesMap avec calcul de nbsal et de nbsurvdessurv
                            for (Souscentre souscentre : souscentresList) {
                                ArrayList<Salle> sallesList = new ArrayList<>();
                                if (souscentreSalleCumuleeABIMap.containsKey(souscentre)) {
                                    souscentreSalleCumuleeABIMap.get(souscentre).calculNbsal();
                                    Salle sal = new Salle();
                                    sal.setSouscentre(souscentre);
                                    sal.setSerie(souscentreSalleCumuleeABIMap.get(souscentre).getSerie());
                                    sal.setEffectif(souscentreSalleCumuleeABIMap.get(souscentre).getEffectif());
                                    sal.setNbsal(souscentreSalleCumuleeABIMap.get(souscentre).getNbsal());
                                    sallesList.add(sal);
                                }
                                if (souscentreSalleSimplesABIMap.containsKey(souscentre)) {
                                    for (Salle salle : souscentreSalleSimplesABIMap.get(souscentre)) {
                                        salle.calculNbsal();
                                        sallesList.add(salle);
                                    }
                                }
                                if (souscentreSalleCumuleeAutresLitterairesMap.containsKey(souscentre)) {
                                    souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).calculNbsal();
                                    Salle sal = new Salle();
                                    sal.setSouscentre(souscentre);
                                    sal.setSerie(souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).getSerie());
                                    sal.setEffectif(souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).getEffectif());
                                    sal.setNbsal(souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).getNbsal());
                                    sallesList.add(sal);
                                }
                                if (souscentreSalleSimplesAutresLitterairesMap.containsKey(souscentre)) {
                                    for (Salle salle : souscentreSalleSimplesAutresLitterairesMap.get(souscentre)) {
                                        salle.calculNbsal();
                                        sallesList.add(salle);
                                    }
                                }
                                if (souscentreSalleCumuleeScientifiquesMap.containsKey(souscentre)) {
                                    souscentreSalleCumuleeScientifiquesMap.get(souscentre).calculNbsal();
                                    Salle sal = new Salle();
                                    sal.setSouscentre(souscentre);
                                    sal.setSerie(souscentreSalleCumuleeScientifiquesMap.get(souscentre).getSerie());
                                    sal.setEffectif(souscentreSalleCumuleeScientifiquesMap.get(souscentre).getEffectif());
                                    sal.setNbsal(souscentreSalleCumuleeScientifiquesMap.get(souscentre).getNbsal());
                                    sallesList.add(sal);
                                }
                                if (souscentreSalleSimplesScientifiquesMap.containsKey(souscentre)) {
                                    for (Salle salle : souscentreSalleSimplesScientifiquesMap.get(souscentre)) {
                                        salle.calculNbsal();
                                        sallesList.add(salle);
                                    }
                                }
                                souscentreSallesMap.put(souscentre, sallesList);
                            }
                            List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1SessionEt1phase(examensSelected.get(0).getSigle(), anneeSelected, phase);
                            //remplissage de souscentreMap1
                            for (Statistique s : lesStats) {
                                if (souscentreMap1.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap1
                                    int nbcand = souscentreMap1.get(s.getSouscentre());//on récupère son nombre de candidats
                                    souscentreMap1.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                } else {
                                    souscentreMap1.put(s.getSouscentre(), s.getNombre());
                                }
                            }

                            boolean testsicreer = false;
                            try {
                                for (Souscentre souscentre : souscentreSallesMap.keySet()) {
                                    int nbVac = nombreAdditifVacations(examensSelected.get(0));
                                    int nbSalles = 0;
                                    for (Salle sal : souscentreSallesMap.get(souscentre)) {
                                        nbSalles += sal.getNbsal();
                                    }
                                    int nbSurveillants = 2 * nbSalles;
                                    int nbSurvDesSurv = calculNombreSurvDesSurv(nbSalles);
                                    //calcul du coût
                                    int nbVacSurv = nbVac * nbSurveillants;
                                    int nbVacSurvDesSurv = nbVac * nbSurvDesSurv;
                                    int cout = (nbVacSurv + nbVacSurvDesSurv) * 1500;

                                    int coutArrondi = (int) Math.ceil((double) cout / (double) 1000) * 1000;
                                    metier.creerCaisse(new Caisse(coutArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, imputationSelected, souscentre, true));
                                    testsicreer = true;
                                }
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                            if (testsicreer) {
                                JOptionPane.showMessageDialog(this, "Etats additifs de surveillance de candidats sans handicap créés avec succès pour ce groupe d'examens !");
                            }

                        }

                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
            }
            examensSelected.clear();
            souscentreMap.clear();
            souscentreMap1.clear();
            souscentreMap2.clear();
             */
        }
    }//GEN-LAST:event_jButtonCreerActionPerformed

    private void jButtonMettreAjourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourActionPerformed
        infoSaisies();
        if (!jRadioButtonAdditif.isSelected()) {//jRadioButtonAdditif non sélectionné
            if (jRadioButtonSansHandicap.isSelected()) {
                Map<Souscentre, Integer> souscentreMap1 = new HashMap<>();//contient des sous-centres avec leur nombre de candidats pour un examen donné
                //Map<Souscentre, Integer> souscentreMap2 = new HashMap<>();//contient des sous-centres avec leur nombre de candidats pour le deuxième examen du groupe sélectionné le cas écheant
                //Map<Souscentre, Integer> souscentreMap = new HashMap<>();//contient les sous-centres issus de souscentreMap1 et souscentreMap2 avec leur nombre de candidats (additionnés si les sous-centres sont identiques)                

                Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueABIMap = new HashMap<>();//contient des sous-centres avec leurs statistiques ABI
                Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueAutresLitterairesMap = new HashMap<>();//contient des sous-centres avec leurs statistiques littéraires non ABI
                Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueScientifiquesMap = new HashMap<>();//contient des sous-centres chacun avec leurs statistiques scientifiques
                Map<Souscentre, ArrayList<Salle>> souscentreSalleSimplesABIMap = new HashMap<>();//contient des sous-centres avec la liste de ses salles simples ABI (ie d'ffectif>=15)
                Map<Souscentre, SalleCumulee> souscentreSalleCumuleeABIMap = new HashMap<>();//contient des sous-centres avec sa salle cumulée ABI
                Map<Souscentre, ArrayList<Salle>> souscentreSalleSimplesAutresLitterairesMap = new HashMap<>();//contient des sous-centres avec la liste de ses salles simples AutresLitteraires (ie d'ffectif>=15)
                Map<Souscentre, SalleCumulee> souscentreSalleCumuleeAutresLitterairesMap = new HashMap<>();//contient des sous-centres avec la sa salle cumulée AutresLitteraires
                Map<Souscentre, ArrayList<Salle>> souscentreSalleSimplesScientifiquesMap = new HashMap<>();//contient des sous-centres avec la liste de ses salles simples Scientifiques (ie d'ffectif>=15)
                Map<Souscentre, SalleCumulee> souscentreSalleCumuleeScientifiquesMap = new HashMap<>();//contient des sous-centre avec sa salle cumulée Scientifiques
                Map<Souscentre, ArrayList<Salle>> souscentreSallesMap = new HashMap<>();//contient des sous-centres chacun avec la liste de ses salles cumulées ou simples
                ArrayList<Souscentre> souscentresList = new ArrayList<>();//contient tous les souscentres trouvés dans les statistiques

                Map<Secretariat, Integer> secretariatEffectifMap = new HashMap<>();//contient l'ensemble des secrétariats d'un groupe d'examens avec chacun avec son nombre de candidats
                List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats 
                Map<Souscentre, ArrayList<Secretariat>> souscentreSecretariatsMap = new HashMap<>();//contient les sous-centres chacun avec la liste de ses secretariats le cas échéant
                Map<Secretariat, ArrayList<Statsecretariat>> secretariatStatsecABIMap = new HashMap<>();//contient des secretariats avec ses statsecretariat ABI
                Map<Secretariat, ArrayList<Statsecretariat>> secretariatStatsecAutresLitterairesMap = new HashMap<>();//contient des secretariats avec ses statsecretariat littéraires non ABI
                Map<Secretariat, ArrayList<Statsecretariat>> secretariatStatsecScientifiquesMap = new HashMap<>();//contient des secretariats avec ses statsecretariat scientifiques
                Map<Secretariat, ArrayList<Sallesecret>> secretariatSalleSimplesABIMap = new HashMap<>();//contient des Secretariats avec la liste de ses salles simples ABI (ie d'ffectif>=15)
                Map<Secretariat, SalleCumuleesecret> secretariatSalleCumuleeABIMap = new HashMap<>();//contient des Secretariats avec sa salle cumulée ABI
                Map<Secretariat, ArrayList<Sallesecret>> secretariatSalleSimplesAutresLitterairesMap = new HashMap<>();//contient des Secretariat avec la liste de ses salles simples AutresLitteraires (ie d'ffectif>=15)
                Map<Secretariat, SalleCumuleesecret> secretariatSalleCumuleeAutresLitterairesMap = new HashMap<>();//contient des Secretariats avec la sa salle cumulée AutresLitteraires
                Map<Secretariat, ArrayList<Sallesecret>> secretariatSalleSimplesScientifiquesMap = new HashMap<>();//contient des Secretariat avec la liste de ses salles simples Scientifiques (ie d'ffectif>=15)
                Map<Secretariat, SalleCumuleesecret> secretariatSalleCumuleeScientifiquesMap = new HashMap<>();//contient des Secretariats avec sa salle cumulée Scientifiques
                Map<Secretariat, ArrayList<Sallesecret>> secretariatSallesMap = new HashMap<>();//contient des Secretariats chacun avec la liste de ses salles cumulées ou simples

                Map<Souscentre, ArrayList<Statistique>> souscentreStatistiquesMap = new HashMap<>();//contient des sous-centres avec leurs statistiques
                Map<Souscentre, ArrayList<Salletech>> souscentreSalletechsMap = new HashMap<>();//contient des sous-centres avec la liste de ses salletechs              
                Map<Secretariat, ArrayList<Statsecretariat>> secretariatStatsecretariatsMap = new HashMap<>();//contient des secretariats avec ses statsecretariats
                Map<Secretariat, ArrayList<Salletechsecret>> secretariatSalletechsecretsMap = new HashMap<>();//contient des Secretariats avec la liste de ses salles simples 

                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de surveillance de candidats sans handicap pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                        anneeSelected = Integer.parseInt(anneeString);
                        Rubriquetat rubetat = metier.findRubriquetatByDesignation("SURVEILLANCE CANDIDATS SANS HANDICAP");
                        caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                        if (caisses.isEmpty()) {
                            JOptionPane.showMessageDialog(this, "Erreur, aucun état de surveillance de candidats sans handicap n'existe pour ce groupe d'examens !");
                        } else {
                            //on conserve quelques info de ces anciennes caisses
                            Groupe groupe = caisses.get(0).getGroupe();
                            sessionSelected = caisses.get(0).getSession();
                            //on supprime toutes les anciennes caisses du groupe d'examens
                            for (Caisse c : caisses) {
                                metier.supprimerCaisse(c);
                            }
                            String separateur = ", ";
                            examensList = groupedexamensEnstring.split(separateur);
                            for (int i = 0; i < examensList.length; i++) {
                                for (Examen e : examens) {
                                    if (e.getSigle().equals(examensList[i])) {
                                        examensSelected.add(e);
                                        break;
                                    }
                                }
                            }

                            //remplissage souscentreAsecretariatsDemultipliesList
                            secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                            if (!secretariats.isEmpty()) {
                                for (Secretariat sec : secretariats) {
                                    if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                                        souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                                    }
                                }
                            }

                            /*
                            if (examensSelected.get(0).getSigle().equals("BP IND")) {
                                groupedexamensEnstring += " <<COUTURE FLOU>>";
                            }
                             */
                            if (typeSelected.equals("GEN")) {
                                List<Statistique> statABI = metier.findAllStatistiquesABID1ExamenDans1Session(examensSelected.get(0).getSigle(), anneeSelected);
                                List<Statistique> statAutresLitteraires = metier.findAllStatistiquesAutresLitterairesD1ExamenDans1Session(examensSelected.get(0).getSigle(), anneeSelected);
                                List<Statistique> statScientifiques = metier.findAllStatistiquesScientifiquesD1ExamenDans1Session(examensSelected.get(0).getSigle(), anneeSelected);

                                //remplissage de souscentreStatistiqueABIMap et souscentresList en partie
                                for (Statistique s : statABI) {
                                    if (!souscentreAsecretariatsDemultipliesList.contains(s.getSouscentre())) {
                                        if (souscentreStatistiqueABIMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueABIMap
                                            souscentreStatistiqueABIMap.get(s.getSouscentre()).add(s);//on lui ajoute s
                                        } else {
                                            ArrayList<Statistique> liste = new ArrayList<>();
                                            liste.add(s);
                                            souscentreStatistiqueABIMap.put(s.getSouscentre(), liste);
                                        }
                                    }
                                    if (!souscentresList.contains(s.getSouscentre())) {
                                        souscentresList.add(s.getSouscentre());//on charge tous les sous-centres ABI
                                    }
                                }

                                //remplissage de souscentreStatistiqueAutresLitterairesMap et souscentresList en partie
                                for (Statistique s : statAutresLitteraires) {
                                    if (!souscentreAsecretariatsDemultipliesList.contains(s.getSouscentre())) {
                                        if (souscentreStatistiqueAutresLitterairesMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueAutresLitterairesMap
                                            souscentreStatistiqueAutresLitterairesMap.get(s.getSouscentre()).add(s);//on lui ajoute s
                                        } else {
                                            ArrayList<Statistique> liste = new ArrayList<>();
                                            liste.add(s);
                                            souscentreStatistiqueAutresLitterairesMap.put(s.getSouscentre(), liste);
                                        }
                                    }
                                    if (!souscentresList.contains(s.getSouscentre())) {
                                        souscentresList.add(s.getSouscentre());//on charge tous les sous-centres litteraires non ABI
                                    }
                                }

                                //remplissage de souscentreStatistiqueScientifiquesMap et souscentresList en partie
                                for (Statistique s : statScientifiques) {
                                    if (!souscentreAsecretariatsDemultipliesList.contains(s.getSouscentre())) {
                                        if (souscentreStatistiqueScientifiquesMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueScientifiquesMap
                                            souscentreStatistiqueScientifiquesMap.get(s.getSouscentre()).add(s);//on lui ajoute s
                                        } else {
                                            ArrayList<Statistique> liste = new ArrayList<>();
                                            liste.add(s);
                                            souscentreStatistiqueScientifiquesMap.put(s.getSouscentre(), liste);
                                        }
                                    }
                                    if (!souscentresList.contains(s.getSouscentre())) {
                                        souscentresList.add(s.getSouscentre());//on charge tous les sous-centres scientifiques
                                    }
                                }

                                int nbrecandparsalle=nombreCandidatsParSalle(niveauSelected, typeSelected);
                                //remplissage de souscentreSalleSimplesABIMap et souscentreSalleCumuleeABIMap
                                for (Souscentre souscentre : souscentreStatistiqueABIMap.keySet()) {
                                    ArrayList<Salle> salsimplesList = new ArrayList<>();
                                    for (Statistique stat : souscentreStatistiqueABIMap.get(souscentre)) {
                                        if (stat.getNombre() >= 20) {
                                            Salle sal = new Salle();
                                            sal.setSouscentre(souscentre);
                                            sal.setSerie(stat.getOption().getSigle());
                                            sal.setEffectif(stat.getNombre());
                                            sal.setNbcandsal(nbrecandparsalle);
                                            salsimplesList.add(sal);
                                        } else {
                                            SalleCumulee salcu = new SalleCumulee();
                                            if (!souscentreSalleCumuleeABIMap.containsKey(souscentre)) {
                                                salcu.setSouscentre(souscentre);
                                                salcu.setSerie(stat.getOption().getSigle());
                                                salcu.setEffectif(stat.getNombre());
                                                salcu.setNbcandsal(nbrecandparsalle);
                                                //salcu.setPaquet("ABI"); //le paquet est ABI par défaut
                                                if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                    salcu.setZone("NOSO");
                                                }
                                            }
                                            if (!souscentreSalleCumuleeABIMap.isEmpty() && souscentreSalleCumuleeABIMap.containsKey(souscentre)) {
                                                salcu = souscentreSalleCumuleeABIMap.get(souscentre);
                                                salcu.setSerie(salcu.getSerie() + "/" + stat.getOption().getSigle());
                                                salcu.setEffectif(salcu.getEffectif() + stat.getNombre());
                                                //souscentre, zone et paquet déjà connus ici
                                            }
                                            souscentreSalleCumuleeABIMap.put(souscentre, salcu);
                                        }
                                    }
                                    souscentreSalleSimplesABIMap.put(souscentre, salsimplesList);
                                }

                                //remplissage de souscentreSalleSimplesAutresLitterairesMap et souscentreSalleCumuleeAutresLitterairesMap
                                for (Souscentre souscentre : souscentreStatistiqueAutresLitterairesMap.keySet()) {
                                    ArrayList<Salle> salsimplesList = new ArrayList<>();
                                    for (Statistique stat : souscentreStatistiqueAutresLitterairesMap.get(souscentre)) {
                                        if (stat.getNombre() >= 20) {
                                            Salle sal = new Salle();
                                            sal.setSouscentre(souscentre);
                                            sal.setSerie(stat.getOption().getSigle());
                                            sal.setEffectif(stat.getNombre());
                                            sal.setNbcandsal(nbrecandparsalle);
                                            salsimplesList.add(sal);
                                        } else {
                                            SalleCumulee salcu = new SalleCumulee();
                                            if (!souscentreSalleCumuleeAutresLitterairesMap.containsKey(souscentre)) {
                                                salcu.setSouscentre(souscentre);
                                                salcu.setSerie(stat.getOption().getSigle());
                                                salcu.setEffectif(stat.getNombre());
                                                salcu.setNbcandsal(nbrecandparsalle);
                                                salcu.setPaquet("AUTRES");
                                                if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                    salcu.setZone("NOSO");
                                                }
                                            }
                                            if (!souscentreSalleCumuleeAutresLitterairesMap.isEmpty() && souscentreSalleCumuleeAutresLitterairesMap.containsKey(souscentre)) {
                                                salcu = souscentreSalleCumuleeAutresLitterairesMap.get(souscentre);
                                                salcu.setSerie(salcu.getSerie() + "/" + stat.getOption().getSigle());
                                                salcu.setEffectif(salcu.getEffectif() + stat.getNombre());
                                                //souscentre, zone et paquet déjà connus ici
                                            }
                                            souscentreSalleCumuleeAutresLitterairesMap.put(souscentre, salcu);
                                        }
                                    }
                                    souscentreSalleSimplesAutresLitterairesMap.put(souscentre, salsimplesList);
                                }

                                //remplissage de souscentreSalleSimplesScientifiquesMap et souscentreSalleCumuleeScientifiquesMap
                                for (Souscentre souscentre : souscentreStatistiqueScientifiquesMap.keySet()) {
                                    ArrayList<Salle> salsimplesList = new ArrayList<>();
                                    for (Statistique stat : souscentreStatistiqueScientifiquesMap.get(souscentre)) {
                                        if (stat.getNombre() >= 20) {
                                            Salle sal = new Salle();
                                            sal.setSouscentre(souscentre);
                                            sal.setSerie(stat.getOption().getSigle());
                                            sal.setEffectif(stat.getNombre());
                                            sal.setNbcandsal(nbrecandparsalle);
                                            salsimplesList.add(sal);
                                        } else {
                                            SalleCumulee salcu = new SalleCumulee();
                                            if (!souscentreSalleCumuleeScientifiquesMap.containsKey(souscentre)) {
                                                salcu.setSouscentre(souscentre);
                                                salcu.setSerie(stat.getOption().getSigle());
                                                salcu.setEffectif(stat.getNombre());
                                                salcu.setNbcandsal(nbrecandparsalle);
                                                salcu.setPaquet("SCIENTIFIQUE");
                                                if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                    salcu.setZone("NOSO");
                                                }
                                            }
                                            if (!souscentreSalleCumuleeScientifiquesMap.isEmpty() && souscentreSalleCumuleeScientifiquesMap.containsKey(souscentre)) {
                                                salcu = souscentreSalleCumuleeScientifiquesMap.get(souscentre);
                                                salcu.setSerie(salcu.getSerie() + "/" + stat.getOption().getSigle());
                                                salcu.setEffectif(salcu.getEffectif() + stat.getNombre());
                                                //souscentre, zone et paquet déjà connus ici
                                            }
                                            souscentreSalleCumuleeScientifiquesMap.put(souscentre, salcu);
                                        }
                                    }
                                    souscentreSalleSimplesScientifiquesMap.put(souscentre, salsimplesList);
                                }
                                //remplissage de souscentreSallesMap avec calcul de nbsal et de nbsurvdessurv
                                for (Souscentre souscentre : souscentresList) {
                                    ArrayList<Salle> sallesList = new ArrayList<>();
                                    if (souscentreSalleCumuleeABIMap.containsKey(souscentre)) {
                                        souscentreSalleCumuleeABIMap.get(souscentre).calculNbsal();
                                        Salle sal = new Salle();
                                        sal.setSouscentre(souscentre);
                                        sal.setSerie(souscentreSalleCumuleeABIMap.get(souscentre).getSerie());
                                        sal.setEffectif(souscentreSalleCumuleeABIMap.get(souscentre).getEffectif());
                                        sal.setNbsal(souscentreSalleCumuleeABIMap.get(souscentre).getNbsal());
                                        sallesList.add(sal);
                                    }
                                    if (souscentreSalleSimplesABIMap.containsKey(souscentre)) {
                                        for (Salle salle : souscentreSalleSimplesABIMap.get(souscentre)) {
                                            salle.calculNbsal();
                                            sallesList.add(salle);
                                        }
                                    }
                                    if (souscentreSalleCumuleeAutresLitterairesMap.containsKey(souscentre)) {
                                        souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).calculNbsal();
                                        Salle sal = new Salle();
                                        sal.setSouscentre(souscentre);
                                        sal.setSerie(souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).getSerie());
                                        sal.setEffectif(souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).getEffectif());
                                        sal.setNbsal(souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).getNbsal());
                                        sallesList.add(sal);
                                    }
                                    if (souscentreSalleSimplesAutresLitterairesMap.containsKey(souscentre)) {
                                        for (Salle salle : souscentreSalleSimplesAutresLitterairesMap.get(souscentre)) {
                                            salle.calculNbsal();
                                            sallesList.add(salle);
                                        }
                                    }
                                    if (souscentreSalleCumuleeScientifiquesMap.containsKey(souscentre)) {
                                        souscentreSalleCumuleeScientifiquesMap.get(souscentre).calculNbsal();
                                        Salle sal = new Salle();
                                        sal.setSouscentre(souscentre);
                                        sal.setSerie(souscentreSalleCumuleeScientifiquesMap.get(souscentre).getSerie());
                                        sal.setEffectif(souscentreSalleCumuleeScientifiquesMap.get(souscentre).getEffectif());
                                        sal.setNbsal(souscentreSalleCumuleeScientifiquesMap.get(souscentre).getNbsal());
                                        sallesList.add(sal);
                                    }
                                    if (souscentreSalleSimplesScientifiquesMap.containsKey(souscentre)) {
                                        for (Salle salle : souscentreSalleSimplesScientifiquesMap.get(souscentre)) {
                                            salle.calculNbsal();
                                            sallesList.add(salle);
                                        }
                                    }
                                    souscentreSallesMap.put(souscentre, sallesList);
                                }
                                List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(examensSelected.get(0).getSigle(), anneeSelected);
                                //remplissage de souscentreMap1
                                for (Statistique s : lesStats) {
                                    if (souscentreMap1.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap1
                                        int nbcand = souscentreMap1.get(s.getSouscentre());//on récupère son nombre de candidats
                                        souscentreMap1.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                    } else {
                                        souscentreMap1.put(s.getSouscentre(), s.getNombre());
                                    }
                                }

                                //remplissage secretariatEffectifMap
                                for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                                    List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreEtSession(souscentre.getNomsouscent(), anneeSelected);
                                    if (!secretariatsList.isEmpty()) {
                                        for (Secretariat sec : secretariatsList) {
                                            int stat = 0;
                                            List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                                            for (Statsecretariat statsec : statsecretariatsList) {
                                                if (statsec.getSecretariat().getNumsec() == sec.getNumsec() && statsec.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                                    stat += statsec.getNombre();
                                                }
                                            }
                                            secretariatEffectifMap.put(sec, stat);
                                        }
                                    }
                                }
                                //remplissage de souscentreSecretariatsMap
                                for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                                    ArrayList<Secretariat> secretariatsList = new ArrayList<>();
                                    for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                        if (sec.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                            if (!secretariatsList.contains(sec)) {
                                                secretariatsList.add(sec);
                                            }
                                        }
                                    }
                                    if (!secretariatsList.isEmpty()) {
                                        souscentreSecretariatsMap.put(souscentre, secretariatsList);
                                    }
                                }

                                List<Statsecretariat> statsecABI = metier.findAllStatsecretariatsABID1ExamenDans1Session(examensSelected.get(0).getSigle(), anneeSelected);
                                List<Statsecretariat> statsecAutresLitteraires = metier.findAllStatsecretariatsAutresLitterairesD1ExamenDans1Session(examensSelected.get(0).getSigle(), anneeSelected);
                                List<Statsecretariat> statsecScientifiques = metier.findAllStatsecretariatsScientifiquesD1ExamenDans1Session(examensSelected.get(0).getSigle(), anneeSelected);

                                //remplissage de secretariatStatsecABIMap et souscentresList en partie
                                for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                    for (Statsecretariat s : statsecABI) {
                                        if (s.getSecretariat().getNumsec() == sec.getNumsec() && s.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                            if (secretariatStatsecABIMap.containsKey(sec)) {//si le présent secretariat est dans secretariatStatsecABIMap
                                                secretariatStatsecABIMap.get(s.getSecretariat()).add(s);//on lui ajoute s
                                            } else {
                                                ArrayList<Statsecretariat> liste = new ArrayList<>();
                                                liste.add(s);
                                                secretariatStatsecABIMap.put(s.getSecretariat(), liste);
                                            }
                                        }
                                    }
                                }

                                //remplissage de secretariatStatsecAutresLitterairesMap et souscentresList en partie
                                for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                    for (Statsecretariat s : statsecAutresLitteraires) {
                                        if (s.getSecretariat().getNumsec() == sec.getNumsec() && s.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                            if (secretariatStatsecAutresLitterairesMap.containsKey(s.getSecretariat())) {//si le présent secretariat est dans secretariatStatsecAutresLitterairesMap
                                                secretariatStatsecAutresLitterairesMap.get(s.getSecretariat()).add(s);//on lui ajoute s
                                            } else {
                                                ArrayList<Statsecretariat> liste = new ArrayList<>();
                                                liste.add(s);
                                                secretariatStatsecAutresLitterairesMap.put(s.getSecretariat(), liste);
                                            }
                                        }
                                    }
                                }

                                //remplissage de secretariatStatsecScientifiquesMap et souscentresList en partie
                                for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                    for (Statsecretariat s : statsecScientifiques) {
                                        if (s.getSecretariat().getNumsec() == sec.getNumsec() && s.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                            if (secretariatStatsecScientifiquesMap.containsKey(s.getSecretariat())) {//si le présent secretariat est dans secretariatStatsecScientifiquesMap
                                                secretariatStatsecScientifiquesMap.get(s.getSecretariat()).add(s);//on lui ajoute s
                                            } else {
                                                ArrayList<Statsecretariat> liste = new ArrayList<>();
                                                liste.add(s);
                                                secretariatStatsecScientifiquesMap.put(s.getSecretariat(), liste);
                                            }
                                        }
                                    }
                                }

                                //remplissage de secretariatSalleSimplesABIMap et secretariatSalleCumuleeABIMap
                                for (Secretariat secretariat : secretariatStatsecABIMap.keySet()) {
                                    ArrayList<Sallesecret> salsimplesList = new ArrayList<>();
                                    for (Statsecretariat statsec : secretariatStatsecABIMap.get(secretariat)) {
                                        if (statsec.getNombre() >= 20) {
                                            Sallesecret sal = new Sallesecret();
                                            sal.setSecretariat(secretariat);
                                            sal.setSerie(statsec.getOption().getSigle());
                                            sal.setEffectif(statsec.getNombre());
                                            sal.setNbcandsal(nbrecandparsalle);
                                            salsimplesList.add(sal);
                                        } else {
                                            SalleCumuleesecret salcu = new SalleCumuleesecret();
                                            if (!secretariatSalleCumuleeABIMap.containsKey(secretariat)) {
                                                salcu.setSecretariat(secretariat);
                                                salcu.setSerie(statsec.getOption().getSigle());
                                                salcu.setEffectif(statsec.getNombre());
                                                salcu.setNbcandsal(nbrecandparsalle);
                                                //salcu.setPaquet("ABI"); //le paquet est ABI par défaut
                                                if (secretariat.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || secretariat.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                    salcu.setZone("NOSO");
                                                }
                                            }
                                            if (!secretariatSalleCumuleeABIMap.isEmpty() && secretariatSalleCumuleeABIMap.containsKey(secretariat)) {
                                                salcu = secretariatSalleCumuleeABIMap.get(secretariat);
                                                salcu.setSerie(salcu.getSerie() + "/" + statsec.getOption().getSigle());
                                                salcu.setEffectif(salcu.getEffectif() + statsec.getNombre());
                                                //secretariat, zone et paquet déjà connus ici
                                            }
                                            secretariatSalleCumuleeABIMap.put(secretariat, salcu);
                                        }
                                    }
                                    secretariatSalleSimplesABIMap.put(secretariat, salsimplesList);
                                }

                                //remplissage de secretariatSalleSimplesAutresLitterairesMap et secretariatSalleCumuleeAutresLitterairesMap
                                for (Secretariat secretariat : secretariatStatsecAutresLitterairesMap.keySet()) {
                                    ArrayList<Sallesecret> salsimplesList = new ArrayList<>();
                                    for (Statsecretariat statsec : secretariatStatsecAutresLitterairesMap.get(secretariat)) {
                                        if (statsec.getNombre() >= 20) {
                                            Sallesecret sal = new Sallesecret();
                                            sal.setSecretariat(secretariat);
                                            sal.setSerie(statsec.getOption().getSigle());
                                            sal.setEffectif(statsec.getNombre());
                                            sal.setNbcandsal(nbrecandparsalle);
                                            salsimplesList.add(sal);
                                        } else {
                                            SalleCumuleesecret salcu = new SalleCumuleesecret();
                                            if (!secretariatSalleCumuleeAutresLitterairesMap.containsKey(secretariat)) {
                                                salcu.setSecretariat(secretariat);
                                                salcu.setSerie(statsec.getOption().getSigle());
                                                salcu.setEffectif(statsec.getNombre());
                                                salcu.setNbcandsal(nbrecandparsalle);
                                                salcu.setPaquet("AUTRES");
                                                if (secretariat.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || secretariat.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                    salcu.setZone("NOSO");
                                                }
                                            }
                                            if (!secretariatSalleCumuleeAutresLitterairesMap.isEmpty() && secretariatSalleCumuleeAutresLitterairesMap.containsKey(secretariat)) {
                                                salcu = secretariatSalleCumuleeAutresLitterairesMap.get(secretariat);
                                                salcu.setSerie(salcu.getSerie() + "/" + statsec.getOption().getSigle());
                                                salcu.setEffectif(salcu.getEffectif() + statsec.getNombre());
                                                //souscentre, zone et paquet déjà connus ici
                                            }
                                            secretariatSalleCumuleeAutresLitterairesMap.put(secretariat, salcu);
                                        }
                                    }
                                    secretariatSalleSimplesAutresLitterairesMap.put(secretariat, salsimplesList);
                                }

                                //remplissage de secretariatSalleSimplesScientifiquesMap et secretariatSalleCumuleeScientifiquesMap
                                for (Secretariat secretariat : secretariatStatsecScientifiquesMap.keySet()) {
                                    ArrayList<Sallesecret> salsimplesList = new ArrayList<>();
                                    for (Statsecretariat statsec : secretariatStatsecScientifiquesMap.get(secretariat)) {
                                        if (statsec.getNombre() >= 20) {
                                            Sallesecret sal = new Sallesecret();
                                            sal.setSecretariat(secretariat);
                                            sal.setSerie(statsec.getOption().getSigle());
                                            sal.setEffectif(statsec.getNombre());
                                            sal.setNbcandsal(nbrecandparsalle);
                                            salsimplesList.add(sal);
                                        } else {
                                            SalleCumuleesecret salcu = new SalleCumuleesecret();
                                            if (!secretariatSalleCumuleeScientifiquesMap.containsKey(secretariat)) {
                                                salcu.setSecretariat(secretariat);
                                                salcu.setSerie(statsec.getOption().getSigle());
                                                salcu.setEffectif(statsec.getNombre());
                                                salcu.setNbcandsal(nbrecandparsalle);
                                                salcu.setPaquet("SCIENTIFIQUE");
                                                if (secretariat.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || secretariat.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                    salcu.setZone("NOSO");
                                                }
                                            }
                                            if (!secretariatSalleCumuleeScientifiquesMap.isEmpty() && secretariatSalleCumuleeScientifiquesMap.containsKey(secretariat)) {
                                                salcu = secretariatSalleCumuleeScientifiquesMap.get(secretariat);
                                                salcu.setSerie(salcu.getSerie() + "/" + statsec.getOption().getSigle());
                                                salcu.setEffectif(salcu.getEffectif() + statsec.getNombre());
                                                //souscentre, zone et paquet déjà connus ici
                                            }
                                            secretariatSalleCumuleeScientifiquesMap.put(secretariat, salcu);
                                        }
                                    }
                                    secretariatSalleSimplesScientifiquesMap.put(secretariat, salsimplesList);
                                }
                                //remplissage de secretariatSallesMap avec calcul de nbsal et de nbsurvdessurv
                                for (Secretariat secretariat : secretariatEffectifMap.keySet()) {
                                    ArrayList<Sallesecret> sallesList = new ArrayList<>();
                                    if (secretariatSalleCumuleeABIMap.containsKey(secretariat)) {
                                        secretariatSalleCumuleeABIMap.get(secretariat).calculNbsal();
                                        Sallesecret sal = new Sallesecret();
                                        sal.setSecretariat(secretariat);
                                        sal.setSerie(secretariatSalleCumuleeABIMap.get(secretariat).getSerie());
                                        sal.setEffectif(secretariatSalleCumuleeABIMap.get(secretariat).getEffectif());
                                        sal.setNbsal(secretariatSalleCumuleeABIMap.get(secretariat).getNbsal());
                                        sallesList.add(sal);
                                    }
                                    if (secretariatSalleSimplesABIMap.containsKey(secretariat)) {
                                        for (Sallesecret salle : secretariatSalleSimplesABIMap.get(secretariat)) {
                                            salle.calculNbsal();
                                            sallesList.add(salle);
                                        }
                                    }
                                    if (secretariatSalleCumuleeAutresLitterairesMap.containsKey(secretariat)) {
                                        secretariatSalleCumuleeAutresLitterairesMap.get(secretariat).calculNbsal();
                                        Sallesecret sal = new Sallesecret();
                                        sal.setSecretariat(secretariat);
                                        sal.setSerie(secretariatSalleCumuleeAutresLitterairesMap.get(secretariat).getSerie());
                                        sal.setEffectif(secretariatSalleCumuleeAutresLitterairesMap.get(secretariat).getEffectif());
                                        sal.setNbsal(secretariatSalleCumuleeAutresLitterairesMap.get(secretariat).getNbsal());
                                        sallesList.add(sal);
                                    }
                                    if (secretariatSalleSimplesAutresLitterairesMap.containsKey(secretariat)) {
                                        for (Sallesecret salle : secretariatSalleSimplesAutresLitterairesMap.get(secretariat)) {
                                            salle.calculNbsal();
                                            sallesList.add(salle);
                                        }
                                    }
                                    if (secretariatSalleCumuleeScientifiquesMap.containsKey(secretariat)) {
                                        secretariatSalleCumuleeScientifiquesMap.get(secretariat).calculNbsal();
                                        Sallesecret sal = new Sallesecret();
                                        sal.setSecretariat(secretariat);
                                        sal.setSerie(secretariatSalleCumuleeScientifiquesMap.get(secretariat).getSerie());
                                        sal.setEffectif(secretariatSalleCumuleeScientifiquesMap.get(secretariat).getEffectif());
                                        sal.setNbsal(secretariatSalleCumuleeScientifiquesMap.get(secretariat).getNbsal());
                                        sallesList.add(sal);
                                    }
                                    if (secretariatSalleSimplesScientifiquesMap.containsKey(secretariat)) {
                                        for (Sallesecret salle : secretariatSalleSimplesScientifiquesMap.get(secretariat)) {
                                            salle.calculNbsal();
                                            sallesList.add(salle);
                                        }
                                    }
                                    secretariatSallesMap.put(secretariat, sallesList);
                                }

                                boolean testsicreer = false;
                                try {
                                    int nbVac = nombreVacations(examensSelected.get(0));
                                    for (Souscentre souscentre : souscentreSallesMap.keySet()) {
                                        int nbSalles = 0;
                                        int nbSurveillants = 0;
                                        int nbSurvDesSurv = 0;
                                        int nbVacSurv = 0;
                                        int nbVacSurvDesSurv = 0;
                                        int cout = 0;
                                        int coutArrondi = 0;
                                        if (souscentreSallesMap.containsKey(souscentre)) {//souscentre à un unique secrétariat
                                            for (Salle sal : souscentreSallesMap.get(souscentre)) {
                                                nbSalles += sal.getNbsal();
                                            }
                                            nbSurveillants = 2 * nbSalles;
                                            nbSurvDesSurv = calculNombreSurvDesSurv(nbSalles);
                                            //calcul du coût
                                            nbVacSurv = nbVac * nbSurveillants;
                                            nbVacSurvDesSurv = nbVac * nbSurvDesSurv;
                                            cout = (nbVacSurv + nbVacSurvDesSurv) * 1500;
                                            coutArrondi = (int) Math.ceil((double) cout / (double) 1000) * 1000;
                                        }
                                        if (souscentreSecretariatsMap.containsKey(souscentre)) {//souscentre à plusieurs secrétariats
                                            coutArrondi = 0;
                                            for (Secretariat sec : souscentreSecretariatsMap.get(souscentre)) {
                                                nbSalles = 0;
                                                for (Sallesecret sal : secretariatSallesMap.get(sec)) {
                                                    nbSalles += sal.getNbsal();
                                                }
                                                nbSurveillants = 2 * nbSalles;
                                                nbSurvDesSurv = calculNombreSurvDesSurv(nbSalles);
                                                //calcul du coût
                                                nbVacSurv = nbVac * nbSurveillants;
                                                nbVacSurvDesSurv = nbVac * nbSurvDesSurv;
                                                cout = (nbVacSurv + nbVacSurvDesSurv) * 1500;
                                                coutArrondi += (int) Math.ceil((double) cout / (double) 1000) * 1000;
                                            }
                                        }

                                        metier.creerCaisse(new Caisse(coutArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                        testsicreer = true;
                                    }
                                } catch (ObcbudgetException e) {
                                    JOptionPane.showMessageDialog(this, e.getMessage());
                                }
                                if (testsicreer) {
                                    JOptionPane.showMessageDialog(this, "Etats de surveillance de candidats sans handicap mis à jour avec succès pour ce groupe d'examens !");
                                }
                            } else {//cas technique                                
                                for (Examen e : examensSelected) {
                                    List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                                    for (Statistique s : lesStats) {
                                        ArrayList<Statistique> statsList = new ArrayList<>();
                                        if (souscentreStatistiquesMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                            statsList = souscentreStatistiquesMap.get(s.getSouscentre());
                                        }
                                        statsList.add(s);
                                        souscentreStatistiquesMap.put(s.getSouscentre(), statsList);
                                    }
                                }

                                //remplissage souscentreAsecretariatsDemultipliesList
                                secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                                if (!secretariats.isEmpty()) {
                                    for (Secretariat sec : secretariats) {
                                        if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                                            souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                                        }
                                    }
                                }

                                //remplissage secretariatStatsecretariatsMap
                                for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                                    List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreEtSession(souscentre.getNomsouscent(), anneeSelected);
                                    List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                                    for (Secretariat sec : secretariatsList) {
                                        ArrayList<Statsecretariat> statsList = new ArrayList<>();
                                        for (Statsecretariat statsec : statsecretariatsList) {
                                            if (statsec.getSecretariat().getNumsec() == sec.getNumsec()) {
                                                if (secretariatStatsecretariatsMap.containsKey(sec)) {//si le présent secretariat est dans secretariatStatsecretariatsMap
                                                    statsList = secretariatStatsecretariatsMap.get(sec);
                                                }
                                                statsList.add(statsec);
                                                secretariatStatsecretariatsMap.put(sec, statsList);
                                            }
                                        }
                                    }
                                }
                                //remplissage de souscentreSecretariatsMap
                                for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                                    ArrayList<Secretariat> secretariatsList = new ArrayList<>();
                                    for (Secretariat sec : secretariatStatsecretariatsMap.keySet()) {
                                        if (sec.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                            if (!secretariatsList.contains(sec)) {
                                                secretariatsList.add(sec);
                                            }
                                        }
                                    }
                                    if (!secretariatsList.isEmpty()) {
                                        souscentreSecretariatsMap.put(souscentre, secretariatsList);
                                    }
                                }
                                //remplissage souscentreSalletechsMap et secretariatSalletechsecretsMap
                                int nbcandsal = nombreCandidatsParSalle(niveauSelected, typeSelected);
                                for (Souscentre souscentre : souscentreStatistiquesMap.keySet()) {
                                    if (!souscentreAsecretariatsDemultipliesList.contains(souscentre)) {//le souscentre ne doit pas être à secrétariats démultipliés                       
                                        ArrayList<Salletech> salletechsList = new ArrayList<>();
                                        ArrayList<Statistique> restestatsList = new ArrayList<>();
                                        for (Statistique stat : souscentreStatistiquesMap.get(souscentre)) {
                                            int reste = stat.getNombre();
                                            Salletech sal = new Salletech();
                                            int nbsal = 0;
                                            if (reste >= nbcandsal) {
                                                sal.setSouscentre(souscentre);
                                                sal.setSerie(stat.getOption().getSigle());
                                                while (reste >= nbcandsal) {
                                                    sal.setEffectif(sal.getEffectif() + nbcandsal);
                                                    reste -= nbcandsal;
                                                    nbsal += 1;
                                                }
                                                sal.setNbsal(nbsal);
                                                salletechsList.add(sal);
                                                if (reste != 0) {
                                                    Statistique uneStat = new Statistique(reste, stat.getExamen(), stat.getOption(), stat.getSession(), stat.getSouscentre());
                                                    restestatsList.add(uneStat);
                                                }
                                            } else {
                                                restestatsList.add(stat);
                                            }
                                        }
                                        //constituer les salletech de 2 spécialités ou 1 lorsque restestatsList à 1 seule stat
                                        if (restestatsList.size() > 1) {
                                            int i = 0;
                                            while (i < restestatsList.size() - 1) {
                                                boolean trouver1 = false;
                                                for (int j = i + 1; j < restestatsList.size(); j++) {
                                                    int nb = restestatsList.get(i).getNombre() + restestatsList.get(j).getNombre();
                                                    if (nb >= nbcandsal) {
                                                        trouver1 = true;
                                                        Salletech sal = new Salletech();
                                                        sal.setSouscentre(souscentre);
                                                        sal.setSerie(restestatsList.get(i).getOption().getSigle() + "/" + restestatsList.get(j).getOption().getSigle());
                                                        sal.setEffectif(nbcandsal);
                                                        sal.setNbsal(1);
                                                        salletechsList.add(sal);
                                                        if (restestatsList.get(i).getNombre() >= restestatsList.get(j).getNombre()) {
                                                            if (nb - nbcandsal > 0) {
                                                                restestatsList.get(j).setNombre(nb - nbcandsal);
                                                            } else {
                                                                restestatsList.remove(j);
                                                            }
                                                            restestatsList.remove(i);
                                                        } else {
                                                            if (nb - nbcandsal > 0) {
                                                                restestatsList.get(i).setNombre(nb - nbcandsal);
                                                            } else {
                                                                restestatsList.remove(i);
                                                            }
                                                            if (nb - nbcandsal == 0) {//on a remove i donc j a décalé d'une position
                                                                restestatsList.remove(j - 1);
                                                            } else {
                                                                restestatsList.remove(j);
                                                            }
                                                        }
                                                        break;
                                                    }
                                                }
                                                if (!trouver1 && i < restestatsList.size() - 2) {
                                                    i++;
                                                }
                                                if (i == restestatsList.size() - 2) {
                                                    break;
                                                }
                                            }
                                        }
                                        while (restestatsList.size() > 1) {
                                            Salletech sal = new Salletech();
                                            sal.setSouscentre(souscentre);
                                            sal.setSerie(restestatsList.get(0).getOption().getSigle() + "/" + restestatsList.get(1).getOption().getSigle());
                                            sal.setEffectif(restestatsList.get(0).getNombre() + restestatsList.get(1).getNombre());
                                            sal.setNbsal(1);
                                            salletechsList.add(sal);
                                            restestatsList.remove(0);
                                            restestatsList.remove(0);//au lieu de remove(1) à cause du décalage
                                        }
                                        if (restestatsList.size() == 1) {//restestatsList n'a qu'une spécialité donc pas moyen de combiner
                                            Salletech sal = new Salletech();
                                            sal.setSouscentre(souscentre);
                                            sal.setSerie(restestatsList.get(0).getOption().getSigle());
                                            sal.setEffectif(restestatsList.get(0).getNombre());
                                            sal.setNbsal(1);
                                            salletechsList.add(sal);
                                        }
                                        for (int i = 0; i < salletechsList.size(); i++) {
                                            if (salletechsList.get(i).getEffectif() > nbcandsal && salletechsList.get(i).getNbsal()== 1) {
                                                int diff = salletechsList.get(i).getEffectif() - nbcandsal;
                                                salletechsList.get(i).setEffectif(nbcandsal);
                                                if (diff > 0) {
                                                    Salletech nouvellesal = new Salletech();
                                                    nouvellesal.setSouscentre(souscentre);
                                                    nouvellesal.setSerie(salletechsList.get(i).getSerie());
                                                    nouvellesal.setEffectif(diff);
                                                    nouvellesal.setNbsal(1);
                                                    salletechsList.add(nouvellesal);
                                                }
                                            }
                                        }
                                        souscentreSalletechsMap.put(souscentre, salletechsList);
                                    } else {
                                        //cas souscentre à secrétariats démultipliés
                                        ArrayList<Secretariat> lesSecretariatsD1souscentre = souscentreSecretariatsMap.get(souscentre);
                                        for (Secretariat sec : lesSecretariatsD1souscentre) {
                                            ArrayList<Salletechsecret> salletechsecretsList = new ArrayList<>();
                                            ArrayList<Statsecretariat> restestatsecList = new ArrayList<>();
                                            for (Statsecretariat statsec : secretariatStatsecretariatsMap.get(sec)) {
                                                int reste = statsec.getNombre();
                                                Salletechsecret sal = new Salletechsecret();
                                                int nbsal = 0;
                                                if (reste >= nbcandsal) {
                                                    sal.setSecretariat(sec);
                                                    sal.setSerie(statsec.getOption().getSigle());
                                                    while (reste >= nbcandsal) {
                                                        sal.setEffectif(sal.getEffectif() + nbcandsal);
                                                        reste -= nbcandsal;
                                                        nbsal += 1;
                                                    }
                                                    sal.setNbsal(nbsal);
                                                    salletechsecretsList.add(sal);
                                                    if (reste != 0) {
                                                        Statsecretariat uneStat = new Statsecretariat(sec, statsec.getExamen(), statsec.getOption(), reste);
                                                        restestatsecList.add(uneStat);
                                                    }
                                                } else {
                                                    restestatsecList.add(statsec);
                                                }
                                            }
                                            //constituer les salletechsecret de 2 spécialités
                                            if (restestatsecList.size() > 1) {
                                                int i = 0;
                                                while (i < restestatsecList.size() - 1) {
                                                    boolean trouver1 = false;
                                                    for (int j = i + 1; j < restestatsecList.size(); j++) {
                                                        int nb = restestatsecList.get(i).getNombre() + restestatsecList.get(j).getNombre();
                                                        if (nb >= nbcandsal) {
                                                            trouver1 = true;
                                                            Salletechsecret sal = new Salletechsecret();
                                                            sal.setSecretariat(sec);
                                                            sal.setSerie(restestatsecList.get(i).getOption().getSigle() + "/" + restestatsecList.get(j).getOption().getSigle());
                                                            sal.setEffectif(nbcandsal);
                                                            sal.setNbsal(1);
                                                            salletechsecretsList.add(sal);
                                                            if (restestatsecList.get(i).getNombre() >= restestatsecList.get(j).getNombre()) {
                                                                if (nb - nbcandsal > 0) {
                                                                    restestatsecList.get(j).setNombre(nb - nbcandsal);
                                                                } else {
                                                                    restestatsecList.remove(j);
                                                                }
                                                                restestatsecList.remove(i);
                                                            } else {
                                                                if (nb - nbcandsal > 0) {
                                                                    restestatsecList.get(i).setNombre(nb - nbcandsal);
                                                                } else {
                                                                    restestatsecList.remove(i);
                                                                }
                                                                if (nb - nbcandsal == 0) {
                                                                    restestatsecList.remove(j - 1);//on a remove i donc j a décalé d'une position
                                                                } else {
                                                                    restestatsecList.remove(j);
                                                                }
                                                            }
                                                            break;
                                                        }
                                                    }
                                                    if (!trouver1 && i < restestatsecList.size() - 2) {
                                                        i++;
                                                    }
                                                    if (i == restestatsecList.size() - 2) {
                                                        break;
                                                    }
                                                }
                                            }
                                            while (restestatsecList.size() > 1) {
                                                Salletechsecret sal = new Salletechsecret();
                                                sal.setSecretariat(sec);
                                                sal.setSerie(restestatsecList.get(0).getOption().getSigle() + "/" + restestatsecList.get(1).getOption().getSigle());
                                                sal.setEffectif(restestatsecList.get(0).getNombre() + restestatsecList.get(1).getNombre());
                                                sal.setNbsal(1);
                                                salletechsecretsList.add(sal);
                                                restestatsecList.remove(0);
                                                restestatsecList.remove(0);
                                            }
                                            if (restestatsecList.size() == 1) {//restestatsList n'a qu'une spécialité donc pas moyen de combiner
                                                Salletechsecret sal = new Salletechsecret();
                                                sal.setSecretariat(sec);
                                                sal.setSerie(restestatsecList.get(0).getOption().getSigle());
                                                sal.setEffectif(restestatsecList.get(0).getNombre());
                                                sal.setNbsal(1);
                                                salletechsecretsList.add(sal);
                                            }
                                            for (int i = 0; i < salletechsecretsList.size(); i++) {
                                                if (salletechsecretsList.get(i).getEffectif() > nbcandsal && salletechsecretsList.get(i).getNbsal()== 1) {
                                                    int diff = salletechsecretsList.get(i).getEffectif() - nbcandsal;
                                                    salletechsecretsList.get(i).setEffectif(nbcandsal);
                                                    if (diff > 0) {
                                                        Salletechsecret nouvellesal = new Salletechsecret();
                                                        nouvellesal.setSecretariat(sec);
                                                        nouvellesal.setSerie(salletechsecretsList.get(i).getSerie());
                                                        nouvellesal.setEffectif(diff);
                                                        nouvellesal.setNbsal(1);
                                                        salletechsecretsList.add(nouvellesal);
                                                    }
                                                }
                                            }
                                            secretariatSalletechsecretsMap.put(sec, salletechsecretsList);
                                        }
                                    }
                                }

                                boolean testsicreer = false;
                                try {
                                    int nbVac = nombreVacations(examensSelected.get(0));
                                    for (Souscentre souscentre : souscentreStatistiquesMap.keySet()) {
                                        int nbSalles = 0;
                                        int nbSurveillants = 0;
                                        int nbSurvDesSurv = 0;
                                        int nbVacSurv = 0;
                                        int nbVacSurvDesSurv = 0;
                                        int cout = 0;
                                        int coutArrondi = 0;
                                        if (souscentreSalletechsMap.containsKey(souscentre)) {//souscentre à un unique secrétariat
                                            for (Salletech sal : souscentreSalletechsMap.get(souscentre)) {
                                                nbSalles += sal.getNbsal();
                                            }
                                            nbSurveillants = 2 * nbSalles;
                                            nbSurvDesSurv = calculNombreSurvDesSurv(nbSalles);
                                            //calcul du coût
                                            nbVacSurv = nbVac * nbSurveillants;
                                            nbVacSurvDesSurv = nbVac * nbSurvDesSurv;
                                            cout = (nbVacSurv + nbVacSurvDesSurv) * 1500;
                                            coutArrondi = (int) Math.ceil((double) cout / (double) 1000) * 1000;
                                        }
                                        if (souscentreSecretariatsMap.containsKey(souscentre)) {//souscentre à plusieurs secrétariats
                                            coutArrondi = 0;
                                            for (Secretariat sec : souscentreSecretariatsMap.get(souscentre)) {
                                                nbSalles = 0;
                                                for (Salletechsecret sal : secretariatSalletechsecretsMap.get(sec)) {
                                                    nbSalles += sal.getNbsal();
                                                }
                                                nbSurveillants = 2 * nbSalles;
                                                nbSurvDesSurv = calculNombreSurvDesSurv(nbSalles);
                                                //calcul du coût
                                                nbVacSurv = nbVac * nbSurveillants;
                                                nbVacSurvDesSurv = nbVac * nbSurvDesSurv;
                                                cout = (nbVacSurv + nbVacSurvDesSurv) * 1500;
                                                coutArrondi += (int) Math.ceil((double) cout / (double) 1000) * 1000;
                                            }
                                        }

                                        metier.creerCaisse(new Caisse(coutArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                        testsicreer = true;
                                    }
                                } catch (ObcbudgetException e) {
                                    JOptionPane.showMessageDialog(this, e.getMessage());
                                }
                                if (testsicreer) {
                                    JOptionPane.showMessageDialog(this, "Etats de surveillance de candidats sans handicap créés avec succès pour ce groupe d'examens !");
                                }
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
                    }
                    examensSelected.clear();
                    souscentreMap1.clear();
                }
            }
            if (jRadioButtonAvecHandicap.isSelected()) {
                //pour les états des déficients la mise à jour consiste à tout supprimer et recommencer
                Map<Souscentre, Integer> souscentreMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
                Map<Souscentre, Integer> souscentreMap1 = new HashMap<>();//contient des sous-centres avec leur nombre de candidats
                Map<Souscentre, Integer> souscentreMap2 = new HashMap<>();//contient des sous-centres avec leur nombre de candidats
                Map<Souscentre, ArrayList<Integer>> souscentreHandicapesMap = new HashMap<>();//liste des sous-centres des déficients chacun avec la liste de ses elements sur l'état de surveillance
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de surveillance de candidats avec handicap (moteur ou sensoriel) pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                        anneeSelected = Integer.parseInt(anneeString);
                        Rubriquetat rubetat = metier.findRubriquetatByDesignation("SURVEILLANCE CANDIDATS AVEC HANDICAP (MOTEUR OU SENSORIEL)");
                        caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                        if (caisses.isEmpty()) {
                            JOptionPane.showMessageDialog(this, "Erreur, aucun état de surveillance de candidats avec handicap (moteur ou sensoriel) n'existe pour ce groupe d'examens !");
                        } else {
                            //on conserve quelques info de ces anciennes caisses
                            Groupe groupe = caisses.get(0).getGroupe();
                            sessionSelected = caisses.get(0).getSession();
                            //on supprime toutes les anciennes caisses du groupe d'examens
                            for (Caisse c : caisses) {
                                metier.supprimerCaisse(c);
                            }
                            //on supprime tous les elementsurvdeficient de ce groupe d'examen
                            elementsurvdeficients = metier.findAllElementsurvdeficientsD1groupedexamenA1Session(anneeSelected, niveauSelected, typeSelected);
                            for (Elementsurvdeficient eltsurdef : elementsurvdeficients) {
                                metier.supprimerElementsurvdeficient(eltsurdef);
                            }
                            String separateur = ", ";
                            examensList = groupedexamensEnstring.split(separateur);
                            for (int i = 0; i < examensList.length; i++) {
                                for (Examen e : examens) {
                                    if (e.getSigle().equals(examensList[i])) {
                                        examensSelected.add(e);
                                        break;
                                    }
                                }
                            }

                            if (examensSelected.size() == 1) {
                                /*
                            if (examensSelected.get(0).getSigle().equals("BP IND")) {
                                groupedexamensEnstring += " <<COUTURE FLOU>>";
                            }
                                 */
                                List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(examensSelected.get(0).getSigle(), anneeSelected);
                                //remplissage de souscentreMap1
                                for (Statistique s : lesStats) {
                                    if (souscentreMap1.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap1
                                        int nbcand = souscentreMap1.get(s.getSouscentre());//on récupère son nombre de candidats
                                        souscentreMap1.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                    } else {
                                        souscentreMap1.put(s.getSouscentre(), s.getNombre());
                                    }
                                }
                                //liste des sous-centres avec déficients ayant des candidats sans handicap à la session en cours 
                                for (Souscentre souscentre : souscentreMap1.keySet()) {
                                    if (souscentre.getDeficients()) {
                                        ArrayList<Integer> elementsList = new ArrayList<>();
                                        surveillanceHandicapesDialogbox(souscentre);
                                        while (!donneesHandCorrectes) {
                                            JOptionPane.showMessageDialog(this, "Veuillez recommencer svp. Au moins une donnée du sous-centre" + souscentre.getNomsouscent() + " est incorrecte !");
                                            break;
                                            //surveillanceHandicapesDialogbox(souscentre);
                                        }
                                        if (donneesHandCorrectes) {
                                            elementsList.add(nbcandHandicap);
                                            elementsList.add(nbsurv);
                                            elementsList.add(vacsurv);
                                            elementsList.add(nbtranscript);
                                            elementsList.add(vactranscript);
                                            souscentreHandicapesMap.put(souscentre, elementsList);
                                        }
                                    }
                                }
                                if (!souscentreHandicapesMap.isEmpty()) {
                                    boolean testsicreer = false;
                                    try {
                                        for (Souscentre souscentre : souscentreHandicapesMap.keySet()) {
                                            int total = souscentreHandicapesMap.get(souscentre).get(2) + souscentreHandicapesMap.get(souscentre).get(4);
                                            metier.creerElementsurvdeficient(new Elementsurvdeficient(souscentreHandicapesMap.get(souscentre).get(0), souscentreHandicapesMap.get(souscentre).get(1), souscentreHandicapesMap.get(souscentre).get(2), souscentreHandicapesMap.get(souscentre).get(3), souscentreHandicapesMap.get(souscentre).get(4), groupe, sessionSelected, souscentre));
                                            int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                            metier.creerCaisse(new Caisse(totalArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                            testsicreer = true;
                                        }
                                    } catch (ObcbudgetException e) {
                                        JOptionPane.showMessageDialog(this, e.getMessage());
                                    }
                                    if (testsicreer) {
                                        JOptionPane.showMessageDialog(this, "Etats de surveillance de candidats avec handicap (moteur ou sensoriel) créés avec succès pour ce groupe d'examens !");
                                    } else {
                                        JOptionPane.showMessageDialog(this, "Impossible de créer les états de surveillance de candidats avec handicap (moteur ou sensoriel) pour ce groupe d'examen !");
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(this, "Aucun candidat avec handicap (moteur ou sensoriel) n'existe pour ce groupe d'examen !");
                                }
                            } else {
                                if (examensSelected.size() == 2) {
                                    if (!examensSelected.get(0).getNiveau().equals(examensSelected.get(1).getNiveau())) {
                                        JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Vous devez choisir un groupe 2 examens de même niveau !");
                                    } else {
                                        List<Statistique> lesStats1 = metier.findAllStatistiquesD1ExamenDans1Session(examensSelected.get(0).getSigle(), anneeSelected);// stats du premier examen                  
                                        List<Statistique> lesStats2 = metier.findAllStatistiquesD1ExamenDans1Session(examensSelected.get(1).getSigle(), anneeSelected);// stats du deuxième examen                  

                                        //remplissage de souscentreMap1
                                        for (Statistique s : lesStats1) {
                                            if (souscentreMap1.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap1
                                                int nbcand = souscentreMap1.get(s.getSouscentre());//on récupère son nombre de candidats
                                                souscentreMap1.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                            } else {
                                                souscentreMap1.put(s.getSouscentre(), s.getNombre());
                                            }
                                        }
                                        //remplissage de souscentreMap2
                                        for (Statistique s : lesStats2) {
                                            if (souscentreMap2.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap2
                                                int nbcand = souscentreMap2.get(s.getSouscentre());//on récupère son nombre de candidats
                                                souscentreMap2.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                            } else {
                                                souscentreMap2.put(s.getSouscentre(), s.getNombre());
                                            }
                                        }
                                        //remplissage de souscentreMap avec souscentreMap1
                                        for (Souscentre souscentre : souscentreMap1.keySet()) {
                                            souscentreMap.put(souscentre, souscentreMap1.get(souscentre));
                                        }
                                        //on complète souscentreMap avec souscentreMap2
                                        for (Souscentre souscentre : souscentreMap2.keySet()) {
                                            if (souscentreMap.containsKey(souscentre)) {//si le présent sous-centre est dans souscentreMap
                                                int nbcand = souscentreMap.get(souscentre);//on récupère son nombre de candidats dans souscentreMap
                                                souscentreMap.put(souscentre, nbcand + souscentreMap2.get(souscentre));//on lui ajoute celui souscentreMap2
                                            } else {
                                                souscentreMap.put(souscentre, souscentreMap2.get(souscentre));//sinon on l'ajoute dans souscentreMap
                                            }
                                        }
                                    }
                                    //liste des sous-centres avec déficients ayant des candidats sans handicap à la session en cours 
                                    for (Souscentre souscentre : souscentreMap.keySet()) {
                                        if (souscentre.getDeficients()) {
                                            ArrayList<Integer> elementsList = new ArrayList<>();
                                            surveillanceHandicapesDialogbox(souscentre);
                                            while (!donneesHandCorrectes) {
                                                JOptionPane.showMessageDialog(this, "Veuillez recommencer svp. Au moins une donnée du sous-centre" + souscentre.getNomsouscent() + " est incorrecte !");
                                                break;
                                                //surveillanceHandicapesDialogbox(souscentre);
                                            }
                                            if (donneesHandCorrectes) {
                                                elementsList.add(nbcandHandicap);
                                                elementsList.add(nbsurv);
                                                elementsList.add(vacsurv);
                                                elementsList.add(nbtranscript);
                                                elementsList.add(vactranscript);
                                                souscentreHandicapesMap.put(souscentre, elementsList);
                                            }
                                        }
                                    }
                                    if (!souscentreHandicapesMap.isEmpty()) {
                                        boolean testsicreer = false;
                                        try {
                                            for (Souscentre souscentre : souscentreHandicapesMap.keySet()) {
                                                int total = souscentreHandicapesMap.get(souscentre).get(2) + souscentreHandicapesMap.get(souscentre).get(4);
                                                metier.creerElementsurvdeficient(new Elementsurvdeficient(souscentreHandicapesMap.get(souscentre).get(0), souscentreHandicapesMap.get(souscentre).get(1), souscentreHandicapesMap.get(souscentre).get(2), souscentreHandicapesMap.get(souscentre).get(3), souscentreHandicapesMap.get(souscentre).get(4), groupe, sessionSelected, souscentre));
                                                int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                metier.creerCaisse(new Caisse(totalArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                                testsicreer = true;
                                            }

                                        } catch (ObcbudgetException e) {
                                            JOptionPane.showMessageDialog(this, e.getMessage());
                                        }
                                        if (testsicreer) {
                                            JOptionPane.showMessageDialog(this, "Etats de surveillance de candidats avec handicap (moteur ou sensoriel) créés avec succès pour ce groupe d'examens !");
                                        } else {
                                            JOptionPane.showMessageDialog(this, "Impossible de créer les états de surveillance de candidats avec handicap (moteur ou sensoriel) pour ce groupe d'examen !");
                                        }
                                    } else {
                                        JOptionPane.showMessageDialog(this, "Aucun candidat avec handicap (moteur ou sensoriel) n'existe pour ce groupe d'examen !");
                                    }
                                }
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
                    }
                    examensSelected.clear();
                    souscentreMap.clear();
                    souscentreMap1.clear();
                    souscentreMap2.clear();
                    souscentreHandicapesMap.clear();
                }
            }
            if (!jRadioButtonSansHandicap.isSelected() && !jRadioButtonAvecHandicap.isSelected()) {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Vous devez choisir le type d'état de surveillance à mettre à jour !");
            }
        } else {//jRadioButtonAdditif selectionné
            /*
            //jRadioButtonSansHandicap est sélectionné en amont
            Map<Souscentre, Integer> souscentreMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
            Map<Souscentre, Integer> souscentreMap1 = new HashMap<>();//contient des sous-centres avec leur nombre de candidats
            Map<Souscentre, Integer> souscentreMap2 = new HashMap<>();//contient des sous-centres avec leur nombre de candidats

            Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueABIMap = new HashMap<>();//contient des sous-centres avec leurs statistiques ABI
            Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueAutresLitterairesMap = new HashMap<>();//contient des sous-centres avec leurs statistiques littéraires non ABI
            Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueScientifiquesMap = new HashMap<>();//contient des sous-centres chacun avec leurs statistiques scientifiques
            Map<Souscentre, ArrayList<Salle>> souscentreSalleSimplesABIMap = new HashMap<>();//contient des sous-centres avec la liste de ses salles simples ABI (ie d'ffectif>=15)
            Map<Souscentre, SalleCumulee> souscentreSalleCumuleeABIMap = new HashMap<>();//contient des sous-centres avec sa salle cumulée ABI
            Map<Souscentre, ArrayList<Salle>> souscentreSalleSimplesAutresLitterairesMap = new HashMap<>();//contient des sous-centres avec la liste de ses salles simples AutresLitteraires (ie d'ffectif>=15)
            Map<Souscentre, SalleCumulee> souscentreSalleCumuleeAutresLitterairesMap = new HashMap<>();//contient des sous-centres avec la sa salle cumulée AutresLitteraires
            Map<Souscentre, ArrayList<Salle>> souscentreSalleSimplesScientifiquesMap = new HashMap<>();//contient des sous-centres avec la liste de ses salles simples Scientifiques (ie d'ffectif>=15)
            Map<Souscentre, SalleCumulee> souscentreSalleCumuleeScientifiquesMap = new HashMap<>();//contient des sous-centre avec sa salle cumulée Scientifiques
            Map<Souscentre, ArrayList<Salle>> souscentreSallesMap = new HashMap<>();//contient des sous-centres chacun avec la liste de ses salles cumulées ou simples
            ArrayList<Souscentre> souscentresList = new ArrayList<>();//contient tous les souscentres trouvés dans les statistiques

            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états additifs de surveillance de candidats sans handicap pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("SURVEILLANCE CANDIDATS SANS HANDICAP");
                    caisses = metier.findAllCaissesAdditivesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état additif de surveillance de candidats sans handicap n'existe pour ce groupe d'examens !");
                    } else {
                        //on conserve quelques info de ces anciennes caisses
                        imputationSelected = caisses.get(0).getImputation();
                        Groupe groupe = caisses.get(0).getGroupe();
                        sessionSelected = caisses.get(0).getSession();
                        //on supprime toutes les anciennes caisses du groupe d'examens
                        for (Caisse c : caisses) {
                            metier.supprimerCaisse(c);
                        }
                        String separateur = ", ";
                        examensList = groupedexamensEnstring.split(separateur);
                        for (int i = 0; i < examensList.length; i++) {
                            for (Examen e : examens) {
                                if (e.getSigle().equals(examensList[i])) {
                                    examensSelected.add(e);
                                    break;
                                }
                            }
                        }

                        if (examensSelected.size() == 1) {
                            if (niveauSelected.equals("PROB") && typeSelected.equals("GEN")) {
                                List<Statistique> statABI = metier.findAllStatistiquesABID1ExamenDans1SessionEt1phase(examensSelected.get(0).getSigle(), anneeSelected, phase);
                                List<Statistique> statAutresLitteraires = metier.findAllStatistiquesAutresLitterairesD1ExamenDans1SessionEt1phase(examensSelected.get(0).getSigle(), anneeSelected, phase);
                                List<Statistique> statScientifiques = metier.findAllStatistiquesScientifiquesD1ExamenDans1SessionEt1phase(examensSelected.get(0).getSigle(), anneeSelected, phase);

                                //remplissage de souscentreStatistiqueABIMap et souscentresList en partie
                                for (Statistique s : statABI) {
                                    if (souscentreStatistiqueABIMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueABIMap
                                        souscentreStatistiqueABIMap.get(s.getSouscentre()).add(s);//on lui ajoute s
                                    } else {
                                        ArrayList<Statistique> liste = new ArrayList<>();
                                        liste.add(s);
                                        souscentreStatistiqueABIMap.put(s.getSouscentre(), liste);
                                    }
                                    if (!souscentresList.contains(s.getSouscentre())) {
                                        souscentresList.add(s.getSouscentre());//on charge tous les sous-centres ABI
                                    }
                                }

                                //remplissage de souscentreStatistiqueAutresLitterairesMap et souscentresList en partie
                                for (Statistique s : statAutresLitteraires) {
                                    if (souscentreStatistiqueAutresLitterairesMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueAutresLitterairesMap
                                        souscentreStatistiqueAutresLitterairesMap.get(s.getSouscentre()).add(s);//on lui ajoute s
                                    } else {
                                        ArrayList<Statistique> liste = new ArrayList<>();
                                        liste.add(s);
                                        souscentreStatistiqueAutresLitterairesMap.put(s.getSouscentre(), liste);
                                    }
                                    if (!souscentresList.contains(s.getSouscentre())) {
                                        souscentresList.add(s.getSouscentre());//on charge tous les sous-centres ABI
                                    }
                                }

                                //remplissage de souscentreStatistiqueScientifiquesMap et souscentresList en partie
                                for (Statistique s : statScientifiques) {
                                    if (souscentreStatistiqueScientifiquesMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueScientifiquesMap
                                        souscentreStatistiqueScientifiquesMap.get(s.getSouscentre()).add(s);//on lui ajoute s
                                    } else {
                                        ArrayList<Statistique> liste = new ArrayList<>();
                                        liste.add(s);
                                        souscentreStatistiqueScientifiquesMap.put(s.getSouscentre(), liste);
                                    }
                                    if (!souscentresList.contains(s.getSouscentre())) {
                                        souscentresList.add(s.getSouscentre());//on charge tous les sous-centres ABI
                                    }
                                }

                                //remplissage de souscentreSalleSimplesABIMap et souscentreSalleCumuleeABIMap
                                for (Souscentre souscentre : souscentreStatistiqueABIMap.keySet()) {
                                    ArrayList<Salle> salsimplesList = new ArrayList<>();
                                    for (Statistique stat : souscentreStatistiqueABIMap.get(souscentre)) {
                                        if (stat.getNombre() >= 15) {
                                            Salle sal = new Salle();
                                            sal.setSouscentre(souscentre);
                                            sal.setSerie(stat.getOption().getSigle());
                                            sal.setEffectif(stat.getNombre());
                                            salsimplesList.add(sal);
                                        } else {
                                            SalleCumulee salcu = new SalleCumulee();
                                            if (!souscentreSalleCumuleeABIMap.containsKey(souscentre)) {
                                                salcu.setSouscentre(souscentre);
                                                salcu.setSerie(stat.getOption().getSigle());
                                                salcu.setEffectif(stat.getNombre());
                                                //salcu.setPaquet("ABI"); //le paquet est ABI par défaut
                                                if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                    salcu.setZone("NOSO");
                                                }
                                            }
                                            if (!souscentreSalleCumuleeABIMap.isEmpty() && souscentreSalleCumuleeABIMap.containsKey(souscentre)) {
                                                salcu = souscentreSalleCumuleeABIMap.get(souscentre);
                                                salcu.setSerie(salcu.getSerie() + "/" + stat.getOption().getSigle());
                                                salcu.setEffectif(salcu.getEffectif() + stat.getNombre());
                                                //souscentre, zone et paquet déjà connus ici
                                            }
                                            souscentreSalleCumuleeABIMap.put(souscentre, salcu);
                                        }
                                    }
                                    souscentreSalleSimplesABIMap.put(souscentre, salsimplesList);
                                }

                                //remplissage de souscentreSalleSimplesAutresLitterairesMap et souscentreSalleCumuleeAutresLitterairesMap
                                for (Souscentre souscentre : souscentreStatistiqueAutresLitterairesMap.keySet()) {
                                    ArrayList<Salle> salsimplesList = new ArrayList<>();
                                    for (Statistique stat : souscentreStatistiqueAutresLitterairesMap.get(souscentre)) {
                                        if (stat.getNombre() >= 15) {
                                            Salle sal = new Salle();
                                            sal.setSouscentre(souscentre);
                                            sal.setSerie(stat.getOption().getSigle());
                                            sal.setEffectif(stat.getNombre());
                                            salsimplesList.add(sal);
                                        } else {
                                            SalleCumulee salcu = new SalleCumulee();
                                            if (!souscentreSalleCumuleeAutresLitterairesMap.containsKey(souscentre)) {
                                                salcu.setSouscentre(souscentre);
                                                salcu.setSerie(stat.getOption().getSigle());
                                                salcu.setEffectif(stat.getNombre());
                                                salcu.setPaquet("AUTRES");
                                                if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                    salcu.setZone("NOSO");
                                                }
                                            }
                                            if (!souscentreSalleCumuleeAutresLitterairesMap.isEmpty() && souscentreSalleCumuleeAutresLitterairesMap.containsKey(souscentre)) {
                                                salcu = souscentreSalleCumuleeAutresLitterairesMap.get(souscentre);
                                                salcu.setSerie(salcu.getSerie() + "/" + stat.getOption().getSigle());
                                                salcu.setEffectif(salcu.getEffectif() + stat.getNombre());
                                                //souscentre, zone et paquet déjà connus ici
                                            }
                                            souscentreSalleCumuleeAutresLitterairesMap.put(souscentre, salcu);
                                        }
                                    }
                                    souscentreSalleSimplesAutresLitterairesMap.put(souscentre, salsimplesList);
                                }

                                //remplissage de souscentreSalleSimplesScientifiquesMap et souscentreSalleCumuleeScientifiquesMap
                                for (Souscentre souscentre : souscentreStatistiqueScientifiquesMap.keySet()) {
                                    ArrayList<Salle> salsimplesList = new ArrayList<>();
                                    for (Statistique stat : souscentreStatistiqueScientifiquesMap.get(souscentre)) {
                                        if (stat.getNombre() >= 15) {
                                            Salle sal = new Salle();
                                            sal.setSouscentre(souscentre);
                                            sal.setSerie(stat.getOption().getSigle());
                                            sal.setEffectif(stat.getNombre());
                                            salsimplesList.add(sal);
                                        } else {
                                            SalleCumulee salcu = new SalleCumulee();
                                            if (!souscentreSalleCumuleeScientifiquesMap.containsKey(souscentre)) {
                                                salcu.setSouscentre(souscentre);
                                                salcu.setSerie(stat.getOption().getSigle());
                                                salcu.setEffectif(stat.getNombre());
                                                salcu.setPaquet("SCIENTIFIQUE");
                                                if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("NORD-OUEST") || souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals("SUD-OUEST")) {
                                                    salcu.setZone("NOSO");
                                                }
                                            }
                                            if (!souscentreSalleCumuleeScientifiquesMap.isEmpty() && souscentreSalleCumuleeScientifiquesMap.containsKey(souscentre)) {
                                                salcu = souscentreSalleCumuleeScientifiquesMap.get(souscentre);
                                                salcu.setSerie(salcu.getSerie() + "/" + stat.getOption().getSigle());
                                                salcu.setEffectif(salcu.getEffectif() + stat.getNombre());
                                                //souscentre, zone et paquet déjà connus ici
                                            }
                                            souscentreSalleCumuleeScientifiquesMap.put(souscentre, salcu);
                                        }
                                    }
                                    souscentreSalleSimplesScientifiquesMap.put(souscentre, salsimplesList);
                                }
                                //remplissage de souscentreSallesMap avec calcul de nbsal et de nbsurvdessurv
                                for (Souscentre souscentre : souscentresList) {
                                    ArrayList<Salle> sallesList = new ArrayList<>();
                                    if (souscentreSalleCumuleeABIMap.containsKey(souscentre)) {
                                        souscentreSalleCumuleeABIMap.get(souscentre).calculNbsal();
                                        Salle sal = new Salle();
                                        sal.setSouscentre(souscentre);
                                        sal.setSerie(souscentreSalleCumuleeABIMap.get(souscentre).getSerie());
                                        sal.setEffectif(souscentreSalleCumuleeABIMap.get(souscentre).getEffectif());
                                        sal.setNbsal(souscentreSalleCumuleeABIMap.get(souscentre).getNbsal());
                                        sallesList.add(sal);
                                    }
                                    if (souscentreSalleSimplesABIMap.containsKey(souscentre)) {
                                        for (Salle salle : souscentreSalleSimplesABIMap.get(souscentre)) {
                                            salle.calculNbsal();
                                            sallesList.add(salle);
                                        }
                                    }
                                    if (souscentreSalleCumuleeAutresLitterairesMap.containsKey(souscentre)) {
                                        souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).calculNbsal();
                                        Salle sal = new Salle();
                                        sal.setSouscentre(souscentre);
                                        sal.setSerie(souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).getSerie());
                                        sal.setEffectif(souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).getEffectif());
                                        sal.setNbsal(souscentreSalleCumuleeAutresLitterairesMap.get(souscentre).getNbsal());
                                        sallesList.add(sal);
                                    }
                                    if (souscentreSalleSimplesAutresLitterairesMap.containsKey(souscentre)) {
                                        for (Salle salle : souscentreSalleSimplesAutresLitterairesMap.get(souscentre)) {
                                            salle.calculNbsal();
                                            sallesList.add(salle);
                                        }
                                    }
                                    if (souscentreSalleCumuleeScientifiquesMap.containsKey(souscentre)) {
                                        souscentreSalleCumuleeScientifiquesMap.get(souscentre).calculNbsal();
                                        Salle sal = new Salle();
                                        sal.setSouscentre(souscentre);
                                        sal.setSerie(souscentreSalleCumuleeScientifiquesMap.get(souscentre).getSerie());
                                        sal.setEffectif(souscentreSalleCumuleeScientifiquesMap.get(souscentre).getEffectif());
                                        sal.setNbsal(souscentreSalleCumuleeScientifiquesMap.get(souscentre).getNbsal());
                                        sallesList.add(sal);
                                    }
                                    if (souscentreSalleSimplesScientifiquesMap.containsKey(souscentre)) {
                                        for (Salle salle : souscentreSalleSimplesScientifiquesMap.get(souscentre)) {
                                            salle.calculNbsal();
                                            sallesList.add(salle);
                                        }
                                    }
                                    souscentreSallesMap.put(souscentre, sallesList);
                                }
                                List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1SessionEt1phase(examensSelected.get(0).getSigle(), anneeSelected, phase);
                                //remplissage de souscentreMap1
                                for (Statistique s : lesStats) {
                                    if (souscentreMap1.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap1
                                        int nbcand = souscentreMap1.get(s.getSouscentre());//on récupère son nombre de candidats
                                        souscentreMap1.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                    } else {
                                        souscentreMap1.put(s.getSouscentre(), s.getNombre());
                                    }
                                }

                                boolean testsicreer = false;
                                try {
                                    for (Souscentre souscentre : souscentreSallesMap.keySet()) {
                                        int nbVac = nombreAdditifVacations(examensSelected.get(0));
                                        int nbSalles = 0;
                                        for (Salle sal : souscentreSallesMap.get(souscentre)) {
                                            nbSalles += sal.getNbsal();
                                        }
                                        int nbSurveillants = 2 * nbSalles;
                                        int nbSurvDesSurv = calculNombreSurvDesSurv(nbSalles);

                                        //calcul du coût
                                        int nbVacSurv = nbVac * nbSurveillants;
                                        int nbVacSurvDesSurv = nbVac * nbSurvDesSurv;
                                        int cout = (nbVacSurv + nbVacSurvDesSurv) * 1500;

                                        int coutArrondi = (int) Math.ceil((double) cout / (double) 1000) * 1000;
                                        metier.creerCaisse(new Caisse(coutArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, imputationSelected, souscentre, false));
                                        testsicreer = true;
                                    }
                                } catch (ObcbudgetException e) {
                                    JOptionPane.showMessageDialog(this, e.getMessage());
                                }
                                if (testsicreer) {
                                    JOptionPane.showMessageDialog(this, "Etats additifs de surveillance de candidats sans handicap créés avec succès pour ce groupe d'examens !");
                                }

                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
                }
                examensSelected.clear();
                souscentreMap.clear();
                souscentreMap1.clear();
                souscentreMap2.clear();
            }
             */
        }
    }//GEN-LAST:event_jButtonMettreAjourActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        infoSaisies();
        if (!jRadioButtonAdditif.isSelected()) {
            if (jRadioButtonSansHandicap.isSelected()) {
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de surveillance de candidats sans handicap pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                        anneeSelected = Integer.parseInt(anneeString);
                        Rubriquetat rubetat = metier.findRubriquetatByDesignation("SURVEILLANCE CANDIDATS SANS HANDICAP");
                        caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                        if (caisses.isEmpty()) {
                            JOptionPane.showMessageDialog(this, "Erreur, aucun état de surveillance de candidats sans handicap n'existe pour ce groupe d'examens !");
                        } else {
                            boolean testsisupprimer = false;
                            try {
                                for (Caisse caisse : caisses) {
                                    metier.supprimerCaisse(caisse);
                                    testsisupprimer = true;
                                }
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                            if (testsisupprimer) {
                                JOptionPane.showMessageDialog(this, "Etats de surveillance de candidats sans handicap supprimés avec succès pour ce groupe d'examens !");
                            }
                        }
                    }
                }
            }
            if (jRadioButtonAvecHandicap.isSelected()) {
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de surveillance de candidats avec handicap (moteur ou sensoriel) pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                        anneeSelected = Integer.parseInt(anneeString);
                        Rubriquetat rubetat = metier.findRubriquetatByDesignation("SURVEILLANCE CANDIDATS AVEC HANDICAP (MOTEUR OU SENSORIEL)");
                        caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                        if (caisses.isEmpty()) {
                            JOptionPane.showMessageDialog(this, "Erreur, aucun état de surveillance de candidats avec handicap (moteur ou sensoriel) n'existe pour ce groupe d'examens !");
                        } else {
                            boolean testsisupprimer = false;
                            try {
                                //on supprime tous les elementsurvdeficient de ce groupe d'examen
                                elementsurvdeficients = metier.findAllElementsurvdeficientsD1groupedexamenA1Session(anneeSelected, niveauSelected, typeSelected);
                                for (Elementsurvdeficient eltsurdef : elementsurvdeficients) {
                                    metier.supprimerElementsurvdeficient(eltsurdef);
                                }
                                //on supprime les caisses
                                for (Caisse caisse : caisses) {
                                    metier.supprimerCaisse(caisse);
                                    testsisupprimer = true;
                                }
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                            if (testsisupprimer) {
                                JOptionPane.showMessageDialog(this, "Etats de surveillance de candidats avec handicap (moteur ou sensoriel) supprimés avec succès pour ce groupe d'examens !");
                            }
                        }
                    }
                }
            }
            if (!jRadioButtonSansHandicap.isSelected() && !jRadioButtonAvecHandicap.isSelected()) {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Vous devez choisir le type d'état de surveillance à supprimer !");
            }
        }
        if (!jRadioButtonAdditif.isSelected()) {
            /*
            //jRadioButtonSansHandicap est déjà sélectionné en amont
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états additifs de surveillance de candidats sans handicap pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("SURVEILLANCE CANDIDATS SANS HANDICAP");
                    caisses = metier.findAllCaissesAdditivesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état additif de surveillance de candidats sans handicap n'existe pour ce groupe d'examens !");
                    } else {
                        boolean testsisupprimer = false;
                        try {
                            for (Caisse caisse : caisses) {
                                metier.supprimerCaisse(caisse);
                                testsisupprimer = true;
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testsisupprimer) {
                            JOptionPane.showMessageDialog(this, "Etats additif de surveillance de candidats sans handicap supprimés avec succès pour ce groupe d'examens !");
                        }
                    }
                }
            }
             */
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jRadioButtonAvecHandicapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonAvecHandicapActionPerformed
        jRadioButtonAdditif.setEnabled(false);
    }//GEN-LAST:event_jRadioButtonAvecHandicapActionPerformed

    private void jRadioButtonSansHandicapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonSansHandicapActionPerformed
        jRadioButtonAdditif.setEnabled(true);
    }//GEN-LAST:event_jRadioButtonSansHandicapActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatSurveillance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatSurveillance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatSurveillance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatSurveillance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatSurveillance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonCreer;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonMettreAjour;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JButton jButtonVisualiser;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButtonAdditif;
    private javax.swing.JRadioButton jRadioButtonAvecHandicap;
    private javax.swing.JRadioButton jRadioButtonSansHandicap;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Examen> examens = null;
    private List<Examen> examensSelected = new ArrayList<Examen>();
    private String[] examensList = null;
    private String[] sessionsCombo = null;
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private String phase = "ECRIT";
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private List<Secretariat> secretariats = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private List<Caisse> caisses = null;
    private boolean donneesHandCorrectes = false;
    private int nbcandHandicap = 0, nbsurv = 0, vacsurv = 0, nbtranscript = 0, vactranscript = 0;
    private List<Elementsurvdeficient> elementsurvdeficients = null;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        examens = metier.findAllExamens();

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int i = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[i++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "GEN", "IND", "IND PROF", "STT", "STT PROF", "TOUT", "TOUT ESTI", "TOUT STT", "TOUT ESTP"};//TOUT=tous les types; TOUT ESTI=INDUSTRIEL+INDUSTRIEL PROFESSIONNEL; TOUT STT=STT+STT PROFESSIONNEL; TOUTN ESTP=TOUT SAUF ESG
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC", "TOUT"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        buttonGroup1.add(jRadioButtonAvecHandicap);
        buttonGroup1.add(jRadioButtonSansHandicap);

        jRadioButtonAdditif.setEnabled(false);
    }

    private void infoSaisies() {
        anneeString = (String) jComboBoxSession.getSelectedItem();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
    }

    private void videFrame() {
        jComboBoxSession.setSelectedIndex(0);
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        buttonGroup1.clearSelection();
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    private int nombreVacations(Examen examen) {
        int nb = 0;
        if (examen.getSigle().equals("BAC AF-CI-F") || examen.getSigle().equals("BT")) {
            nb = 10;
        }
        if (examen.getSigle().equals("BEP IND")) {
            nb = 7;//Aucune info sur le BEP COM
        }
        if (examen.getSigle().equals("BP IND")) {
            nb = 7;
        }
        if (examen.getSigle().equals("PROB AF-CI-F") || examen.getSigle().equals("PROB BT") || examen.getSigle().equals("BAC ESG") || examen.getSigle().equals("PROB STT") || examen.getSigle().equals("PROB BT ESF & HO/TO")) {
            nb = 10;//nb=9 pour certaines spécialités à spécifier ici 
        }
        if (examen.getSigle().equals("BAC STT") || examen.getSigle().equals("BT ESF & HO/TO")) {
            nb = 12;//BT ESF & HO/TO à vérifier
        }
        if (examen.getSigle().equals("PROB ESG")) {
            nb = 10;//attention 10 en 2021
        }
        if (examen.getSigle().equals("BP COM") || examen.getSigle().equals("BEP COM")) {
            nb = 6;
        }

        return nb;
    }

    private int nombreAdditifVacations(Examen examen) {
        int nb = 0;
        if (examen.getSigle().equals("PROB ESG")) {
            nb = 2;
        }
        return nb;
    }

    private int nombreCandidatsParSalle(String niv, String typ) {
        int ncandParSalle = 0;
        if (niv.equals("PROB") && (typ.equals("GEN") || typ.equals("STT") || typ.equals("STT PROF"))) {
            ncandParSalle = 48;
        }
        if (niv.equals("BACC") && (typ.equals("GEN") || typ.equals("STT") || typ.equals("STT PROF"))) {
            ncandParSalle = 40;
        }
        if ((niv.equals("PROB") || niv.equals("BACC")) && (typ.equals("IND") || typ.equals("IND PROF"))) {
            ncandParSalle = 30;
        }

        return ncandParSalle;
    }

    /*
    private int nombreSallesParSurveillantExterne(Examen examen) {
        int nbSalleParSurv = 0;
        if (examen.getNiveau().equals("PROB") && (examen.getType().equals("GEN") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
            nbSalleParSurv = 6;
        }
        if (examen.getNiveau().equals("BACC") && (examen.getType().equals("GEN") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
            nbSalleParSurv = 5;
        }
        return nbSalleParSurv;
    }
     */
    private int calculNombreSurvDesSurv(int nbsal) {
        int nbSurvDesSurv = 0;
        if (nbsal >= 4 && nbsal <= 6) {
            nbSurvDesSurv = 1;
        }
        if (nbsal >= 7 && nbsal <= 13) {
            nbSurvDesSurv = 2;
        }
        if (nbsal >= 14 && nbsal <= 20) {
            nbSurvDesSurv = 3;
        }
        if (nbsal >= 21 && nbsal <= 27) {
            nbSurvDesSurv = 4;
        }
        if (nbsal >= 28 && nbsal <= 34) {
            nbSurvDesSurv = 5;
        }
        if (nbsal >= 35 && nbsal <= 41) {
            nbSurvDesSurv = 6;
        }
        if (nbsal >= 42 && nbsal <= 48) {
            nbSurvDesSurv = 7;
        }
        if (nbsal >= 49 && nbsal <= 54) {
            nbSurvDesSurv = 8;
        }
        if (nbsal >= 55) {
            nbSurvDesSurv = 9;
        }
        return nbSurvDesSurv;
    }

    private void surveillanceHandicapesDialogbox(Souscentre souscentre) {
        //souscentre doit avoir des effectifs à la session en cours et déclaré abriter les handicapés
        nbcandHandicap = 0;
        nbsurv = 0;
        vacsurv = 0;
        nbtranscript = 0;
        vactranscript = 0;
        donneesHandCorrectes = false;
        JTextField nbhandField = new JTextField(3);
        nbhandField.setFont(new java.awt.Font("Arial", 1, 14));
        JTextField nbsurvField = new JTextField(3);
        nbsurvField.setFont(new java.awt.Font("Arial", 1, 14));
        JTextField nbvacsurvField = new JTextField(5);
        nbvacsurvField.setFont(new java.awt.Font("Arial", 1, 14));
        JTextField nbtranscriptField = new JTextField(3);
        nbtranscriptField.setFont(new java.awt.Font("Arial", 1, 14));
        JTextField nbvactranscriptField = new JTextField(5);
        nbvactranscriptField.setFont(new java.awt.Font("Arial", 1, 14));

        JPanel myPanel = new JPanel();
        JLabel jLabelEffectif = new javax.swing.JLabel("Effectif:");
        jLabelEffectif.setFont(new java.awt.Font("Arial", 1, 14));
        myPanel.add(jLabelEffectif);
        myPanel.add(nbhandField);
        myPanel.add(Box.createHorizontalStrut(15)); // a spacer
        JLabel jLabelNbsurv = new javax.swing.JLabel("Nb surv:");
        jLabelNbsurv.setFont(new java.awt.Font("Arial", 1, 14));
        myPanel.add(jLabelNbsurv);
        myPanel.add(nbsurvField);
        myPanel.add(Box.createHorizontalStrut(15)); // a spacer
        JLabel jLabelVacsurv = new javax.swing.JLabel("Vac. surv.+indem.:");
        jLabelVacsurv.setFont(new java.awt.Font("Arial", 1, 14));
        myPanel.add(jLabelVacsurv);
        myPanel.add(nbvacsurvField);
        myPanel.add(Box.createHorizontalStrut(15)); // a spacer
        JLabel jLabelNbtranscript = new javax.swing.JLabel("Nb transcrip.:");
        jLabelNbtranscript.setFont(new java.awt.Font("Arial", 1, 14));
        myPanel.add(jLabelNbtranscript);
        myPanel.add(nbtranscriptField);
        myPanel.add(Box.createHorizontalStrut(15)); // a spacer
        JLabel jLabelVacindemtranscript = new javax.swing.JLabel("Vac.+indem. transcrip.:");
        jLabelVacindemtranscript.setFont(new java.awt.Font("Arial", 1, 14));
        myPanel.add(jLabelVacindemtranscript);
        myPanel.add(nbvactranscriptField);

        int result = JOptionPane.showConfirmDialog(null, myPanel, "Surveillance des candidats avec handicap du " + souscentre.getNomsouscent(), JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            try {
                nbcandHandicap = Integer.parseInt(nbhandField.getText());
                nbsurv = Integer.parseInt(nbsurvField.getText());
                vacsurv = Integer.parseInt(nbvacsurvField.getText());
                nbtranscript = Integer.parseInt(nbtranscriptField.getText());
                vactranscript = Integer.parseInt(nbvactranscriptField.getText());
                donneesHandCorrectes = true;
            } catch (NumberFormatException e) {
                donneesHandCorrectes = false;
            }
        }
    }
}
