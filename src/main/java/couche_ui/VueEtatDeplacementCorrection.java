package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Activite;
import couche_jpa.Arrondissement;
import couche_jpa.Caisse;
import couche_jpa.Centrebilletage;
import couche_jpa.Departement;
import couche_jpa.Deplacecorrect;
import couche_jpa.Examen;
import couche_jpa.Fonction;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Intervenant;
import couche_jpa.Matiere;
import couche_jpa.Option;
import couche_jpa.Personnel;
import couche_jpa.Qualite;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueEtatDeplacementCorrection extends javax.swing.JFrame {

    public VueEtatDeplacementCorrection() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButtonFermer = new javax.swing.JButton();
        jPanelExaminateurs = new javax.swing.JPanel();
        jComboBoxDepartementListe = new javax.swing.JComboBox<>();
        jLabelDepartementListe = new javax.swing.JLabel();
        jComboBoxArrondissementListe = new javax.swing.JComboBox<>();
        jComboBoxNomsEtPrenoms = new javax.swing.JComboBox<>();
        jLabelArrondissementListe = new javax.swing.JLabel();
        jComboBoxRegionListe = new javax.swing.JComboBox<>();
        jLabelRegionListe = new javax.swing.JLabel();
        jButtonSupprimerPersonnel = new javax.swing.JButton();
        jButtonAnnulerPersonnel = new javax.swing.JButton();
        jButtonCreerPersonnel = new javax.swing.JButton();
        jButtonListerPersonnels = new javax.swing.JButton();
        jLabelSpecialite = new javax.swing.JLabel();
        jComboBoxOption = new javax.swing.JComboBox<>();
        jLabelNbcopies = new javax.swing.JLabel();
        jTextFieldNbcopies = new javax.swing.JTextField();
        jLabelJurys = new javax.swing.JLabel();
        jTextFieldJurys = new javax.swing.JTextField();
        jLabelMatiere = new javax.swing.JLabel();
        jComboBoxMatiere = new javax.swing.JComboBox<>();
        jLabelTypeDeplacement = new javax.swing.JLabel();
        jComboBoxTypeDeplacement = new javax.swing.JComboBox<>();
        jCheckBoxHarmocorrect = new javax.swing.JCheckBox();
        jCheckBoxDeladmissibilite = new javax.swing.JCheckBox();
        jCheckBoxDeladmission = new javax.swing.JCheckBox();
        jCheckBoxHarmonisation = new javax.swing.JCheckBox();
        jLabelResponsable = new javax.swing.JLabel();
        jCheckBoxCorrection = new javax.swing.JCheckBox();
        jButtonImporter = new javax.swing.JButton();
        jPanelChoixExamen = new javax.swing.JPanel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixExamen = new javax.swing.JButton();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelExamen = new javax.swing.JLabel();
        jPanelChoixSouscentre = new javax.swing.JPanel();
        jComboBoxDepartementSouscentre = new javax.swing.JComboBox<>();
        jLabelDepartementSouscentre = new javax.swing.JLabel();
        jLabelSouscentre = new javax.swing.JLabel();
        jComboBoxArrondissementSouscentre = new javax.swing.JComboBox<>();
        jComboBoxSouscentre = new javax.swing.JComboBox<>();
        jLabelArrondissementSouscentre = new javax.swing.JLabel();
        jComboBoxRegionSouscentre = new javax.swing.JComboBox<>();
        jLabelRegionSouscentre = new javax.swing.JLabel();
        jButtonAnnulerChoixSouscentre = new javax.swing.JButton();
        jPanelGestionEtat = new javax.swing.JPanel();
        jButtonCreerEtats = new javax.swing.JButton();
        jButtonMettreAjourEtats = new javax.swing.JButton();
        jButtonVisualiserEtats = new javax.swing.JButton();
        jButtonSupprimerEtats = new javax.swing.JButton();
        jCheckBoxProfessionnel = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setText("ETAT DEPLACEMENT POUR CORRECTION DES COPIES, HARMONISATION ET DELIBERATIONS");

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jPanelExaminateurs.setBackground(new java.awt.Color(255, 204, 0));
        jPanelExaminateurs.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer la liste des correcteurs déplacés", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jComboBoxDepartementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartementListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementListeActionPerformed(evt);
            }
        });

        jLabelDepartementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartementListe.setText("Département :");

        jComboBoxArrondissementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissementListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementListeActionPerformed(evt);
            }
        });

        jComboBoxNomsEtPrenoms.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxNomsEtPrenoms.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxNomsEtPrenoms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNomsEtPrenomsActionPerformed(evt);
            }
        });

        jLabelArrondissementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissementListe.setText("Arrondissement :");

        jComboBoxRegionListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegionListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionListeActionPerformed(evt);
            }
        });

        jLabelRegionListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegionListe.setText("Région :");

        jButtonSupprimerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerPersonnel.setText("Supprimer");
        jButtonSupprimerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerPersonnelActionPerformed(evt);
            }
        });

        jButtonAnnulerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerPersonnel.setText("Annuler");
        jButtonAnnulerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerPersonnelActionPerformed(evt);
            }
        });

        jButtonCreerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerPersonnel.setText("Créer");
        jButtonCreerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerPersonnelActionPerformed(evt);
            }
        });

        jButtonListerPersonnels.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonListerPersonnels.setText("Lister");
        jButtonListerPersonnels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerPersonnelsActionPerformed(evt);
            }
        });

        jLabelSpecialite.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSpecialite.setText("Série/Spécialité :");

        jComboBoxOption.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelNbcopies.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbcopies.setText("Nbre copies :");

        jTextFieldNbcopies.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelJurys.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelJurys.setText("Jurys :");

        jTextFieldJurys.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelMatiere.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelMatiere.setText("Matière :");

        jComboBoxMatiere.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelTypeDeplacement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelTypeDeplacement.setText("Type déplacement :");

        jComboBoxTypeDeplacement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jCheckBoxHarmocorrect.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jCheckBoxHarmocorrect.setText("Harmonisation + correction");

        jCheckBoxDeladmissibilite.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jCheckBoxDeladmissibilite.setText("Délibération d'admissibilité");

        jCheckBoxDeladmission.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jCheckBoxDeladmission.setText("Délibération d'admission");

        jCheckBoxHarmonisation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jCheckBoxHarmonisation.setText("Harmonisation");

        jLabelResponsable.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelResponsable.setText("Noms et prénoms :");

        jCheckBoxCorrection.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jCheckBoxCorrection.setText("Correction");

        jButtonImporter.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonImporter.setText("Importer");
        jButtonImporter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImporterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelExaminateursLayout = new javax.swing.GroupLayout(jPanelExaminateurs);
        jPanelExaminateurs.setLayout(jPanelExaminateursLayout);
        jPanelExaminateursLayout.setHorizontalGroup(
            jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                        .addGap(556, 556, 556)
                        .addComponent(jComboBoxMatiere, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelResponsable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxNomsEtPrenoms, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addComponent(jButtonCreerPersonnel)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonListerPersonnels)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSupprimerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonAnnulerPersonnel))
                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                                .addComponent(jLabelRegionListe)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxRegionListe, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(96, 96, 96)
                                .addComponent(jLabelMatiere))
                            .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                                        .addComponent(jLabelDepartementListe)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBoxDepartementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                                        .addComponent(jLabelArrondissementListe)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBoxArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(24, 24, 24)
                                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelTypeDeplacement)
                                    .addComponent(jLabelSpecialite))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                                        .addGap(197, 197, 197)
                                        .addComponent(jLabelJurys))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelExaminateursLayout.createSequentialGroup()
                                        .addComponent(jComboBoxOption, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabelNbcopies)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldJurys, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                                        .addComponent(jTextFieldNbcopies, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                                        .addComponent(jButtonImporter))))
                            .addComponent(jComboBoxTypeDeplacement, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxCorrection)
                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxDeladmissibilite)
                            .addComponent(jCheckBoxDeladmission)
                            .addComponent(jCheckBoxHarmocorrect)))
                    .addComponent(jCheckBoxHarmonisation))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        jPanelExaminateursLayout.setVerticalGroup(
            jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelRegionListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxRegionListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelDepartementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxDepartementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBoxArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelMatiere, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxMatiere, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBoxTypeDeplacement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelTypeDeplacement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelJurys, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldJurys, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabelSpecialite, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jComboBoxOption, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabelNbcopies, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextFieldNbcopies, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jButtonImporter, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(12, 12, 12)
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelResponsable, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxNomsEtPrenoms, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonCreerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonListerPersonnels, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonSupprimerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonAnnulerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                        .addComponent(jCheckBoxCorrection)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBoxHarmonisation)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBoxHarmocorrect)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBoxDeladmission)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBoxDeladmissibilite)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanelChoixExamen.setBackground(new java.awt.Color(102, 255, 153));
        jPanelChoixExamen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un groupe d'examens et une session", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixExamen.setText("Annuler");
        jButtonAnnulerChoixExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixExamenActionPerformed(evt);
            }
        });

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        javax.swing.GroupLayout jPanelChoixExamenLayout = new javax.swing.GroupLayout(jPanelChoixExamen);
        jPanelChoixExamen.setLayout(jPanelChoixExamenLayout);
        jPanelChoixExamenLayout.setHorizontalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(0, 40, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabelSession)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixExamenLayout.setVerticalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17))
        );

        jPanelChoixSouscentre.setBackground(new java.awt.Color(204, 255, 0));
        jPanelChoixSouscentre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un sous-centre", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jComboBoxDepartementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartementSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementSouscentreActionPerformed(evt);
            }
        });

        jLabelDepartementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartementSouscentre.setText("Département :");

        jLabelSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSouscentre.setText("Sous-centre :");

        jComboBoxArrondissementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissementSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementSouscentreActionPerformed(evt);
            }
        });

        jComboBoxSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSouscentre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSouscentreActionPerformed(evt);
            }
        });

        jLabelArrondissementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissementSouscentre.setText("Arrondissement :");

        jComboBoxRegionSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegionSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionSouscentreActionPerformed(evt);
            }
        });

        jLabelRegionSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegionSouscentre.setText("Région :");

        jButtonAnnulerChoixSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixSouscentre.setText("Annuler");
        jButtonAnnulerChoixSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixSouscentreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixSouscentreLayout = new javax.swing.GroupLayout(jPanelChoixSouscentre);
        jPanelChoixSouscentre.setLayout(jPanelChoixSouscentreLayout);
        jPanelChoixSouscentreLayout.setHorizontalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelDepartementSouscentre)
                    .addComponent(jLabelArrondissementSouscentre)
                    .addComponent(jLabelSouscentre)
                    .addComponent(jLabelRegionSouscentre))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxDepartementSouscentre, 0, 458, Short.MAX_VALUE)
                            .addComponent(jComboBoxRegionSouscentre, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(51, 51, 51)
                        .addComponent(jButtonAnnulerChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jComboBoxArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixSouscentreLayout.setVerticalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxRegionSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRegionSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxDepartementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonAnnulerChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelDepartementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelGestionEtat.setBackground(new java.awt.Color(0, 255, 255));
        jPanelGestionEtat.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer l'état", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 102, 255))); // NOI18N

        jButtonCreerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEtats.setText("Créer");
        jButtonCreerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEtatsActionPerformed(evt);
            }
        });

        jButtonMettreAjourEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjourEtats.setText("Mettre à jour");
        jButtonMettreAjourEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourEtatsActionPerformed(evt);
            }
        });

        jButtonVisualiserEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserEtats.setText("Visualiser");
        jButtonVisualiserEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserEtatsActionPerformed(evt);
            }
        });

        jButtonSupprimerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEtats.setText("Supprimer");
        jButtonSupprimerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEtatsActionPerformed(evt);
            }
        });

        jCheckBoxProfessionnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jCheckBoxProfessionnel.setText("Professionnel");

        javax.swing.GroupLayout jPanelGestionEtatLayout = new javax.swing.GroupLayout(jPanelGestionEtat);
        jPanelGestionEtat.setLayout(jPanelGestionEtatLayout);
        jPanelGestionEtatLayout.setHorizontalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jCheckBoxProfessionnel, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jButtonCreerEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonMettreAjourEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiserEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerEtats)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanelGestionEtatLayout.setVerticalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jCheckBoxProfessionnel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonMettreAjourEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCreerEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonSupprimerEtats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVisualiserEtats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(239, 239, 239)
                                        .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(53, 53, 53)
                                        .addComponent(jButtonFermer))
                                    .addComponent(jPanelExaminateurs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelExaminateurs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVisualiserEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserEtatsActionPerformed
        infoSaisies();
        if (!jCheckBoxProfessionnel.isSelected()) {
            List<Souscentre> souscentreAvecCorrecteursList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des correcteurs
            Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
            ArrayList<String> typesBruts = new ArrayList<>();
            ArrayList<String> typesAconsiderer = new ArrayList<>();
            ArrayList<String> niveauxAconsiderer = new ArrayList<>();
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("DEPLACEMENT POUR CORRECTION, HARMONISATION ET DELIBERATION");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                boolean continuer = false;
                for (Caisse c : caisses) {
                    if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                        continuer = true;
                        break;
                    }
                }
                if (!continuer) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états de déplacement pour correction, harmonisation et délibération n'ont pas encore été créés pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    //recherche des types des examens à utiliser
                    for (Examen examen : examensSelected) {
                        System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                        if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                            typesBruts.add("ESG");
                        }
                        if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                            typesBruts.add("ESTP");
                        }
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 2) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    //recherche des niveaux des examens à utiliser
                    if (!niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add(niveauSelected);
                        niveauxAconsiderer.add("TOUT");
                    }
                    if (niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add("PROB");
                        niveauxAconsiderer.add("BACC");
                        niveauxAconsiderer.add("TOUT");
                    }
                    //recherche des centres de billetage
                    for (String niveau : niveauxAconsiderer) {
                        for (String type : typesAconsiderer) {
                            List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                            for (Centrebilletage centrebilletage : desCentrebilletages) {
                                ArrayList<Souscentre> souscentresList = new ArrayList<>();
                                if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                    List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                    for (Secteurcouv sect : secteurs) {
                                        if (!souscentresList.contains(sect.getSouscentre())) {
                                            souscentresList.add(sect.getSouscentre());
                                        }
                                    }
                                    centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                                }
                            }
                        }
                    }
                    //sous-centres ayant des correcteurs
                    intervenants = metier.findAllIntervenantsNonProfessionnelsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CORRECTEUR");
                    deplacecorrects = metier.findAllDeplacecorrectsNonProfessionnelsD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!intervenants.isEmpty()) {
                        for (Intervenant intervenant : intervenants) {
                            if (!souscentreAvecCorrecteursList.contains(intervenant.getSouscentre())) {
                                souscentreAvecCorrecteursList.add(intervenant.getSouscentre());
                            }
                        }
                        if (typeSelected.equals("GEN")) {
                            try {
                                List<Map<String, Object>> datasource = new ArrayList<>();
                                for (Region region : regions) {
                                    for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                        if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                            int totalMontant = 0;
                                            ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                            for (int i = 0; i < souscentresList.size(); i++) {
                                                Souscentre souscentre = souscentresList.get(i);
                                                if (souscentreAvecCorrecteursList.contains(souscentre)) {
                                                    int num = 1;
                                                    for (Intervenant correcteur : intervenants) {
                                                        if (correcteur.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                                            Deplacecorrect sonDeplacecorrect = new Deplacecorrect();
                                                            for (Deplacecorrect deplacecorrect : deplacecorrects) {
                                                                if (deplacecorrect.getIntervenant().getPersonnel().getNompers().equals(correcteur.getPersonnel().getNompers()) && deplacecorrect.getIntervenant().getPersonnel().getPrenom().equals(correcteur.getPersonnel().getPrenom())) {
                                                                    sonDeplacecorrect = deplacecorrect;
                                                                    break;
                                                                }
                                                            }
                                                            determinerCoutCorrecteur(correcteur, sonDeplacecorrect);

                                                            Map<String, Object> row = new HashMap<>();
                                                            row.put("examen", groupedexamensEnstring);
                                                            row.put("session", anneeSelected);
                                                            row.put("region", region.getNomreg());
                                                            row.put("reference", "");
                                                            row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                            row.put("num", num++);
                                                            row.put("souscentre", souscentre.getNomsouscent());
                                                            row.put("personnel", correcteur.getPersonnel().getNompers() + " " + correcteur.getPersonnel().getPrenom());
                                                            row.put("provenance", correcteur.getPersonnel().getStructure());
                                                            row.put("serie", sonDeplacecorrect.getOption().getSigle());
                                                            row.put("jury", sonDeplacecorrect.getJurys());
                                                            row.put("matiere", sonDeplacecorrect.getMatiere().getNom().toLowerCase());
                                                            row.put("correction", coutcorrect);
                                                            row.put("harmonisation", coutharmo);
                                                            row.put("deliberation", coutdeladmission);
                                                            row.put("baspage", "OBC/AR/"+centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                            int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                            row.put("total", montantArrondi);
                                                            totalMontant += montantArrondi;//jasperreport prendra la dernière valeur de cout
                                                            row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                            datasource.add(row);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                                JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatDeplacementCorrecteurESGReport.jrxml");
                                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                                JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                                jasperViewer.setVisible(true);
                            } catch (JRException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                        }
                        if (typeSelected.equals("IND") || typeSelected.equals("STT")) {
                            try {
                                List<Map<String, Object>> datasource = new ArrayList<>();
                                for (Region region : regions) {
                                    for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                        if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                            int totalMontant = 0;
                                            ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                            for (int i = 0; i < souscentresList.size(); i++) {
                                                Souscentre souscentre = souscentresList.get(i);
                                                if (souscentreAvecCorrecteursList.contains(souscentre)) {
                                                    int num = 1;
                                                    for (Intervenant correcteur : intervenants) {
                                                        if (correcteur.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                                            Deplacecorrect sonDeplacecorrect = new Deplacecorrect();
                                                            for (Deplacecorrect deplacecorrect : deplacecorrects) {
                                                                if (deplacecorrect.getIntervenant().getPersonnel().getNompers().equals(correcteur.getPersonnel().getNompers()) && deplacecorrect.getIntervenant().getPersonnel().getPrenom().equals(correcteur.getPersonnel().getPrenom())) {
                                                                    sonDeplacecorrect = deplacecorrect;
                                                                    break;
                                                                }
                                                            }
                                                            determinerCoutCorrecteur(correcteur, sonDeplacecorrect);

                                                            Map<String, Object> row = new HashMap<>();
                                                            row.put("examen", groupedexamensEnstring);
                                                            row.put("session", anneeSelected);
                                                            row.put("region", region.getNomreg());
                                                            row.put("reference", "");
                                                            row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                            row.put("num", num++);
                                                            row.put("souscentre", souscentre.getNomsouscent());
                                                            row.put("personnel", correcteur.getPersonnel().getNompers() + " " + correcteur.getPersonnel().getPrenom());
                                                            row.put("provenance", correcteur.getPersonnel().getStructure());
                                                            row.put("nbcopies", sonDeplacecorrect.getNbcopies());
                                                            row.put("specialite", sonDeplacecorrect.getOption().getSigle());
                                                            row.put("jury", sonDeplacecorrect.getJurys());
                                                            row.put("matiere", sonDeplacecorrect.getMatiere().getNom().toLowerCase());
                                                            row.put("harmocorrect", coutharmocorrect);
                                                            row.put("deliberation", coutdeladmissibilite + coutdeladmission);
                                                            row.put("baspage", "OBC/AR/"+centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                            int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                            row.put("total", montantArrondi);
                                                            totalMontant += montantArrondi;//jasperreport prendra la dernière valeur de cout
                                                            row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                            datasource.add(row);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                                JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatDeplacementCorrecteurESTPReport.jrxml");
                                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                                JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                                jasperViewer.setVisible(true);
                            } catch (JRException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun Correcteur trouvé dans la base de données !");
                    }

                    souscentreAvecCorrecteursList.clear();
                    examensSelected.clear();
                }//fin else continuer
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
            }
        }
        if (jCheckBoxProfessionnel.isSelected()) {
            List<Souscentre> souscentreAvecCorrecteursList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des correcteurs professionnels
            Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
            ArrayList<String> typesBruts = new ArrayList<>();
            ArrayList<String> typesAconsiderer = new ArrayList<>();
            ArrayList<String> niveauxAconsiderer = new ArrayList<>();
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES CORRECTEURS PROFESSIONNELS");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                boolean continuer = false;
                for (Caisse c : caisses) {
                    if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                        continuer = true;
                        break;
                    }
                }
                if (!continuer) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états de prise en charge des correcteurs professionnels n'ont pas encore été créés pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    //recherche des types des examens à utiliser
                    for (Examen examen : examensSelected) {
                        System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                        if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                            typesBruts.add("ESG");
                        }
                        if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                            typesBruts.add("ESTP");
                        }
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 2) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    //recherche des niveaux des examens à utiliser
                    if (!niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add(niveauSelected);
                        niveauxAconsiderer.add("TOUT");
                    }
                    if (niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add("PROB");
                        niveauxAconsiderer.add("BACC");
                        niveauxAconsiderer.add("TOUT");
                    }
                    //recherche des centres de billetage
                    for (String niveau : niveauxAconsiderer) {
                        for (String type : typesAconsiderer) {
                            List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                            for (Centrebilletage centrebilletage : desCentrebilletages) {
                                ArrayList<Souscentre> souscentresList = new ArrayList<>();
                                if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                    List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                    for (Secteurcouv sect : secteurs) {
                                        if (!souscentresList.contains(sect.getSouscentre())) {
                                            souscentresList.add(sect.getSouscentre());
                                        }
                                    }
                                    centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                                }
                            }
                        }
                    }
                    //sous-centres ayant des correcteurs professionnels
                    intervenants = metier.findAllIntervenantsProfessionnelsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CORRECTEUR");
                    deplacecorrects = metier.findAllDeplacecorrectsProfessionnelsD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!intervenants.isEmpty()) {
                        for (Intervenant intervenant : intervenants) {
                            if (!souscentreAvecCorrecteursList.contains(intervenant.getSouscentre())) {
                                souscentreAvecCorrecteursList.add(intervenant.getSouscentre());
                            }
                        }
                        if (typeSelected.equals("IND") || typeSelected.equals("IND PROF") || typeSelected.equals("STT") || typeSelected.equals("STT PROF") || typeSelected.equals("TOUT ESTI") || typeSelected.equals("TOUT STT")) {
                            try {
                                List<Map<String, Object>> datasource = new ArrayList<>();
                                for (Region region : regions) {
                                    for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                        if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                            int totalMontant = 0;
                                            ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                            for (int i = 0; i < souscentresList.size(); i++) {
                                                Souscentre souscentre = souscentresList.get(i);
                                                if (souscentreAvecCorrecteursList.contains(souscentre)) {
                                                    int num = 1;
                                                    for (Intervenant correcteur : intervenants) {
                                                        if (correcteur.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                                            Deplacecorrect sonDeplacecorrect = new Deplacecorrect();
                                                            for (Deplacecorrect deplacecorrect : deplacecorrects) {
                                                                if (deplacecorrect.getIntervenant().getPersonnel().getNompers().equals(correcteur.getPersonnel().getNompers()) && deplacecorrect.getIntervenant().getPersonnel().getPrenom().equals(correcteur.getPersonnel().getPrenom())) {
                                                                    sonDeplacecorrect = deplacecorrect;
                                                                    break;
                                                                }
                                                            }
                                                            determinerCoutCorrecteurProfessionnel(sonDeplacecorrect);

                                                            Map<String, Object> row = new HashMap<>();
                                                            row.put("examen", groupedexamensEnstring);
                                                            row.put("session", anneeSelected);                                            
                                                            row.put("region", region.getNomreg());
                                                            row.put("reference", "");
                                                            row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                            row.put("num", num++);
                                                            row.put("souscentre", souscentre.getNomsouscent());
                                                            row.put("personnel", correcteur.getPersonnel().getNompers() + " " + correcteur.getPersonnel().getPrenom());
                                                            row.put("provenance", correcteur.getPersonnel().getStructure());
                                                            row.put("effectif", sonDeplacecorrect.getNbcopies());
                                                            row.put("specialite", sonDeplacecorrect.getOption().getSigle());
                                                            row.put("jury", sonDeplacecorrect.getJurys());
                                                            row.put("matiere", sonDeplacecorrect.getMatiere().getNom().toLowerCase());
                                                            row.put("coutharmocorrect", coutharmocorrect);
                                                            row.put("coutdelib", coutdeladmissibilite + coutdeladmission);
                                                            row.put("primexpert", primexpert);
                                                            row.put("primeconfid", primeconfid);
                                                            row.put("baspage", "OBC/AR/"+centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                            int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                            row.put("total", montantArrondi);
                                                            totalMontant += montantArrondi;//jasperreport prendra la dernière valeur de cout
                                                            row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                            datasource.add(row);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                                JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatDeplacementCorrecteurProfessionnelReport.jrxml");
                                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                                JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                                jasperViewer.setVisible(true);
                            } catch (JRException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun Correcteur trouvé professionnel dans la base de données !");
                    }

                    souscentreAvecCorrecteursList.clear();
                    examensSelected.clear();
                }//fin else continuer
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
            }
        }
    }//GEN-LAST:event_jButtonVisualiserEtatsActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonCreerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEtatsActionPerformed
        infoSaisies();
        if (!jCheckBoxProfessionnel.isSelected()) {
            List<Souscentre> souscentreAvecCorrecteursList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des correcteurs
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("DEPLACEMENT POUR CORRECTION, HARMONISATION ET DELIBERATION");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (!caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états de déplacement pour correction, harmonisation et délibération existent déjà pour ce groupe d'examens !");
                } else {
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    //sous-centres ayant des correcteurs
                    intervenants = metier.findAllIntervenantsNonProfessionnelsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CORRECTEUR");
                    deplacecorrects = metier.findAllDeplacecorrectsNonProfessionnelsD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!intervenants.isEmpty()) {
                        for (Intervenant intervenant : intervenants) {
                            if (!souscentreAvecCorrecteursList.contains(intervenant.getSouscentre())) {
                                souscentreAvecCorrecteursList.add(intervenant.getSouscentre());
                            }
                        }
                        boolean testSicreer = false;
                        try {
                            for (Souscentre souscentre : souscentreAvecCorrecteursList) {
                                int net = 0;
                                for (Intervenant correcteur : intervenants) {
                                    if (correcteur.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                        Deplacecorrect sonDeplacecorrect = new Deplacecorrect();
                                        for (Deplacecorrect deplacecorrect : deplacecorrects) {
                                            if (deplacecorrect.getIntervenant().getPersonnel().getNompers().equals(correcteur.getPersonnel().getNompers()) && deplacecorrect.getIntervenant().getPersonnel().getPrenom().equals(correcteur.getPersonnel().getPrenom())) {
                                                sonDeplacecorrect = deplacecorrect;
                                                break;
                                            }
                                        }
                                        determinerCoutCorrecteur(correcteur, sonDeplacecorrect);
                                        int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                        net += montantArrondi;
                                    }
                                }
                                metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                testSicreer = true;
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testSicreer) {
                            JOptionPane.showMessageDialog(this, "Etats de déplacement pour correction, harmonisation et délibération créés avec succès pour ce groupe d'examens !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun Correcteur trouvé dans la base de données !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
            }

            souscentreAvecCorrecteursList.clear();
        }
        if (jCheckBoxProfessionnel.isSelected()) {
            List<Souscentre> souscentreAvecCorrecteursList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des correcteurs professionnels
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES CORRECTEURS PROFESSIONNELS");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (!caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états de prise en charge des correcteurs professionnels existent déjà pour ce groupe d'examens !");
                } else {
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    //sous-centres ayant des correcteurs professionnels
                    intervenants = metier.findAllIntervenantsProfessionnelsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CORRECTEUR");
                    deplacecorrects = metier.findAllDeplacecorrectsProfessionnelsD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!intervenants.isEmpty()) {
                        for (Intervenant intervenant : intervenants) {
                            if (!souscentreAvecCorrecteursList.contains(intervenant.getSouscentre())) {
                                souscentreAvecCorrecteursList.add(intervenant.getSouscentre());
                            }
                        }
                        boolean testSicreer = false;
                        try {
                            for (Souscentre souscentre : souscentreAvecCorrecteursList) {
                                int net = 0;
                                for (Intervenant correcteur : intervenants) {
                                    if (correcteur.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                        Deplacecorrect sonDeplacecorrect = new Deplacecorrect();
                                        for (Deplacecorrect deplacecorrect : deplacecorrects) {
                                            if (deplacecorrect.getIntervenant().getPersonnel().getNompers().equals(correcteur.getPersonnel().getNompers()) && deplacecorrect.getIntervenant().getPersonnel().getPrenom().equals(correcteur.getPersonnel().getPrenom())) {
                                                sonDeplacecorrect = deplacecorrect;
                                                break;
                                            }
                                        }
                                        determinerCoutCorrecteurProfessionnel(sonDeplacecorrect);
                                        int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                        net += montantArrondi;
                                    }
                                }
                                metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                testSicreer = true;
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testSicreer) {
                            JOptionPane.showMessageDialog(this, "Etats de prise en charge des correcteurs professionnels créés avec succès pour ce groupe d'examens !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun Correcteur professionnel trouvé dans la base de données !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
            }

            souscentreAvecCorrecteursList.clear();
        }
    }//GEN-LAST:event_jButtonCreerEtatsActionPerformed

    private void jButtonMettreAjourEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourEtatsActionPerformed
        infoSaisies();
        if (!jCheckBoxProfessionnel.isSelected()) {
            List<Souscentre> souscentreAvecCorrecteursList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des correcteurs
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de déplacement pour correction, harmonisation et délibération pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("DEPLACEMENT POUR CORRECTION, HARMONISATION ET DELIBERATION");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    //intervsecs = metier.findAllIntervsecsD1GroupedexamensD1SessionD1ActiviteD1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION");
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état de déplacement pour correction, harmonisation et délibération n'existe pour ce groupe d'examens !");
                    } else {
                        //on conserve quelques info de ces anciennes caisses
                        Groupe groupe = caisses.get(0).getGroupe();
                        sessionSelected = caisses.get(0).getSession();
                        //on supprime toutes les anciennes caisses du groupe d'examens ainsi que les intervsec
                        for (Caisse c : caisses) {
                            metier.supprimerCaisse(c);
                        }
                        //on va les recréer

                        //sous-centres ayant des correcteurs
                        intervenants = metier.findAllIntervenantsNonProfessionnelsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CORRECTEUR");
                        deplacecorrects = metier.findAllDeplacecorrectsNonProfessionnelsD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                        if (!intervenants.isEmpty()) {
                            for (Intervenant intervenant : intervenants) {
                                if (!souscentreAvecCorrecteursList.contains(intervenant.getSouscentre())) {
                                    souscentreAvecCorrecteursList.add(intervenant.getSouscentre());
                                }
                            }
                            boolean testSicreer = false;
                            try {
                                for (Souscentre souscentre : souscentreAvecCorrecteursList) {
                                    int net = 0;
                                    for (Intervenant correcteur : intervenants) {
                                        if (correcteur.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                            Deplacecorrect sonDeplacecorrect = new Deplacecorrect();
                                            for (Deplacecorrect deplacecorrect : deplacecorrects) {
                                                if (deplacecorrect.getIntervenant().getPersonnel().getNompers().equals(correcteur.getPersonnel().getNompers()) && deplacecorrect.getIntervenant().getPersonnel().getPrenom().equals(correcteur.getPersonnel().getPrenom())) {
                                                    sonDeplacecorrect = deplacecorrect;
                                                    break;
                                                }
                                            }
                                            determinerCoutCorrecteur(correcteur, sonDeplacecorrect);
                                            int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                            net += montantArrondi;
                                        }
                                    }
                                    metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                    testSicreer = true;
                                }
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                            if (testSicreer) {
                                JOptionPane.showMessageDialog(this, "Etats de déplacement pour correction, harmonisation et délibération mis à jour avec succès pour ce groupe d'examens !");
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Aucun Correcteur trouvé dans la base de données !");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
                }
                souscentreAvecCorrecteursList.clear();
            }//fin if result
        }
        if (jCheckBoxProfessionnel.isSelected()) {
            List<Souscentre> souscentreAvecCorrecteursList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des correcteurs professionnels
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de prise en charge des correcteurs professionnels pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES CORRECTEURS PROFESSIONNELS");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état de prise en charge des correcteurs professionnels n'existe pour ce groupe d'examens !");
                    } else {
                        //on conserve quelques info de ces anciennes caisses
                        Groupe groupe = caisses.get(0).getGroupe();
                        sessionSelected = caisses.get(0).getSession();
                        //on supprime toutes les anciennes caisses du groupe d'examens ainsi que les intervsec
                        for (Caisse c : caisses) {
                            metier.supprimerCaisse(c);
                        }
                        //on va les recréer

                        //sous-centres ayant des correcteurs professionnels
                        intervenants = metier.findAllIntervenantsProfessionnelsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CORRECTEUR");
                        deplacecorrects = metier.findAllDeplacecorrectsProfessionnelsD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                        if (!intervenants.isEmpty()) {
                            for (Intervenant intervenant : intervenants) {
                                if (!souscentreAvecCorrecteursList.contains(intervenant.getSouscentre())) {
                                    souscentreAvecCorrecteursList.add(intervenant.getSouscentre());
                                }
                            }
                            boolean testSicreer = false;
                            try {
                                for (Souscentre souscentre : souscentreAvecCorrecteursList) {
                                    int net = 0;
                                    for (Intervenant correcteur : intervenants) {
                                        if (correcteur.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                            Deplacecorrect sonDeplacecorrect = new Deplacecorrect();
                                            for (Deplacecorrect deplacecorrect : deplacecorrects) {
                                                if (deplacecorrect.getIntervenant().getPersonnel().getNompers().equals(correcteur.getPersonnel().getNompers()) && deplacecorrect.getIntervenant().getPersonnel().getPrenom().equals(correcteur.getPersonnel().getPrenom())) {
                                                    sonDeplacecorrect = deplacecorrect;
                                                    break;
                                                }
                                            }
                                            determinerCoutCorrecteurProfessionnel(sonDeplacecorrect);
                                            int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                            net += montantArrondi;
                                        }
                                    }
                                    metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                    testSicreer = true;
                                }
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                            if (testSicreer) {
                                JOptionPane.showMessageDialog(this, "Etats de prise en charge des correcteurs professionnels mis à jour avec succès pour ce groupe d'examens !");
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Aucun Correcteur professionnel trouvé dans la base de données !");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
                }
                souscentreAvecCorrecteursList.clear();
            }//fin if result
        }
    }//GEN-LAST:event_jButtonMettreAjourEtatsActionPerformed

    private void jButtonSupprimerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEtatsActionPerformed
        infoSaisies();
        if (!jCheckBoxProfessionnel.isSelected()) {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de déplacement pour correction, harmonisation et délibération pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("DEPLACEMENT POUR CORRECTION, HARMONISATION ET DELIBERATION");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état de déplacement pour correction, harmonisation et délibération n'existe pour ce groupe d'examens !");
                    } else {
                        try {
                            for (Caisse caisse : caisses) {
                                metier.supprimerCaisse(caisse);
                            }
                            JOptionPane.showMessageDialog(this, "Etats de déplacement pour correction, harmonisation et délibération supprimés avec succès pour ce groupe d'examens !");
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    }
                }
            }
        }
        if (jCheckBoxProfessionnel.isSelected()) {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de prise en charge des correcteurs professionnels pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES CORRECTEURS PROFESSIONNELS");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état de prise en charge des correcteurs professionnels n'existe pour ce groupe d'examens !");
                    } else {
                        try {
                            for (Caisse caisse : caisses) {
                                metier.supprimerCaisse(caisse);
                            }
                            JOptionPane.showMessageDialog(this, "Etats de prise en charge des correcteurs professionnels supprimés avec succès pour ce groupe d'examens !");
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerEtatsActionPerformed

    private void jComboBoxDepartementSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementSouscentreActionPerformed
        remplirArrondissementSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxDepartementSouscentreActionPerformed

    private void jComboBoxArrondissementSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementSouscentreActionPerformed
        remplirSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementSouscentreActionPerformed

    private void jComboBoxSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSouscentreActionPerformed
        //jTextField1.setText();
    }//GEN-LAST:event_jComboBoxSouscentreActionPerformed

    private void jComboBoxRegionSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionSouscentreActionPerformed
        remplirDepartementSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxRegionSouscentreActionPerformed

    private void jComboBoxDepartementListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementListeActionPerformed
        remplirArrondissementListeCombobox();
        remplirPersonnelsDuDepartementCombobox();
    }//GEN-LAST:event_jComboBoxDepartementListeActionPerformed

    private void jComboBoxArrondissementListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementListeActionPerformed
        remplirPersonnelsDelArrondissementCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementListeActionPerformed

    private void jComboBoxNomsEtPrenomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNomsEtPrenomsActionPerformed
        nomsEtPrenomsSelected = (String) jComboBoxNomsEtPrenoms.getSelectedItem();
        if (!nomsEtPrenomsSelected.equals("---")) {
            for (Personnel p : personnels) {
                if ((p.getNompers() + " " + p.getPrenom()).equals(nomsEtPrenomsSelected)) {
                    personnelSelected = p;
                    break;
                }
            }
        }
    }//GEN-LAST:event_jComboBoxNomsEtPrenomsActionPerformed

    private void jComboBoxRegionListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionListeActionPerformed
        remplirDepartementListeCombobox();
    }//GEN-LAST:event_jComboBoxRegionListeActionPerformed

    private void jButtonSupprimerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerPersonnelActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nomsEtPrenomsSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre et un personnel !");
        } else {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer ce correcteur du sous-centre [" + nomSouscentreSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                anneeSelected = Integer.parseInt(anneeString);
                //deplacecorrects = metier.findAllDeplacecorrectsD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                try {
                    Intervenant correcteur = metier.findIntervenantByNomEtPrenomD1GroupeDexamensD1SessionD1SouscentreD1ActiviteEt1Qualite(personnelSelected.getNompers(), personnelSelected.getPrenom(), anneeSelected, nomSouscentreSelected, niveauSelected, typeSelected, phase, "CORRECTEUR");
                    /*
                    Deplacecorrect sonDeplacecorrect = new Deplacecorrect();
                    for (Deplacecorrect deplacecorrect : deplacecorrects) {
                        if (deplacecorrect.getIntervenant().getPersonnel().getNompers().equals(correcteur.getPersonnel().getNompers()) && deplacecorrect.getIntervenant().getPersonnel().getPrenom().equals(correcteur.getPersonnel().getPrenom())) {
                            sonDeplacecorrect = deplacecorrect;
                        }
                    }
                    metier.supprimerDeplacecorrect(sonDeplacecorrect);
                    */
                    metier.supprimerIntervenant(correcteur);
                    JOptionPane.showMessageDialog(this, "Correcteur supprimé avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer ce correcteur du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerPersonnelActionPerformed

    private void jButtonAnnulerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerPersonnelActionPerformed
        jComboBoxRegionListe.setSelectedIndex(0);
        jComboBoxDepartementListe.setSelectedIndex(0);
        jComboBoxArrondissementListe.setSelectedIndex(0);
        jComboBoxNomsEtPrenoms.setSelectedIndex(0);
        buttonGroup2.clearSelection();
    }//GEN-LAST:event_jButtonAnnulerPersonnelActionPerformed

    private void jButtonCreerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerPersonnelActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nomsEtPrenomsSelected.equals("---") || typeDeplacementSelected.equals("---") || sigleOptionSelected.equals("---") || nomMatiereSelected.equals("---") || jurysSaisi.equals("") || nbcopiesString.equals("")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre, un personnel, un type de déplacement, les jurys et un nombre de copies !");
        } else {
            validerNbcopies(nbcopiesString);
            if (!continuerNbcopies) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Le nombre de copies fourni est incorrect !");
            } else {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                Intervenant intervenantCreated = null;
                boolean testSiCreerIntervenant = false;
                boolean testSiCreerDeplacecorrect = false;
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                for (Souscentre souscentre : souscentres) {
                    if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                        souscentreSelected = souscentre;
                        break;
                    }
                }

                for (Option option : options) {
                    if (option.getSigle().equals(sigleOptionSelected)) {
                        optionSelected = option;
                        break;
                    }
                }

                for (Matiere matiere : matieres) {
                    if (matiere.getNom().equals(nomMatiereSelected)) {
                        matiereSelected = matiere;
                        break;
                    }
                }

                try {
                    //personnelSelected est déterminé au moment du clic sur sa jcombobox
                    Activite activite = metier.findActiviteByNom(phase);
                    Qualite qualite = metier.findQualiteByTitre("CORRECTEUR");
                    boolean resident = false;
                    if (typeDeplacementSelected.equals("CITE DORTOIR")) {
                        resident = true;
                    }
                    intervenantCreated = new Intervenant(groupe, sessionSelected, personnelSelected, souscentreSelected, activite, qualite, resident);
                    metier.creerIntervenant(intervenantCreated);
                    testSiCreerIntervenant = true;
                } catch (ObcbudgetException ex) {
                    testSiCreerIntervenant = false;
                }

                correctionBool = false;
                harmonisationBool = false;
                harmocorrectBool = false;
                deladmissibiliteBool = false;
                deladmissionBool = false;

                if (jCheckBoxCorrection.isSelected()) {
                    correctionBool = true;
                }
                if (jCheckBoxHarmonisation.isSelected()) {
                    harmonisationBool = true;
                }
                if (jCheckBoxHarmocorrect.isSelected()) {
                    harmocorrectBool = true;
                }
                if (jCheckBoxDeladmissibilite.isSelected()) {
                    deladmissibiliteBool = true;
                }
                if (jCheckBoxDeladmission.isSelected()) {
                    deladmissionBool = true;
                }
                if (testSiCreerIntervenant) {
                    try {
                        metier.creerDeplacecorrect(new Deplacecorrect(intervenantCreated, optionSelected, matiereSelected, jurysSaisi.toUpperCase(), nbcopiesSaisi, correctionBool, harmonisationBool, harmocorrectBool, deladmissibiliteBool, deladmissionBool));
                        testSiCreerDeplacecorrect = true;
                    } catch (ObcbudgetException ex) {
                        testSiCreerDeplacecorrect = false;
                    }
                }
                if (!testSiCreerDeplacecorrect) {
                    if (testSiCreerIntervenant) {
                        metier.supprimerIntervenant(intervenantCreated);//on supprime intervenantCreated si son Deplacecorrec n'a pas été créé
                    }
                    JOptionPane.showMessageDialog(this, "Impossible de créer le correcteur pour le sous-centre [" + nomSouscentreSelected + "]");
                } else {
                    JOptionPane.showMessageDialog(this, "Correcteur créé avec succès !");
                }
            }
        }
    }//GEN-LAST:event_jButtonCreerPersonnelActionPerformed

    private void jButtonListerPersonnelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerPersonnelsActionPerformed
        infoSaisies();
        List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres contenant des correcteurs
        Map<Souscentre, ArrayList<Intervenant>> souscentreIntervenantsMap = new HashMap<>();//contient chaque souscentre et la liste de ses intervenants
        Map<Intervenant, Deplacecorrect> intervenantDeplacecorrectMap = new HashMap<>();//contient chaque intervenant et son Deplacecorrect
        if (groupedexamensEnstring.equals("") || anneeString.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens et une session !");
        } else {
            anneeSelected = Integer.parseInt(anneeString);
            intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CORRECTEUR");
            deplacecorrects = metier.findAllDeplacecorrectsD1GroupeDexamensD1Session(anneeSelected, niveauSelected, typeSelected);
            if (!intervenants.isEmpty()) {
                for (Intervenant intervenant : intervenants) {
                    if (!souscentreList.contains(intervenant.getSouscentre())) {
                        souscentreList.add(intervenant.getSouscentre());
                    }
                }
                for (Souscentre scentre : souscentreList) {
                    ArrayList<Intervenant> intervenantsList = new ArrayList<>();
                    for (Intervenant intervenant : intervenants) {                                    
                        if (!intervenantsList.contains(intervenant) && intervenant.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                            intervenantsList.add(intervenant);
                        }
                    }
                    souscentreIntervenantsMap.put(scentre, intervenantsList);
                }
                for (Intervenant intervenant : intervenants) {
                    for (Deplacecorrect deplacecorrect : deplacecorrects) {
                        if (intervenant.getPersonnel().getNompers().equals(deplacecorrect.getIntervenant().getPersonnel().getNompers()) && intervenant.getPersonnel().getPrenom().equals(deplacecorrect.getIntervenant().getPersonnel().getPrenom())) {
                            if (!intervenantDeplacecorrectMap.containsKey(intervenant)) {
                                intervenantDeplacecorrectMap.put(intervenant, deplacecorrect);
                                break;
                            }
                        }
                    }
                }
                try {
                    List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                    for (Region region : regions) {
                        for (Souscentre souscentre : souscentreIntervenantsMap.keySet()) {
                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                                int i = 1;
                                for (Intervenant intervenant : souscentreIntervenantsMap.get(souscentre)) {
                                    Deplacecorrect sonDeplacecorrect = intervenantDeplacecorrectMap.get(intervenant);
                                    Map<String, Object> row = new HashMap<>();
                                    row.put("session", anneeSelected);
                                    row.put("examen", groupedexamensEnstring);
                                    row.put("region", region.getNomreg());
                                    row.put("num", i++);
                                    row.put("souscentre", souscentre.getNomsouscent());
                                    String personnelAffiche = intervenant.getPersonnel().getNompers() + " " + intervenant.getPersonnel().getPrenom();
                                    if (intervenant.getPersonnel().getFonction().getTitre().equals("PROF")) {
                                        personnelAffiche += " (Professionnel)";
                                    }
                                    row.put("personnel", personnelAffiche);
                                    String typeDeplacement = "";
                                    if (intervenant.getResident()) {
                                        typeDeplacement = "Cité dortoir";
                                    } else {
                                        typeDeplacement = "Inter urbain";
                                    }
                                    row.put("typeDeplacement", typeDeplacement);
                                    row.put("option", sonDeplacecorrect.getOption().getSigle());
                                    row.put("nbcopies", sonDeplacecorrect.getNbcopies());
                                    row.put("matiere", sonDeplacecorrect.getMatiere().getNom().toLowerCase());
                                    row.put("jurys", sonDeplacecorrect.getJurys());
                                    row.put("option", sonDeplacecorrect.getOption().getSigle());
                                    row.put("correctionBool", sonDeplacecorrect.getCorrection());
                                    row.put("harmonisationBool", sonDeplacecorrect.getHarmonisation());
                                    row.put("harmocorrectBool", sonDeplacecorrect.getHarmocorrect());
                                    row.put("deladmissibiliteBool", sonDeplacecorrect.getDeladmissibilite());
                                    row.put("deladmissionBool", sonDeplacecorrect.getDeladmission());
                                    datasource.add(row);
                                }
                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeCorrecteursDeplacesReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }
        }
        intervenants.clear();
    }//GEN-LAST:event_jButtonListerPersonnelsActionPerformed

    private void jButtonAnnulerChoixExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixExamenActionPerformed
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        jComboBoxSession.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixExamenActionPerformed

    private void jButtonAnnulerChoixSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixSouscentreActionPerformed
        jComboBoxRegionSouscentre.setSelectedIndex(0);
        jComboBoxDepartementSouscentre.setSelectedIndex(0);
        jComboBoxArrondissementSouscentre.setSelectedIndex(0);
        jComboBoxSouscentre.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixSouscentreActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
            afficherOptionsEtMatieres();
        }
        if (typeSelected.equals("GEN")) {
            jCheckBoxCorrection.setEnabled(true);
            jCheckBoxHarmonisation.setEnabled(true);
            jCheckBoxHarmocorrect.setEnabled(false);
            jCheckBoxDeladmissibilite.setEnabled(false);
        } else {
            jCheckBoxCorrection.setEnabled(false);
            jCheckBoxHarmonisation.setEnabled(false);
        }
        if (typeSelected.equals("IND")) {
            jCheckBoxHarmocorrect.setEnabled(true);
            jCheckBoxDeladmissibilite.setEnabled(true);
        } else {
            jCheckBoxDeladmissibilite.setEnabled(false);
        }

        if (typeSelected.equals("STT") || typeSelected.equals("STT PROF") || typeSelected.equals("IND PROF")) {
            jCheckBoxHarmocorrect.setEnabled(true);
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jButtonImporterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImporterActionPerformed
        anneeString = (String) jComboBoxSession.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        if (!anneeString.equals("---") && !groupedexamensEnstring.equals("")) {
            class donneesNonSave {//classe interne devant contenir un personnel et ses paramètres non sauvegardés dans la BD

                String scentre;
                String nom;
                String prenom;
                String fonction;
                String structure;
                String arrondissement;
                String resident;
                String option;
                String jurys;
                String matiere;
                int nbcopies;
                String correct;
                String harmo;
                String harmocorrect;
                String deladmiste;
                String deladmis;

                public donneesNonSave(String scentre, String nom, String prenom, String fonction, String structure, String arrondissement, String resident, String option, String jurys, String matiere, int nbcopies, String correct, String harmo, String harmocorrect, String deladmiste, String deladmis) {
                    this.scentre = scentre;
                    this.nom = nom;
                    this.prenom = prenom;
                    this.fonction = fonction;
                    this.structure = structure;
                    this.arrondissement = arrondissement;
                    this.resident = resident;
                    this.option = option;
                    this.jurys = jurys;
                    this.matiere = matiere;
                    this.nbcopies = nbcopies;
                    this.correct = correct;
                    this.harmo = harmo;
                    this.harmocorrect = harmocorrect;
                    this.deladmiste = deladmiste;
                    this.deladmis = deladmis;
                }
            }
            ArrayList<donneesNonSave> donneesNonSaveList = new ArrayList<>();//liste de tous les personnels et leurs paramètres non sauvegardés dans la BD
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            anneeSelected = Integer.parseInt(anneeString);
            Qualite qualite = metier.findQualiteByTitre("CORRECTEUR");
            for (Session s : sessions) {
                if (s.getAnnee() == anneeSelected) {
                    sessionSelected = s;
                    break;
                }
            }

            JFileChooser choix = new JFileChooser();
            int retour = choix.showOpenDialog(this);
            if (retour == JFileChooser.APPROVE_OPTION) {
                // un fichier a été choisi (sortie par OK)
                // nom du fichier  choisi
                //String nomFichier = choix.getSelectedFile().getName();
                // chemin absolu du fichier choisi
                String cheminFichier = choix.getSelectedFile().getAbsolutePath();
                //JOptionPane.showMessageDialog(this, "Nom du fichier choisi:" + nomFichier+" \n Chemin du fichier:"+cheminFichier);

                try {
                    //long start = System.currentTimeMillis();

                    FileInputStream inputStream = new FileInputStream(cheminFichier);

                    XSSFWorkbook workbook = new XSSFWorkbook(inputStream);//XSSFWorkbook pour windows 2007 d'extension xlsx; HSSFWorkbook pour excel 97 et 2003 d'extension xls

                    Sheet firstSheet = workbook.getSheetAt(0);
                    Iterator<Row> rowIterator = firstSheet.iterator();

                    rowIterator.next(); // skip the header row

                    while (rowIterator.hasNext()) {
                        boolean continuerSouscentre = true;
                        boolean continuerFonction = true;
                        boolean continuerArrond = true;
                        boolean continuerOption = true;
                        boolean continuerMatiere = true;
                        Row nextRow = rowIterator.next();
                        Iterator<Cell> cellIterator = nextRow.cellIterator();
                        Souscentre souscentre = new Souscentre();
                        Fonction fonct = new Fonction();
                        Arrondissement arrond = new Arrondissement();
                        Option opt = new Option();
                        Matiere mat = new Matiere();
                        Personnel pers = new Personnel();
                        Intervenant intervenantCreated = null;
                        String nomScentre = "";
                        String nompers = "";
                        String prenompers = "";
                        String nomstruct = "";
                        String nomfonct = "";
                        String nomarrond = "";
                        String titreOpt = "";
                        String nomMat = "";
                        String valresident = "";
                        String jurys = "";
                        int nbcop = 0;
                        String valcor = "";
                        String valharmo = "";
                        String valharmocor = "";
                        String valdeladmiste = "";
                        String valdeladmis = "";
                        while (cellIterator.hasNext()) {
                            Cell nextCell = cellIterator.next();
                            int columnIndex = nextCell.getColumnIndex();

                            switch (columnIndex) {
                                case 0:
                                    nomScentre = nextCell.getStringCellValue();
                                    try {
                                        souscentre = metier.findSouscentreByName(nomScentre);
                                    } catch (Exception e) {
                                        continuerSouscentre = false;
                                    }
                                    break;
                                case 1:
                                    nompers = nextCell.getStringCellValue();
                                    break;
                                case 2:
                                    prenompers = nextCell.getStringCellValue();
                                    break;
                                case 3:
                                    nomstruct = nextCell.getStringCellValue();
                                    break;
                                case 4:
                                    nomfonct = nextCell.getStringCellValue();
                                    try {
                                        fonct = metier.findFonctionByTitre(nomfonct);
                                    } catch (Exception e) {
                                        continuerFonction = false;
                                    }
                                    break;
                                case 5:
                                    nomarrond = nextCell.getStringCellValue();
                                    try {
                                        arrond = metier.findArrondissementByName(nomarrond);
                                    } catch (Exception e) {
                                        continuerArrond = false;
                                    }
                                    break;
                                case 6:
                                    titreOpt = nextCell.getStringCellValue();
                                    try {
                                        opt = metier.findOptionBySigle(titreOpt);
                                    } catch (Exception e) {
                                        continuerOption = false;
                                    }
                                    break;
                                case 7:
                                    nomMat = nextCell.getStringCellValue();
                                    try {
                                        mat = metier.findMatiereByName(nomMat);
                                    } catch (Exception e) {
                                        continuerMatiere = false;
                                    }
                                    break;
                                case 8:
                                    valresident = nextCell.getStringCellValue();
                                    break;
                                case 9:
                                    jurys = nextCell.getStringCellValue();
                                    break;
                                case 10:
                                    nbcop = (int) nextCell.getNumericCellValue();
                                    break;
                                case 11:
                                    valcor = nextCell.getStringCellValue();
                                    break;
                                case 12:
                                    valharmo = nextCell.getStringCellValue();
                                    break;
                                case 13:
                                    valharmocor = nextCell.getStringCellValue();
                                    break;
                                case 14:
                                    valdeladmiste = nextCell.getStringCellValue();
                                    break;
                                case 15:
                                    valdeladmis = nextCell.getStringCellValue();
                                    break;
                            }
                        }

                        Activite activite = metier.findActiviteByNom("CORRECTION");

                        if (continuerMatiere && continuerFonction && continuerArrond && continuerOption && continuerSouscentre) {
                            pers = metier.creerPersonnel(new Personnel(nompers.toUpperCase(), prenompers.toUpperCase(), nomstruct.toUpperCase(), fonct, arrond));
                            boolean resident = false;
                            if (valresident.equals("OUI")) {
                                resident = true;
                            }
                            intervenantCreated = metier.creerIntervenant(new Intervenant(groupe, sessionSelected, pers, souscentre, activite, qualite, resident));
                            boolean correction = false;
                            if (valcor.equals("OUI")) {
                                correction = true;
                            }
                            boolean harmonisation = false;
                            if (valharmo.equals("OUI")) {
                                harmonisation = true;
                            }
                            boolean harmocorrect = false;
                            if (valharmocor.equals("OUI")) {
                                harmocorrect = true;
                            }
                            boolean deladmissibilite = false;
                            if (valdeladmiste.equals("OUI")) {
                                deladmissibilite = true;
                            }
                            boolean deladmission = false;
                            if (valdeladmis.equals("OUI")) {
                                deladmission = true;
                            }
                            metier.creerDeplacecorrect(new Deplacecorrect(intervenantCreated,opt,mat,jurys,nbcop,correction,harmonisation,harmocorrect,deladmissibilite,deladmission));
                        } else {
                            donneesNonSaveList.add(new donneesNonSave(nomScentre,nompers, prenompers, nomfonct, nomstruct, nomarrond, valresident,titreOpt,jurys,nomMat, nbcop,valcor, valharmo, valharmocor, valdeladmiste, valdeladmis));//impossible de sauvegarder personnel et intervenant et Deplacecorrect                                                       
                        }
                    }

                    workbook.close();

                } catch (IOException ex1) {
                    System.out.println("Error reading file");
                    ex1.printStackTrace();
                }

                if (donneesNonSaveList.size() > 0) {
                    JOptionPane.showMessageDialog(this, "Attention ! Attention ! Plusieurs données n'ont pas été importées dans la base des données !");
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        int i = 1;
                        for (donneesNonSave donnee : donneesNonSaveList) {
                            Map<String, Object> row = new HashMap<>();
                            row.put("examen", groupedexamensEnstring);
                            row.put("session", sessionSelected.getAnnee());
                            row.put("num", i++);
                            row.put("souscentre", donnee.scentre);
                            row.put("nom", donnee.nom);
                            row.put("prenom", donnee.prenom);
                            row.put("nomfonct", donnee.fonction);
                            row.put("nomstruct", donnee.structure);
                            row.put("nomarrond", donnee.arrondissement);
                            row.put("resident", donnee.resident);
                            row.put("option", donnee.option);
                            row.put("jurys", donnee.jurys);
                            row.put("matiere", donnee.matiere);                           
                            row.put("nbcopies", donnee.nbcopies);
                            row.put("correction", donnee.correct);
                            row.put("harmonisation", donnee.harmo);
                            row.put("harmocorrect", donnee.harmocorrect);
                            row.put("deladmiste", donnee.deladmiste);
                            row.put("deladmis", donnee.deladmis);
                            datasource.add(row);
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\correcteursDeplacesNonSauvegardesReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Importation effectuée avec succès !");
                }
            } else {
                //... ;// pas de fichier choisi
                JOptionPane.showMessageDialog(this, "Aucun choix effectué !");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencer svp. Vous devez choisir un groupe d'examens et une session !");
        }
    }//GEN-LAST:event_jButtonImporterActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatDeplacementCorrection.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatDeplacementCorrection.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatDeplacementCorrection.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatDeplacementCorrection.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatDeplacementCorrection().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonAnnulerChoixExamen;
    private javax.swing.JButton jButtonAnnulerChoixSouscentre;
    private javax.swing.JButton jButtonAnnulerPersonnel;
    private javax.swing.JButton jButtonCreerEtats;
    private javax.swing.JButton jButtonCreerPersonnel;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonImporter;
    private javax.swing.JButton jButtonListerPersonnels;
    private javax.swing.JButton jButtonMettreAjourEtats;
    private javax.swing.JButton jButtonSupprimerEtats;
    private javax.swing.JButton jButtonSupprimerPersonnel;
    private javax.swing.JButton jButtonVisualiserEtats;
    private javax.swing.JCheckBox jCheckBoxCorrection;
    private javax.swing.JCheckBox jCheckBoxDeladmissibilite;
    private javax.swing.JCheckBox jCheckBoxDeladmission;
    private javax.swing.JCheckBox jCheckBoxHarmocorrect;
    private javax.swing.JCheckBox jCheckBoxHarmonisation;
    private javax.swing.JCheckBox jCheckBoxProfessionnel;
    private javax.swing.JComboBox<String> jComboBoxArrondissementListe;
    private javax.swing.JComboBox<String> jComboBoxArrondissementSouscentre;
    private javax.swing.JComboBox<String> jComboBoxDepartementListe;
    private javax.swing.JComboBox<String> jComboBoxDepartementSouscentre;
    private javax.swing.JComboBox<String> jComboBoxMatiere;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxNomsEtPrenoms;
    private javax.swing.JComboBox<String> jComboBoxOption;
    private javax.swing.JComboBox<String> jComboBoxRegionListe;
    private javax.swing.JComboBox<String> jComboBoxRegionSouscentre;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxSouscentre;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JComboBox<String> jComboBoxTypeDeplacement;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelArrondissementListe;
    private javax.swing.JLabel jLabelArrondissementSouscentre;
    private javax.swing.JLabel jLabelDepartementListe;
    private javax.swing.JLabel jLabelDepartementSouscentre;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelJurys;
    private javax.swing.JLabel jLabelMatiere;
    private javax.swing.JLabel jLabelNbcopies;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelRegionListe;
    private javax.swing.JLabel jLabelRegionSouscentre;
    private javax.swing.JLabel jLabelResponsable;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelSouscentre;
    private javax.swing.JLabel jLabelSpecialite;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JLabel jLabelTypeDeplacement;
    private javax.swing.JPanel jPanelChoixExamen;
    private javax.swing.JPanel jPanelChoixSouscentre;
    private javax.swing.JPanel jPanelExaminateurs;
    private javax.swing.JPanel jPanelGestionEtat;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldJurys;
    private javax.swing.JTextField jTextFieldNbcopies;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Region> regions = null;
    private List<Examen> examens = null;
    private List<Option> options = null;
    private List<Matiere> matieres = null;
    private Examen examenSelected = null;
    private String[] examensList = null;
    private List<Examen> examensSelected = new ArrayList<>();
    private List<Departement> departementsSouscentre = null;
    private List<Arrondissement> arrondissementsSouscentre = null;
    private List<Departement> departementsListe = null;
    private List<Arrondissement> arrondissementsListe = null;
    private List<Souscentre> souscentres = null;
    private Souscentre souscentreSelected = null;
    private String[] sessionsCombo = null;
    private String[] regionsSouscentreCombo = null;
    private String[] departementsSouscentreCombo = null;
    private String[] arrondissementsSouscentreCombo = null;
    private String[] souscentresCombo = null;
    private String[] regionsListeCombo = null;
    private String[] departementsListeCombo = null;
    private String[] arrondissementsListeCombo = null;
    private String[] optionsCombo = null;
    private String[] matieresCombo = null;
    private String nomRegionSouscentreSelected = "";
    private String nomDepartementSouscentreSelected = "";
    private String nomArrondissementSouscentreSelected = "";
    private String nomRegionListeSelected = "";
    private String nomDepartementListeSelected = "";
    private String nomArrondissementListeSelected = "";
    private String nomSouscentreSelected = "";
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private String phase = "CORRECTION";
    private List<Caisse> caisses = null;
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String[] typeDeplacementsCombo = null;
    private String typeDeplacementSelected = "";
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private int total = 0, nbjours = 0, nbcopies = 0, coutharmo = 0, coutharmocorrect = 0, coutdeladmissibilite = 0, coutdeladmission = 0, coutcorrect = 0, txjour1 = 25000, txjour2 = 25000, primexpert = 15000, primeconfid = 25000;
    private String nomsEtPrenomsSelected = "";
    private Personnel personnelSelected = null;
    private List<Personnel> personnels = null;
    private String[] personnelsCombo = null;
    private List<Intervenant> intervenants = null;
    private String phasesPourAffichage = "";
    private String jurysSaisi = "";
    private List<Deplacecorrect> deplacecorrects = null;
    private boolean annule = false;
    private String nomMatiereSelected = "";
    private Matiere matiereSelected = null;
    private String sigleOptionSelected = "";
    private Option optionSelected = null;
    private String nbcopiesString = "";
    private int nbcopiesSaisi = 0;
    private boolean continuerNbcopies = false;
    private boolean correctionBool = false, harmonisationBool = false, harmocorrectBool = false, deladmissibiliteBool = false, deladmissionBool = false;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        regions = metier.findAllRegions();
        souscentres = metier.findAllSouscentres();
        examens = metier.findAllExamens();
        options = metier.findAllOptions();
        matieres = metier.findAllMatieres();

        //on remplit la combobox des régions du sous-centre
        regionsSouscentreCombo = new String[regions.size() + 1];
        regionsSouscentreCombo[0] = "---";
        int i = 1;
        for (Region region : regions) {
            regionsSouscentreCombo[i++] = region.getNomreg();
        }
        jComboBoxRegionSouscentre.setModel(new DefaultComboBoxModel(regionsSouscentreCombo));

        //on remplit la combobox des régions des examinateurs
        regionsListeCombo = new String[regions.size() + 1];
        regionsListeCombo[0] = "---";
        int j = 1;
        for (Region region : regions) {
            regionsListeCombo[j++] = region.getNomreg();
        }
        jComboBoxRegionListe.setModel(new DefaultComboBoxModel(regionsListeCombo));

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int k = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[k++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types d'examen
        typesCombo = new String[]{"---", "GEN", "IND", "IND PROF", "TOUT ESTI", "STT", "STT PROF", "TOUT STT"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC", "TOUT"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        //on remplit la combobox des types de déplacement
        typeDeplacementsCombo = new String[]{"---", "CITE DORTOIR", "INTER URBAIN"};
        jComboBoxTypeDeplacement.setModel(new DefaultComboBoxModel(typeDeplacementsCombo));

        jCheckBoxCorrection.setEnabled(false);
        jCheckBoxHarmonisation.setEnabled(false);
        jCheckBoxDeladmissibilite.setEnabled(false);
        remplirDepartementSouscentreCombobox();
        remplirArrondissementSouscentreCombobox();
        remplirSouscentreCombobox();
        remplirDepartementListeCombobox();
        remplirArrondissementListeCombobox();
        remplirPersonnelsDelArrondissementCombobox();
        remplirPersonnelsDuDepartementCombobox();
    }

    private void infoSaisies() {
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        nomsEtPrenomsSelected = (String) jComboBoxNomsEtPrenoms.getSelectedItem();
        typeDeplacementSelected = (String) jComboBoxTypeDeplacement.getSelectedItem();
        sigleOptionSelected = (String) jComboBoxOption.getSelectedItem();
        nomMatiereSelected = (String) jComboBoxMatiere.getSelectedItem();
        jurysSaisi = jTextFieldJurys.getText();
        nbcopiesString = jTextFieldNbcopies.getText();
    }

    private void remplirDepartementSouscentreCombobox() {
        nomRegionSouscentreSelected = (String) jComboBoxRegionSouscentre.getSelectedItem();
        departementsSouscentre = metier.findAllDepartementsD1Region(nomRegionSouscentreSelected);
        //on remplit la combobox des départements du sous-centre
        departementsSouscentreCombo = new String[departementsSouscentre.size() + 1];
        departementsSouscentreCombo[0] = "---";
        int i = 1;
        for (Departement departement : departementsSouscentre) {
            departementsSouscentreCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartementSouscentre.setModel(new DefaultComboBoxModel(departementsSouscentreCombo));
    }

    private void remplirArrondissementSouscentreCombobox() {
        nomDepartementSouscentreSelected = (String) jComboBoxDepartementSouscentre.getSelectedItem();
        arrondissementsSouscentre = metier.findAllArrondissementsD1Departement(nomDepartementSouscentreSelected);
        //on remplit la combobox des arrondissements
        arrondissementsSouscentreCombo = new String[arrondissementsSouscentre.size() + 1];
        arrondissementsSouscentreCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissementsSouscentre) {
            arrondissementsSouscentreCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissementSouscentre.setModel(new DefaultComboBoxModel(arrondissementsSouscentreCombo));
    }

    private void remplirSouscentreCombobox() {
        nomArrondissementSouscentreSelected = (String) jComboBoxArrondissementSouscentre.getSelectedItem();
        souscentres = metier.findAllSouscentresD1Arrondissement(nomArrondissementSouscentreSelected);
        //on remplit la combobox des sous-centres
        souscentresCombo = new String[souscentres.size() + 1];
        souscentresCombo[0] = "---";
        int i = 1;
        for (Souscentre souscentre : souscentres) {
            souscentresCombo[i++] = souscentre.getNomsouscent();
        }
        jComboBoxSouscentre.setModel(new DefaultComboBoxModel(souscentresCombo));
    }

    private void remplirDepartementListeCombobox() {
        nomRegionListeSelected = (String) jComboBoxRegionListe.getSelectedItem();
        departementsListe = metier.findAllDepartementsD1Region(nomRegionListeSelected);
        //on remplit la combobox des départements des examinateurs
        departementsListeCombo = new String[departementsListe.size() + 1];
        departementsListeCombo[0] = "---";
        int i = 1;
        for (Departement departement : departementsListe) {
            departementsListeCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartementListe.setModel(new DefaultComboBoxModel(departementsListeCombo));
    }

    private void remplirArrondissementListeCombobox() {
        nomDepartementListeSelected = (String) jComboBoxDepartementListe.getSelectedItem();
        arrondissementsListe = metier.findAllArrondissementsD1Departement(nomDepartementListeSelected);
        //on remplit la combobox des arrondissements des examinateurs
        arrondissementsListeCombo = new String[arrondissementsListe.size() + 1];
        arrondissementsListeCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissementsListe) {
            arrondissementsListeCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissementListe.setModel(new DefaultComboBoxModel(arrondissementsListeCombo));
    }

    private void remplirPersonnelsDelArrondissementCombobox() {
        nomArrondissementListeSelected = (String) jComboBoxArrondissementListe.getSelectedItem();
        personnels = metier.findAllPersonnelsD1Arrondissement(nomArrondissementListeSelected);
        //on remplit les combobox des responsables et des membres
        personnelsCombo = new String[personnels.size() + 1];
        personnelsCombo[0] = "---";
        int i = 1;
        for (Personnel personnel : personnels) {
            personnelsCombo[i] = personnel.getNompers() + " " + personnel.getPrenom();
            i++;
        }
        jComboBoxNomsEtPrenoms.setModel(new DefaultComboBoxModel(personnelsCombo));
    }

    private void remplirPersonnelsDuDepartementCombobox() {
        nomDepartementListeSelected = (String) jComboBoxDepartementListe.getSelectedItem();
        personnels = metier.findAllPersonnelsD1Departement(nomDepartementListeSelected);
        //on remplit les combobox des personnels       
        personnelsCombo = new String[personnels.size() + 1];
        personnelsCombo[0] = "---";
        int i = 1;
        for (Personnel personnel : personnels) {
            personnelsCombo[i] = personnel.getNompers() + " " + personnel.getPrenom();
            i++;
        }
        jComboBoxNomsEtPrenoms.setModel(new DefaultComboBoxModel(personnelsCombo));
    }

    private void determinerCoutCorrecteur(Intervenant intervenant, Deplacecorrect deplacecorrect) {
        total = 0;
        nbjours = 0;
        nbcopies = 0;
        coutcorrect = 0;
        coutharmo = 0;
        coutharmocorrect = 0;
        coutdeladmissibilite = 0;
        coutdeladmission = 0;
        if (typeSelected.equals("GEN") && niveauSelected.equals("BACC")) {
            if (intervenant.getResident()) {
                if (deplacecorrect.getCorrection()) {
                    nbjours = 4;//ne sert pas dans le calcul
                    coutcorrect = 70000;
                }
                if (deplacecorrect.getHarmonisation()) {
                    nbjours = 1;//ne sert pas dans le calcul
                    coutharmo = 10000;//forfait de transport+restauration
                }
                if (deplacecorrect.getDeladmission()) {
                    nbjours = 3;//ne sert pas dans le calcul
                    coutdeladmission = 65000;
                }
            }
            if (!intervenant.getResident()) {
                if (deplacecorrect.getCorrection()) {
                    nbjours = 6;//ne sert pas dans le calcul
                    coutcorrect = 100000;
                }
                if (deplacecorrect.getHarmonisation()) {
                    nbjours = 2;//ne sert pas dans le calcul
                    coutharmo = 25000;
                }
                if (deplacecorrect.getDeladmission()) {
                    nbjours = 5;//ne sert pas dans le calcul
                    coutdeladmission = 100000;
                }
            }
            total = coutcorrect + coutharmo + coutdeladmission;
        }
        if (typeSelected.equals("GEN") && niveauSelected.equals("PROB")) {
            if (intervenant.getResident()) {
                if (deplacecorrect.getCorrection()) {
                    nbjours = 4;//ne sert pas dans le calcul
                    coutcorrect = 70000;
                }
                if (deplacecorrect.getHarmonisation()) {
                    nbjours = 1;//ne sert pas dans le calcul
                    coutharmo = 25000;//forfait de transport+restauration
                }
                if (deplacecorrect.getDeladmission()) {
                    nbjours = 3;//ne sert pas dans le calcul
                    coutdeladmission = 65000;
                }
            }
            if (!intervenant.getResident()) {
                if (deplacecorrect.getCorrection()) {
                    nbjours = 6;//ne sert pas dans le calcul
                    coutcorrect = 100000;
                }
                if (deplacecorrect.getHarmonisation()) {
                    nbjours = 2;//ne sert pas dans le calcul
                    coutharmo = 50000;
                }
                if (deplacecorrect.getDeladmission()) {
                    nbjours = 5;//ne sert pas dans le calcul
                    coutdeladmission = 100000;
                }
            }
            total = coutcorrect + coutharmo + coutdeladmission;
        }
        if (typeSelected.equals("IND") || typeSelected.equals("IND PROF")) {
            if (intervenant.getResident()) {
                if (deplacecorrect.getHarmocorrect()) {
                    nbcopies = deplacecorrect.getNbcopies();
                    if (nbcopies > 0 && nbcopies <= 100) {
                        coutharmocorrect = 60000;
                    }
                    if (nbcopies > 100 && nbcopies <= 150) {
                        coutharmocorrect = 85000;
                    }
                    if (nbcopies > 150) {
                        coutharmocorrect = 110000;
                    }
                }
                if (deplacecorrect.getDeladmissibilite()) {
                    nbjours = 3;
                    coutdeladmission = nbjours * txjour1;
                }
                if (deplacecorrect.getDeladmission()) {
                    nbjours = 3;//2 d'après la grille mais harmonisé à 3 avec del admissibilité d'après KOUYA 2021 et t1=t2=25000
                    coutdeladmission = nbjours * txjour2;
                }
            }
            if (!intervenant.getResident()) {
                if (deplacecorrect.getHarmocorrect()) {
                    nbcopies = deplacecorrect.getNbcopies();
                    if (nbcopies > 0 && nbcopies <= 100) {
                        nbjours = 5;
                    }
                    if (nbcopies > 100 && nbcopies <= 150) {
                        nbjours = 6;
                    }
                    if (nbcopies > 150) {
                        nbjours = 7;
                    }
                    coutharmocorrect = nbjours * txjour1;;
                }
                if (deplacecorrect.getDeladmissibilite()) {
                    nbjours = 4;
                    coutdeladmission = nbjours * txjour1;
                }
                if (deplacecorrect.getDeladmission()) {
                    nbjours = 4;//3 d'après la grille mais harmonisé à 4 avec del admissibilité d'après KOUYA 2021 et t1=t2=25000
                    coutdeladmission = nbjours * txjour2;
                }
            }
            total = coutharmocorrect + coutdeladmissibilite + coutdeladmission;
        }
        if (typeSelected.equals("STT")) {
            if (intervenant.getResident()) {
                if (deplacecorrect.getHarmocorrect()) {
                    nbcopies = deplacecorrect.getNbcopies();
                    if (nbcopies > 0 && nbcopies <= 100) {
                        coutharmocorrect = 60000;
                    }
                    if (nbcopies > 100 && nbcopies <= 150) {
                        coutharmocorrect = 85000;
                    }
                    if (nbcopies > 150) {
                        coutharmocorrect = 110000;
                    }
                }
                if (deplacecorrect.getDeladmission()) {
                    nbjours = 3;
                    coutdeladmission = nbjours * txjour1;
                }
            }
            if (!intervenant.getResident()) {
                if (deplacecorrect.getHarmocorrect()) {
                    nbcopies = deplacecorrect.getNbcopies();
                    if (nbcopies > 0 && nbcopies <= 100) {
                        nbjours = 5;
                    }
                    if (nbcopies > 100 && nbcopies <= 150) {
                        nbjours = 6;
                    }
                    if (nbcopies > 150) {
                        nbjours = 7;
                    }
                    coutharmocorrect = nbjours * txjour1;;
                }
                if (deplacecorrect.getDeladmission()) {
                    nbjours = 5;
                    coutdeladmission = nbjours * txjour1;
                }
            }
            total = coutharmocorrect + coutdeladmission;
        }
    }

    private void determinerCoutCorrecteurProfessionnel(Deplacecorrect deplacecorrect) {
        total = 0;
        nbjours = 0;
        nbcopies = 0;
        coutcorrect = 0;
        coutharmo = 0;
        coutharmocorrect = 0;
        coutdeladmissibilite = 0;
        coutdeladmission = 0;
        //il n'y a pas de cité dortoir chef les correcteurs professionnels. Ils sont tous inter urbain
        if (typeSelected.equals("IND") || typeSelected.equals("IND PROF") || typeSelected.equals("TOUT ESTI")) {
            if (deplacecorrect.getHarmocorrect()) {
                nbcopies = deplacecorrect.getNbcopies();
                if (nbcopies > 0 && nbcopies <= 100) {
                    nbjours = 5;
                }
                if (nbcopies > 100 && nbcopies <= 150) {
                    nbjours = 6;
                }
                if (nbcopies > 150) {
                    nbjours = 7;
                }
                coutharmocorrect = nbjours * txjour1;;
            }
            if (deplacecorrect.getDeladmissibilite()) {
                nbjours = 4;
                coutdeladmission = nbjours * txjour1;
            }
            if (deplacecorrect.getDeladmission()) {
                nbjours = 3;
                coutdeladmission = nbjours * txjour2;
            }
            total = coutharmocorrect + coutdeladmissibilite + coutdeladmission + primexpert + primeconfid;
        }
        if (typeSelected.equals("STT") || typeSelected.equals("STT PROF") || typeSelected.equals("TOUT STT")) {
            if (deplacecorrect.getHarmocorrect()) {
                nbcopies = deplacecorrect.getNbcopies();
                if (nbcopies > 0 && nbcopies <= 100) {
                    nbjours = 5;
                }
                if (nbcopies > 100 && nbcopies <= 150) {
                    nbjours = 6;
                }
                if (nbcopies > 150) {
                    nbjours = 7;
                }
                coutharmocorrect = nbjours * txjour1;;
            }
            if (deplacecorrect.getDeladmission()) {
                nbjours = 5;
                coutdeladmission = nbjours * txjour1;
            }
            total = coutharmocorrect + coutdeladmission + primexpert + primeconfid;
        }
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    private void afficherOptionsEtMatieres() {
        ArrayList<Option> optionsGenerales = new ArrayList<>();
        ArrayList<Matiere> matieresGenerales = new ArrayList<>();
        ArrayList<Option> optionsTI = new ArrayList<>();
        ArrayList<Matiere> matieresTI = new ArrayList<>();
        ArrayList<Option> optionsSTT = new ArrayList<>();
        ArrayList<Matiere> matieresSTT = new ArrayList<>();
        for (Option option : options) {
            if (option.getFamille().getTitre().equals("LITTÉRAIRE") || option.getFamille().getTitre().equals("SCIENTIFIQUE")) {
                optionsGenerales.add(option);
            }
        }
        for (Matiere matiere : matieres) {
            if (matiere.getFamille().getTitre().equals("LITTÉRAIRE") || matiere.getFamille().getTitre().equals("SCIENTIFIQUE")) {
                matieresGenerales.add(matiere);
            }
        }

        for (Option option : options) {
            if (option.getFamille().getTitre().equals("TECHNIQUE INDUSTRIEL")) {
                optionsTI.add(option);
            }
        }
        for (Matiere matiere : matieres) {
            if (matiere.getFamille().getTitre().equals("TECHNIQUE INDUSTRIEL") || matiere.getFamille().getTitre().equals("LITTÉRAIRE")) {
                matieresTI.add(matiere);
            }
        }

        for (Option option : options) {
            if (option.getFamille().getTitre().equals("TECHNIQUE COMMERCIAL")) {
                optionsSTT.add(option);
            }
        }
        for (Matiere matiere : matieres) {
            if (matiere.getFamille().getTitre().equals("TECHNIQUE COMMERCIAL") || matiere.getFamille().getTitre().equals("LITTÉRAIRE")) {
                matieresSTT.add(matiere);
            }
        }

        if (typeSelected.equals("GEN")) {
            //on remplit la combobox des options
            optionsCombo = new String[optionsGenerales.size() + 1];
            optionsCombo[0] = "---";
            int k = 1;
            for (Option option : optionsGenerales) {
                optionsCombo[k++] = option.getSigle();
            }
            jComboBoxOption.setModel(new DefaultComboBoxModel(optionsCombo));

            //on remplit la combobox des matières
            matieresCombo = new String[matieresGenerales.size() + 1];
            matieresCombo[0] = "---";
            int l = 1;
            for (Matiere matiere : matieresGenerales) {
                matieresCombo[l++] = matiere.getNom();
            }
            jComboBoxMatiere.setModel(new DefaultComboBoxModel(matieresCombo));
        }

        if (typeSelected.equals("IND") || typeSelected.equals("IND PROF")) {
            //on remplit la combobox des options
            optionsCombo = new String[optionsTI.size() + 1];
            optionsCombo[0] = "---";
            int k = 1;
            for (Option option : optionsTI) {
                optionsCombo[k++] = option.getSigle();
            }
            jComboBoxOption.setModel(new DefaultComboBoxModel(optionsCombo));

            //on remplit la combobox des matières
            matieresCombo = new String[matieresTI.size() + 1];
            matieresCombo[0] = "---";
            int l = 1;
            for (Matiere matiere : matieresTI) {
                matieresCombo[l++] = matiere.getNom();
            }
            jComboBoxMatiere.setModel(new DefaultComboBoxModel(matieresCombo));
        }

        if (typeSelected.equals("STT") || typeSelected.equals("STT PROF")) {
            //on remplit la combobox des options
            optionsCombo = new String[optionsSTT.size() + 1];
            optionsCombo[0] = "---";
            int k = 1;
            for (Option option : optionsSTT) {
                optionsCombo[k++] = option.getSigle();
            }
            jComboBoxOption.setModel(new DefaultComboBoxModel(optionsCombo));

            //on remplit la combobox des matières
            matieresCombo = new String[matieresSTT.size() + 1];
            matieresCombo[0] = "---";
            int l = 1;
            for (Matiere matiere : matieresSTT) {
                matieresCombo[l++] = matiere.getNom();
            }
            jComboBoxMatiere.setModel(new DefaultComboBoxModel(matieresCombo));
        }
        if (typeSelected.equals("TOUT ESTI")) {
            //on remplit la combobox des options
            optionsCombo = new String[optionsTI.size() + 1];
            optionsCombo[0] = "---";
            int k = 1;
            for (Option option : optionsTI) {
                optionsCombo[k++] = option.getSigle();
            }
            jComboBoxOption.setModel(new DefaultComboBoxModel(optionsCombo));

            //on remplit la combobox des matières
            matieresCombo = new String[matieresTI.size() + 1];
            matieresCombo[0] = "---";
            int l = 1;
            for (Matiere matiere : matieresTI) {
                matieresCombo[l++] = matiere.getNom();
            }
            jComboBoxMatiere.setModel(new DefaultComboBoxModel(matieresCombo));
        }
        if (typeSelected.equals("TOUT STT")) {
            //on remplit la combobox des options
            optionsCombo = new String[optionsSTT.size() + 1];
            optionsCombo[0] = "---";
            int k = 1;
            for (Option option : optionsSTT) {
                optionsCombo[k++] = option.getSigle();
            }
            jComboBoxOption.setModel(new DefaultComboBoxModel(optionsCombo));

            //on remplit la combobox des matières
            matieresCombo = new String[matieresSTT.size() + 1];
            matieresCombo[0] = "---";
            int l = 1;
            for (Matiere matiere : matieresSTT) {
                matieresCombo[l++] = matiere.getNom();
            }
            jComboBoxMatiere.setModel(new DefaultComboBoxModel(matieresCombo));
        }
    }

    private void validerNbcopies(String nbreString) {
        try {
            nbcopiesSaisi = Integer.parseInt(nbreString);
            continuerNbcopies = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de copies doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbcopies = false;
        }
    }
}
