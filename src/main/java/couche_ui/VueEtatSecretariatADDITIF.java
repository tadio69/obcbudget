package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Caisse;
import couche_jpa.Centrebilletage;
import couche_jpa.Examen;
import couche_jpa.Groupedexamen;
import couche_jpa.Nature;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Scentaplus;
import couche_jpa.Secretariat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_jpa.Statistique;
import couche_metier.IMetier;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueEtatSecretariatADDITIF extends javax.swing.JFrame {

    public VueEtatSecretariatADDITIF() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonVisualiser = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jLabelExamen = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT SECRETARIAT");

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonVisualiser.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiser.setText("Visualiser l'Ã©tat");
        jButtonVisualiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserActionPerformed(evt);
            }
        });

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jButtonAnnuler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(204, 255, 0));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Groupe d'examens", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxNiveau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNiveauActionPerformed(evt);
            }
        });

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(223, 223, 223)
                        .addComponent(jButtonVisualiser)
                        .addGap(20, 20, 20)
                        .addComponent(jButtonAnnuler)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(329, 329, 329)
                        .addComponent(jLabelSession)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(76, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(147, 147, 147))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonVisualiser, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnuler, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonFermer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonVisualiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserActionPerformed
        infoSaisies();
        Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
        Map<Souscentre, Integer> souscentreNbMaxEpreuveMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre maximal d'Ã©preuves professionnelles pratiques contraignantes
        List<Souscentre> tousLesScentaplus = new ArrayList<>();//liste de tous les sous-centres Ã  plus organisant les examens sÃ©lectionnÃ©s
        Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activitÃ©s
        List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session 
        List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats 
        Map<Secretariat, Integer> secretariatEffectifMap = new HashMap<>();//contient l'ensemble des secrÃ©tariats d'un groupe d'examens avec chacun avec son nombre de candidats
        Map<Secretariat, ArrayList<Character>> activitesSecretariatMap = new HashMap<>();//contient l'ensemble des secretariats chacun avec la liste des iniatiales de ses activitÃ©s 
        Map<Souscentre, ArrayList<Secretariat>> souscentreSecretariatsMap = new HashMap<>();//contient les sous-centres chacun avec la liste de ses secretariats le cas Ã©chÃ©ant
        Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situÃ©s dans ses secteurs de couverture
        ArrayList<String> typesBruts = new ArrayList<>();
        ArrayList<String> typesAconsiderer = new ArrayList<>();
        ArrayList<String> niveauxAconsiderer = new ArrayList<>();

        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("SECRÃTARIAT D'EXAMEN");

            String separateur = ", ";
            examensList = groupedexamensEnstring.split(separateur);
            for (int i = 0; i < examensList.length; i++) {
                for (Examen e : examens) {
                    if (e.getSigle().equals(examensList[i])) {
                        examensSelected.add(e);
                        break;
                    }
                }
            }
            for (Session s : sessions) {
                if (s.getAnnee() == anneeSelected) {
                    sessionSelected = s;
                    break;
                }
            }

            for (Examen e : examensSelected) {
                List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                for (Statistique s : lesStats) {
                    if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le prÃ©sent sous-centre est dans souscentreMap
                        int nbcand = souscentreEffectifMap.get(s.getSouscentre());//on rÃ©cupÃ¨re son nombre de candidats
                        souscentreEffectifMap.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                    } else {
                        souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                    }
                }
                List<Scentaplus> scentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, e.getSigle());
                for (Scentaplus s : scentaplus) {
                    if (!tousLesScentaplus.contains(s.getSouscentre())) {
                        tousLesScentaplus.add(s.getSouscentre());
                    }
                }
                List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                for (Nature n : lesNats) {
                    Souscentre unSouscentre = n.getSouscentre();
                    if (!souscentreList.contains(unSouscentre)) {
                        souscentreList.add(unSouscentre);
                    }
                }
                for (int j = 0; j < souscentreList.size(); j++) {
                    ArrayList<Character> phasesList = new ArrayList<>();
                    Souscentre s = souscentreList.get(j);
                    for (Nature n : lesNats) {//on recherche toutes les activitÃ©s du prÃ©sent sous-centre
                        if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                            if (!phasesList.contains(n.getActivite().getInitiale())) {
                                phasesList.add(n.getActivite().getInitiale());
                            }
                            //pas de break ici car on doit parcourir tous lesNats
                        }
                    }
                    if (!souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {
                        souscentrePhasesMap.put(s, phasesList);
                    }
                    if (souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {//ce sous-centre organise plus d'un examen. On doit comparer ses activitÃ©s dÃ©jÃ  dans souscentrePhasesMap et celles liÃ©es au prÃ©sent examen puis y insÃ©rer l'activitÃ© manquante
                        ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                        for (int k = 0; k < phasesList.size(); k++) {
                            if (!phasesList1.contains(phasesList.get(k))) {
                                phasesList1.add(phasesList.get(k));
                            }
                        }
                        Collections.sort(phasesList1);
                        souscentrePhasesMap.put(s, phasesList1);
                    }
                }
            }

            //remplissage souscentreAsecretariatsDemultipliesList
            secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
            if (!secretariats.isEmpty()) {
                for (Secretariat sec : secretariats) {
                    if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                        souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                    }
                }
            }
            /*
                //remplissage secretariatEffectifMap
                for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                    List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreD1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                    if (!secretariatsList.isEmpty()) {
                        for (Secretariat sec : secretariatsList) {
                            int stat = 0;
                            List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                            for (Statsecretariat statsec : statsecretariatsList) {
                                if (statsec.getSecretariat().getNumsec() == sec.getNumsec() && statsec.getSecretariat().getExamen().getNomexam().equals(sec.getExamen().getNomexam())) {
                                    stat += statsec.getNombre();
                                }
                            }
                            secretariatEffectifMap.put(sec, stat);
                        }
                    }
                }

                //remplissage activitesSecretariatMap
                List<Naturesecretariat> lesNatsec = metier.findAllNaturesecretariatsD1Session(anneeSelected);
                for (Secretariat sec : secretariatEffectifMap.keySet()) {
                    ArrayList<Character> phasesList2 = new ArrayList<>();
                    for (Naturesecretariat natsec : lesNatsec) {
                        if (sec.getNumsec() == natsec.getSecretariat().getNumsec() && sec.getSouscentre().getNomsouscent().equals(natsec.getSecretariat().getSouscentre().getNomsouscent()) && sec.getExamen().getNomexam().equals(natsec.getSecretariat().getExamen().getNomexam())) {
                            if (!phasesList2.contains(natsec.getActivite().getInitiale())) {
                                phasesList2.add(natsec.getActivite().getInitiale());
                            }
                        }
                    }
                    Collections.sort(phasesList2);
                    activitesSecretariatMap.put(sec, phasesList2);
                }
             */
            //remplissage de souscentreSecretariatsMap
            for (Souscentre souscentre : souscentreEffectifMap.keySet()) {
                ArrayList<Secretariat> secretariatsList = new ArrayList<>();
                for (Secretariat sec : secretariatEffectifMap.keySet()) {
                    if (sec.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                        if (!secretariatsList.contains(sec)) {
                            secretariatsList.add(sec);
                        }
                    }
                }
                if (!secretariatsList.isEmpty()) {
                    souscentreSecretariatsMap.put(souscentre, secretariatsList);
                }
            }

            //recherche des types des examens Ã  utiliser
            for (Examen examen : examensSelected) {
                System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                    typesBruts.add("ESG");
                }
                if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                    typesBruts.add("ESTP");
                }
            }
            if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                typesAconsiderer.add("ESG");
                typesAconsiderer.add("TOUT");
            }
            if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                typesAconsiderer.add("ESTP");
                typesAconsiderer.add("TOUT");
            }
            if (typesBruts.size() == 2) {
                typesAconsiderer.add("ESG");
                typesAconsiderer.add("ESTP");
                typesAconsiderer.add("TOUT");
            }
            //recherche des niveaux des examens Ã  utiliser
            if (!niveauSelected.equals("TOUT")) {
                niveauxAconsiderer.add(niveauSelected);
                niveauxAconsiderer.add("TOUT");
            }
            if (niveauSelected.equals("TOUT")) {
                niveauxAconsiderer.add("PROB");
                niveauxAconsiderer.add("BACC");
                niveauxAconsiderer.add("TOUT");
            }
            //recherche des centres de billetage
            for (String niveau : niveauxAconsiderer) {
                for (String type : typesAconsiderer) {
                    List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                    for (Centrebilletage centrebilletage : desCentrebilletages) {
                        ArrayList<Souscentre> souscentresList = new ArrayList<>();
                        if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                            List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                            for (Secteurcouv sect : secteurs) {
                                if (!souscentresList.contains(sect.getSouscentre())) {
                                    souscentresList.add(sect.getSouscentre());
                                }
                            }
                            centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                        }
                    }
                }
            }

            try {
                List<Map<String, Object>> datasource = new ArrayList<>();
                List<Region> regions = metier.findAllRegions();
                for (Region region : regions) {
                    for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                        if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                            int num = 1;
                            int totalMontant = 0;
                            ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                            for (int i = 0; i < souscentresList.size(); i++) {
                                Souscentre souscentre = souscentresList.get(i);
                                if (souscentreEffectifMap.containsKey(souscentre)) {
                                    if(niveauSelected.equals("BACC")) determinerCout1(souscentreEffectifMap, tousLesScentaplus, souscentrePhasesMap, souscentre);
                                    if(niveauSelected.equals("PROB")) determinerCout2(souscentreEffectifMap, tousLesScentaplus, souscentrePhasesMap, souscentre);
                                    if (!souscentreAsecretariatsDemultipliesList.contains(souscentre) && (phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+"))) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("examen", groupedexamensEnstring);
                                        row.put("session", anneeSelected);
                                        row.put("region", region.getNomreg());
                                        row.put("reference", "");
                                        row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                        row.put("num", num++);
                                        row.put("souscentre", souscentre.getNomsouscent());
                                        row.put("nature", phasesPourAffichage);
                                        row.put("effectif", nbcand);
                                        row.put("membre", membre);
                                        row.put("apercevoir", apercevoir);//row.put("coutvac", coutvac);
                                        row.put("percu", percu);//row.put("indchefsec", indchefsec);
                                        row.put("reliquat", reliquat);//row.put("primeconfid", primeconfid);
                                        //row.put("nbjour", nbjour);
                                        //row.put("entretien", entretien);
                                        //row.put("transport", transport);
                                        row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                        int montantArrondi = (int) Math.ceil((double) reliquat / (double) 1000) * 1000;
                                        row.put("total", montantArrondi);
                                        //row.put("avance", montantArrondi);
                                        totalMontant += montantArrondi;//jasperreport prendra la derniÃ¨re valeur de cout
                                        row.put("totalNetEnlettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                    }
                }
                JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatSecretariatADDITIFReport.jrxml");
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empÃªche jasperviewer de fermer l'appli lorsqu'on le ferme
                jasperViewer.setVisible(true);
            } catch (JRException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }

            souscentreEffectifMap.clear();//on vide le hashmap
            souscentrePhasesMap.clear();//on vide le hashmap
            examensSelected.clear();//on vide
            tousLesScentaplus.clear();
            souscentreList.clear();
            souscentreNbMaxEpreuveMap.clear();
            souscentreSecretariatsMap.clear();
            activitesSecretariatMap.clear();
            centrebilletageSouscentresMap.clear();
            secretariatEffectifMap.clear();
            souscentreAsecretariatsDemultipliesList.clear();

        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonVisualiserActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        videFrame();
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jComboBoxNiveauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNiveauActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxNiveauActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatSecretariatADDITIF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatSecretariatADDITIF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatSecretariatADDITIF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatSecretariatADDITIF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatSecretariatADDITIF().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonVisualiser;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Examen> examens = null;
    private List<Examen> examensSelected = new ArrayList<>();
    private String[] examensList = null;
    private String[] sessionsCombo = null;
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private int cout = 0;
    private String phase = "ECRIT";
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private List<Caisse> caisses = null;
    private int nbcand = 0, membre = 0, apercevoir = 0, percu = 0, reliquat = 0;
    private String phasesPourAffichage = "";
    private List<Secretariat> secretariats = null;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        examens = metier.findAllExamens();

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int i = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[i++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "GEN", "IND", "IND PROF", "STT", "STT PROF", "TOUT", "TOUT ESTI", "TOUT STT", "TOUT ESTP"};//TOUT=tous les types; TOUT ESTI=INDUSTRIEL+INDUSTRIEL PROFESSIONNEL; TOUT STT=STT+STT PROFESSIONNEL; TOUTN ESTP=TOUT SAUF ESG
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC", "TOUT"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        //buttonGroup1.add(jRadioButtonCentresEtsouscentres);
        //buttonGroup1.add(jRadioButtonCentresRegroupement);
        //jCheckBoxAdditifCenteregroupement.setEnabled(false);
    }

    private void infoSaisies() {
        anneeString = (String) jComboBoxSession.getSelectedItem();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
    }

    private void videFrame() {
        jComboBoxSession.setSelectedIndex(0);
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        buttonGroup1.clearSelection();
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte Ã  la ligne dans le textArea
        }
    }

    private void determinerCout1(Map<Souscentre, Integer> souscentreEffectifMap, List<Souscentre> tousLesScentaplus, Map<Souscentre, ArrayList<Character>> souscentrePhasesMap, Souscentre souscentre) {
        //pour sous-centre d'examen Ã  un seul secrÃ©tariat
        nbcand = souscentreEffectifMap.get(souscentre);

        //on dÃ©termine le nombre de membres de secrÃ©tariat
        if (nbcand <= 150) {
            membre = 3;
        }
        if (nbcand > 150 && nbcand <= 300) {
            membre = 4;
        }
        if (nbcand > 300 && nbcand <= 500) {
            membre = 5;
        }

        ArrayList<Character> phasesList = souscentrePhasesMap.get(souscentre);
        String phasesEnchaine = "";
        if (!phasesList.isEmpty()) {
            for (char c : phasesList) {
                if (c != 'T' && c != 'S') {
                    phasesEnchaine += c;
                }
            }
        }
        phasesPourAffichage = phasesEnchaine;
        if (tousLesScentaplus.contains(souscentre)) {
            phasesPourAffichage = phasesEnchaine + "+";
        }

        if ((phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) && membre == 3) {
            apercevoir = 604000;
            percu = 459000;
            reliquat = 145000;
        }
        if ((phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) && membre == 4) {
            apercevoir = 798000;
            percu = 608000;
            reliquat = 190000;
        }
        if ((phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) && membre == 5) {
            apercevoir = 993000;
            percu = 758000;
            reliquat = 235000;
        }
    }
    
    private void determinerCout2(Map<Souscentre, Integer> souscentreEffectifMap, List<Souscentre> tousLesScentaplus, Map<Souscentre, ArrayList<Character>> souscentrePhasesMap, Souscentre souscentre) {
        //pour sous-centre d'examen Ã  un seul secrÃ©tariat
        nbcand = souscentreEffectifMap.get(souscentre);

        //on dÃ©termine le nombre de membres de secrÃ©tariat
        if (nbcand <= 150) {
            membre = 3;
        }
        if (nbcand > 150 && nbcand <= 300) {
            membre = 4;
        }
        if (nbcand > 300 && nbcand <= 500) {
            membre = 5;
        }

        ArrayList<Character> phasesList = souscentrePhasesMap.get(souscentre);
        String phasesEnchaine = "";
        if (!phasesList.isEmpty()) {
            for (char c : phasesList) {
                if (c != 'T' && c != 'S') {
                    phasesEnchaine += c;
                }
            }
        }
        phasesPourAffichage = phasesEnchaine;
        if (tousLesScentaplus.contains(souscentre)) {
            phasesPourAffichage = phasesEnchaine + "+";
        }

        if ((phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) && membre == 3) {
            apercevoir = 585500;
            percu = 459000;
            reliquat = 126500;
        }
        if ((phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) && membre == 4) {
            apercevoir = 774000;
            percu = 608000;
            reliquat = 166000;
        }
        if ((phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) && membre == 5) {
            apercevoir = 962000;
            percu = 758000;
            reliquat = 204000;
        }
    }

}
