package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Caisse;
import couche_jpa.Centre;
import couche_jpa.Centrebilletage;
import couche_jpa.Centredispatching;
import couche_jpa.Departement;
import couche_jpa.Etablissement;
import couche_jpa.Examen;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Nbcopiesdelib;
import couche_jpa.Nbcopiesdispatchees;
import couche_jpa.Rattachdispatching;
import couche_jpa.Rattachregroupement;
import couche_jpa.Rattachventilation;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_jpa.Statistique;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueEtatConvoyage2 extends javax.swing.JFrame {

    public VueEtatConvoyage2() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButtonFermer = new javax.swing.JButton();
        jPanelChoixExamen = new javax.swing.JPanel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixExamen = new javax.swing.JButton();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelExamen = new javax.swing.JLabel();
        jPanelChoixCentre = new javax.swing.JPanel();
        jLabelRegion = new javax.swing.JLabel();
        jComboBoxRegion = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixCentre = new javax.swing.JButton();
        jRadioButtonRegroupement = new javax.swing.JRadioButton();
        jRadioButtonDeliberation = new javax.swing.JRadioButton();
        jLabelDepartement = new javax.swing.JLabel();
        jComboBoxDepartement = new javax.swing.JComboBox<>();
        jPanelCentres = new javax.swing.JPanel();
        jLabelNomCentreDispatching = new javax.swing.JLabel();
        jComboBoxCentreregroupement = new javax.swing.JComboBox<>();
        jLabeType = new javax.swing.JLabel();
        jTextFieldType = new javax.swing.JTextField();
        jLabeFamille = new javax.swing.JLabel();
        jTextFieldFamille = new javax.swing.JTextField();
        jLabelNomCentredeliberation = new javax.swing.JLabel();
        jComboBoxCentredeliberation = new javax.swing.JComboBox<>();
        jPanelJurys = new javax.swing.JPanel();
        jLabelEffectif = new javax.swing.JLabel();
        jTextFieldEffectif2 = new javax.swing.JTextField();
        jButtonCreerEffectif2 = new javax.swing.JButton();
        jButtonSupprimerEffectif2 = new javax.swing.JButton();
        jButtonListerEffectif2 = new javax.swing.JButton();
        jPanelGestionEtat = new javax.swing.JPanel();
        jButtonCreerEtats = new javax.swing.JButton();
        jButtonMettreAjourEtats = new javax.swing.JButton();
        jButtonVisualiserEtats = new javax.swing.JButton();
        jButtonSupprimerEtats = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT DE CONVOYAGE 2");

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jPanelChoixExamen.setBackground(new java.awt.Color(102, 255, 153));
        jPanelChoixExamen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un groupe d'examens et une session", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixExamen.setText("Annuler");
        jButtonAnnulerChoixExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixExamenActionPerformed(evt);
            }
        });

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        javax.swing.GroupLayout jPanelChoixExamenLayout = new javax.swing.GroupLayout(jPanelChoixExamen);
        jPanelChoixExamen.setLayout(jPanelChoixExamenLayout);
        jPanelChoixExamenLayout.setHorizontalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(0, 32, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addGap(26, 26, 26))
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabelSession)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jButtonAnnulerChoixExamen)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixExamenLayout.setVerticalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17))
        );

        jPanelChoixCentre.setBackground(new java.awt.Color(0, 255, 153));
        jPanelChoixCentre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un centre de regroupement ou  de délibération (non centre de regroupement)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jLabelRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegion.setText("Région :");

        jComboBoxRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixCentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixCentre.setText("Annuler");
        jButtonAnnulerChoixCentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixCentreActionPerformed(evt);
            }
        });

        jRadioButtonRegroupement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jRadioButtonRegroupement.setText("Centre de regroupement");
        jRadioButtonRegroupement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonRegroupementActionPerformed(evt);
            }
        });

        jRadioButtonDeliberation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jRadioButtonDeliberation.setText("Centre de délibération");
        jRadioButtonDeliberation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonDeliberationActionPerformed(evt);
            }
        });

        jLabelDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartement.setText("Département :");

        jComboBoxDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementActionPerformed(evt);
            }
        });

        jPanelCentres.setBackground(new java.awt.Color(153, 204, 0));
        jPanelCentres.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Centre de regroupement", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelNomCentreDispatching.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNomCentreDispatching.setText("Nom :");

        jComboBoxCentreregroupement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxCentreregroupement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCentreregroupementActionPerformed(evt);
            }
        });

        jLabeType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabeType.setText("Type :");

        jTextFieldType.setEditable(false);
        jTextFieldType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabeFamille.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabeFamille.setText("Famille :");

        jTextFieldFamille.setEditable(false);
        jTextFieldFamille.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanelCentresLayout = new javax.swing.GroupLayout(jPanelCentres);
        jPanelCentres.setLayout(jPanelCentresLayout);
        jPanelCentresLayout.setHorizontalGroup(
            jPanelCentresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCentresLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabelNomCentreDispatching)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxCentreregroupement, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCentresLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabeType)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldType, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jLabeFamille)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldFamille, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(107, 107, 107))
        );
        jPanelCentresLayout.setVerticalGroup(
            jPanelCentresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCentresLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCentresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNomCentreDispatching, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxCentreregroupement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelCentresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabeType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabeFamille, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldFamille, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jLabelNomCentredeliberation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNomCentredeliberation.setText("Centre de délibération :");

        jComboBoxCentredeliberation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxCentredeliberation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCentredeliberationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixCentreLayout = new javax.swing.GroupLayout(jPanelChoixCentre);
        jPanelChoixCentre.setLayout(jPanelChoixCentreLayout);
        jPanelChoixCentreLayout.setHorizontalGroup(
            jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabelRegion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jLabelDepartement)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(jRadioButtonRegroupement)
                        .addGap(93, 93, 93)
                        .addComponent(jRadioButtonDeliberation))
                    .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                                .addComponent(jLabelNomCentredeliberation)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxCentredeliberation, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanelCentres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelChoixCentreLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButtonAnnulerChoixCentre)
                .addGap(344, 344, 344))
        );
        jPanelChoixCentreLayout.setVerticalGroup(
            jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonRegroupement)
                    .addComponent(jRadioButtonDeliberation))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanelCentres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNomCentredeliberation, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxCentredeliberation, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonAnnulerChoixCentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelJurys.setBackground(new java.awt.Color(255, 204, 204));
        jPanelJurys.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Effectifs reçus au centre de ventilation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabelEffectif.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelEffectif.setText("Effectif 2 :");

        jTextFieldEffectif2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonCreerEffectif2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEffectif2.setText("Créer");
        jButtonCreerEffectif2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEffectif2ActionPerformed(evt);
            }
        });

        jButtonSupprimerEffectif2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEffectif2.setText("Supprimer");
        jButtonSupprimerEffectif2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEffectif2ActionPerformed(evt);
            }
        });

        jButtonListerEffectif2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonListerEffectif2.setText("Lister");
        jButtonListerEffectif2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerEffectif2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelJurysLayout = new javax.swing.GroupLayout(jPanelJurys);
        jPanelJurys.setLayout(jPanelJurysLayout);
        jPanelJurysLayout.setHorizontalGroup(
            jPanelJurysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelJurysLayout.createSequentialGroup()
                .addGroup(jPanelJurysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelJurysLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jButtonCreerEffectif2)
                        .addGap(21, 21, 21)
                        .addComponent(jButtonSupprimerEffectif2)
                        .addGap(21, 21, 21)
                        .addComponent(jButtonListerEffectif2))
                    .addGroup(jPanelJurysLayout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(jLabelEffectif)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldEffectif2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanelJurysLayout.setVerticalGroup(
            jPanelJurysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelJurysLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanelJurysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelEffectif, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldEffectif2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelJurysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelJurysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonSupprimerEffectif2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonListerEffectif2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonCreerEffectif2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanelGestionEtat.setBackground(new java.awt.Color(0, 255, 255));
        jPanelGestionEtat.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer l'état", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jButtonCreerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEtats.setText("Créer");
        jButtonCreerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEtatsActionPerformed(evt);
            }
        });

        jButtonMettreAjourEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjourEtats.setText("Mettre à jour");
        jButtonMettreAjourEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourEtatsActionPerformed(evt);
            }
        });

        jButtonVisualiserEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserEtats.setText("Visualiser");
        jButtonVisualiserEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserEtatsActionPerformed(evt);
            }
        });

        jButtonSupprimerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEtats.setText("Supprimer");
        jButtonSupprimerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEtatsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelGestionEtatLayout = new javax.swing.GroupLayout(jPanelGestionEtat);
        jPanelGestionEtat.setLayout(jPanelGestionEtatLayout);
        jPanelGestionEtatLayout.setHorizontalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jButtonCreerEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonMettreAjourEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiserEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerEtats)
                .addContainerGap(48, Short.MAX_VALUE))
        );
        jPanelGestionEtatLayout.setVerticalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonMettreAjourEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCreerEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonSupprimerEtats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVisualiserEtats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanelChoixCentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanelJurys, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(81, 81, 81)
                                .addComponent(jButtonFermer))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(439, 439, 439)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanelChoixCentre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelJurys, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(24, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(83, 83, 83))))
        );

        jLabel1.getAccessibleContext().setAccessibleName("ETAT CM (PRATIQUE SERIE E)  ET JURYS PRESENTATION DES RAPPORTS DE STAGE (BACC SERIE TI)");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVisualiserEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserEtatsActionPerformed
        infoSaisies();
        Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
        Map<Etablissement, Integer> etablissementEffectif1Map = new HashMap<>();//contient l'ensemble des établissements abritant les centres de regroupement avec leur effectif 1
        Map<Etablissement, Integer> etablissementEffectif2Map = new HashMap<>();//contient l'ensemble des établissements abritant les centres de regroupement ou de délibération avec leur effectif 2
        ArrayList<Etablissement> etablissementsList = new ArrayList<>();//combine les étalissements clés de etablissementEffectif1Map et ceux de etablissementEffectif2Map sans doublon
        Map<Centredispatching, ArrayList<Souscentre>> centreregroupementsouscentresMap = new HashMap<>();//contient les centres de regroupement chacun avec le tableau de ses sous-centres
        Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
        ArrayList<String> typesBruts = new ArrayList<>();
        ArrayList<String> typesAconsiderer = new ArrayList<>();
        ArrayList<String> niveauxAconsiderer = new ArrayList<>();
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("INDEMNITE POUR CONVOYAGE 2 ET VENTILATION DES COPIES");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);

            boolean poursuivre = false;
            for (Caisse c : caisses) {
                if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                    poursuivre = true;
                    break;
                }
            }
            if (!poursuivre) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de convoyage 2 n'ont pas encore été créés pour ce groupe d'examens !");
            } else {
                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                //remplissage etablissementEffectif2Map
                nbcopiesdelibs = metier.findAllNbcopiesdelibD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                nbcopiesdispatchees = metier.findAllNbcopiesdispatcheesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                if (!nbcopiesdispatchees.isEmpty()) {
                    for (Nbcopiesdispatchees nbcop : nbcopiesdispatchees) {
                        etablissementEffectif2Map.put(nbcop.getCentredispatching().getEtablissement(), nbcop.getNbcopies());
                    }
                }
                if (!nbcopiesdelibs.isEmpty()) {
                    for (Nbcopiesdelib nbcop : nbcopiesdelibs) {
                        etablissementEffectif2Map.put(nbcop.getCentre().getEtablissement(), nbcop.getNbcopies());
                    }
                }

                List<Centredispatching> centresRegroupement = metier.findAllCentredispatchingD1Type("Regroupement");
                for (Centredispatching centreregroup : centresRegroupement) {
                    List<Rattachdispatching> lesRattachdispatchings = metier.findAllRattachdispatchingsD1CentredispatchingD1Type(centreregroup.getEtablissement().getAbreviation(), "Regroupement");
                    ArrayList<Souscentre> souscentresList = new ArrayList<>();//liste des sous-centres du centre de regroupement courant
                    if (!lesRattachdispatchings.isEmpty()) {
                        for (Rattachdispatching rattach : lesRattachdispatchings) {
                            if (etablissementEffectif2Map.containsKey(rattach.getSouscentre().getEtablissement())) {//on considère uniquement ceux des centres de regroupement qui ont un effectif 2
                                souscentresList.add(rattach.getSouscentre());
                            }
                        }
                        centreregroupementsouscentresMap.put(centreregroup, souscentresList);
                    }
                }

                for (Examen e : examensSelected) {
                    List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                    for (Statistique s : lesStats) {
                        if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                            int nbrecand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                            souscentreEffectifMap.put(s.getSouscentre(), nbrecand + s.getNombre());//on lui ajoute le nombre de candidats de s
                        } else {
                            souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                        }
                    }
                }

                //remplissage etablissementEffectif1Map
                for (Centredispatching centredispatch : centreregroupementsouscentresMap.keySet()) {
                    int stat = 0;
                    List<Rattachdispatching> lesRattachdispatchings = metier.findAllRattachdispatchingsD1CentredispatchingD1Type(centredispatch.getEtablissement().getAbreviation(), "Regroupement");
                    for (Rattachdispatching rattachdispatch : lesRattachdispatchings) {
                        if (souscentreEffectifMap.containsKey(rattachdispatch.getSouscentre())) {
                            stat += souscentreEffectifMap.get(rattachdispatch.getSouscentre());
                        }
                    }
                    if (stat != 0) {
                        //if (testSiCentreDeRegroupement(metier.findSouscentreByEtablissement(centredispatch.getEtablissement().getAbreviation())) || etablissementEffectif2Map.containsKey(centredispatch.getEtablissement())) {//on considère uniquement les centres ceux des centres de regroupement qui ont un effectif 2
                        etablissementEffectif1Map.put(centredispatch.getEtablissement(), stat);//on considère tous les centres de regroupement car ils n'ont pas bénéficié de convoyage 1
                        //}
                    }
                }

                //NB: tous les établissements abritant les centres de regroupement clés de centreregroupementEffectif1Map sont tous clés dans etablissementEffectif2Map
                //donc etablissementEffectif2Map contient tous les établissements couvrant le groupe d'examens
                //recherche des types des examens à utiliser
                for (Examen examen : examensSelected) {
                    System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                    if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                        typesBruts.add("ESG");
                    }
                    if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                        typesBruts.add("ESTP");
                    }
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 2) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                //recherche des niveaux des examens à utiliser
                if (!niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add(niveauSelected);
                    niveauxAconsiderer.add("TOUT");
                }
                if (niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add("PROB");
                    niveauxAconsiderer.add("BACC");
                    niveauxAconsiderer.add("TOUT");
                }

                //recherche des centres de billetage
                for (String niveau : niveauxAconsiderer) {
                    for (String type : typesAconsiderer) {
                        List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                        for (Centrebilletage centrebilletage : desCentrebilletages) {
                            ArrayList<Souscentre> souscentresList = new ArrayList<>();
                            if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                for (Secteurcouv sect : secteurs) {
                                    if (!souscentresList.contains(sect.getSouscentre())) {
                                        souscentresList.add(sect.getSouscentre());

                                    }
                                }
                                centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                            }
                        }
                    }
                }

                if (typeSelected.equals("GEN")) {
                    //on remplit etablissementsList
                    for (Etablissement etablissement : etablissementEffectif1Map.keySet()) {
                        etablissementsList.add(etablissement);
                    }
                    for (Etablissement etablissement : etablissementEffectif2Map.keySet()) {
                        if (!etablissementsList.contains(etablissement)) {
                            etablissementsList.add(etablissement);
                        }
                    }
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                int totalMontant = 0;
                                int num = 1;
                                if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                    for (int i = 0; i < souscentresList.size(); i++) {
                                        Souscentre souscentre = souscentresList.get(i);
                                        if (etablissementsList.contains(souscentre.getEtablissement())) {
                                            System.out.println("----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
                                            System.out.println("souscentre=" + souscentre.getNomsouscent());
                                            determinerCoutESG(etablissementEffectif1Map, etablissementEffectif2Map, souscentre.getEtablissement());
                                            int totalCMArrondi = (int) Math.ceil((double) totalCM / (double) 1000) * 1000;
                                            int totalChefsecArrondi = (int) Math.ceil((double) totalChefsec / (double) 1000) * 1000;
                                            int totalACMArrondi = (int) Math.ceil((double) totalACM / (double) 1000) * 1000;
                                            Map<String, Object> row = new HashMap<>();
                                            row.put("examen", groupedexamensEnstring);
                                            row.put("session", anneeSelected);
                                            row.put("region", region.getNomreg());
                                            row.put("reference", "");
                                            row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                            row.put("num", num++);
                                            row.put("souscentre", souscentre.getNomsouscent() + "\n\n" + nbcolisEnchaine);
                                            row.put("effectif1", effectif1);
                                            row.put("effectif2", effectif2);
                                            row.put("cm", "Chargé de Mission");
                                            row.put("chefsec", "Chef Sec.");
                                            row.put("acm", "Auxiliaire au CM");
                                            row.put("distance", distance);
                                            row.put("fraisconvAcm", fraisconvAcm);
                                            row.put("fraisconvAchefsec", fraisconvAchefsec);
                                            row.put("fraisconvBcm", fraisconvBcm);
                                            row.put("fraisconvBacm", fraisconvBacm);
                                            row.put("indemCM", indemCM);
                                            row.put("indemChefsec", indemchefsec);
                                            row.put("indemACM", indemACM);
                                            row.put("baspage", "OBC/AR/"+centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                            row.put("totalCM", totalCMArrondi);
                                            row.put("totalChefsec", totalChefsecArrondi);
                                            row.put("totalACM", totalACMArrondi);
                                            totalMontant += totalCMArrondi + totalChefsecArrondi + totalACMArrondi;//jasperreport prendra la dernière valeur de totalMontant
                                            row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                            datasource.add(row);
                                        }
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatConvoyage2Report.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    examensSelected.clear();//on vide
                    etablissementEffectif1Map.clear();
                    etablissementEffectif2Map.clear();
                } else {
                    //ici etablissementEffectif2Map seul intervient car pas d'effectif 1
                    for (Etablissement etablissement : etablissementEffectif2Map.keySet()) {
                        if (!etablissementsList.contains(etablissement)) {
                            etablissementsList.add(etablissement);
                        }
                    }
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                int totalMontant = 0;
                                int num = 1;
                                if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                    for (int i = 0; i < souscentresList.size(); i++) {
                                        Souscentre souscentre = souscentresList.get(i);
                                        if (etablissementsList.contains(souscentre.getEtablissement())) {
                                            determinerCoutESTP(etablissementEffectif2Map, souscentre.getEtablissement(), etablissementsList);
                                            int totalACMArrondi = (int) Math.ceil((double) totalACM / (double) 1000) * 1000;
                                            Map<String, Object> row = new HashMap<>();
                                            row.put("examen", groupedexamensEnstring);
                                            row.put("session", anneeSelected);
                                            row.put("region", region.getNomreg());
                                            row.put("reference", "");
                                            row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                            row.put("num", num++);
                                            row.put("souscentre", souscentre.getNomsouscent() + "\n\n" + nbcolisEnchaine);
                                            row.put("effectif2", effectif2);
                                            row.put("acm", "Auxiliaire au CM");
                                            row.put("distance", distance);
                                            row.put("fraisconvBacm", fraisconvBacm);
                                            row.put("indemACM", indemACM);
                                            row.put("baspage", "OBC/AR/"+centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                            row.put("totalACM", totalACMArrondi);
                                            totalMontant += totalACMArrondi;//jasperreport prendra la dernière valeur de totalMontant
                                            row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                            datasource.add(row);
                                        }
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatConvoyage2ESTPReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    examensSelected.clear();//on vide
                    etablissementEffectif1Map.clear();
                    etablissementEffectif2Map.clear();
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonVisualiserEtatsActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonCreerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEtatsActionPerformed
        infoSaisies();
        Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
        Map<Etablissement, Integer> etablissementEffectif1Map = new HashMap<>();//contient l'ensemble des établissements abritant les centres de regroupement avec leur effectif 1
        Map<Etablissement, Integer> etablissementEffectif2Map = new HashMap<>();//contient l'ensemble des établissements abritant les centres de regroupement ou de délibération avec leur effectif 2
        ArrayList<Etablissement> etablissementsList = new ArrayList<>();//combine les étalissements clés de etablissementEffectif1Map et ceux de etablissementEffectif2Map sans doublon
        Map<Centredispatching, ArrayList<Souscentre>> centreregroupementsouscentresMap = new HashMap<>();//contient les centres de regroupement chacun avec le tableau de ses sous-centres
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("INDEMNITE POUR CONVOYAGE 2 ET VENTILATION DES COPIES");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
            if (!caisses.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de convoyage 2 existent déjà pour ce groupe d'examens !");
            } else {
                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                //remplissage etablissementEffectif2Map
                nbcopiesdelibs = metier.findAllNbcopiesdelibD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                nbcopiesdispatchees = metier.findAllNbcopiesdispatcheesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                if (!nbcopiesdispatchees.isEmpty()) {
                    for (Nbcopiesdispatchees nbcop : nbcopiesdispatchees) {
                        etablissementEffectif2Map.put(nbcop.getCentredispatching().getEtablissement(), nbcop.getNbcopies());
                    }
                }
                if (!nbcopiesdelibs.isEmpty()) {
                    for (Nbcopiesdelib nbcop : nbcopiesdelibs) {
                        etablissementEffectif2Map.put(nbcop.getCentre().getEtablissement(), nbcop.getNbcopies());
                    }
                }

                List<Centredispatching> centresRegroupement = metier.findAllCentredispatchingD1Type("Regroupement");
                for (Centredispatching centreregroup : centresRegroupement) {
                    List<Rattachdispatching> lesRattachdispatchings = metier.findAllRattachdispatchingsD1CentredispatchingD1Type(centreregroup.getEtablissement().getAbreviation(), "Regroupement");
                    ArrayList<Souscentre> souscentresList = new ArrayList<>();//liste des sous-centres du centre de regroupement courant
                    if (!lesRattachdispatchings.isEmpty()) {
                        for (Rattachdispatching rattach : lesRattachdispatchings) {
                            if (etablissementEffectif2Map.containsKey(rattach.getSouscentre().getEtablissement())) {//on considère uniquement ceux des centres de regroupement qui ont un effectif 2
                                souscentresList.add(rattach.getSouscentre());
                            }
                        }
                        centreregroupementsouscentresMap.put(centreregroup, souscentresList);
                    }
                }

                for (Examen e : examensSelected) {
                    List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                    for (Statistique s : lesStats) {
                        if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                            int nbrecand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                            souscentreEffectifMap.put(s.getSouscentre(), nbrecand + s.getNombre());//on lui ajoute le nombre de candidats de s
                        } else {
                            souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                        }
                    }
                }

                //remplissage etablissementEffectif1Map
                for (Centredispatching centredispatch : centreregroupementsouscentresMap.keySet()) {
                    int stat = 0;
                    List<Rattachdispatching> lesRattachdispatchings = metier.findAllRattachdispatchingsD1CentredispatchingD1Type(centredispatch.getEtablissement().getAbreviation(), "Regroupement");
                    for (Rattachdispatching rattachdispatch : lesRattachdispatchings) {
                        if (souscentreEffectifMap.containsKey(rattachdispatch.getSouscentre())) {
                            stat += souscentreEffectifMap.get(rattachdispatch.getSouscentre());
                        }
                    }
                    if (stat != 0) {
                        //if (etablissementEffectif2Map.containsKey(centredispatch.getEtablissement())) {//on considère uniquement ceux des centres de regroupement qui ont un effectif 2
                        etablissementEffectif1Map.put(centredispatch.getEtablissement(), stat);//on considère tous les centres de regroupement car ils n'ont pas bénéficié de convoyage 1
                        //}
                    }
                }

                //NB: tous les établissements abritant les centres de regroupement clés de centreregroupementEffectif1Map sont tous clés dans etablissementEffectif2Map
                //donc etablissementEffectif2Map contient tous les établissements couvrant le groupe d'examens
                boolean testsicreer = false;
                if (typeSelected.equals("GEN")) {
                    //on remplit etablissementsList
                    for (Etablissement etablissement : etablissementEffectif1Map.keySet()) {
                        etablissementsList.add(etablissement);
                    }
                    for (Etablissement etablissement : etablissementEffectif2Map.keySet()) {
                        if (!etablissementsList.contains(etablissement)) {
                            etablissementsList.add(etablissement);
                        }
                    }
                    try {
                        for (Etablissement etablissement : etablissementsList) {
                            System.out.println("----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
                            System.out.println("etablissement=" + etablissement.getAbreviation());
                            determinerCoutESG(etablissementEffectif1Map, etablissementEffectif2Map, etablissement);
                            int totalCMArrondi = (int) Math.ceil((double) totalCM / (double) 1000) * 1000;
                            int totalChefsecArrondi = (int) Math.ceil((double) totalChefsec / (double) 1000) * 1000;
                            int totalACMArrondi = (int) Math.ceil((double) totalACM / (double) 1000) * 1000;
                            int net = totalCMArrondi + totalChefsecArrondi + totalACMArrondi;
                            Souscentre souscentre = metier.findSouscentreByEtablissement(etablissement.getAbreviation());
                            metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                            testsicreer = true;
                        }
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testsicreer) {
                        JOptionPane.showMessageDialog(this, "Etats de convoyage 2 créés avec succès pour ce groupe d'examens !");
                    }
                } else {
                    //ici etablissementEffectif2Map seul intervient car pas d'effectif 1
                    for (Etablissement etablissement : etablissementEffectif2Map.keySet()) {
                        if (!etablissementsList.contains(etablissement)) {
                            etablissementsList.add(etablissement);
                        }
                    }
                    try {
                        for (Etablissement etablissement : etablissementsList) {
                            determinerCoutESTP(etablissementEffectif2Map, etablissement, etablissementsList);
                            int net = (int) Math.ceil((double) totalACM / (double) 1000) * 1000;
                            Souscentre souscentre = metier.findSouscentreByEtablissement(etablissement.getAbreviation());
                            metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                            testsicreer = true;
                        }
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testsicreer) {
                        JOptionPane.showMessageDialog(this, "Etats de convoyage 2 créés avec succès pour ce groupe d'examens !");
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
        }
        examensSelected.clear();//on vide
        etablissementEffectif1Map.clear();
        etablissementEffectif2Map.clear();
    }//GEN-LAST:event_jButtonCreerEtatsActionPerformed

    private void jButtonMettreAjourEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourEtatsActionPerformed
        infoSaisies();
        Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
        Map<Etablissement, Integer> etablissementEffectif1Map = new HashMap<>();//contient l'ensemble des établissements abritant les centres de regroupement avec leur effectif 1
        Map<Etablissement, Integer> etablissementEffectif2Map = new HashMap<>();//contient l'ensemble des établissements abritant les centres de regroupement ou de délibération avec leur effectif 2
        ArrayList<Etablissement> etablissementsList = new ArrayList<>();//combine les étalissements clés de etablissementEffectif1Map et ceux de etablissementEffectif2Map sans doublon
        Map<Centredispatching, ArrayList<Souscentre>> centreregroupementsouscentresMap = new HashMap<>();//contient les centres de regroupement chacun avec le tableau de ses sous-centres
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de convoyage 2 pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("INDEMNITE POUR CONVOYAGE 2 ET VENTILATION DES COPIES");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de convoyage 2 n'existe pour ce groupe d'examens !");
                } else {
                    //on conserve quelques info de ces anciennes caisses
                    Groupe groupe = caisses.get(0).getGroupe();
                    sessionSelected = caisses.get(0).getSession();
                    //on supprime toutes les anciennes caisses du groupe d'examens
                    for (Caisse c : caisses) {
                        metier.supprimerCaisse(c);
                    }
                    //on va les recréer
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }

                    //remplissage etablissementEffectif2Map
                    nbcopiesdelibs = metier.findAllNbcopiesdelibD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    nbcopiesdispatchees = metier.findAllNbcopiesdispatcheesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!nbcopiesdispatchees.isEmpty()) {
                        for (Nbcopiesdispatchees nbcop : nbcopiesdispatchees) {
                            etablissementEffectif2Map.put(nbcop.getCentredispatching().getEtablissement(), nbcop.getNbcopies());
                        }
                    }
                    if (!nbcopiesdelibs.isEmpty()) {
                        for (Nbcopiesdelib nbcop : nbcopiesdelibs) {
                            etablissementEffectif2Map.put(nbcop.getCentre().getEtablissement(), nbcop.getNbcopies());
                        }
                    }

                    List<Centredispatching> centresRegroupement = metier.findAllCentredispatchingD1Type("Regroupement");
                    for (Centredispatching centreregroup : centresRegroupement) {
                        List<Rattachdispatching> lesRattachdispatchings = metier.findAllRattachdispatchingsD1CentredispatchingD1Type(centreregroup.getEtablissement().getAbreviation(), "Regroupement");
                        ArrayList<Souscentre> souscentresList = new ArrayList<>();//liste des sous-centres du centre de regroupement courant
                        if (!lesRattachdispatchings.isEmpty()) {
                            for (Rattachdispatching rattach : lesRattachdispatchings) {
                                if (etablissementEffectif2Map.containsKey(rattach.getSouscentre().getEtablissement())) {//on considère uniquement ceux des centres de regroupement qui ont un effectif 2
                                    souscentresList.add(rattach.getSouscentre());
                                }
                            }
                            centreregroupementsouscentresMap.put(centreregroup, souscentresList);
                        }
                    }

                    for (Examen e : examensSelected) {
                        List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                        for (Statistique s : lesStats) {
                            if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                int nbrecand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                                souscentreEffectifMap.put(s.getSouscentre(), nbrecand + s.getNombre());//on lui ajoute le nombre de candidats de s
                            } else {
                                souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                            }
                        }
                    }

                    //remplissage etablissementEffectif1Map
                    for (Centredispatching centredispatch : centreregroupementsouscentresMap.keySet()) {
                        int stat = 0;
                        List<Rattachdispatching> lesRattachdispatchings = metier.findAllRattachdispatchingsD1CentredispatchingD1Type(centredispatch.getEtablissement().getAbreviation(), "Regroupement");
                        for (Rattachdispatching rattachdispatch : lesRattachdispatchings) {
                            if (souscentreEffectifMap.containsKey(rattachdispatch.getSouscentre())) {
                                stat += souscentreEffectifMap.get(rattachdispatch.getSouscentre());
                            }
                        }
                        if (stat != 0) {
                            //if (etablissementEffectif2Map.containsKey(centredispatch.getEtablissement())) {//on considère uniquement ceux des centres de regroupement qui ont un effectif 2
                            etablissementEffectif1Map.put(centredispatch.getEtablissement(), stat);//on considère tous les centres de regroupement car ils n'ont pas bénéficié de convoyage 1
                            //}
                        }
                    }

                    //NB: tous les établissements abritant les centres de regroupement clés de centreregroupementEffectif1Map sont tous clés dans etablissementEffectif2Map
                    //donc etablissementEffectif2Map contient tous les établissements couvrant le groupe d'examens
                    boolean testsicreer = false;

                    if (typeSelected.equals("GEN")) {
                        //on remplit etablissementsList
                        for (Etablissement etablissement : etablissementEffectif1Map.keySet()) {
                            etablissementsList.add(etablissement);
                        }
                        for (Etablissement etablissement : etablissementEffectif2Map.keySet()) {
                            if (!etablissementsList.contains(etablissement)) {
                                etablissementsList.add(etablissement);
                            }
                        }
                        try {
                            for (Etablissement etablissement : etablissementsList) {
                                determinerCoutESG(etablissementEffectif1Map, etablissementEffectif2Map, etablissement);
                                int totalCMArrondi = (int) Math.ceil((double) totalCM / (double) 1000) * 1000;
                                int totalChefsecArrondi = (int) Math.ceil((double) totalChefsec / (double) 1000) * 1000;
                                int totalACMArrondi = (int) Math.ceil((double) totalACM / (double) 1000) * 1000;
                                int net = totalCMArrondi + totalChefsecArrondi + totalACMArrondi;
                                Souscentre souscentre = metier.findSouscentreByEtablissement(etablissement.getAbreviation());
                                metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                testsicreer = true;
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testsicreer) {
                            JOptionPane.showMessageDialog(this, "Etats de convoyage 2 créés avec succès pour ce groupe d'examens !");
                        }
                    } else {
                        //ici etablissementEffectif2Map seul intervient car pas d'effectif 1
                        for (Etablissement etablissement : etablissementEffectif2Map.keySet()) {
                            if (!etablissementsList.contains(etablissement)) {
                                etablissementsList.add(etablissement);
                            }
                        }
                        try {
                            for (Etablissement etablissement : etablissementsList) {
                                determinerCoutESTP(etablissementEffectif2Map, etablissement, etablissementsList);
                                int net = (int) Math.ceil((double) totalACM / (double) 1000) * 1000;
                                Souscentre souscentre = metier.findSouscentreByEtablissement(etablissement.getAbreviation());
                                metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                testsicreer = true;
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testsicreer) {
                            JOptionPane.showMessageDialog(this, "Etats de convoyage 2 créés avec succès pour ce groupe d'examens !");
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
            }
            examensSelected.clear();//on vide
            etablissementEffectif1Map.clear();
            etablissementEffectif2Map.clear();
        }
    }//GEN-LAST:event_jButtonMettreAjourEtatsActionPerformed

    private void jButtonSupprimerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEtatsActionPerformed
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de convoyage 2 pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("INDEMNITE POUR CONVOYAGE 2 ET VENTILATION DES COPIES");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de convoyage 2 n'existe pour ce groupe d'examens !");
                } else {
                    boolean testsisupprimer = false;
                    try {
                        for (Caisse caisse : caisses) {
                            metier.supprimerCaisse(caisse);
                        }
                        testsisupprimer = true;
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testsisupprimer) {
                        JOptionPane.showMessageDialog(this, "Etats de convoyage 2 supprimés avec succès pour ce groupe d'examens !");
                    }
                }
            }
        }


    }//GEN-LAST:event_jButtonSupprimerEtatsActionPerformed

    private void jButtonAnnulerChoixExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixExamenActionPerformed
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        jComboBoxSession.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixExamenActionPerformed

    private void jButtonAnnulerChoixCentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixCentreActionPerformed
        jComboBoxRegion.setSelectedIndex(0);
        jComboBoxCentreregroupement.setSelectedIndex(0);
        jComboBoxCentredeliberation.setSelectedIndex(0);
        jComboBoxDepartement.setSelectedIndex(0);
        jTextFieldFamille.setText("");
        jTextFieldType.setText("");
    }//GEN-LAST:event_jButtonAnnulerChoixCentreActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jComboBoxCentreregroupementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCentreregroupementActionPerformed
        if (jRadioButtonRegroupement.isSelected()) {
            nomCentreregroupementSelected = (String) jComboBoxCentreregroupement.getSelectedItem();
            if (!nomCentreregroupementSelected.equals("---")) {
                for (Centredispatching centredispatching : centresregroupement) {
                    if (centredispatching.getEtablissement().getAbreviation().equals(nomCentreregroupementSelected)) {
                        jTextFieldType.setText(centredispatching.getType());
                        jTextFieldFamille.setText(centredispatching.getFamille().getTitre());
                        break;
                    }
                }
            }
        }
    }//GEN-LAST:event_jComboBoxCentreregroupementActionPerformed

    private void jComboBoxRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionActionPerformed
        remplirDepartementCombobox();
    }//GEN-LAST:event_jComboBoxRegionActionPerformed

    private void jButtonCreerEffectif2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEffectif2ActionPerformed
        infoSaisies();
        if (valBoutonRadioDeliberation) {
            valBoutonRadioRegroupement = false;
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomCentredeliberationSelected.equals("---") || effectif2String.equals("")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un centre de délibétaion et donner l'effectif 2 !");
            } else {
                validerEffectif2(effectif2String);
                if (!continuer || effectif2 == 0) {
                    JOptionPane.showMessageDialog(this, "Recommencez svp. L'effectif 2 fourni est incorrect !");
                } else {
                    Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                    anneeSelected = Integer.parseInt(anneeString);
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }
                    for (Centre centre : tousLesCentresdeliberation) {
                        if (centre.getNomcent().equals(nomCentredeliberationSelected)) {
                            centredeliberationSelected = centre;
                            break;
                        }
                    }

                    try {
                        metier.creerNbcopiesdelib(new Nbcopiesdelib(centredeliberationSelected, effectif2, groupe, sessionSelected));
                        JOptionPane.showMessageDialog(this, "Effectif 2 enregistré avec succès !");
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de d'enregistrer l'effectif 2 dans le centre de délibération [" + nomCentredeliberationSelected + "]" + "\n raison:" + ex.getMessage());
                    }
                }
            }
        }
        if (valBoutonRadioRegroupement) {
            valBoutonRadioDeliberation = false;
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomCentreregroupementSelected.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un centre de regroupement et donner l'effectif 2 !");
            } else {
                validerEffectif2(effectif2String);
                if (!continuer || effectif2 == 0) {
                    JOptionPane.showMessageDialog(this, "Recommencez svp. L'effectif 2 fourni est incorrect !");
                } else {
                    Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                    anneeSelected = Integer.parseInt(anneeString);
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }
                    for (Centredispatching centredispatch : tousLesCentresregroupement) {
                        if (centredispatch.getEtablissement().getAbreviation().equals(nomCentreregroupementSelected)) {
                            centreregroupementSelected = centredispatch;
                            break;
                        }
                    }

                    try {
                        metier.creerNbcopiesdispatchees(new Nbcopiesdispatchees(centreregroupementSelected, effectif2, groupe, sessionSelected));
                        JOptionPane.showMessageDialog(this, "Effectif 2 enregistré avec succès !");
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de d'enregistrer l'effectif 2 dans le centre de regroupement [" + nomCentreregroupementSelected + "]" + "\n raison:" + ex.getMessage());
                    }
                }
            }
        }
        if (!valBoutonRadioDeliberation && !valBoutonRadioRegroupement) {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Vous devez choisir centre de regroupement ou centre de délibération !");
        }
    }//GEN-LAST:event_jButtonCreerEffectif2ActionPerformed

    private void jButtonSupprimerEffectif2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEffectif2ActionPerformed
        infoSaisies();
        if (valBoutonRadioDeliberation) {
            valBoutonRadioRegroupement = false;
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomCentredeliberationSelected.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session et un centre de délibération !");
            } else {
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer l'effectif 2 du centre de délibération [" + nomCentredeliberationSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    anneeSelected = Integer.parseInt(anneeString);
                    try {
                        Nbcopiesdelib nbcop = metier.findNbcopiesdelibD1CentredeliberationD1GroupedexamensD1Session(nomCentredeliberationSelected, anneeSelected, niveauSelected, typeSelected);
                        metier.supprimerNbcopiesdelib(nbcop);
                        JOptionPane.showMessageDialog(this, "Effectif 2 supprimé avec succès !");
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de supprimer l'effectif 2 du centre de délibération [" + nomCentredeliberationSelected + "] \n raison:" + ex.getMessage());
                    }
                }
            }
        }
        if (valBoutonRadioRegroupement) {
            valBoutonRadioDeliberation = false;
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomCentreregroupementSelected.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session et un centre de regroupement !");
            } else {
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer l'effectif 2 du centre de regroupement [" + nomCentreregroupementSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    anneeSelected = Integer.parseInt(anneeString);
                    try {
                        Nbcopiesdispatchees nbcop = metier.findNbcopiesdispatcheesD1CentreregroupementD1GroupedexamensD1Session(nomCentreregroupementSelected, anneeSelected, niveauSelected, typeSelected);
                        metier.supprimerNbcopiesdispatchees(nbcop);
                        JOptionPane.showMessageDialog(this, "Effectif 2 supprimé avec succès !");
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de supprimer l'effectif 2 du centre de regroupement [" + nomCentreregroupementSelected + "] \n raison:" + ex.getMessage());
                    }
                }
            }
        }
        if (!valBoutonRadioDeliberation && !valBoutonRadioRegroupement) {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Vous devez choisir centre de regroupement ou centre de délibération !");
        }
    }//GEN-LAST:event_jButtonSupprimerEffectif2ActionPerformed

    private void jButtonListerEffectif2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerEffectif2ActionPerformed
        infoSaisies();
        Map<Etablissement, Integer> etablissementEffectif2Map = new HashMap<>();//contient chaque établissement abritant le centre de délibération ou de regroupement avec l'effectif 2 correspondant
        if (groupedexamensEnstring.equals("") || anneeString.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens et une session !");
        } else {
            anneeSelected = Integer.parseInt(anneeString);
            nbcopiesdelibs = metier.findAllNbcopiesdelibD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
            nbcopiesdispatchees = metier.findAllNbcopiesdispatcheesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
            if (!nbcopiesdispatchees.isEmpty()) {
                for (Nbcopiesdispatchees nbcop : nbcopiesdispatchees) {
                    etablissementEffectif2Map.put(nbcop.getCentredispatching().getEtablissement(), nbcop.getNbcopies());
                }
            }
            if (!nbcopiesdelibs.isEmpty()) {
                for (Nbcopiesdelib nbcop : nbcopiesdelibs) {
                    etablissementEffectif2Map.put(nbcop.getCentre().getEtablissement(), nbcop.getNbcopies());
                }
            }

            if (!nbcopiesdelibs.isEmpty() || !nbcopiesdispatchees.isEmpty()) {
                try {
                    List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                    for (Region region : regions) {
                        int i = 1;
                        for (Etablissement etab : etablissementEffectif2Map.keySet()) {
                            if (etab.getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                                Map<String, Object> row = new HashMap<>();
                                row.put("session", anneeSelected);
                                row.put("examen", groupedexamensEnstring);
                                row.put("region", region.getNomreg());
                                row.put("num", i++);
                                row.put("etablissement", etab.getAbreviation());
                                row.put("effectif2", etablissementEffectif2Map.get(etab));
                                datasource.add(row);
                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeEffectif2Report.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Aucun effectif 2 trouvé dans la base de données !");
            }
        }
        etablissementEffectif2Map.clear();
    }//GEN-LAST:event_jButtonListerEffectif2ActionPerformed

    private void jRadioButtonRegroupementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonRegroupementActionPerformed
        jComboBoxCentredeliberation.setEnabled(false);
        jComboBoxCentreregroupement.setEnabled(true);
        jComboBoxCentredeliberation.setSelectedIndex(0);
    }//GEN-LAST:event_jRadioButtonRegroupementActionPerformed

    private void jRadioButtonDeliberationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonDeliberationActionPerformed
        jComboBoxCentreregroupement.setEnabled(false);
        jComboBoxCentredeliberation.setEnabled(true);
        jComboBoxCentreregroupement.setSelectedIndex(0);
        jTextFieldFamille.setText("");
        jTextFieldType.setText("");

    }//GEN-LAST:event_jRadioButtonDeliberationActionPerformed

    private void jComboBoxDepartementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementActionPerformed
        if (jRadioButtonRegroupement.isSelected()) {
            remplirCentreregroupementCombobox();
        } else if (jRadioButtonDeliberation.isSelected()) {
            remplirCentredeliberationCombobox();
        }
    }//GEN-LAST:event_jComboBoxDepartementActionPerformed

    private void jComboBoxCentredeliberationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCentredeliberationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxCentredeliberationActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatConvoyage2.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatConvoyage2.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatConvoyage2.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatConvoyage2.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatConvoyage2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonAnnulerChoixCentre;
    private javax.swing.JButton jButtonAnnulerChoixExamen;
    private javax.swing.JButton jButtonCreerEffectif2;
    private javax.swing.JButton jButtonCreerEtats;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonListerEffectif2;
    private javax.swing.JButton jButtonMettreAjourEtats;
    private javax.swing.JButton jButtonSupprimerEffectif2;
    private javax.swing.JButton jButtonSupprimerEtats;
    private javax.swing.JButton jButtonVisualiserEtats;
    private javax.swing.JComboBox<String> jComboBoxCentredeliberation;
    private javax.swing.JComboBox<String> jComboBoxCentreregroupement;
    private javax.swing.JComboBox<String> jComboBoxDepartement;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxRegion;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabeFamille;
    private javax.swing.JLabel jLabeType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelDepartement;
    private javax.swing.JLabel jLabelEffectif;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelNomCentreDispatching;
    private javax.swing.JLabel jLabelNomCentredeliberation;
    private javax.swing.JLabel jLabelRegion;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanelCentres;
    private javax.swing.JPanel jPanelChoixCentre;
    private javax.swing.JPanel jPanelChoixExamen;
    private javax.swing.JPanel jPanelGestionEtat;
    private javax.swing.JPanel jPanelJurys;
    private javax.swing.JRadioButton jRadioButtonDeliberation;
    private javax.swing.JRadioButton jRadioButtonRegroupement;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldEffectif2;
    private javax.swing.JTextField jTextFieldFamille;
    private javax.swing.JTextField jTextFieldType;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Region> regions = null;
    private List<Examen> examens = null;
    private Examen examenSelected = null;
    private String[] examensList = null;
    private List<Examen> examensSelected = new ArrayList<>();
    private List<Departement> departements = null;
    private String[] sessionsCombo = null;
    private String[] regionsCombo = null;
    private String[] departementsCombo = null;
    private String[] centresregroupementCombo = null;
    private String[] centresdeliberationCombo = null;
    private String nomRegionSelected = "";
    private String nomCentreregroupementSelected = "";
    private String nomCentredeliberationSelected = "";
    private String nomDepartementSelected = "";
    private List<Centredispatching> centresregroupement = null;
    private List<Centredispatching> tousLesCentresregroupement = null;
    private List<Centre> centresdeliberation = null;
    private List<Centre> tousLesCentresdeliberation = null;
    private Centre centredeliberationSelected = null;
    private Centredispatching centreregroupementSelected = null;
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private String phase = "ECRIT";
    private List<Caisse> caisses = null;
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private int tauxcolis = 500, nbplaces = 0, coutplace = 14, nbcolis1 = 0, nbcolis2 = 0, prixplace = 0, distance = 0, fraisconvAcm = 0, fraisconvAchefsec = 0, fraisconvBcm = 0, fraisconvBacm = 0, indemchefsec = 0, indemCM = 0, indemACM = 0, totalCM = 0, totalChefsec = 0, totalACM = 0;
    private int[] tabColis1 = new int[3];
    private int[] tabColis2 = new int[3];
    private boolean valBoutonRadioRegroupement = false;
    private boolean valBoutonRadioDeliberation = false;
    private String phasesPourAffichage = "";
    private boolean continuer = false;
    private int effectif1 = 0;
    private String effectif2String = "";
    private int effectif2 = 0;
    private List<Nbcopiesdelib> nbcopiesdelibs = null;
    private List<Nbcopiesdispatchees> nbcopiesdispatchees = null;
    private List<Rattachregroupement> rattachregroupements = null;
    private String nbcolisEnchaine = "";
    private String nbcolisEnchaine1 = "";
    private String nbcolisEnchaine2 = "";
    private boolean resultTestRattacherAventilationSpeciale = false;
    private Rattachventilation rattachdispatchingAventilationSpeciale = null;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        regions = metier.findAllRegions();
        examens = metier.findAllExamens();
        tousLesCentresdeliberation = metier.findAllCentres();
        tousLesCentresregroupement = metier.findAllCentredispatchingD1Type("Regroupement");
        rattachregroupements = metier.findAllRattachregroupements();

        //on remplit la combobox des régions du sous-centre
        regionsCombo = new String[regions.size() + 1];
        regionsCombo[0] = "---";
        int i = 1;
        for (Region region : regions) {
            regionsCombo[i++] = region.getNomreg();
        }
        jComboBoxRegion.setModel(new DefaultComboBoxModel(regionsCombo));

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int k = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[k++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "GEN", "IND", "IND PROF", "STT", "STT PROF", "TOUT", "TOUT ESTI", "TOUT STT", "TOUT ESTP"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC", "TOUT"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        jComboBoxCentreregroupement.setEnabled(false);
        jComboBoxCentredeliberation.setEnabled(false);
        buttonGroup1.add(jRadioButtonDeliberation);
        buttonGroup1.add(jRadioButtonRegroupement);
    }

    private void infoSaisies() {
        if (jRadioButtonDeliberation.isSelected()) {
            valBoutonRadioDeliberation = true;
            valBoutonRadioRegroupement = false;
        }
        if (jRadioButtonRegroupement.isSelected()) {
            valBoutonRadioRegroupement = true;
            valBoutonRadioDeliberation = false;
        }
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        nomCentreregroupementSelected = (String) jComboBoxCentreregroupement.getSelectedItem();
        nomCentredeliberationSelected = (String) jComboBoxCentredeliberation.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        effectif2String = jTextFieldEffectif2.getText();
    }

    private void remplirDepartementCombobox() {
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        departements = metier.findAllDepartementsD1Region(nomRegionSelected);
        //on remplit la combobox des départements
        departementsCombo = new String[departements.size() + 1];
        departementsCombo[0] = "---";
        int i = 1;
        for (Departement departement : departements) {
            departementsCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartement.setModel(new DefaultComboBoxModel(departementsCombo));
    }

    private void remplirCentreregroupementCombobox() {
        if (jRadioButtonRegroupement.isSelected()) {
            nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
            centresregroupement = metier.findAllCentresdispatchingD1TypeD1Departement("Regroupement", nomDepartementSelected);
            //on remplit la combobox des centres de regroupement
            centresregroupementCombo = new String[centresregroupement.size() + 1];
            centresregroupementCombo[0] = "---";
            int i = 1;
            for (Centredispatching centredispatching : centresregroupement) {
                centresregroupementCombo[i++] = centredispatching.getEtablissement().getAbreviation();
            }
            jComboBoxCentreregroupement.setModel(new DefaultComboBoxModel(centresregroupementCombo));
        }

    }

    private void remplirCentredeliberationCombobox() {
        if (jRadioButtonDeliberation.isSelected()) {
            nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
            centresdeliberation = metier.findAllCentresD1Departement(nomDepartementSelected);
            //on remplit la combobox des centres de délibération
            centresdeliberationCombo = new String[centresdeliberation.size() + 1];
            centresdeliberationCombo[0] = "---";
            int i = 1;
            for (Centre centre : centresdeliberation) {
                centresdeliberationCombo[i++] = centre.getNomcent();
            }
            jComboBoxCentredeliberation.setModel(new DefaultComboBoxModel(centresdeliberationCombo));
        }
    }

    private void validerEffectif2(String nbreString) {
        try {
            effectif2 = Integer.parseInt(nbreString);
            continuer = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, " L'effectif 2 doit être fourni et contenir uniquement des chiffres entiers!");
            continuer = false;
        }
    }

    private void determinerCoutESG(Map<Etablissement, Integer> etablissementEffectif1Map, Map<Etablissement, Integer> etablissementEffectif2Map, Etablissement etablissement) {
        Souscentre souscentre = metier.findSouscentreByEtablissement(etablissement.getAbreviation());
        effectif1 = 0;
        effectif2 = 0;
        tauxcolis = 500;
        if (etablissementEffectif1Map.containsKey(etablissement)) {//centre de regroupement uniquement. ie qui a l'effectif 1
            effectif1 = etablissementEffectif1Map.get(etablissement);
            if (etablissementEffectif2Map.containsKey(etablissement)) {
                effectif2 = etablissementEffectif2Map.get(etablissement);//sinon effectif2=0: cas des centres de regroupement qui ne corrige pas
            }            //déterminer la distance
            //si le sous-centre est centre de regroupement sa distance est issue de rattachregroupement
            Centredispatching centreregroupement = metier.findCentredispatchingD1TypeByEtablissement(etablissement.getAbreviation(), "Regroupement");
            Rattachregroupement rattachregroup = metier.findRattachregroupementD1Centreregroupement(centreregroupement.getEtablissement().getAbreviation());
            distance = rattachregroup.getDistance();
            prixplace = rattachregroup.getPrixplace();

            if (testerSiRattacherAcentreventilationSpecial(souscentre) && testSiCentreDeRegroupement(souscentre) && testSiCentreDeVentilation(souscentre)) {//centre de regroupement et de ventilation qui se déplace.
                Centredispatching centreventilation = metier.findCentredispatchingD1TypeByEtablissement(etablissement.getAbreviation(), "Ventilation");
                Rattachventilation rattachventil = metier.findRattachventilationD1Centreventilation(centreventilation.getEtablissement().getAbreviation());
                distance = rattachventil.getDistance();
                prixplace = rattachventil.getPrixplace();
            }

            tabColis1[0] = (int) Math.ceil((double) effectif1 / (double) 50);
            tabColis1[1] = (int) Math.ceil((double) effectif1 / (double) 100);
            tabColis1[2] = (int) Math.ceil((double) effectif1 / (double) 100);
            nbcolis1 = tabColis1[0] + tabColis1[1] + tabColis1[2];
            nbcolisEnchaine1 = "(" + tabColis1[0] + "," + tabColis1[1] + "," + tabColis1[2] + ")";

            tabColis2[0] = (int) Math.ceil((double) effectif2 / (double) 50);
            tabColis2[1] = (int) Math.ceil((double) effectif2 / (double) 100);
            tabColis2[2] = (int) Math.ceil((double) effectif2 / (double) 100);
            nbcolis2 = tabColis2[0] + tabColis2[1] + tabColis2[2];
            nbcolisEnchaine2 = "(" + tabColis2[0] + "," + tabColis2[1] + "," + tabColis2[2] + ")";

            nbcolisEnchaine = nbcolisEnchaine1 + " / " + nbcolisEnchaine2;
            if (testSiCentreDeRegroupement(souscentre) && (testSiCentreDeVentilation(souscentre) || testSiCentreDeVentilationSpecial(souscentre)) && distance == 0) {
                tauxcolis = 300;//centre de regroupement et de ventilation qui ne se déplace pas. 
            }            //pour tout sous-centre on loue un bus de 30 places. On prend 15 pour le calcul de conv A et 15 pour conv B
            fraisconvAcm = tauxcolis * nbcolis1 + 15 * prixplace;
            fraisconvAchefsec = prixplace;
            fraisconvBcm = tauxcolis * ((int) Math.ceil((double) nbcolis2 / (double) 2)) + 15 * prixplace;
            fraisconvBacm = tauxcolis * ((int) Math.ceil((double) nbcolis2 / (double) 2)) + 15 * prixplace;
            if (distance == 0 && !testSiCentreDeVentilation(souscentre)) {//on donne un forfait de 5000 F de transport pour les centres urbains ie distance=0
                fraisconvBcm = tauxcolis * ((int) Math.ceil((double) nbcolis2 / (double) 2)) + 5000;
                fraisconvBacm = tauxcolis * ((int) Math.ceil((double) nbcolis2 / (double) 2)) + 5000;
            }
            if (effectif2 == 0) {
                fraisconvBcm = 0;
                fraisconvBacm = 0;
            }

        } else if (etablissementEffectif2Map.containsKey(etablissement)) {//centre de regroupement ou centre de délibération non regroupement. ie qui a l'effectif 2
            if (!testSiCentreDeRegroupement(souscentre)) {//ici le sous-centre ne doit pas être regroupement
                effectif1 = 0;
                effectif2 = etablissementEffectif2Map.get(etablissement);

                //déterminer la distance
                //si le sous-centre est centre de délibération sa distance est issue de rattachdispatching (à son centre de ventilation car il est également rattaché à un centre de regroupement)
                //on utilise son rattachdispatching au centre de ventilation
                rattachregroupements = metier.findAllRattachregroupements();
                Rattachregroupement sonRattachregroupement = new Rattachregroupement();
                for (Rattachregroupement rattach : rattachregroupements) {
                    if (rattach.getEtablissement().getAbreviation().equals(etablissement.getAbreviation())) {
                        sonRattachregroupement = rattach;
                    }
                }

                distance = sonRattachregroupement.getDistance();
                prixplace = sonRattachregroupement.getPrixplace();

                nbcolis1 = 0;
                tabColis2[0] = (int) Math.ceil((double) effectif2 / (double) 50);
                tabColis2[1] = (int) Math.ceil((double) effectif2 / (double) 100);
                tabColis2[2] = (int) Math.ceil((double) effectif2 / (double) 100);
                nbcolis2 = tabColis2[0] + tabColis2[1] + tabColis2[2];
                nbcolisEnchaine2 = "(" + tabColis2[0] + "," + tabColis2[1] + "," + tabColis2[2] + ")";

                nbcolisEnchaine = nbcolisEnchaine2;

                //pour tout sous-centre on loue un bus de 30 places. On prend 15 pour le calcul de conv A et 15 pour conv B
                fraisconvAcm = 0;
                fraisconvAchefsec = 0;
                fraisconvBcm = tauxcolis * ((int) Math.ceil((double) nbcolis2 / (double) 2)) + 30 * prixplace;
                fraisconvBacm = tauxcolis * ((int) Math.ceil((double) nbcolis2 / (double) 2)) + 30 * prixplace;
                if (distance == 0 && !testSiCentreDeVentilation(souscentre)) {//on donne un forfait de 5000 F de transport pour les centres urbains non ventilation ie distance=0
                    if (!testSiCentreDeVentilation(souscentre)) {
                        fraisconvBcm = tauxcolis * ((int) Math.ceil((double) nbcolis2 / (double) 2)) + 5000;
                        fraisconvBacm = tauxcolis * ((int) Math.ceil((double) nbcolis2 / (double) 2)) + 5000;
                    }
                }
            }
        }

        indemCM = 50000;
        indemchefsec = 25000;
        indemACM = 25000;

        if (distance == 0) {
            indemCM = 0;
            indemchefsec = 0;
            indemACM = 0;
        }

        totalCM = fraisconvAcm + fraisconvBcm + indemCM;
        totalChefsec = fraisconvAchefsec + indemchefsec;
        totalACM = fraisconvBacm + indemACM;
    }

    //acheminement des copies à corriger des centres de ventilation vers les centres de correction par les ACM donc effectif1=0
    private void determinerCoutESTP(Map<Etablissement, Integer> etablissementEffectif2Map, Etablissement etablissement, ArrayList<Etablissement> etablissementsList) {
        effectif2 = 0;
        tauxcolis = 500;
        if (etablissementsList.contains(etablissement)) {//centre de regroupement ou centre de délibération non regroupement. ie qui a l'effectif 2
            effectif2 = etablissementEffectif2Map.get(etablissement);
            //déterminer la distance
            //ce sous-centre est soit centre de délibération soit centre de regroupement. Sa distance est issue de rattachregroupement
            //on utilise son rattachregroupement
            rattachregroupements = metier.findAllRattachregroupements();
            Rattachregroupement sonRattachregroupement = new Rattachregroupement();
            for (Rattachregroupement rattach : rattachregroupements) {
                if (rattach.getEtablissement().getAbreviation().equals(etablissement.getAbreviation())) {
                    sonRattachregroupement = rattach;
                }
            }
            distance = sonRattachregroupement.getDistance();
            prixplace = sonRattachregroupement.getPrixplace();

            nbcolis1 = 0;
            tabColis2[0] = (int) Math.ceil((double) effectif2 / (double) 50);
            tabColis2[1] = 0;
            tabColis2[2] = 0;
            //chez STT au conv 2 il n'y a que les copies d'où 2ème et 3ème élts nuls 
            //tabColis2[1] = (int) Math.ceil((double) effectif2 / (double) 100);
            //tabColis2[2] = (int) Math.ceil((double) effectif2 / (double) 100);

            nbcolis2 = tabColis2[0] + tabColis2[1] + tabColis2[2];
            nbcolisEnchaine2 = "(" + tabColis2[0] + "," + tabColis2[1] + "," + tabColis2[2] + ")";

            nbcolisEnchaine = nbcolisEnchaine2;

            Souscentre souscentre = metier.findSouscentreByEtablissement(etablissement.getAbreviation());
            if (distance == 0 && testSiCentreDeVentilation(souscentre)) {
                fraisconvBacm = tauxcolis * nbcolis2;
            }
            if (distance == 0 && !testSiCentreDeVentilation(souscentre)) {//on donne un forfait de 3000 F de transport pour les centres urbains non ventilation
                fraisconvBacm = tauxcolis * nbcolis2 + 3000;
            }
            if (distance > 0 && distance / 2 <= 100) {//on donne un forfait de 5000 F de transport pour l'aller
                fraisconvBacm = tauxcolis * nbcolis2 + 14 * prixplace + 5000;
            }
            if (distance / 2 > 100 && distance / 2 <= 200) {//on donne un forfait de 10000 F de transport pour l'aller
                fraisconvBacm = tauxcolis * nbcolis2 + 14 * prixplace + 10000;
            }
            if (distance / 2 > 200) {//on donne un forfait de 15000 F de transport pour l'aller
                fraisconvBacm = tauxcolis * nbcolis2 + 14 * prixplace + 15000;
            }
        }

        indemACM = 25000;

        if (distance == 0) {
            indemACM = 0;
        }
        totalACM = fraisconvBacm + indemACM;
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    private boolean testSiCentreDeRegroupement(Souscentre souscentre) {
        //NB: un sous-centre abrité par un établissement qui abrite aussi un centres de regroupement ne bénéficie pas des frais de secrétariat d'examen
        //on déterminent la liste des centres de regroupement
        List<Centredispatching> centresRegroupement = metier.findAllCentredispatchingD1Type("Regroupement");
        boolean valTest = false;
        for (Centredispatching centreregroupement : centresRegroupement) {
            if (centreregroupement.getEtablissement().getNometab().equals(souscentre.getEtablissement().getNometab())) {
                //le même établissement abrite ce sous-centre et un centre de regroupement
                valTest = true;
                break;
            }
        }
        return valTest;
    }

    private boolean testSiCentreDeVentilation(Souscentre souscentre) {
        //on déterminent la liste des centres de ventilation
        List<Centredispatching> centresVentilation = metier.findAllCentredispatchingD1Type("Ventilation");
        boolean valTest = false;
        for (Centredispatching centreventilation : centresVentilation) {
            if (centreventilation.getEtablissement().getNometab().equals(souscentre.getEtablissement().getNometab())) {
                //le même établissement abrite ce sous-centre et un centre de ventilation
                valTest = true;
                break;
            }
        }
        return valTest;
    }

    private boolean testerSiRattacherAcentreventilationSpecial(Souscentre souscentre) {
        resultTestRattacherAventilationSpeciale = false;
        try {
            rattachdispatchingAventilationSpeciale = metier.findRattachventilationD1Centreventilation(souscentre.getEtablissement().getAbreviation());//cet établissement abrite en même temps un centre de ventilation rattaché à un centre de ventilation spécial
            resultTestRattacherAventilationSpeciale = true;
        } catch (ObcbudgetException ex) {
            resultTestRattacherAventilationSpeciale = false;
        }
        return resultTestRattacherAventilationSpeciale;
    }

    private boolean testSiCentreDeVentilationSpecial(Souscentre souscentre) {
        //on déterminent la liste des centres de ventilation spéciaux
        List<Centredispatching> centresVentilationSpeciaux = metier.findAllCentredispatchingD1Type("Ventilation spéciale");
        boolean valTest = false;
        for (Centredispatching centreventilationspec : centresVentilationSpeciaux) {
            if (centreventilationspec.getEtablissement().getNometab().equals(souscentre.getEtablissement().getNometab())) {
                //le même établissement abrite ce sous-centre et un centre de ventilation spécial
                valTest = true;
                break;
            }
        }
        return valTest;
    }
}
