package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Caisse;
import couche_jpa.Centrebilletage;
import couche_jpa.Centredispatching;
import couche_jpa.Examen;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Nature;
import couche_jpa.Naturesecretariat;
import couche_jpa.Nbepreuveprof;
import couche_jpa.Rattachdispatching;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Scentaplus;
import couche_jpa.Secretariat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_jpa.Statistique;
import couche_jpa.Statsecretariat;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueEtatSecretariat extends javax.swing.JFrame {

    public VueEtatSecretariat() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonVisualiser = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jLabelExamen = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButtonCreer = new javax.swing.JButton();
        jButtonMettreAjour = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jRadioButtonCentresEtsouscentres = new javax.swing.JRadioButton();
        jRadioButtonCentresRegroupement = new javax.swing.JRadioButton();
        jCheckBoxAdditifCenteregroupement = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT SECRETARIAT");

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonVisualiser.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiser.setText("Visualiser l'état");
        jButtonVisualiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserActionPerformed(evt);
            }
        });

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jButtonAnnuler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(204, 255, 0));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Groupe d'examens", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxNiveau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNiveauActionPerformed(evt);
            }
        });

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE))
                .addContainerGap())
        );

        jButtonCreer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreer.setText("Créer");
        jButtonCreer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerActionPerformed(evt);
            }
        });

        jButtonMettreAjour.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjour.setText("Mettre à jour");
        jButtonMettreAjour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourActionPerformed(evt);
            }
        });

        jButtonSupprimer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jRadioButtonCentresEtsouscentres.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jRadioButtonCentresEtsouscentres.setText(" Des centres et sous-centres d'examens");
        jRadioButtonCentresEtsouscentres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonCentresEtsouscentresActionPerformed(evt);
            }
        });

        jRadioButtonCentresRegroupement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jRadioButtonCentresRegroupement.setText(" Des centres de regroupement");
        jRadioButtonCentresRegroupement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonCentresRegroupementActionPerformed(evt);
            }
        });

        jCheckBoxAdditifCenteregroupement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jCheckBoxAdditifCenteregroupement.setText("Additif");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(260, 260, 260))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(jButtonCreer)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonMettreAjour)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonVisualiser)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSupprimer)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnuler)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(399, 399, 399)
                        .addComponent(jLabelSession)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(311, 311, 311)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jRadioButtonCentresRegroupement)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jCheckBoxAdditifCenteregroupement))
                                .addComponent(jRadioButtonCentresEtsouscentres)))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(228, 228, 228)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(85, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jRadioButtonCentresEtsouscentres)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonCentresRegroupement)
                    .addComponent(jCheckBoxAdditifCenteregroupement))
                .addGap(24, 24, 24)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonSupprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonMettreAjour, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCreer, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonVisualiser, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnuler, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonFermer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonVisualiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserActionPerformed
        infoSaisies();
        if (jRadioButtonCentresEtsouscentres.isSelected()) {
            Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
            Map<Souscentre, Integer> souscentreNbMaxEpreuveMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre maximal d'épreuves professionnelles pratiques contraignantes
            List<Souscentre> tousLesScentaplus = new ArrayList<>();//liste de tous les sous-centres à plus organisant les examens sélectionnés
            Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
            List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session 
            List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats 
            Map<Secretariat, Integer> secretariatEffectifMap = new HashMap<>();//contient l'ensemble des secrétariats d'un groupe d'examens avec chacun avec son nombre de candidats
            Map<Secretariat, ArrayList<Character>> activitesSecretariatMap = new HashMap<>();//contient l'ensemble des secretariats chacun avec la liste des iniatiales de ses activités 
            Map<Souscentre, ArrayList<Secretariat>> souscentreSecretariatsMap = new HashMap<>();//contient les sous-centres chacun avec la liste de ses secretariats le cas échéant
            Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
            ArrayList<String> typesBruts = new ArrayList<>();
            ArrayList<String> typesAconsiderer = new ArrayList<>();
            ArrayList<String> niveauxAconsiderer = new ArrayList<>();
            List<Souscentre> souscentresNosoList = new ArrayList<>();//contient l'ensemble des sous-centres du NOSO plus L.KOZA, L.MAKARI, L.BLANGOUA,L.OUZAL,L.MORA 
            List<Souscentre> souscentresArisquesExtNordList = new ArrayList<>();//contient l'ensemble des sous-centres du NOSO plus L.KOZA, L.MAKARI, L.BLANGOUA,L.OUZAL,L.MORA 
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("SECRÉTARIAT D'EXAMEN");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);

                boolean continuer = false;
                for (Caisse c : caisses) {
                    if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                        continuer = true;
                        break;
                    }
                }
                if (!continuer) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états de secrétariat d'examen n'ont pas encore été créés pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    for (Examen e : examensSelected) {
                        List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                        for (Statistique s : lesStats) {
                            if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                int nbcand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                                souscentreEffectifMap.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                            } else {
                                souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                            }
                            Nbepreuveprof nbepreuveprof = metier.findAllNbepreuveprofsD1ExamenEtD1Option(e.getSigle(), s.getOption().getSigle());//s'il existe, il est unique
                            if (souscentreNbMaxEpreuveMap.containsKey(s.getSouscentre())) {
                                int nb = souscentreNbMaxEpreuveMap.get(s.getSouscentre());
                                souscentreNbMaxEpreuveMap.put(s.getSouscentre(), max(nb, nbepreuveprof.getNbprofpratique1()));
                            } else {
                                souscentreNbMaxEpreuveMap.put(s.getSouscentre(), nbepreuveprof.getNbprofpratique1());
                            }
                        }
                        List<Scentaplus> scentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, e.getSigle());
                        for (Scentaplus s : scentaplus) {
                            if (!tousLesScentaplus.contains(s.getSouscentre())) {
                                tousLesScentaplus.add(s.getSouscentre());
                            }
                        }
                        List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                        for (Nature n : lesNats) {
                            Souscentre unSouscentre = n.getSouscentre();
                            if (!souscentreList.contains(unSouscentre)) {
                                souscentreList.add(unSouscentre);
                            }
                        }
                        for (int j = 0; j < souscentreList.size(); j++) {
                            ArrayList<Character> phasesList = new ArrayList<>();
                            Souscentre s = souscentreList.get(j);
                            for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                    if (!phasesList.contains(n.getActivite().getInitiale())) {
                                        phasesList.add(n.getActivite().getInitiale());
                                    }
                                    //pas de break ici car on doit parcourir tous lesNats
                                }
                            }
                            if (!souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {
                                souscentrePhasesMap.put(s, phasesList);
                            }
                            if (souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                for (int k = 0; k < phasesList.size(); k++) {
                                    if (!phasesList1.contains(phasesList.get(k))) {
                                        phasesList1.add(phasesList.get(k));
                                    }
                                }
                                Collections.sort(phasesList1);
                                souscentrePhasesMap.put(s, phasesList1);
                            }
                        }
                    }
                    //remplissage de souscentresArisquesList
                    souscentresNosoList = metier.findAllSouscentresNoso();//de l'ESG
                    souscentresArisquesExtNordList = metier.findAllSouscentresArisquesExtNord();
                    //remplissage souscentreAsecretariatsDemultipliesList
                    secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                    if (!secretariats.isEmpty()) {
                        for (Secretariat sec : secretariats) {
                            if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                                souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                            }
                        }
                    }

                    //remplissage secretariatEffectifMap
                    for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                        List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreEtSession(souscentre.getNomsouscent(), anneeSelected);
                        if (!secretariatsList.isEmpty()) {
                            for (Secretariat sec : secretariatsList) {
                                int stat = 0;
                                List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                                for (Statsecretariat statsec : statsecretariatsList) {
                                    if (statsec.getSecretariat().getNumsec() == sec.getNumsec() && statsec.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                        stat += statsec.getNombre();
                                    }
                                }
                                secretariatEffectifMap.put(sec, stat);
                            }
                        }
                    }

                    //remplissage activitesSecretariatMap
                    List<Naturesecretariat> lesNatsec = metier.findAllNaturesecretariatsD1Session(anneeSelected);
                    for (Secretariat sec : secretariatEffectifMap.keySet()) {
                        ArrayList<Character> phasesList2 = new ArrayList<>();
                        for (Naturesecretariat natsec : lesNatsec) {
                            if (sec.getNumsec() == natsec.getSecretariat().getNumsec() && sec.getSouscentre().getNomsouscent().equals(natsec.getSecretariat().getSouscentre().getNomsouscent())) {
                                if (!phasesList2.contains(natsec.getActivite().getInitiale())) {
                                    phasesList2.add(natsec.getActivite().getInitiale());
                                }
                            }
                        }
                        Collections.sort(phasesList2);
                        activitesSecretariatMap.put(sec, phasesList2);
                    }

                    //remplissage de souscentreSecretariatsMap
                    for (Souscentre souscentre : souscentreEffectifMap.keySet()) {
                        ArrayList<Secretariat> secretariatsList = new ArrayList<>();
                        for (Secretariat sec : secretariatEffectifMap.keySet()) {
                            if (sec.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                if (!secretariatsList.contains(sec)) {
                                    secretariatsList.add(sec);
                                }
                            }
                        }
                        if (!secretariatsList.isEmpty()) {
                            ordonnerSecretariatsD1souscentre(secretariatsList);
                            souscentreSecretariatsMap.put(souscentre, secretariatsList);
                        }
                    }

                    //recherche des types des examens à utiliser
                    for (Examen examen : examensSelected) {
                        System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                        if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                            typesBruts.add("ESG");
                        }
                        if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                            typesBruts.add("ESTP");
                        }
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 2) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    //recherche des niveaux des examens à utiliser
                    if (!niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add(niveauSelected);
                        niveauxAconsiderer.add("TOUT");
                    }
                    if (niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add("PROB");
                        niveauxAconsiderer.add("BACC");
                        niveauxAconsiderer.add("TOUT");
                    }
                    //recherche des centres de billetage
                    for (String niveau : niveauxAconsiderer) {
                        for (String type : typesAconsiderer) {
                            List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                            for (Centrebilletage centrebilletage : desCentrebilletages) {
                                ArrayList<Souscentre> souscentresList = new ArrayList<>();
                                if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                    List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                    for (Secteurcouv sect : secteurs) {
                                        if (!souscentresList.contains(sect.getSouscentre())) {
                                            souscentresList.add(sect.getSouscentre());
                                        }
                                    }
                                    centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                                }
                            }
                        }
                    }

                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        List<Region> regions = metier.findAllRegions();
                        for (Region region : regions) {
                            for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    int num = 1;
                                    int totalMontant = 0;
                                    ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                    for (int i = 0; i < souscentresList.size(); i++) {
                                        Souscentre souscentre = souscentresList.get(i);
                                        if (typeSelected.equals("GEN")) {
                                            if (souscentreEffectifMap.containsKey(souscentre)) {
                                                if (souscentreSecretariatsMap.containsKey(souscentre) || !testSiCentreDeRegroupement(souscentre)) {
                                                    boolean aAvance = false;
                                                    String souscentreAafficher = "";
                                                    int nbsec = 1;
                                                    if (souscentreSecretariatsMap.containsKey(souscentre) && !testSiCentreDeRegroupement(souscentre)) {
                                                        nbsec = souscentreSecretariatsMap.get(souscentre).size();
                                                    }
                                                    for (int j = 0; j < nbsec; j++) {
                                                        if (nbsec == 1) {
                                                            if (souscentreSecretariatsMap.containsKey(souscentre) && testSiCentreDeRegroupement(souscentre)) {
                                                                Secretariat secretariatCourant = new Secretariat();
                                                                if (souscentre.getNomsouscent().equals("LYCÉE BILINGUE DE BERTOUA")) {
                                                                    secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(0);//le secrétariat 1 seul vient sur cet état et 2 est regroupement 
                                                                } else {
                                                                    secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(1);//le secrétariat 2 seul vient sur cet état et 1 est regroupement                                                                                                           
                                                                }
                                                                determinerCout1(souscentreNbMaxEpreuveMap, tousLesScentaplus, souscentre, secretariatEffectifMap, secretariatCourant, souscentresNosoList, souscentresArisquesExtNordList, activitesSecretariatMap);
                                                                aAvance = testerSiSecretariatFaitCorrectionOuDeliberation(examensSelected.get(0), secretariatCourant);
                                                                if (secretariatCourant.getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                                                                    souscentreAafficher = secretariatCourant.getEtablissement().getAbreviation() + " (Sec. " + secretariatCourant.getNumsec() + ")";
                                                                } else {
                                                                    souscentreAafficher = secretariatCourant.getEtablissement().getAbreviation() + " (Sec. " + secretariatCourant.getNumsec() + " du sous-centre " + souscentre.getEtablissement().getAbreviation() + ")";
                                                                }
                                                            } else {
                                                                if (!souscentreSecretariatsMap.containsKey(souscentre) && !testSiCentreDeRegroupement(souscentre)) {
                                                                    determinerCout(souscentreEffectifMap, souscentreNbMaxEpreuveMap, tousLesScentaplus, souscentrePhasesMap, souscentre, souscentresNosoList, souscentresArisquesExtNordList);
                                                                    souscentreAafficher = souscentre.getNomsouscent();
                                                                    if (souscentrePhasesMap.get(souscentre).contains('D') || (souscentrePhasesMap.get(souscentre).contains('C') && examensSelected.get(0).getType().equals("GEN"))) {
                                                                        aAvance = true;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if (souscentreSecretariatsMap.containsKey(souscentre) && !testSiCentreDeRegroupement(souscentre)) {
                                                                Secretariat secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(j);//secrétariat courant                                                
                                                                determinerCout1(souscentreNbMaxEpreuveMap, tousLesScentaplus, souscentre, secretariatEffectifMap, secretariatCourant, souscentresNosoList, souscentresArisquesExtNordList, activitesSecretariatMap);

                                                                aAvance = testerSiSecretariatFaitCorrectionOuDeliberation(examensSelected.get(0), secretariatCourant);
                                                                if (secretariatCourant.getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                                                                    souscentreAafficher = secretariatCourant.getEtablissement().getAbreviation() + " (Sec. " + secretariatCourant.getNumsec() + ")";
                                                                } else {
                                                                    souscentreAafficher = secretariatCourant.getEtablissement().getAbreviation() + " (Sec. " + secretariatCourant.getNumsec() + " du sous-centre " + souscentre.getEtablissement().getAbreviation() + ")";
                                                                }
                                                            }
                                                        }
                                                        Map<String, Object> row = new HashMap<>();
                                                        row.put("examen", groupedexamensEnstring);
                                                        row.put("session", anneeSelected);
                                                        row.put("region", region.getNomreg());
                                                        row.put("reference", "");
                                                        row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                        row.put("num", num++);
                                                        row.put("souscentre", souscentreAafficher);
                                                        row.put("nature", phasesPourAffichage);
                                                        row.put("effectif", nbcand);
                                                        row.put("membre", membre);
                                                        row.put("coutvac", coutvac);
                                                        row.put("indchefsec", indchefsec);
                                                        row.put("primeconfid", primeconfid);
                                                        row.put("nbjour", nbjour);
                                                        row.put("entretien", entretien);
                                                        row.put("transport", transport);
                                                        row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                        int montantArrondi = (int) Math.ceil((double) montant / (double) 1000) * 1000;
                                                        row.put("total", montantArrondi);
                                                        int net = 0;
                                                        if (aAvance) {
                                                            net = montantArrondi / 2;
                                                        } else {
                                                            net = montantArrondi;
                                                        }
                                                        row.put("avance", net);
                                                        totalMontant += net;//jasperreport prendra la dernière valeur de cout
                                                        row.put("totalNetEnlettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                        datasource.add(row);
                                                    }
                                                }
                                            }

                                        } else {//cas ESTP où il n'y a pas un état à part pour les centres de regoupement
                                            if (souscentreEffectifMap.containsKey(souscentre)) {
                                                boolean aAvance = false;
                                                String souscentreAafficher = "";
                                                int nbsec = 1;
                                                if (souscentreSecretariatsMap.containsKey(souscentre)) {
                                                    nbsec = souscentreSecretariatsMap.get(souscentre).size();
                                                }
                                                for (int j = 0; j < nbsec; j++) {
                                                    if (nbsec == 1) {
                                                        determinerCout(souscentreEffectifMap, souscentreNbMaxEpreuveMap, tousLesScentaplus, souscentrePhasesMap, souscentre, souscentresNosoList, souscentresArisquesExtNordList);
                                                        souscentreAafficher = souscentre.getNomsouscent();
                                                        if (souscentrePhasesMap.get(souscentre).contains('D') || (souscentrePhasesMap.get(souscentre).contains('C') && examensSelected.get(0).getType().equals("GEN"))) {
                                                            aAvance = true;
                                                        }
                                                    } else {
                                                        Secretariat secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(j);//secrétariat courant                                                
                                                        determinerCout1(souscentreNbMaxEpreuveMap, tousLesScentaplus, souscentre, secretariatEffectifMap, secretariatCourant, souscentresNosoList, souscentresArisquesExtNordList, activitesSecretariatMap);

                                                        aAvance = testerSiSecretariatFaitCorrectionOuDeliberation(examensSelected.get(0), secretariatCourant);
                                                        if (secretariatCourant.getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                                                            souscentreAafficher = secretariatCourant.getEtablissement().getAbreviation() + " (Sec. " + secretariatCourant.getNumsec() + ")";
                                                        } else {
                                                            souscentreAafficher = secretariatCourant.getEtablissement().getAbreviation() + " (Sec. " + secretariatCourant.getNumsec() + " du sous-centre " + souscentre.getEtablissement().getAbreviation() + ")";
                                                        }
                                                    }
                                                    Map<String, Object> row = new HashMap<>();
                                                    row.put("examen", groupedexamensEnstring);
                                                    row.put("session", anneeSelected);
                                                    row.put("region", region.getNomreg());
                                                    row.put("reference", "");
                                                    row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                    row.put("num", num++);
                                                    row.put("souscentre", souscentreAafficher);
                                                    row.put("nature", phasesPourAffichage);
                                                    row.put("effectif", nbcand);
                                                    row.put("membre", membre);
                                                    row.put("coutvac", coutvac);
                                                    row.put("indchefsec", indchefsec);
                                                    row.put("primeconfid", primeconfid);
                                                    row.put("nbjour", nbjour);
                                                    row.put("entretien", entretien);
                                                    row.put("transport", transport);
                                                    row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                    int montantArrondi = (int) Math.ceil((double) montant / (double) 1000) * 1000;
                                                    row.put("total", montantArrondi);
                                                    int net = 0;
                                                    if (aAvance) {
                                                        net = montantArrondi / 2;
                                                    } else {
                                                        net = montantArrondi;
                                                    }
                                                    row.put("avance", net);
                                                    totalMontant += net;//jasperreport prendra la dernière valeur de cout
                                                    row.put("totalNetEnlettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                    datasource.add(row);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatSecretariat1Report.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        List<Region> regions = metier.findAllRegions();
                        for (Region region : regions) {
                            for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    int num = 1;
                                    int totalMontant = 0;
                                    ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                    for (int i = 0; i < souscentresList.size(); i++) {
                                        Souscentre souscentre = souscentresList.get(i);
                                        if (typeSelected.equals("GEN")) {
                                            if (souscentreEffectifMap.containsKey(souscentre)) {
                                                if (souscentreSecretariatsMap.containsKey(souscentre) || !testSiCentreDeRegroupement(souscentre)) {
                                                    boolean aReliquat = false;
                                                    String souscentreAafficher = "";
                                                    int nbsec = 1;
                                                    if (souscentreSecretariatsMap.containsKey(souscentre) && !testSiCentreDeRegroupement(souscentre)) {
                                                        nbsec = souscentreSecretariatsMap.get(souscentre).size();
                                                    }
                                                    for (int j = 0; j < nbsec; j++) {
                                                        if (nbsec == 1) {
                                                            if (souscentreSecretariatsMap.containsKey(souscentre) && testSiCentreDeRegroupement(souscentre)) {
                                                                Secretariat secretariatCourant = new Secretariat();
                                                                if (souscentre.getNomsouscent().equals("LYCÉE BILINGUE DE BERTOUA")) {
                                                                    secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(0);//le secrétariat 1 seul vient sur cet état et 2 est regroupement 
                                                                } else {
                                                                    secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(1);//le secrétariat 2 seul vient sur cet état et 1 est regroupement 
                                                                }
                                                                determinerCout1(souscentreNbMaxEpreuveMap, tousLesScentaplus, souscentre, secretariatEffectifMap, secretariatCourant, souscentresNosoList, souscentresArisquesExtNordList, activitesSecretariatMap);
                                                                aReliquat = testerSiSecretariatFaitCorrectionOuDeliberation(examensSelected.get(0), secretariatCourant);
                                                                if (secretariatCourant.getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                                                                    souscentreAafficher = secretariatCourant.getEtablissement().getAbreviation() + " (Sec. " + secretariatCourant.getNumsec() + ")";
                                                                } else {
                                                                    souscentreAafficher = secretariatCourant.getEtablissement().getAbreviation() + " (Sec. " + secretariatCourant.getNumsec() + " du sous-centre " + souscentre.getEtablissement().getAbreviation() + ")";
                                                                }
                                                            } else {
                                                                if (!souscentreSecretariatsMap.containsKey(souscentre) && !testSiCentreDeRegroupement(souscentre)) {
                                                                    determinerCout(souscentreEffectifMap, souscentreNbMaxEpreuveMap, tousLesScentaplus, souscentrePhasesMap, souscentre, souscentresNosoList, souscentresArisquesExtNordList);
                                                                    souscentreAafficher = souscentre.getNomsouscent();
                                                                    if (souscentrePhasesMap.get(souscentre).contains('D') || (souscentrePhasesMap.get(souscentre).contains('C') && examensSelected.get(0).getType().equals("GEN"))) {
                                                                        aReliquat = true;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            if (souscentreSecretariatsMap.containsKey(souscentre) && !testSiCentreDeRegroupement(souscentre)) {
                                                                Secretariat secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(j);//secrétariat courant                                                
                                                                determinerCout1(souscentreNbMaxEpreuveMap, tousLesScentaplus, souscentre, secretariatEffectifMap, secretariatCourant, souscentresNosoList, souscentresArisquesExtNordList, activitesSecretariatMap);

                                                                aReliquat = testerSiSecretariatFaitCorrectionOuDeliberation(examensSelected.get(0), secretariatCourant);
                                                                if (secretariatCourant.getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                                                                    souscentreAafficher = secretariatCourant.getEtablissement().getAbreviation() + " (Sec. " + secretariatCourant.getNumsec() + ")";
                                                                } else {
                                                                    souscentreAafficher = secretariatCourant.getEtablissement().getAbreviation() + " (Sec. " + secretariatCourant.getNumsec() + " du sous-centre " + souscentre.getEtablissement().getAbreviation() + ")";
                                                                }
                                                            }
                                                        }
                                                        if (aReliquat) {
                                                            Map<String, Object> row = new HashMap<>();
                                                            row.put("examen", groupedexamensEnstring);
                                                            row.put("session", anneeSelected);
                                                            row.put("region", region.getNomreg());
                                                            row.put("reference", "");
                                                            row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                            row.put("num", num++);
                                                            row.put("souscentre", souscentreAafficher);
                                                            row.put("nature", phasesPourAffichage);
                                                            row.put("effectif", nbcand);
                                                            row.put("membre", membre);
                                                            row.put("coutvac", coutvac);
                                                            row.put("indchefsec", indchefsec);
                                                            row.put("primeconfid", primeconfid);
                                                            row.put("nbjour", nbjour);
                                                            row.put("entretien", entretien);
                                                            row.put("transport", transport);
                                                            row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                            int montantArrondi = (int) Math.ceil((double) montant / (double) 1000) * 1000;
                                                            row.put("total", montantArrondi);
                                                            row.put("avance", montantArrondi / 2);//il s'agit ici du reliquat
                                                            totalMontant += montantArrondi / 2;//jasperreport prendra la dernière valeur de cout
                                                            row.put("totalNetEnlettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                            datasource.add(row);
                                                        }
                                                    }
                                                }
                                            }
                                        } else {//cas ESTP où il n'y a pas un état à part pour les centres de regoupement
                                            if (souscentreEffectifMap.containsKey(souscentre)) {
                                                boolean aReliquat = false;
                                                String souscentreAafficher = "";
                                                int nbsec = 1;
                                                if (souscentreSecretariatsMap.containsKey(souscentre)) {
                                                    nbsec = souscentreSecretariatsMap.get(souscentre).size();
                                                }
                                                for (int j = 0; j < nbsec; j++) {
                                                    if (nbsec == 1) {
                                                        determinerCout(souscentreEffectifMap, souscentreNbMaxEpreuveMap, tousLesScentaplus, souscentrePhasesMap, souscentre, souscentresNosoList, souscentresArisquesExtNordList);
                                                        souscentreAafficher = souscentre.getNomsouscent();
                                                        if (souscentrePhasesMap.get(souscentre).contains('D') || (souscentrePhasesMap.get(souscentre).contains('C') && examensSelected.get(0).getType().equals("GEN"))) {
                                                            aReliquat = true;
                                                        }
                                                    } else {
                                                        Secretariat secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(j);//secrétariat courant                                                
                                                        determinerCout1(souscentreNbMaxEpreuveMap, tousLesScentaplus, souscentre, secretariatEffectifMap, secretariatCourant, souscentresNosoList, souscentresArisquesExtNordList, activitesSecretariatMap);

                                                        aReliquat = testerSiSecretariatFaitCorrectionOuDeliberation(examensSelected.get(0), secretariatCourant);
                                                        if (secretariatCourant.getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                                                            souscentreAafficher = secretariatCourant.getEtablissement().getAbreviation() + " (Sec. " + secretariatCourant.getNumsec() + ")";
                                                        } else {
                                                            souscentreAafficher = secretariatCourant.getEtablissement().getAbreviation() + " (Sec. " + secretariatCourant.getNumsec() + " du sous-centre " + souscentre.getEtablissement().getAbreviation() + ")";
                                                        }
                                                    }
                                                    if (aReliquat) {
                                                        Map<String, Object> row = new HashMap<>();
                                                        row.put("examen", groupedexamensEnstring);
                                                        row.put("session", anneeSelected);
                                                        row.put("region", region.getNomreg());
                                                        row.put("reference", "");
                                                        row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                        row.put("num", num++);
                                                        row.put("souscentre", souscentreAafficher);
                                                        row.put("nature", phasesPourAffichage);
                                                        row.put("effectif", nbcand);
                                                        row.put("membre", membre);
                                                        row.put("coutvac", coutvac);
                                                        row.put("indchefsec", indchefsec);
                                                        row.put("primeconfid", primeconfid);
                                                        row.put("nbjour", nbjour);
                                                        row.put("entretien", entretien);
                                                        row.put("transport", transport);
                                                        row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                        int montantArrondi = (int) Math.ceil((double) montant / (double) 1000) * 1000;
                                                        row.put("total", montantArrondi);
                                                        row.put("avance", montantArrondi / 2);//il s'agit ici du reliquat
                                                        totalMontant += montantArrondi / 2;//jasperreport prendra la dernière valeur de cout
                                                        row.put("totalNetEnlettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                        datasource.add(row);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatSecretariat2Report.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }

                    souscentreEffectifMap.clear();//on vide le hashmap
                    souscentrePhasesMap.clear();//on vide le hashmap
                    examensSelected.clear();//on vide
                    tousLesScentaplus.clear();
                    souscentreList.clear();
                    souscentreNbMaxEpreuveMap.clear();
                    souscentreSecretariatsMap.clear();
                    activitesSecretariatMap.clear();
                    centrebilletageSouscentresMap.clear();
                    secretariatEffectifMap.clear();
                    souscentreAsecretariatsDemultipliesList.clear();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
            }
        }
        if (jRadioButtonCentresRegroupement.isSelected()) {
            if (!jCheckBoxAdditifCenteregroupement.isSelected()) {
                Map<Souscentre, ArrayList<Secretariat>> souscentreSecretariatsMap = new HashMap<>();//contient les sous-centres chacun avec la liste de ses secretariats le cas échéant
                Map<Secretariat, Integer> secretariatEffectifMap = new HashMap<>();//contient l'ensemble des secrétariats d'un groupe d'examens avec chacun avec son nombre de candidats
                Map<Secretariat, ArrayList<Character>> activitesSecretariatMap = new HashMap<>();//contient l'ensemble des secretariats chacun avec la liste des iniatiales de ses activités 
                List<Souscentre> souscentresNosoList = new ArrayList<>();//contient l'ensemble des sous-centres du NOSO plus L.KOZA, L.MAKARI, L.BLANGOUA,L.OUZAL,L.MORA 
                List<Souscentre> souscentresArisquesExtNordList = new ArrayList<>();//contient l'ensemble des sous-centres du NOSO plus L.KOZA, L.MAKARI, L.BLANGOUA,L.OUZAL,L.MORA
                Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
                List<Souscentre> tousLesScentaplus = new ArrayList<>();//liste de tous les sous-centres à plus organisant les examens sélectionnés
                Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
                List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session 
                List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats 
                Map<Centredispatching, ArrayList<Souscentre>> centreregroupementsouscentresMap = new HashMap<>();//contient les centres de regroupement chacun avec le tableau de ses sous-centres
                Map<Centredispatching, Integer> centreregroupementEffectifMap = new HashMap<>();//contient l'ensemble des centres de regroupement avec leur nombre de candidats
                Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
                Map<Centrebilletage, ArrayList<Centredispatching>> centrebilletageCentreregroupementsMap = new HashMap<>();//contient chaque centre de billetage avec la liste des centres de regroupement situés dans ses secteurs de couverture
                ArrayList<String> typesBruts = new ArrayList<>();
                ArrayList<String> typesAconsiderer = new ArrayList<>();
                ArrayList<String> niveauxAconsiderer = new ArrayList<>();
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("SECRÉTARIAT CENTRE DE REGROUPEMENT");
                    caisses = metier.findAllCaissesOrdinairesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);

                    boolean continuer = false;
                    for (Caisse c : caisses) {
                        if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                            continuer = true;
                            break;
                        }
                    }
                    if (!continuer) {
                        JOptionPane.showMessageDialog(this, "Erreur, les états ordinaires de secrétariat de centre de regroupement n'ont pas encore été créés pour ce groupe d'examens !");
                    } else {
                        String separateur = ", ";
                        examensList = groupedexamensEnstring.split(separateur);
                        for (int i = 0; i < examensList.length; i++) {
                            for (Examen e : examens) {
                                if (e.getSigle().equals(examensList[i])) {
                                    examensSelected.add(e);
                                    break;
                                }
                            }
                        }
                        for (Session s : sessions) {
                            if (s.getAnnee() == anneeSelected) {
                                sessionSelected = s;
                                break;
                            }
                        }
                        List<Centredispatching> centresRegroupement = metier.findAllCentredispatchingD1Type("Regroupement");
                        for (Centredispatching centreregroup : centresRegroupement) {
                            List<Rattachdispatching> lesRattachdispatchings = metier.findAllRattachdispatchingsD1CentredispatchingD1Type(centreregroup.getEtablissement().getAbreviation(), "Regroupement");
                            ArrayList<Souscentre> souscentresList = new ArrayList<>();//liste des sous-centres du centre de regroupement courant
                            for (Rattachdispatching rattach : lesRattachdispatchings) {
                                souscentresList.add(rattach.getSouscentre());
                            }
                            centreregroupementsouscentresMap.put(centreregroup, souscentresList);
                        }

                        for (Examen e : examensSelected) {
                            List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                            for (Statistique s : lesStats) {
                                if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                    int nbcand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                                    souscentreEffectifMap.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                } else {
                                    souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                                }
                            }

                            List<Scentaplus> scentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, e.getSigle());
                            for (Scentaplus s : scentaplus) {
                                if (!tousLesScentaplus.contains(s.getSouscentre())) {
                                    tousLesScentaplus.add(s.getSouscentre());
                                }
                            }
                            List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                            for (Nature n : lesNats) {
                                Souscentre unSouscentre = n.getSouscentre();
                                if (!souscentreList.contains(unSouscentre)) {
                                    souscentreList.add(unSouscentre);
                                }
                            }
                            for (int j = 0; j < souscentreList.size(); j++) {
                                ArrayList<Character> phasesList = new ArrayList<>();
                                Souscentre s = souscentreList.get(j);
                                for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                    if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                        if (!phasesList.contains(n.getActivite().getInitiale())) {
                                            phasesList.add(n.getActivite().getInitiale());
                                        }
                                        //pas de break ici car on doit parcourir tous lesNats
                                    }
                                }
                                if (!souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {
                                    souscentrePhasesMap.put(s, phasesList);
                                }
                                if (souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                    ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                    for (int k = 0; k < phasesList.size(); k++) {
                                        if (!phasesList1.contains(phasesList.get(k))) {
                                            phasesList1.add(phasesList.get(k));
                                        }
                                    }
                                    Collections.sort(phasesList1);
                                    souscentrePhasesMap.put(s, phasesList1);
                                }
                            }
                        }

                        //remplissage de souscentresArisquesList
                        souscentresNosoList = metier.findAllSouscentresNoso();//de l'ESG

                        souscentresArisquesExtNordList = metier.findAllSouscentresArisquesExtNord();

                        //emplissage souscentreAsecretariatsDemultipliesList
                        List<Secretariat> secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                        if (!secretariats.isEmpty()) {
                            for (Secretariat sec : secretariats) {
                                if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                                    souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                                }
                            }
                        }

                        //remplissage centreregroupementEffectifMap
                        for (Centredispatching centredispatch : centreregroupementsouscentresMap.keySet()) {
                            int stat = 0;
                            for (Souscentre souscentre : centreregroupementsouscentresMap.get(centredispatch)) {
                                if (souscentreEffectifMap.containsKey(souscentre) && souscentre.getEtablissement().getAbreviation().equals(centredispatch.getEtablissement().getAbreviation())) {
                                    stat = souscentreEffectifMap.get(souscentre);
                                    break;
                                }
                            }
                            if (stat != 0) {
                                centreregroupementEffectifMap.put(centredispatch, stat);
                            }
                        }

                        //remplissage secretariatEffectifMap
                        for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                            List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreEtSession(souscentre.getNomsouscent(), anneeSelected);
                            if (!secretariatsList.isEmpty()) {
                                for (Secretariat sec : secretariatsList) {
                                    int stat = 0;
                                    List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                                    for (Statsecretariat statsec : statsecretariatsList) {
                                        if (statsec.getSecretariat().getNumsec() == sec.getNumsec() && statsec.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                            stat += statsec.getNombre();
                                        }
                                    }
                                    secretariatEffectifMap.put(sec, stat);
                                }
                            }
                        }

                        //remplissage activitesSecretariatMap
                        List<Naturesecretariat> lesNatsec = metier.findAllNaturesecretariatsD1Session(anneeSelected);
                        for (Secretariat sec : secretariatEffectifMap.keySet()) {
                            ArrayList<Character> phasesList2 = new ArrayList<>();
                            for (Naturesecretariat natsec : lesNatsec) {
                                if (sec.getNumsec() == natsec.getSecretariat().getNumsec() && sec.getSouscentre().getNomsouscent().equals(natsec.getSecretariat().getSouscentre().getNomsouscent())) {
                                    if (!phasesList2.contains(natsec.getActivite().getInitiale())) {
                                        phasesList2.add(natsec.getActivite().getInitiale());
                                    }
                                }
                            }
                            Collections.sort(phasesList2);
                            activitesSecretariatMap.put(sec, phasesList2);
                        }

                        //remplissage de souscentreSecretariatsMap
                        for (Souscentre souscentre : souscentreEffectifMap.keySet()) {
                            ArrayList<Secretariat> secretariatsList = new ArrayList<>();
                            for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                if (sec.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                    if (!secretariatsList.contains(sec)) {
                                        secretariatsList.add(sec);
                                    }
                                }
                            }
                            if (!secretariatsList.isEmpty()) {
                                ordonnerSecretariatsD1souscentre(secretariatsList);
                                souscentreSecretariatsMap.put(souscentre, secretariatsList);
                            }
                        }

                        //recherche des types des examens à utiliser
                        for (Examen examen : examensSelected) {
                            System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                            if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                                typesBruts.add("ESG");
                            }
                            if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                                typesBruts.add("ESTP");
                            }
                        }
                        if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                            typesAconsiderer.add("ESG");
                            typesAconsiderer.add("TOUT");
                        }
                        if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                            typesAconsiderer.add("ESTP");
                            typesAconsiderer.add("TOUT");
                        }
                        if (typesBruts.size() == 2) {
                            typesAconsiderer.add("ESG");
                            typesAconsiderer.add("ESTP");
                            typesAconsiderer.add("TOUT");
                        }
                        //recherche des niveaux des examens à utiliser
                        if (!niveauSelected.equals("TOUT")) {
                            niveauxAconsiderer.add(niveauSelected);
                            niveauxAconsiderer.add("TOUT");
                        }
                        if (niveauSelected.equals("TOUT")) {
                            niveauxAconsiderer.add("PROB");
                            niveauxAconsiderer.add("BACC");
                            niveauxAconsiderer.add("TOUT");
                        }
                        //recherche des centres de billetage
                        for (String niveau : niveauxAconsiderer) {
                            for (String type : typesAconsiderer) {
                                List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                                for (Centrebilletage centrebilletage : desCentrebilletages) {
                                    ArrayList<Souscentre> souscentresList = new ArrayList<>();
                                    if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                        List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                        for (Secteurcouv sect : secteurs) {
                                            if (!souscentresList.contains(sect.getSouscentre())) {
                                                souscentresList.add(sect.getSouscentre());
                                            }
                                        }
                                        centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                                    }
                                }
                            }
                        }
                        //on remplit centrebilletageCentreregroupementsMap: le sous-centre qui est centre de regroupement est abrité par le même établissement que ce dernier
                        for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                            ArrayList<Centredispatching> centreregroupementList = new ArrayList<>();
                            for (Souscentre souscentre : centrebilletageSouscentresMap.get(centrebilletage)) {
                                for (Centredispatching centredispatch : centreregroupementsouscentresMap.keySet()) {
                                    if (centredispatch.getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                                        if (!centreregroupementList.contains(centredispatch)) {
                                            centreregroupementList.add(centredispatch);
                                        }
                                    }
                                }
                            }
                            centrebilletageCentreregroupementsMap.put(centrebilletage, centreregroupementList);
                        }

                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            List<Region> regions = metier.findAllRegions();
                            for (Region region : regions) {
                                for (Centrebilletage centrebilletage : centrebilletageCentreregroupementsMap.keySet()) {
                                    if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                        int num = 1;
                                        int totalMontant = 0;
                                        ArrayList<Centredispatching> centreregroupementList = centrebilletageCentreregroupementsMap.get(centrebilletage);
                                        for (int i = 0; i < centreregroupementList.size(); i++) {
                                            Centredispatching centreregroupement = centreregroupementList.get(i);
                                            if (centreregroupementEffectifMap.containsKey(centreregroupement)) {
                                                String centreregroupementAafficher = "";
                                                Souscentre souscentre = metier.findSouscentreByEtablissement(centreregroupement.getEtablissement().getAbreviation());//on cherche le sous-centre de même nom que le centre de regroupement
                                                if (souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                                    Secretariat secretariatCourant = new Secretariat();
                                                    if (souscentre.getNomsouscent().equals("LYCÉE BILINGUE DE BERTOUA")) {
                                                        secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(1);//le secrétariat 2 est regroupement 
                                                    } else {
                                                        secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(0);//le secrétariat 1 est regroupement                                                                                                           
                                                    }
                                                    centreregroupementAafficher = centreregroupement.getEtablissement().getAbreviation() + " (Sec. 1)";
                                                    if (souscentre.getNomsouscent().equals("LYCÉE BILINGUE DE BERTOUA")) {
                                                        centreregroupementAafficher = centreregroupement.getEtablissement().getAbreviation() + " (Sec. 2)";
                                                    }
                                                    determinerCout2secret(secretariatEffectifMap, activitesSecretariatMap, secretariatCourant, souscentresNosoList, souscentresArisquesExtNordList);

                                                } else {
                                                    centreregroupementAafficher = centreregroupement.getEtablissement().getAbreviation();
                                                    determinerCout2(centreregroupementEffectifMap, tousLesScentaplus, souscentrePhasesMap, centreregroupement, souscentre, souscentresNosoList, souscentresArisquesExtNordList);
                                                }

                                                Map<String, Object> row = new HashMap<>();
                                                row.put("examen", groupedexamensEnstring);
                                                row.put("session", anneeSelected);
                                                row.put("region", region.getNomreg());
                                                row.put("reference", "");
                                                row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                row.put("num", num++);
                                                row.put("centreregroupement", centreregroupementAafficher);
                                                row.put("nature", phasesPourAffichage);
                                                row.put("effectif", nbcand);
                                                row.put("membre", membre);
                                                row.put("coutvac", coutvac);
                                                row.put("indchefsec", indchefsec);
                                                row.put("primeconfid", primeconfid);
                                                row.put("nbjour", nbjour);
                                                row.put("entretien", entretien);
                                                row.put("supplentretien", supplentretien);
                                                row.put("transport", transport);
                                                row.put("supplmanut", supplmanut);
                                                row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                int montantArrondi = (int) Math.ceil((double) montant / (double) 1000) * 1000;
                                                row.put("total", montantArrondi);
                                                int net = montantArrondi / 2;
                                                row.put("avance", net);
                                                totalMontant += net;//jasperreport prendra la dernière valeur de cout
                                                row.put("totalNetEnlettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                datasource.add(row);
                                            }
                                        }
                                    }
                                }
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatSecretariatRegroupement1Report.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            List<Region> regions = metier.findAllRegions();
                            for (Region region : regions) {
                                for (Centrebilletage centrebilletage : centrebilletageCentreregroupementsMap.keySet()) {
                                    if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                        int num = 1;
                                        int totalMontant = 0;
                                        ArrayList<Centredispatching> centreregroupementList = centrebilletageCentreregroupementsMap.get(centrebilletage);
                                        for (int i = 0; i < centreregroupementList.size(); i++) {
                                            Centredispatching centreregroupement = centreregroupementList.get(i);
                                            if (centreregroupementEffectifMap.containsKey(centreregroupement)) {
                                                String centreregroupementAafficher = "";
                                                Souscentre souscentre = metier.findSouscentreByEtablissement(centreregroupement.getEtablissement().getAbreviation());//on cherche le sous-centre de même nom que le centre de regroupement
                                                if (souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                                    centreregroupementAafficher = centreregroupement.getEtablissement().getAbreviation() + " (Sec. 1)";
                                                    if (souscentre.getNomsouscent().equals("LYCÉE BILINGUE DE BERTOUA")) {
                                                        centreregroupementAafficher = centreregroupement.getEtablissement().getAbreviation() + " (Sec. 2)";
                                                    }
                                                    determinerCout2(centreregroupementEffectifMap, tousLesScentaplus, souscentrePhasesMap, centreregroupement, souscentre, souscentresNosoList, souscentresArisquesExtNordList);
                                                } else {
                                                    centreregroupementAafficher = centreregroupement.getEtablissement().getAbreviation();
                                                    Secretariat secretariatCourant = new Secretariat();
                                                    if (souscentre.getNomsouscent().equals("LYCÉE BILINGUE DE BERTOUA")) {
                                                        secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(1);//le secrétariat 2 est regroupement 
                                                    } else {
                                                        secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(0);//le secrétariat 1 est regroupement                                                         
                                                    }
                                                    determinerCout2secret(secretariatEffectifMap, activitesSecretariatMap, secretariatCourant, souscentresNosoList, souscentresArisquesExtNordList);
                                                }

                                                Map<String, Object> row = new HashMap<>();
                                                row.put("examen", groupedexamensEnstring);
                                                row.put("session", anneeSelected);
                                                row.put("region", region.getNomreg());
                                                row.put("reference", "");
                                                row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                row.put("num", num++);
                                                row.put("centreregroupement", centreregroupementAafficher);
                                                row.put("nature", phasesPourAffichage);
                                                row.put("effectif", nbcand);
                                                row.put("membre", membre);
                                                row.put("coutvac", coutvac);
                                                row.put("indchefsec", indchefsec);
                                                row.put("primeconfid", primeconfid);
                                                row.put("nbjour", nbjour);
                                                row.put("entretien", entretien);
                                                row.put("supplentretien", supplentretien);
                                                row.put("transport", transport);
                                                row.put("supplmanut", supplmanut);
                                                row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                int montantArrondi = (int) Math.ceil((double) montant / (double) 1000) * 1000;
                                                row.put("total", montantArrondi);
                                                int net = montantArrondi / 2;
                                                row.put("reliquat", net);
                                                totalMontant += net;//jasperreport prendra la dernière valeur de cout
                                                row.put("totalNetEnlettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                datasource.add(row);
                                            }
                                        }
                                    }
                                }
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatSecretariatRegroupement2Report.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }

                        souscentreEffectifMap.clear();//on vide le hashmap
                        souscentrePhasesMap.clear();//on vide le hashmap
                        examensSelected.clear();//on vide
                        tousLesScentaplus.clear();
                        souscentreList.clear();
                        centreregroupementsouscentresMap.clear();
                        centrebilletageCentreregroupementsMap.clear();
                        centreregroupementEffectifMap.clear();
                        souscentreAsecretariatsDemultipliesList.clear();
                    }//else continuer
                } else {
                    JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
                }
            } else {
                /*
                //jCheckBoxAdditifCenteregroupement est selectionné
                Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
                List<Souscentre> tousLesScentaplus = new ArrayList<>();//liste de tous les sous-centres à plus organisant les examens sélectionnés
                Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
                List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session 
                Map<Centredispatching, ArrayList<Souscentre>> centreregroupementsouscentresMap = new HashMap<>();//contient les centres de regroupement chacun avec le tableau de ses sous-centres
                Map<Centredispatching, Integer> centreregroupementEffectifMap = new HashMap<>();//contient l'ensemble des centres de regroupement avec leur nombre de candidats
                Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
                Map<Centrebilletage, ArrayList<Centredispatching>> centrebilletageCentreregroupementsMap = new HashMap<>();//contient chaque centre de billetage avec la liste des centres de regroupement situés dans ses secteurs de couverture
                ArrayList<String> typesBruts = new ArrayList<>();
                ArrayList<String> typesAconsiderer = new ArrayList<>();
                ArrayList<String> niveauxAconsiderer = new ArrayList<>();
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("SECRÉTARIAT CENTRE DE REGROUPEMENT");
                    caisses = metier.findAllCaissesAdditivesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);

                    boolean continuer = false;
                    for (Caisse c : caisses) {
                        if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                            imputationSelected = c.getImputation();//aide à l'affichage sur l'état
                            continuer = true;
                            break;
                        }
                    }
                    if (!continuer) {
                        JOptionPane.showMessageDialog(this, "Erreur, les états additifs de secrétariat de centre de regroupement n'ont pas encore été créés pour ce groupe d'examens !");
                    } else {
                        String separateur = ", ";
                        examensList = groupedexamensEnstring.split(separateur);
                        for (int i = 0; i < examensList.length; i++) {
                            for (Examen e : examens) {
                                if (e.getSigle().equals(examensList[i])) {
                                    examensSelected.add(e);
                                    break;
                                }
                            }
                        }
                        for (Session s : sessions) {
                            if (s.getAnnee() == anneeSelected) {
                                sessionSelected = s;
                                break;
                            }
                        }
                        List<Centredispatching> centresRegroupement = metier.findAllCentredispatchingD1Type("Regroupement");
                        for (Centredispatching centreregroup : centresRegroupement) {
                            List<Rattachdispatching> lesRattachdispatchings = metier.findAllRattachdispatchingsD1CentredispatchingD1Type(centreregroup.getEtablissement().getAbreviation(), "Regroupement");
                            ArrayList<Souscentre> souscentresList = new ArrayList<>();//liste des sous-centres du centre de regroupement courant
                            for (Rattachdispatching rattach : lesRattachdispatchings) {
                                souscentresList.add(rattach.getSouscentre());
                            }
                            centreregroupementsouscentresMap.put(centreregroup, souscentresList);
                        }

                        for (Examen e : examensSelected) {
                            List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1SessionEt1phase(e.getSigle(), anneeSelected, phase);
                            for (Statistique s : lesStats) {
                                if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                    int nbcand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                                    souscentreEffectifMap.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                } else {
                                    souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                                }
                            }

                            List<Scentaplus> scentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, e.getSigle());
                            for (Scentaplus s : scentaplus) {
                                if (!tousLesScentaplus.contains(s.getSouscentre())) {
                                    tousLesScentaplus.add(s.getSouscentre());
                                }
                            }
                            List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                            for (Nature n : lesNats) {
                                Souscentre unSouscentre = n.getSouscentre();
                                if (!souscentreList.contains(unSouscentre)) {
                                    souscentreList.add(unSouscentre);
                                }
                            }
                            for (int j = 0; j < souscentreList.size(); j++) {
                                ArrayList<Character> phasesList = new ArrayList<>();
                                Souscentre s = souscentreList.get(j);
                                for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                    if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                        if (!phasesList.contains(n.getActivite().getInitiale())) {
                                            phasesList.add(n.getActivite().getInitiale());
                                        }
                                        //pas de break ici car on doit parcourir tous lesNats
                                    }
                                }
                                if (!souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {
                                    souscentrePhasesMap.put(s, phasesList);
                                }
                                if (souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                    ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                    for (int k = 0; k < phasesList.size(); k++) {
                                        if (!phasesList1.contains(phasesList.get(k))) {
                                            phasesList1.add(phasesList.get(k));
                                        }
                                    }
                                    Collections.sort(phasesList1);
                                    souscentrePhasesMap.put(s, phasesList1);
                                }
                            }
                        }

                        //remplissage centreregroupementEffectifMap
                        for (Centredispatching centredispatch : centreregroupementsouscentresMap.keySet()) {
                            int stat = 0;
                            for (Souscentre souscentre : centreregroupementsouscentresMap.get(centredispatch)) {
                                if (souscentreEffectifMap.containsKey(souscentre) && souscentre.getEtablissement().getAbreviation().equals(centredispatch.getEtablissement().getAbreviation())) {
                                    stat = souscentreEffectifMap.get(souscentre);
                                    break;
                                }
                            }
                            if (stat != 0) {
                                centreregroupementEffectifMap.put(centredispatch, stat);
                            }
                        }

                        //recherche des types des examens à utiliser
                        for (Examen examen : examensSelected) {
                            System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                            if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                                typesBruts.add("ESG");
                            }
                            if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                                typesBruts.add("ESTP");
                            }
                        }
                        if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                            typesAconsiderer.add("ESG");
                            typesAconsiderer.add("TOUT");
                        }
                        if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                            typesAconsiderer.add("ESTP");
                            typesAconsiderer.add("TOUT");
                        }
                        if (typesBruts.size() == 2) {
                            typesAconsiderer.add("ESG");
                            typesAconsiderer.add("ESTP");
                            typesAconsiderer.add("TOUT");
                        }
                        //recherche des niveaux des examens à utiliser
                        if (!niveauSelected.equals("TOUT")) {
                            niveauxAconsiderer.add(niveauSelected);
                            niveauxAconsiderer.add("TOUT");
                        }
                        if (niveauSelected.equals("TOUT")) {
                            niveauxAconsiderer.add("PROB");
                            niveauxAconsiderer.add("BACC");
                            niveauxAconsiderer.add("TOUT");
                        }
                        //recherche des centres de billetage
                        for (String niveau : niveauxAconsiderer) {
                            for (String type : typesAconsiderer) {
                                List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                                for (Centrebilletage centrebilletage : desCentrebilletages) {
                                    ArrayList<Souscentre> souscentresList = new ArrayList<>();
                                    if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                        List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                        for (Secteurcouv sect : secteurs) {
                                            if (!souscentresList.contains(sect.getSouscentre())) {
                                                souscentresList.add(sect.getSouscentre());
                                            }
                                        }
                                        centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                                    }
                                }
                            }
                        }
                        //on remplit centrebilletageCentreregroupementsMap: le sous-centre qui est centre de regroupement est abrité par le même établissement que ce dernier
                        for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                            ArrayList<Centredispatching> centreregroupementList = new ArrayList<>();
                            for (Souscentre souscentre : centrebilletageSouscentresMap.get(centrebilletage)) {
                                for (Centredispatching centredispatch : centreregroupementsouscentresMap.keySet()) {
                                    if (centredispatch.getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                                        if (!centreregroupementList.contains(centredispatch)) {
                                            centreregroupementList.add(centredispatch);
                                        }
                                    }
                                }
                            }
                            centrebilletageCentreregroupementsMap.put(centrebilletage, centreregroupementList);
                        }

                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            List<Region> regions = metier.findAllRegions();
                            for (Region region : regions) {
                                for (Centrebilletage centrebilletage : centrebilletageCentreregroupementsMap.keySet()) {
                                    if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                        int num = 1;
                                        int totalMontant = 0;
                                        ArrayList<Centredispatching> centreregroupementList = centrebilletageCentreregroupementsMap.get(centrebilletage);
                                        for (int i = 0; i < centreregroupementList.size(); i++) {
                                            Centredispatching centreregroupement = centreregroupementList.get(i);
                                            if (centreregroupementEffectifMap.containsKey(centreregroupement)) {
                                                Souscentre souscentre = metier.findSouscentreByEtablissement(centreregroupement.getEtablissement().getAbreviation());//on cherche le sous-centre de même nom que le centre de regroupement
                                                determinerCout2Additif(centreregroupementEffectifMap, tousLesScentaplus, souscentrePhasesMap, centreregroupement, souscentre);
                                                Map<String, Object> row = new HashMap<>();
                                                row.put("examen", groupedexamensEnstring);
                                                row.put("session", anneeSelected);
                                                row.put("reference", "");
                                                row.put("region", region.getNomreg());
                                                row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                row.put("num", num++);
                                                row.put("centreregroupement", centreregroupement.getEtablissement().getAbreviation());
                                                row.put("nature", phasesPourAffichage);
                                                row.put("effectif", nbcand);
                                                row.put("membre", membre);
                                                row.put("coutvac", coutvac);
                                                row.put("entretien", entretien);
                                                int montantArrondi = (int) Math.ceil((double) montant / (double) 1000) * 1000;
                                                row.put("total", montantArrondi);
                                                totalMontant += montantArrondi;//jasperreport prendra la dernière valeur de cout
                                                row.put("totalNetEnlettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                datasource.add(row);
                                            }
                                        }
                                    }
                                }
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatSecretariatRegroupementAdditifReport.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }

                        souscentreEffectifMap.clear();//on vide le hashmap
                        souscentrePhasesMap.clear();//on vide le hashmap
                        examensSelected.clear();//on vide
                        tousLesScentaplus.clear();
                        souscentreList.clear();
                        centreregroupementsouscentresMap.clear();
                        centrebilletageCentreregroupementsMap.clear();
                        centreregroupementEffectifMap.clear();
                    }//fin else continuer
                } else {//if groupedexamen
                    JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s), session et additif sont obligatoires !");
                }
                 */
            }
        }
        if (!jRadioButtonCentresEtsouscentres.isSelected() && !jRadioButtonCentresRegroupement.isSelected()) {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Vous devez choisir le type de secrétariat à visualiser !");
        }
    }//GEN-LAST:event_jButtonVisualiserActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        videFrame();
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jButtonCreerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerActionPerformed
        infoSaisies();
        if (jRadioButtonCentresEtsouscentres.isSelected()) {
            Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
            Map<Souscentre, Integer> souscentreNbMaxEpreuveMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre maximal d'épreuves professionnelles pratiques contraignantes
            List<Souscentre> tousLesScentaplus = new ArrayList<>();//liste de tous les sous-centres à plus organisant les examens sélectionnés
            Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau des initiales de ses activités
            List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session 
            List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats 
            Map<Secretariat, Integer> secretariatEffectifMap = new HashMap<>();//contient l'ensemble des secrétariats d'un groupe d'examens avec chacun avec son nombre de candidats
            Map<Secretariat, ArrayList<Character>> activitesSecretariatMap = new HashMap<>();//contient l'ensemble des secretariats chacun avec la liste des iniatiales de ses activités 
            Map<Souscentre, ArrayList<Secretariat>> souscentreSecretariatsMap = new HashMap<>();//contient les sous-centres chacun avec la liste de ses secretariats le cas échéant
            List<Souscentre> souscentresNosoList = new ArrayList<>();//contient l'ensemble des sous-centres du NOSO plus L.KOZA, L.MAKARI, L.BLANGOUA,L.OUZAL,L.MORA 
            List<Souscentre> souscentresArisquesExtNordList = new ArrayList<>();//contient l'ensemble des sous-centres du NOSO plus L.KOZA, L.MAKARI, L.BLANGOUA,L.OUZAL,L.MORA 
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("SECRÉTARIAT D'EXAMEN");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (!caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états de secrétariat d'examen existent déjà pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    for (Examen e : examensSelected) {
                        List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                        for (Statistique s : lesStats) {
                            if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                int nbcand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                                souscentreEffectifMap.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                            } else {
                                souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                            }
                            Nbepreuveprof nbepreuveprof = metier.findAllNbepreuveprofsD1ExamenEtD1Option(e.getSigle(), s.getOption().getSigle());//s'il existe, il est unique
                            if (souscentreNbMaxEpreuveMap.containsKey(s.getSouscentre())) {
                                int nb = souscentreNbMaxEpreuveMap.get(s.getSouscentre());
                                souscentreNbMaxEpreuveMap.put(s.getSouscentre(), max(nb, nbepreuveprof.getNbprofpratique1()));
                            } else {
                                souscentreNbMaxEpreuveMap.put(s.getSouscentre(), nbepreuveprof.getNbprofpratique1());
                            }
                        }
                        List<Scentaplus> scentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, e.getSigle());
                        for (Scentaplus s : scentaplus) {
                            if (!tousLesScentaplus.contains(s.getSouscentre())) {
                                tousLesScentaplus.add(s.getSouscentre());
                            }
                        }
                        List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                        for (Nature n : lesNats) {
                            Souscentre unSouscentre = n.getSouscentre();
                            if (!souscentreList.contains(unSouscentre)) {
                                souscentreList.add(unSouscentre);
                            }
                        }
                        for (int j = 0; j < souscentreList.size(); j++) {
                            ArrayList<Character> phasesList = new ArrayList<>();
                            Souscentre s = souscentreList.get(j);
                            for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                    if (!phasesList.contains(n.getActivite().getInitiale())) {
                                        phasesList.add(n.getActivite().getInitiale());
                                    }
                                    //pas de break ici car on doit parcourir tous lesNats
                                }
                            }
                            if (!souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {
                                souscentrePhasesMap.put(s, phasesList);
                            }
                            if (souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante

                                ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                for (int k = 0; k < phasesList.size(); k++) {
                                    if (!phasesList1.contains(phasesList.get(k))) {
                                        phasesList1.add(phasesList.get(k));
                                    }
                                }
                                Collections.sort(phasesList1);
                                souscentrePhasesMap.put(s, phasesList1);
                            }
                        }
                    }
                    //remplissage de souscentresArisquesList
                    souscentresNosoList = metier.findAllSouscentresNoso();//de l'ESG

                    souscentresArisquesExtNordList = metier.findAllSouscentresArisquesExtNord();

                    //emplissage souscentreAsecretariatsDemultipliesList
                    List<Secretariat> secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                    if (!secretariats.isEmpty()) {
                        for (Secretariat sec : secretariats) {
                            if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                                souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                            }
                        }
                    }

                    //remplissage secretariatEffectifMap
                    for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                        List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreEtSession(souscentre.getNomsouscent(), anneeSelected);
                        if (!secretariatsList.isEmpty()) {
                            for (Secretariat sec : secretariatsList) {
                                int stat = 0;
                                List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                                for (Statsecretariat statsec : statsecretariatsList) {
                                    if (statsec.getSecretariat().getNumsec() == sec.getNumsec() && statsec.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                        stat += statsec.getNombre();
                                    }
                                }
                                secretariatEffectifMap.put(sec, stat);
                            }
                        }
                    }

                    //remplissage activitesSecretariatMap
                    List<Naturesecretariat> lesNatsec = metier.findAllNaturesecretariatsD1Session(anneeSelected);
                    for (Secretariat sec : secretariatEffectifMap.keySet()) {
                        ArrayList<Character> phasesList2 = new ArrayList<>();
                        for (Naturesecretariat natsec : lesNatsec) {
                            if (sec.getNumsec() == natsec.getSecretariat().getNumsec() && sec.getSouscentre().getNomsouscent().equals(natsec.getSecretariat().getSouscentre().getNomsouscent())) {
                                if (!phasesList2.contains(natsec.getActivite().getInitiale())) {
                                    phasesList2.add(natsec.getActivite().getInitiale());
                                }
                            }
                        }
                        Collections.sort(phasesList2);
                        activitesSecretariatMap.put(sec, phasesList2);
                    }

                    //remplissage de souscentreSecretariatsMap
                    for (Souscentre souscentre : souscentreEffectifMap.keySet()) {
                        ArrayList<Secretariat> secretariatsList = new ArrayList<>();
                        for (Secretariat sec : secretariatEffectifMap.keySet()) {
                            if (sec.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                if (!secretariatsList.contains(sec)) {
                                    secretariatsList.add(sec);
                                }
                            }
                        }
                        if (!secretariatsList.isEmpty()) {
                            ordonnerSecretariatsD1souscentre(secretariatsList);
                            souscentreSecretariatsMap.put(souscentre, secretariatsList);
                        }
                    }

                    boolean testsicreer = false;
                    try {
                        for (Souscentre souscentre : souscentreEffectifMap.keySet()) {
                            if (typeSelected.equals("GEN")) {
                                if (souscentreSecretariatsMap.containsKey(souscentre) || !testSiCentreDeRegroupement(souscentre)) {
                                    int nbsec = 1;
                                    int net = 0;
                                    if (souscentreSecretariatsMap.containsKey(souscentre) && !testSiCentreDeRegroupement(souscentre)) {
                                        nbsec = souscentreSecretariatsMap.get(souscentre).size();
                                    }
                                    for (int j = 0; j < nbsec; j++) {
                                        if (nbsec == 1) {
                                            if (souscentreSecretariatsMap.containsKey(souscentre) && testSiCentreDeRegroupement(souscentre)) {
                                                Secretariat secretariatCourant = new Secretariat();
                                                if (souscentre.getNomsouscent().equals("LYCÉE BILINGUE DE BERTOUA")) {
                                                    secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(0);//le secrétariat 1 seul vient sur cet état et 2 est regroupement 
                                                } else {
                                                    secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(1);//le secrétariat 2 seul vient sur cet état et 1 est regroupement                                                                                                           
                                                }
                                                determinerCout1(souscentreNbMaxEpreuveMap, tousLesScentaplus, souscentre, secretariatEffectifMap, secretariatCourant, souscentresNosoList, souscentresArisquesExtNordList, activitesSecretariatMap);
                                                int montantArrondi = (int) Math.ceil((double) montant / (double) 1000) * 1000;
                                                net += montantArrondi;
                                            } else {
                                                if (!souscentreSecretariatsMap.containsKey(souscentre) && !testSiCentreDeRegroupement(souscentre)) {
                                                    determinerCout(souscentreEffectifMap, souscentreNbMaxEpreuveMap, tousLesScentaplus, souscentrePhasesMap, souscentre, souscentresNosoList, souscentresArisquesExtNordList);
                                                    int montantArrondi = (int) Math.ceil((double) montant / (double) 1000) * 1000;
                                                    net = montantArrondi;
                                                }
                                            }
                                        } else {
                                            if (souscentreSecretariatsMap.containsKey(souscentre) && !testSiCentreDeRegroupement(souscentre)) {
                                                Secretariat secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(j);//secrétariat courant                                                
                                                determinerCout1(souscentreNbMaxEpreuveMap, tousLesScentaplus, souscentre, secretariatEffectifMap, secretariatCourant, souscentresNosoList, souscentresArisquesExtNordList, activitesSecretariatMap);
                                                int montantArrondi = (int) Math.ceil((double) montant / (double) 1000) * 1000;
                                                net += montantArrondi;
                                            }
                                        }
                                    }

                                    metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                    testsicreer = true;
                                }

                            } else {//cas ESTP où il n'y a pas un état à part pour les centres de regroupement
                                int nbsec = 1;
                                int net = 0;
                                if (souscentreSecretariatsMap.containsKey(souscentre)) {
                                    nbsec = souscentreSecretariatsMap.get(souscentre).size();
                                }
                                if (nbsec == 1) {
                                    determinerCout(souscentreEffectifMap, souscentreNbMaxEpreuveMap, tousLesScentaplus, souscentrePhasesMap, souscentre, souscentresNosoList, souscentresArisquesExtNordList);
                                    int montantArrondi = (int) Math.ceil((double) montant / (double) 1000) * 1000;
                                    net = montantArrondi;
                                } else {
                                    for (int j = 0; j < nbsec; j++) {
                                        Secretariat secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(j);//secrétariat courant                                                
                                        determinerCout1(souscentreNbMaxEpreuveMap, tousLesScentaplus, souscentre, secretariatEffectifMap, secretariatCourant, souscentresNosoList, souscentresArisquesExtNordList, activitesSecretariatMap);
                                        int montantArrondi = (int) Math.ceil((double) montant / (double) 1000) * 1000;
                                        net += montantArrondi;
                                    }
                                }

                                metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                testsicreer = true;
                            }
                        }
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testsicreer) {
                        JOptionPane.showMessageDialog(this, "Etats de secrétariat d'examen créés avec succès pour ce groupe d'examens !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
            }
            souscentreEffectifMap.clear();//on vide le hashmap
            souscentrePhasesMap.clear();//on vide le hashmap
            examensSelected.clear();//on vide
            tousLesScentaplus.clear();
            souscentreList.clear();
            souscentreNbMaxEpreuveMap.clear();
            souscentreSecretariatsMap.clear();
            //souscentrenaturesecretariatsMap.clear();
            secretariatEffectifMap.clear();
            souscentreAsecretariatsDemultipliesList.clear();
        }
        if (jRadioButtonCentresRegroupement.isSelected()) {
            if (!jCheckBoxAdditifCenteregroupement.isSelected()) {
                Map<Souscentre, ArrayList<Secretariat>> souscentreSecretariatsMap = new HashMap<>();//contient les sous-centres chacun avec la liste de ses secretariats le cas échéant
                Map<Secretariat, Integer> secretariatEffectifMap = new HashMap<>();//contient l'ensemble des secrétariats d'un groupe d'examens avec chacun avec son nombre de candidats
                Map<Secretariat, ArrayList<Character>> activitesSecretariatMap = new HashMap<>();//contient l'ensemble des secretariats chacun avec la liste des iniatiales de ses activités 
                List<Souscentre> souscentresNosoList = new ArrayList<>();//contient l'ensemble des sous-centres du NOSO plus L.KOZA, L.MAKARI, L.BLANGOUA,L.OUZAL,L.MORA 
                List<Souscentre> souscentresArisquesExtNordList = new ArrayList<>();//contient l'ensemble des sous-centres du NOSO plus L.KOZA, L.MAKARI, L.BLANGOUA,L.OUZAL,L.MORA
                List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats 
                Map<Centredispatching, ArrayList<Souscentre>> centreregroupementsouscentresMap = new HashMap<>();//contient les centres de regroupement chacun avec le tableau de ses sous-centres
                Map<Centredispatching, Integer> centreregroupementEffectifMap = new HashMap<>();//contient l'ensemble des centres de regroupement avec leur nombre de candidats                     
                Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats            
                List<Souscentre> tousLesScentaplus = new ArrayList<>();//liste de tous les sous-centres à plus organisant les examens sélectionnés
                Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
                List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session 
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    if (typeSelected.equals("GEN") && (niveauSelected.equals("PROB") || niveauSelected.equals("BACC"))) {
                        Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                        anneeSelected = Integer.parseInt(anneeString);
                        Rubriquetat rubetat = metier.findRubriquetatByDesignation("SECRÉTARIAT CENTRE DE REGROUPEMENT");
                        caisses = metier.findAllCaissesOrdinairesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                        if (!caisses.isEmpty()) {
                            JOptionPane.showMessageDialog(this, "Erreur, les états ordinaires de secrétariat de centre de regroupement existent déjà pour ce groupe d'examens !");
                        } else {
                            String separateur = ", ";
                            examensList = groupedexamensEnstring.split(separateur);
                            for (int i = 0; i < examensList.length; i++) {
                                for (Examen e : examens) {
                                    if (e.getSigle().equals(examensList[i])) {
                                        examensSelected.add(e);
                                        break;
                                    }
                                }
                            }
                            for (Session s : sessions) {
                                if (s.getAnnee() == anneeSelected) {
                                    sessionSelected = s;
                                    break;
                                }
                            }

                            List<Centredispatching> centresRegroupement = metier.findAllCentredispatchingD1Type("Regroupement");
                            for (Centredispatching centreregroup : centresRegroupement) {
                                List<Rattachdispatching> lesRattachdispatchings = metier.findAllRattachdispatchingsD1CentredispatchingD1Type(centreregroup.getEtablissement().getAbreviation(), "Regroupement");
                                ArrayList<Souscentre> souscentresList = new ArrayList<>();//liste des sous-centres du centre de regroupement courant
                                if (!lesRattachdispatchings.isEmpty()) {
                                    for (Rattachdispatching rattach : lesRattachdispatchings) {
                                        souscentresList.add(rattach.getSouscentre());
                                    }
                                    centreregroupementsouscentresMap.put(centreregroup, souscentresList);
                                }
                            }

                            for (Examen e : examensSelected) {
                                List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                                for (Statistique s : lesStats) {
                                    if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                        int nbrecand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                                        souscentreEffectifMap.put(s.getSouscentre(), nbrecand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                    } else {
                                        souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                                    }
                                }
                                List<Scentaplus> scentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, e.getSigle());
                                for (Scentaplus s : scentaplus) {
                                    if (!tousLesScentaplus.contains(s.getSouscentre())) {
                                        tousLesScentaplus.add(s.getSouscentre());
                                    }
                                }
                                List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                                for (Nature n : lesNats) {
                                    Souscentre unSouscentre = n.getSouscentre();
                                    if (!souscentreList.contains(unSouscentre)) {
                                        souscentreList.add(unSouscentre);
                                    }
                                }
                                for (int j = 0; j < souscentreList.size(); j++) {
                                    ArrayList<Character> phasesList = new ArrayList<>();
                                    Souscentre s = souscentreList.get(j);
                                    for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                        if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                            if (!phasesList.contains(n.getActivite().getInitiale())) {
                                                phasesList.add(n.getActivite().getInitiale());
                                            }
                                            //pas de break ici car on doit parcourir tous lesNats
                                        }
                                    }
                                    if (!souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {
                                        souscentrePhasesMap.put(s, phasesList);
                                    }
                                    if (souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                        ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                        for (int k = 0; k < phasesList.size(); k++) {
                                            if (!phasesList1.contains(phasesList.get(k))) {
                                                phasesList1.add(phasesList.get(k));
                                            }
                                        }
                                        Collections.sort(phasesList1);
                                        souscentrePhasesMap.put(s, phasesList1);
                                    }
                                }
                            }

                            //remplissage de souscentresArisquesList
                            souscentresNosoList = metier.findAllSouscentresNoso();//de l'ESG

                            souscentresArisquesExtNordList = metier.findAllSouscentresArisquesExtNord();

                            //remplissage centreregroupementEffectifMap
                            for (Centredispatching centredispatch : centreregroupementsouscentresMap.keySet()) {
                                int stat = 0;
                                for (Souscentre souscentre : centreregroupementsouscentresMap.get(centredispatch)) {
                                    if (souscentreEffectifMap.containsKey(souscentre) && souscentre.getEtablissement().getAbreviation().equals(centredispatch.getEtablissement().getAbreviation())) {
                                        stat = souscentreEffectifMap.get(souscentre);
                                        break;
                                    }
                                }
                                if (stat != 0) {
                                    centreregroupementEffectifMap.put(centredispatch, stat);
                                }
                            }

                            //remplissage de souscentresArisquesList
                            souscentresNosoList = metier.findAllSouscentresNoso();//de l'ESG
                            souscentresArisquesExtNordList = metier.findAllSouscentresArisquesExtNord();
                            //remplissage souscentreAsecretariatsDemultipliesList
                            secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                            if (!secretariats.isEmpty()) {
                                for (Secretariat sec : secretariats) {
                                    if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                                        souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                                    }
                                }
                            }

                            //remplissage secretariatEffectifMap
                            for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                                List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreEtSession(souscentre.getNomsouscent(), anneeSelected);
                                if (!secretariatsList.isEmpty()) {
                                    for (Secretariat sec : secretariatsList) {
                                        int stat = 0;
                                        List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                                        for (Statsecretariat statsec : statsecretariatsList) {
                                            if (statsec.getSecretariat().getNumsec() == sec.getNumsec() && statsec.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                                stat += statsec.getNombre();
                                            }
                                        }
                                        secretariatEffectifMap.put(sec, stat);
                                    }
                                }
                            }

                            //remplissage activitesSecretariatMap
                            List<Naturesecretariat> lesNatsec = metier.findAllNaturesecretariatsD1Session(anneeSelected);
                            for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                ArrayList<Character> phasesList2 = new ArrayList<>();
                                for (Naturesecretariat natsec : lesNatsec) {
                                    if (sec.getNumsec() == natsec.getSecretariat().getNumsec() && sec.getSouscentre().getNomsouscent().equals(natsec.getSecretariat().getSouscentre().getNomsouscent())) {
                                        if (!phasesList2.contains(natsec.getActivite().getInitiale())) {
                                            phasesList2.add(natsec.getActivite().getInitiale());
                                        }
                                    }
                                }
                                Collections.sort(phasesList2);
                                activitesSecretariatMap.put(sec, phasesList2);
                            }

                            //remplissage de souscentreSecretariatsMap
                            for (Souscentre souscentre : souscentreEffectifMap.keySet()) {
                                ArrayList<Secretariat> secretariatsList = new ArrayList<>();
                                for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                    if (sec.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                        if (!secretariatsList.contains(sec)) {
                                            secretariatsList.add(sec);
                                        }
                                    }
                                }
                                if (!secretariatsList.isEmpty()) {
                                    ordonnerSecretariatsD1souscentre(secretariatsList);
                                    souscentreSecretariatsMap.put(souscentre, secretariatsList);
                                }
                            }

                            boolean testsicreer = false;
                            try {
                                for (Centredispatching centreregroupement : centreregroupementEffectifMap.keySet()) {
                                    Souscentre souscentre = metier.findSouscentreByEtablissement(centreregroupement.getEtablissement().getAbreviation());
                                    if (souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                        Secretariat secretariatCourant = new Secretariat();
                                        if (souscentre.getNomsouscent().equals("LYCÉE BILINGUE DE BERTOUA")) {
                                            secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(1);//le secrétariat 2 est regroupement 
                                        } else {
                                            secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(0);//le secrétariat 1 est regroupement                                                                                                           
                                        }
                                        determinerCout2secret(secretariatEffectifMap, activitesSecretariatMap, secretariatCourant, souscentresNosoList, souscentresArisquesExtNordList);

                                    } else {
                                        determinerCout2(centreregroupementEffectifMap, tousLesScentaplus, souscentrePhasesMap, centreregroupement, souscentre, souscentresNosoList, souscentresArisquesExtNordList);
                                    }
                                    int montantArrondi = (int) Math.ceil((double) montant / (double) 1000) * 1000;
                                    metier.creerCaisse(new Caisse(montantArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));//le centre de regroupement et le sous-centre abrités par un même établissement
                                    testsicreer = true;
                                }
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                            if (testsicreer) {
                                JOptionPane.showMessageDialog(this, "Etats ordinaires de secrétariat de centre de regroupement créés avec succès pour ce groupe d'examens !");
                            }
                        }//fin else caisses
                    } else {
                        JOptionPane.showMessageDialog(this, "Désolé, frais ordinaires de secrétariat de centre de regroupement non défini pour ce groupe d'examen !");
                    }
                } else {//de if !groupedexamen
                    JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
                }
                souscentreEffectifMap.clear();//on vide le hashmap
                souscentrePhasesMap.clear();//on vide le hashmap
                examensSelected.clear();//on vide
                tousLesScentaplus.clear();
                souscentreList.clear();
                centreregroupementsouscentresMap.clear();
                centreregroupementEffectifMap.clear();
            } else {//jCheckBoxAdditifCenteregroupement a été sélectionné
                /*
                Map<Centredispatching, ArrayList<Souscentre>> centreregroupementsouscentresMap = new HashMap<>();//contient les centres de regroupement chacun avec le tableau de ses sous-centres
                Map<Centredispatching, Integer> centreregroupementEffectifMap = new HashMap<>();//contient l'ensemble des centres de regroupement avec leur nombre de candidats                     
                Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats            
                List<Souscentre> tousLesScentaplus = new ArrayList<>();//liste de tous les sous-centres à plus organisant les examens sélectionnés
                Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
                List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session 
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---") && !referenceImputationSelected.equals("---")) {
                    if (typeSelected.equals("GEN") && (niveauSelected.equals("PROB") || niveauSelected.equals("BACC"))) {
                        Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                        anneeSelected = Integer.parseInt(anneeString);
                        Rubriquetat rubetat = metier.findRubriquetatByDesignation("SECRÉTARIAT CENTRE DE REGROUPEMENT");
                        caisses = metier.findAllCaissesAdditivesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                        if (!caisses.isEmpty()) {
                            JOptionPane.showMessageDialog(this, "Erreur, les états additifs de secrétariat de centre de regroupement existent déjà pour ce groupe d'examens !");
                        } else {
                            String separateur = ", ";
                            examensList = groupedexamensEnstring.split(separateur);
                            for (int i = 0; i < examensList.length; i++) {
                                for (Examen e : examens) {
                                    if (e.getSigle().equals(examensList[i])) {
                                        examensSelected.add(e);
                                        break;
                                    }
                                }
                            }
                            for (Session s : sessions) {
                                if (s.getAnnee() == anneeSelected) {
                                    sessionSelected = s;
                                    break;
                                }
                            }
                            for (Imputation i : imputations) {
                                if (i.getReference().equals(referenceImputationSelected)) {
                                    imputationSelected = i;
                                    break;
                                }
                            }
                            List<Centredispatching> centresRegroupement = metier.findAllCentredispatchingD1Type("Regroupement");
                            for (Centredispatching centreregroup : centresRegroupement) {
                                List<Rattachdispatching> lesRattachdispatchings = metier.findAllRattachdispatchingsD1CentredispatchingD1Type(centreregroup.getEtablissement().getAbreviation(), "Regroupement");
                                ArrayList<Souscentre> souscentresList = new ArrayList<>();//liste des sous-centres du centre de regroupement courant
                                if (!lesRattachdispatchings.isEmpty()) {
                                    for (Rattachdispatching rattach : lesRattachdispatchings) {
                                        souscentresList.add(rattach.getSouscentre());
                                    }
                                    centreregroupementsouscentresMap.put(centreregroup, souscentresList);
                                }
                            }

                            for (Examen e : examensSelected) {
                                List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1SessionEt1phase(e.getSigle(), anneeSelected, phase);
                                for (Statistique s : lesStats) {
                                    if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                        int nbrecand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                                        souscentreEffectifMap.put(s.getSouscentre(), nbrecand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                    } else {
                                        souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                                    }
                                }
                                List<Scentaplus> scentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, e.getSigle());
                                for (Scentaplus s : scentaplus) {
                                    if (!tousLesScentaplus.contains(s.getSouscentre())) {
                                        tousLesScentaplus.add(s.getSouscentre());
                                    }
                                }
                                List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                                for (Nature n : lesNats) {
                                    Souscentre unSouscentre = n.getSouscentre();
                                    if (!souscentreList.contains(unSouscentre)) {
                                        souscentreList.add(unSouscentre);
                                    }
                                }
                                for (int j = 0; j < souscentreList.size(); j++) {
                                    ArrayList<Character> phasesList = new ArrayList<>();
                                    Souscentre s = souscentreList.get(j);
                                    for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                        if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                            if (!phasesList.contains(n.getActivite().getInitiale())) {
                                                phasesList.add(n.getActivite().getInitiale());
                                            }
                                            //pas de break ici car on doit parcourir tous lesNats
                                        }
                                    }
                                    if (!souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {
                                        souscentrePhasesMap.put(s, phasesList);
                                    }
                                    if (souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                        ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                        for (int k = 0; k < phasesList.size(); k++) {
                                            if (!phasesList1.contains(phasesList.get(k))) {
                                                phasesList1.add(phasesList.get(k));
                                            }
                                        }
                                        Collections.sort(phasesList1);
                                        souscentrePhasesMap.put(s, phasesList1);
                                    }
                                }
                            }

                            //remplissage centreregroupementEffectifMap
                            for (Centredispatching centredispatch : centreregroupementsouscentresMap.keySet()) {
                                int stat = 0;
                                for (Souscentre souscentre : centreregroupementsouscentresMap.get(centredispatch)) {
                                    if (souscentreEffectifMap.containsKey(souscentre) && souscentre.getEtablissement().getAbreviation().equals(centredispatch.getEtablissement().getAbreviation())) {
                                        stat = souscentreEffectifMap.get(souscentre);
                                        break;
                                    }
                                }
                                if (stat != 0) {
                                    centreregroupementEffectifMap.put(centredispatch, stat);
                                }
                            }

                            boolean testsicreer = false;
                            try {
                                for (Centredispatching centreregroupement : centreregroupementEffectifMap.keySet()) {
                                    Souscentre souscentre = metier.findSouscentreByEtablissement(centreregroupement.getEtablissement().getAbreviation());
                                    determinerCout2Additif(centreregroupementEffectifMap, tousLesScentaplus, souscentrePhasesMap, centreregroupement, souscentre);
                                    int montantArrondi = (int) Math.ceil((double) montant / (double) 1000) * 1000;
                                    metier.creerCaisse(new Caisse(montantArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, imputationSelected, souscentre, true));//le centre de regroupement et le sous-centre abrités par un même établissement
                                    testsicreer = true;
                                }
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                            if (testsicreer) {
                                JOptionPane.showMessageDialog(this, "Etats additifs de secrétariat de centre de regroupement créés avec succès pour ce groupe d'examens !");
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Désolé, frais additifs de secrétariat de centre de regroupement non défini pour ce groupe d'examen !");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
                }
                souscentreEffectifMap.clear();//on vide le hashmap
                souscentrePhasesMap.clear();//on vide le hashmap
                examensSelected.clear();//on vide
                tousLesScentaplus.clear();
                souscentreList.clear();
                centreregroupementsouscentresMap.clear();
                centreregroupementEffectifMap.clear();
                 */
            }//fin else checbox
        }//fin radio
        if (!jRadioButtonCentresEtsouscentres.isSelected() && !jRadioButtonCentresRegroupement.isSelected()) {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Vous devez choisir le type de secrétariat à créer !");
        }
    }//GEN-LAST:event_jButtonCreerActionPerformed

    private void jButtonMettreAjourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourActionPerformed
        infoSaisies();
        if (jRadioButtonCentresEtsouscentres.isSelected()) {
            Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
            Map<Souscentre, Integer> souscentreNbMaxEpreuveMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre maximal d'épreuves professionnelles pratiques contraignantes
            List<Souscentre> tousLesScentaplus = new ArrayList<>();//liste de tous les sous-centres à plus organisant les examens sélectionnés
            Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
            List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session 
            List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats 
            Map<Secretariat, Integer> secretariatEffectifMap = new HashMap<>();//contient l'ensemble des secrétariats d'un groupe d'examens avec chacun avec son nombre de candidats
            Map<Secretariat, ArrayList<Character>> activitesSecretariatMap = new HashMap<>();//contient l'ensemble des secretariats chacun avec la liste des iniatiales de ses activités 
            Map<Souscentre, ArrayList<Secretariat>> souscentreSecretariatsMap = new HashMap<>();//contient les sous-centres chacun avec la liste de ses secretariats le cas échéant
            List<Souscentre> souscentresNosoList = new ArrayList<>();//contient l'ensemble des sous-centres du NOSO plus L.KOZA, L.MAKARI, L.BLANGOUA,L.OUZAL,L.MORA 
            List<Souscentre> souscentresArisquesExtNordList = new ArrayList<>();//contient l'ensemble des sous-centres du NOSO plus L.KOZA, L.MAKARI, L.BLANGOUA,L.OUZAL,L.MORA 
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de secrétariat d'examen pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("SECRÉTARIAT D'EXAMEN");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état de secrétariat d'examen n'existe pour ce groupe d'examens !");
                    } else {
                        //on conserve quelques info de ces anciennes caisses
                        Groupe groupe = caisses.get(0).getGroupe();
                        sessionSelected = caisses.get(0).getSession();
                        //on supprime toutes les anciennes caisses du groupe d'examens
                        for (Caisse c : caisses) {
                            metier.supprimerCaisse(c);
                        }

                        //on va les recréer
                        String separateur = ", ";
                        examensList = groupedexamensEnstring.split(separateur);
                        for (int i = 0; i < examensList.length; i++) {
                            for (Examen e : examens) {
                                if (e.getSigle().equals(examensList[i])) {
                                    examensSelected.add(e);
                                    break;
                                }
                            }
                        }

                        for (Examen e : examensSelected) {
                            List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                            for (Statistique s : lesStats) {
                                if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                    int nbcand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                                    souscentreEffectifMap.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                } else {
                                    souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                                }
                                Nbepreuveprof nbepreuveprof = metier.findAllNbepreuveprofsD1ExamenEtD1Option(e.getSigle(), s.getOption().getSigle());//s'il existe, il est unique
                                if (souscentreNbMaxEpreuveMap.containsKey(s.getSouscentre())) {
                                    int nb = souscentreNbMaxEpreuveMap.get(s.getSouscentre());
                                    souscentreNbMaxEpreuveMap.put(s.getSouscentre(), max(nb, nbepreuveprof.getNbprofpratique1()));
                                } else {
                                    souscentreNbMaxEpreuveMap.put(s.getSouscentre(), nbepreuveprof.getNbprofpratique1());
                                }
                            }
                            List<Scentaplus> scentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, e.getSigle());
                            for (Scentaplus s : scentaplus) {
                                if (!tousLesScentaplus.contains(s.getSouscentre())) {
                                    tousLesScentaplus.add(s.getSouscentre());
                                }
                            }
                            List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                            for (Nature n : lesNats) {
                                Souscentre unSouscentre = n.getSouscentre();
                                if (!souscentreList.contains(unSouscentre)) {
                                    souscentreList.add(unSouscentre);
                                }
                            }
                            for (int j = 0; j < souscentreList.size(); j++) {
                                ArrayList<Character> phasesList = new ArrayList<>();
                                Souscentre s = souscentreList.get(j);
                                for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                    if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                        if (!phasesList.contains(n.getActivite().getInitiale())) {
                                            phasesList.add(n.getActivite().getInitiale());
                                        }
                                        //pas de break ici car on doit parcourir tous lesNats
                                    }
                                }
                                if (!souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {
                                    souscentrePhasesMap.put(s, phasesList);
                                }
                                if (souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                    ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                    for (int k = 0; k < phasesList.size(); k++) {
                                        if (!phasesList1.contains(phasesList.get(k))) {
                                            phasesList1.add(phasesList.get(k));
                                        }
                                    }
                                    Collections.sort(phasesList1);
                                    souscentrePhasesMap.put(s, phasesList1);
                                }
                            }
                        }
                        //remplissage de souscentresArisquesList
                        souscentresNosoList = metier.findAllSouscentresNoso();//de l'ESG

                        souscentresArisquesExtNordList = metier.findAllSouscentresArisquesExtNord();

                        //emplissage souscentreAsecretariatsDemultipliesList
                        List<Secretariat> secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                        if (!secretariats.isEmpty()) {
                            for (Secretariat sec : secretariats) {
                                if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                                    souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                                }
                            }
                        }

                        //remplissage secretariatEffectifMap
                        for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                            List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreEtSession(souscentre.getNomsouscent(), anneeSelected);
                            if (!secretariatsList.isEmpty()) {
                                for (Secretariat sec : secretariatsList) {
                                    int stat = 0;
                                    List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                                    for (Statsecretariat statsec : statsecretariatsList) {
                                        if (statsec.getSecretariat().getNumsec() == sec.getNumsec() && statsec.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                            stat += statsec.getNombre();
                                        }
                                    }
                                    secretariatEffectifMap.put(sec, stat);
                                }
                            }
                        }

                        //remplissage activitesSecretariatMap
                        List<Naturesecretariat> lesNatsec = metier.findAllNaturesecretariatsD1Session(anneeSelected);
                        for (Secretariat sec : secretariatEffectifMap.keySet()) {
                            ArrayList<Character> phasesList2 = new ArrayList<>();
                            for (Naturesecretariat natsec : lesNatsec) {
                                if (sec.getNumsec() == natsec.getSecretariat().getNumsec() && sec.getSouscentre().getNomsouscent().equals(natsec.getSecretariat().getSouscentre().getNomsouscent())) {
                                    if (!phasesList2.contains(natsec.getActivite().getInitiale())) {
                                        phasesList2.add(natsec.getActivite().getInitiale());
                                    }
                                }
                            }
                            Collections.sort(phasesList2);
                            activitesSecretariatMap.put(sec, phasesList2);
                        }

                        //remplissage de souscentreSecretariatsMap
                        for (Souscentre souscentre : souscentreEffectifMap.keySet()) {
                            ArrayList<Secretariat> secretariatsList = new ArrayList<>();
                            for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                if (sec.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                    if (!secretariatsList.contains(sec)) {
                                        secretariatsList.add(sec);
                                    }
                                }
                            }
                            if (!secretariatsList.isEmpty()) {
                                ordonnerSecretariatsD1souscentre(secretariatsList);
                                souscentreSecretariatsMap.put(souscentre, secretariatsList);
                            }
                        }

                        boolean testsimodifier = false;
                        try {
                            for (Souscentre souscentre : souscentreEffectifMap.keySet()) {
                                if (typeSelected.equals("GEN")) {
                                    if (souscentreSecretariatsMap.containsKey(souscentre) || !testSiCentreDeRegroupement(souscentre)) {
                                        int nbsec = 1;
                                        int net = 0;
                                        if (souscentreSecretariatsMap.containsKey(souscentre) && !testSiCentreDeRegroupement(souscentre)) {
                                            nbsec = souscentreSecretariatsMap.get(souscentre).size();
                                        }
                                        for (int j = 0; j < nbsec; j++) {
                                            if (nbsec == 1) {
                                                if (souscentreSecretariatsMap.containsKey(souscentre) && testSiCentreDeRegroupement(souscentre)) {
                                                    Secretariat secretariatCourant = new Secretariat();
                                                    if (souscentre.getNomsouscent().equals("LYCÉE BILINGUE DE BERTOUA")) {
                                                        secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(0);//le secrétariat 1 seul vient sur cet état et 2 est regroupement 
                                                    } else {
                                                        secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(1);//le secrétariat 2 seul vient sur cet état et 1 est regroupement                                                                                                           
                                                    }
                                                    determinerCout1(souscentreNbMaxEpreuveMap, tousLesScentaplus, souscentre, secretariatEffectifMap, secretariatCourant, souscentresNosoList, souscentresArisquesExtNordList, activitesSecretariatMap);
                                                    int montantArrondi = (int) Math.ceil((double) montant / (double) 1000) * 1000;
                                                    net += montantArrondi;
                                                } else {
                                                    if (!souscentreSecretariatsMap.containsKey(souscentre) && !testSiCentreDeRegroupement(souscentre)) {
                                                        determinerCout(souscentreEffectifMap, souscentreNbMaxEpreuveMap, tousLesScentaplus, souscentrePhasesMap, souscentre, souscentresNosoList, souscentresArisquesExtNordList);
                                                        int montantArrondi = (int) Math.ceil((double) montant / (double) 1000) * 1000;
                                                        net = montantArrondi;
                                                    }
                                                }
                                            } else {
                                                if (souscentreSecretariatsMap.containsKey(souscentre) && !testSiCentreDeRegroupement(souscentre)) {
                                                    Secretariat secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(j);//secrétariat courant                                                
                                                    determinerCout1(souscentreNbMaxEpreuveMap, tousLesScentaplus, souscentre, secretariatEffectifMap, secretariatCourant, souscentresNosoList, souscentresArisquesExtNordList, activitesSecretariatMap);
                                                    int montantArrondi = (int) Math.ceil((double) montant / (double) 1000) * 1000;
                                                    net += montantArrondi;
                                                }
                                            }
                                        }

                                        metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                        testsimodifier = true;
                                    }
                                } else {//cas ESTP où il n'y a pas un état à part pour les centres de regroupement
                                    int nbsec = 1;
                                    int net = 0;
                                    if (souscentreSecretariatsMap.containsKey(souscentre)) {
                                        nbsec = souscentreSecretariatsMap.get(souscentre).size();
                                    }
                                    if (nbsec == 1) {
                                        determinerCout(souscentreEffectifMap, souscentreNbMaxEpreuveMap, tousLesScentaplus, souscentrePhasesMap, souscentre, souscentresNosoList, souscentresArisquesExtNordList);
                                        int montantArrondi = (int) Math.ceil((double) montant / (double) 1000) * 1000;
                                        net = montantArrondi;
                                    } else {
                                        for (int j = 0; j < nbsec; j++) {
                                            Secretariat secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(j);//secrétariat courant                                                
                                            determinerCout1(souscentreNbMaxEpreuveMap, tousLesScentaplus, souscentre, secretariatEffectifMap, secretariatCourant, souscentresNosoList, souscentresArisquesExtNordList, activitesSecretariatMap);
                                            int montantArrondi = (int) Math.ceil((double) montant / (double) 1000) * 1000;
                                            net += montantArrondi;
                                        }
                                    }

                                    metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                    testsimodifier = true;
                                }
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testsimodifier) {
                            JOptionPane.showMessageDialog(this, "Etats de secrétariat d'examen mis à jour avec succès pour ce groupe d'examens !");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
                }
                souscentreEffectifMap.clear();//on vide le hashmap
                souscentrePhasesMap.clear();//on vide le hashmap
                examensSelected.clear();//on vide
                tousLesScentaplus.clear();
                souscentreList.clear();
                souscentreNbMaxEpreuveMap.clear();
                souscentreSecretariatsMap.clear();
                //souscentrenaturesecretariatsMap.clear();
                secretariatEffectifMap.clear();
                souscentreAsecretariatsDemultipliesList.clear();
            }
        }
        if (jRadioButtonCentresRegroupement.isSelected()) {
            if (!jCheckBoxAdditifCenteregroupement.isSelected()) {
                Map<Souscentre, ArrayList<Secretariat>> souscentreSecretariatsMap = new HashMap<>();//contient les sous-centres chacun avec la liste de ses secretariats le cas échéant
                Map<Secretariat, Integer> secretariatEffectifMap = new HashMap<>();//contient l'ensemble des secrétariats d'un groupe d'examens avec chacun avec son nombre de candidats
                Map<Secretariat, ArrayList<Character>> activitesSecretariatMap = new HashMap<>();//contient l'ensemble des secretariats chacun avec la liste des iniatiales de ses activités 
                List<Souscentre> souscentresNosoList = new ArrayList<>();//contient l'ensemble des sous-centres du NOSO plus L.KOZA, L.MAKARI, L.BLANGOUA,L.OUZAL,L.MORA 
                List<Souscentre> souscentresArisquesExtNordList = new ArrayList<>();//contient l'ensemble des sous-centres du NOSO plus L.KOZA, L.MAKARI, L.BLANGOUA,L.OUZAL,L.MORA
                List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats 
                Map<Centredispatching, ArrayList<Souscentre>> centreregroupementsouscentresMap = new HashMap<>();//contient les centres de regroupement chacun avec le tableau de ses sous-centres
                Map<Centredispatching, Integer> centreregroupementEffectifMap = new HashMap<>();//contient l'ensemble des centres de regroupement avec leur nombre de candidats                     
                Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats            
                List<Souscentre> tousLesScentaplus = new ArrayList<>();//liste de tous les sous-centres à plus organisant les examens sélectionnés
                Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
                List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session 
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états ordinaires de secrétariat de centre de regroupement pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                        if (typeSelected.equals("GEN") && (niveauSelected.equals("PROB") || niveauSelected.equals("BACC"))) {
                            anneeSelected = Integer.parseInt(anneeString);
                            Rubriquetat rubetat = metier.findRubriquetatByDesignation("SECRÉTARIAT CENTRE DE REGROUPEMENT");
                            caisses = metier.findAllCaissesOrdinairesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                            if (caisses.isEmpty()) {
                                JOptionPane.showMessageDialog(this, "Erreur, aucun état ordinaire de secrétariat de centre de regroupement n'existe pour ce groupe d'examens !");
                            } else {
                                //on conserve quelques info de ces anciennes caisses
                                Groupe groupe = caisses.get(0).getGroupe();
                                sessionSelected = caisses.get(0).getSession();
                                //on supprime toutes les anciennes caisses du groupe d'examens dans cette rubrique;on va les recréer
                                for (Caisse c : caisses) {
                                    metier.supprimerCaisse(c);
                                }

                                String separateur = ", ";
                                examensList = groupedexamensEnstring.split(separateur);
                                for (int i = 0; i < examensList.length; i++) {
                                    for (Examen e : examens) {
                                        if (e.getSigle().equals(examensList[i])) {
                                            examensSelected.add(e);
                                            break;
                                        }
                                    }
                                }

                                List<Centredispatching> centresRegroupement = metier.findAllCentredispatchingD1Type("Regroupement");
                                for (Centredispatching centreregroup : centresRegroupement) {
                                    List<Rattachdispatching> lesRattachdispatchings = metier.findAllRattachdispatchingsD1CentredispatchingD1Type(centreregroup.getEtablissement().getAbreviation(), "Regroupement");
                                    ArrayList<Souscentre> souscentresList = new ArrayList<>();//liste des sous-centres du centre de regroupement courant
                                    for (Rattachdispatching rattach : lesRattachdispatchings) {
                                        souscentresList.add(rattach.getSouscentre());
                                    }
                                    centreregroupementsouscentresMap.put(centreregroup, souscentresList);
                                }

                                for (Examen e : examensSelected) {
                                    List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                                    for (Statistique s : lesStats) {
                                        if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                            int nbrecand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                                            souscentreEffectifMap.put(s.getSouscentre(), nbrecand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                        } else {
                                            souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                                        }
                                    }
                                    List<Scentaplus> scentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, e.getSigle());
                                    for (Scentaplus s : scentaplus) {
                                        if (!tousLesScentaplus.contains(s.getSouscentre())) {
                                            tousLesScentaplus.add(s.getSouscentre());
                                        }
                                    }
                                    List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                                    for (Nature n : lesNats) {
                                        Souscentre unSouscentre = n.getSouscentre();
                                        if (!souscentreList.contains(unSouscentre)) {
                                            souscentreList.add(unSouscentre);
                                        }
                                    }
                                    for (int j = 0; j < souscentreList.size(); j++) {
                                        ArrayList<Character> phasesList = new ArrayList<>();
                                        Souscentre s = souscentreList.get(j);
                                        for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                            if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                                if (!phasesList.contains(n.getActivite().getInitiale())) {
                                                    phasesList.add(n.getActivite().getInitiale());
                                                }
                                                //pas de break ici car on doit parcourir tous lesNats
                                            }
                                        }
                                        if (!souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {
                                            souscentrePhasesMap.put(s, phasesList);
                                        }
                                        if (souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                            ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                            for (int k = 0; k < phasesList.size(); k++) {
                                                if (!phasesList1.contains(phasesList.get(k))) {
                                                    phasesList1.add(phasesList.get(k));
                                                }
                                            }
                                            Collections.sort(phasesList1);
                                            souscentrePhasesMap.put(s, phasesList1);
                                        }
                                    }
                                }

                                //remplissage de souscentresArisquesList
                                souscentresNosoList = metier.findAllSouscentresNoso();//de l'ESG

                                souscentresArisquesExtNordList = metier.findAllSouscentresArisquesExtNord();

                                //remplissage centreregroupementEffectifMap
                                for (Centredispatching centredispatch : centreregroupementsouscentresMap.keySet()) {
                                    int stat = 0;
                                    for (Souscentre souscentre : centreregroupementsouscentresMap.get(centredispatch)) {
                                        if (souscentreEffectifMap.containsKey(souscentre) && souscentre.getEtablissement().getAbreviation().equals(centredispatch.getEtablissement().getAbreviation())) {
                                            stat = souscentreEffectifMap.get(souscentre);
                                            break;
                                        }
                                    }
                                    if (stat != 0) {
                                        centreregroupementEffectifMap.put(centredispatch, stat);
                                    }
                                }

                                //remplissage de souscentresArisquesList
                                souscentresNosoList = metier.findAllSouscentresNoso();//de l'ESG
                                souscentresArisquesExtNordList = metier.findAllSouscentresArisquesExtNord();
                                //remplissage souscentreAsecretariatsDemultipliesList
                                secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                                if (!secretariats.isEmpty()) {
                                    for (Secretariat sec : secretariats) {
                                        if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                                            souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                                        }
                                    }
                                }

                                //remplissage secretariatEffectifMap
                                for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                                    List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreEtSession(souscentre.getNomsouscent(), anneeSelected);
                                    if (!secretariatsList.isEmpty()) {
                                        for (Secretariat sec : secretariatsList) {
                                            int stat = 0;
                                            List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                                            for (Statsecretariat statsec : statsecretariatsList) {
                                                if (statsec.getSecretariat().getNumsec() == sec.getNumsec() && statsec.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                                    stat += statsec.getNombre();
                                                }
                                            }
                                            secretariatEffectifMap.put(sec, stat);
                                        }
                                    }
                                }

                                //remplissage activitesSecretariatMap
                                List<Naturesecretariat> lesNatsec = metier.findAllNaturesecretariatsD1Session(anneeSelected);
                                for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                    ArrayList<Character> phasesList2 = new ArrayList<>();
                                    for (Naturesecretariat natsec : lesNatsec) {
                                        if (sec.getNumsec() == natsec.getSecretariat().getNumsec() && sec.getSouscentre().getNomsouscent().equals(natsec.getSecretariat().getSouscentre().getNomsouscent())) {
                                            if (!phasesList2.contains(natsec.getActivite().getInitiale())) {
                                                phasesList2.add(natsec.getActivite().getInitiale());
                                            }
                                        }
                                    }
                                    Collections.sort(phasesList2);
                                    activitesSecretariatMap.put(sec, phasesList2);
                                }

                                //remplissage de souscentreSecretariatsMap
                                for (Souscentre souscentre : souscentreEffectifMap.keySet()) {
                                    ArrayList<Secretariat> secretariatsList = new ArrayList<>();
                                    for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                        if (sec.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                            if (!secretariatsList.contains(sec)) {
                                                secretariatsList.add(sec);
                                            }
                                        }
                                    }
                                    if (!secretariatsList.isEmpty()) {
                                        ordonnerSecretariatsD1souscentre(secretariatsList);
                                        souscentreSecretariatsMap.put(souscentre, secretariatsList);
                                    }
                                }

                                boolean testsicreer = false;
                                try {
                                    for (Centredispatching centreregroupement : centreregroupementEffectifMap.keySet()) {
                                        Souscentre souscentre = metier.findSouscentreByEtablissement(centreregroupement.getEtablissement().getAbreviation());
                                        if (souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                            Secretariat secretariatCourant = new Secretariat();
                                            if (souscentre.getNomsouscent().equals("LYCÉE BILINGUE DE BERTOUA")) {
                                                secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(1);//le secrétariat 2 est regroupement 
                                            } else {
                                                secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(0);//le secrétariat 1 est regroupement                                                                                                           
                                            }
                                            determinerCout2secret(secretariatEffectifMap, activitesSecretariatMap, secretariatCourant, souscentresNosoList, souscentresArisquesExtNordList);

                                        } else {
                                            determinerCout2(centreregroupementEffectifMap, tousLesScentaplus, souscentrePhasesMap, centreregroupement, souscentre, souscentresNosoList, souscentresArisquesExtNordList);
                                        }
                                        int montantArrondi = (int) Math.ceil((double) montant / (double) 1000) * 1000;
                                        metier.creerCaisse(new Caisse(montantArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));//le centre de regroupement et le sous-centre abrités par un même établissement
                                        testsicreer = true;
                                    }
                                } catch (ObcbudgetException e) {
                                    JOptionPane.showMessageDialog(this, e.getMessage());
                                }
                                if (testsicreer) {
                                    JOptionPane.showMessageDialog(this, "Etats ordinaires de secrétariat de centre de regroupement mis à jour avec succès pour ce groupe d'examens !");
                                }
                            }//fin else caisses
                        } else {//de if type examen
                            JOptionPane.showMessageDialog(this, "Désolé, frais ordinaires de secrétariat de centre de regroupement non défini pour ce groupe d'examen !");
                        }
                    } else {//de if grpexamen
                        JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
                    }
                    souscentreEffectifMap.clear();//on vide le hashmap
                    souscentrePhasesMap.clear();//on vide le hashmap
                    examensSelected.clear();//on vide
                    tousLesScentaplus.clear();
                    souscentreList.clear();
                    centreregroupementsouscentresMap.clear();
                    centreregroupementEffectifMap.clear();
                }//fin if result
            } else {//fin if checkbox: jCheckBoxAdditifCenteregroupement a été selectionné
                /*
                Map<Centredispatching, ArrayList<Souscentre>> centreregroupementsouscentresMap = new HashMap<>();//contient les centres de regroupement chacun avec le tableau de ses sous-centres
                Map<Centredispatching, Integer> centreregroupementEffectifMap = new HashMap<>();//contient l'ensemble des centres de regroupement avec leur nombre de candidats                     
                Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats            
                List<Souscentre> tousLesScentaplus = new ArrayList<>();//liste de tous les sous-centres à plus organisant les examens sélectionnés
                Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
                List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session 
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états additifs de secrétariat de centre de regroupement pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                        if (typeSelected.equals("GEN") && (niveauSelected.equals("PROB") || niveauSelected.equals("BACC"))) {
                            anneeSelected = Integer.parseInt(anneeString);
                            Rubriquetat rubetat = metier.findRubriquetatByDesignation("SECRÉTARIAT CENTRE DE REGROUPEMENT");
                            caisses = metier.findAllCaissesAdditivesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                            if (caisses.isEmpty()) {
                                JOptionPane.showMessageDialog(this, "Erreur, aucun état additif de secrétariat de centre de regroupement n'existe pour ce groupe d'examens !");
                            } else {
                                //on conserve quelques info de ces anciennes caisses
                                imputationSelected = caisses.get(0).getImputation();
                                Groupe groupe = caisses.get(0).getGroupe();
                                sessionSelected = caisses.get(0).getSession();
                                //on supprime toutes les anciennes caisses du groupe d'examens dans cette rubrique;on va les recréer
                                for (Caisse c : caisses) {
                                    metier.supprimerCaisse(c);
                                }

                                String separateur = ", ";
                                examensList = groupedexamensEnstring.split(separateur);
                                for (int i = 0; i < examensList.length; i++) {
                                    for (Examen e : examens) {
                                        if (e.getSigle().equals(examensList[i])) {
                                            examensSelected.add(e);
                                            break;
                                        }
                                    }
                                }

                                List<Centredispatching> centresRegroupement = metier.findAllCentredispatchingD1Type("Regroupement");
                                for (Centredispatching centreregroup : centresRegroupement) {
                                    List<Rattachdispatching> lesRattachdispatchings = metier.findAllRattachdispatchingsD1CentredispatchingD1Type(centreregroup.getEtablissement().getAbreviation(), "Regroupement");
                                    ArrayList<Souscentre> souscentresList = new ArrayList<>();//liste des sous-centres du centre de regroupement courant
                                    for (Rattachdispatching rattach : lesRattachdispatchings) {
                                        souscentresList.add(rattach.getSouscentre());
                                    }
                                    centreregroupementsouscentresMap.put(centreregroup, souscentresList);
                                }

                                for (Examen e : examensSelected) {
                                    List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1SessionEt1phase(e.getSigle(), anneeSelected, phase);
                                    for (Statistique s : lesStats) {
                                        if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                            int nbrecand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                                            souscentreEffectifMap.put(s.getSouscentre(), nbrecand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                        } else {
                                            souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                                        }
                                    }
                                    List<Scentaplus> scentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, e.getSigle());
                                    for (Scentaplus s : scentaplus) {
                                        if (!tousLesScentaplus.contains(s.getSouscentre())) {
                                            tousLesScentaplus.add(s.getSouscentre());
                                        }
                                    }
                                    List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                                    for (Nature n : lesNats) {
                                        Souscentre unSouscentre = n.getSouscentre();
                                        if (!souscentreList.contains(unSouscentre)) {
                                            souscentreList.add(unSouscentre);
                                        }
                                    }
                                    for (int j = 0; j < souscentreList.size(); j++) {
                                        ArrayList<Character> phasesList = new ArrayList<>();
                                        Souscentre s = souscentreList.get(j);
                                        for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                            if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                                if (!phasesList.contains(n.getActivite().getInitiale())) {
                                                    phasesList.add(n.getActivite().getInitiale());
                                                }
                                                //pas de break ici car on doit parcourir tous lesNats
                                            }
                                        }
                                        if (!souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {
                                            souscentrePhasesMap.put(s, phasesList);
                                        }
                                        if (souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                            ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                            for (int k = 0; k < phasesList.size(); k++) {
                                                if (!phasesList1.contains(phasesList.get(k))) {
                                                    phasesList1.add(phasesList.get(k));
                                                }
                                            }
                                            Collections.sort(phasesList1);
                                            souscentrePhasesMap.put(s, phasesList1);
                                        }
                                    }
                                }

                                //remplissage centreregroupementEffectifMap
                                for (Centredispatching centredispatch : centreregroupementsouscentresMap.keySet()) {
                                    int stat = 0;
                                    for (Souscentre souscentre : centreregroupementsouscentresMap.get(centredispatch)) {
                                        if (souscentreEffectifMap.containsKey(souscentre) && souscentre.getEtablissement().getAbreviation().equals(centredispatch.getEtablissement().getAbreviation())) {
                                            stat = souscentreEffectifMap.get(souscentre);
                                            break;
                                        }
                                    }
                                    if (stat != 0) {
                                        centreregroupementEffectifMap.put(centredispatch, stat);
                                    }
                                }

                                boolean testsicreer = false;
                                try {
                                    for (Centredispatching centreregroupement : centreregroupementEffectifMap.keySet()) {
                                        Souscentre souscentre = metier.findSouscentreByEtablissement(centreregroupement.getEtablissement().getAbreviation());
                                        determinerCout2Additif(centreregroupementEffectifMap, tousLesScentaplus, souscentrePhasesMap, centreregroupement, souscentre);
                                        int montantArrondi = (int) Math.ceil((double) montant / (double) 1000) * 1000;
                                        metier.creerCaisse(new Caisse(montantArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, imputationSelected, souscentre, true));//le centre de regroupement et le sous-centre abrités par un même établissement
                                        testsicreer = true;
                                    }
                                } catch (ObcbudgetException e) {
                                    JOptionPane.showMessageDialog(this, e.getMessage());
                                }
                                if (testsicreer) {
                                    JOptionPane.showMessageDialog(this, "Etats additifs de secrétariat de centre de regroupement mis à jour avec succès pour ce groupe d'examens !");
                                }
                            }//fin else caisses
                        } else {
                            JOptionPane.showMessageDialog(this, "Désolé, frais additifs de secrétariat de centre de regroupement non défini pour ce groupe d'examen !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
                    }
                    souscentreEffectifMap.clear();//on vide le hashmap
                    souscentrePhasesMap.clear();//on vide le hashmap
                    examensSelected.clear();//on vide
                    tousLesScentaplus.clear();
                    souscentreList.clear();
                    centreregroupementsouscentresMap.clear();
                    centreregroupementEffectifMap.clear();
                }//fin if result
                 */
            }//fin else checkbox
        }//fin if valBoutonRadioCentresRegroupement
        if (!jRadioButtonCentresEtsouscentres.isSelected() && !jRadioButtonCentresRegroupement.isSelected()) {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Vous devez choisir le type de secrétariat à mettre à jour !");
        }
    }//GEN-LAST:event_jButtonMettreAjourActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        infoSaisies();
        if (jRadioButtonCentresEtsouscentres.isSelected()) {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de secrétariat d'examen pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("SECRÉTARIAT D'EXAMEN");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état de secrétariat d'examen n'existe pour ce groupe d'examens !");
                    } else {
                        boolean testsisupprimer = false;
                        try {
                            for (Caisse caisse : caisses) {
                                metier.supprimerCaisse(caisse);
                                testsisupprimer = true;
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testsisupprimer) {
                            JOptionPane.showMessageDialog(this, "Etats de secrétariat d'examen supprimés avec succès pour ce groupe d'examens !");
                        }
                    }
                }
            }
        }
        if (jRadioButtonCentresRegroupement.isSelected()) {
            if (!jCheckBoxAdditifCenteregroupement.isSelected()) {
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de secrétariat de centre de regroupement pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                        if (typeSelected.equals("GEN") && (niveauSelected.equals("PROB") || niveauSelected.equals("BACC"))) {
                            anneeSelected = Integer.parseInt(anneeString);
                            Rubriquetat rubetat = metier.findRubriquetatByDesignation("SECRÉTARIAT CENTRE DE REGROUPEMENT");
                            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                            if (caisses.isEmpty()) {
                                JOptionPane.showMessageDialog(this, "Erreur, aucun état de secrétariat de centre de regroupement n'existe pour ce groupe d'examens !");
                            } else {
                                boolean testsisupprimer = false;
                                try {
                                    for (Caisse caisse : caisses) {
                                        metier.supprimerCaisse(caisse);
                                        testsisupprimer = true;
                                    }
                                } catch (ObcbudgetException e) {
                                    JOptionPane.showMessageDialog(this, e.getMessage());
                                }
                                if (testsisupprimer) {
                                    JOptionPane.showMessageDialog(this, "Etats de secrétariat de centre de regroupement supprimés avec succès pour ce groupe d'examens !");
                                }
                            }//fin else caisses
                        } else {
                            JOptionPane.showMessageDialog(this, "Désolé, frais de secrétariat de centre de regroupement non défini pour ce groupe d'examen !");
                        }
                    }//fin if gpexamen
                }//fin if result
            }//fin if !checkbox
            else {//jCheckBoxAdditifCenteregroupement a été sélectionné
                /*
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états additifs de secrétariat de centre de regroupement pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                        if (typeSelected.equals("GEN") && (niveauSelected.equals("PROB") || niveauSelected.equals("BACC"))) {
                            anneeSelected = Integer.parseInt(anneeString);
                            Rubriquetat rubetat = metier.findRubriquetatByDesignation("SECRÉTARIAT CENTRE DE REGROUPEMENT");
                            caisses = metier.findAllCaissesAdditivesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                            if (caisses.isEmpty()) {
                                JOptionPane.showMessageDialog(this, "Erreur, aucun état additif de secrétariat de centre de regroupement n'existe pour ce groupe d'examens !");
                            } else {
                                boolean testsisupprimer = false;
                                try {
                                    for (Caisse caisse : caisses) {
                                        metier.supprimerCaisse(caisse);
                                        testsisupprimer = true;
                                    }
                                } catch (ObcbudgetException e) {
                                    JOptionPane.showMessageDialog(this, e.getMessage());
                                }
                                if (testsisupprimer) {
                                    JOptionPane.showMessageDialog(this, "Etats additifs de secrétariat de centre de regroupement supprimés avec succès pour ce groupe d'examens !");
                                }
                            }//fin else caisses
                        } else {
                            JOptionPane.showMessageDialog(this, "Désolé, frais additifs de secrétariat de centre de regroupement non défini pour ce groupe d'examen !");
                        }
                    }//fin de if groupedexamen
                }//fin if result
                 */
            }
        }
        if (!jRadioButtonCentresRegroupement.isSelected() && !jRadioButtonCentresEtsouscentres.isSelected()) {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Vous devez choisir le type de secrétariat à supprimer !");
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jComboBoxNiveauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNiveauActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxNiveauActionPerformed

    private void jRadioButtonCentresEtsouscentresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonCentresEtsouscentresActionPerformed
        jCheckBoxAdditifCenteregroupement.setEnabled(false);
    }//GEN-LAST:event_jRadioButtonCentresEtsouscentresActionPerformed

    private void jRadioButtonCentresRegroupementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonCentresRegroupementActionPerformed
        jCheckBoxAdditifCenteregroupement.setEnabled(true);
    }//GEN-LAST:event_jRadioButtonCentresRegroupementActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatSecretariat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatSecretariat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatSecretariat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatSecretariat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatSecretariat().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonCreer;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonMettreAjour;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JButton jButtonVisualiser;
    private javax.swing.JCheckBox jCheckBoxAdditifCenteregroupement;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButtonCentresEtsouscentres;
    private javax.swing.JRadioButton jRadioButtonCentresRegroupement;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Examen> examens = null;
    private List<Examen> examensSelected = new ArrayList<>();
    private String[] examensList = null;
    private String[] sessionsCombo = null;
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private int cout = 0;
    private String phase = "ECRIT";
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private List<Caisse> caisses = null;
    private int nbcand = 0, membre = 0, coutvac = 0, indchefsec = 0, primeconfid = 0, nbjour = 0, entretien = 0, supplentretien = 0, transport = 0, supplmanut = 0, montant = 0;
    private String phasesPourAffichage = "";
    private List<Secretariat> secretariats = null;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        examens = metier.findAllExamens();

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int i = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[i++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "GEN", "IND", "IND PROF", "STT", "STT PROF", "TOUT", "TOUT ESTI", "TOUT STT", "TOUT ESTP"};//TOUT=tous les types; TOUT ESTI=INDUSTRIEL+INDUSTRIEL PROFESSIONNEL; TOUT STT=STT+STT PROFESSIONNEL; TOUTN ESTP=TOUT SAUF ESG
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC", "TOUT"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        buttonGroup1.add(jRadioButtonCentresEtsouscentres);
        buttonGroup1.add(jRadioButtonCentresRegroupement);

        jCheckBoxAdditifCenteregroupement.setEnabled(false);
    }

    private void infoSaisies() {
        anneeString = (String) jComboBoxSession.getSelectedItem();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
    }

    private void videFrame() {
        jComboBoxSession.setSelectedIndex(0);
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        buttonGroup1.clearSelection();
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    private void determinerCout(Map<Souscentre, Integer> souscentreEffectifMap, Map<Souscentre, Integer> souscentreNbMaxEpreuveMap, List<Souscentre> tousLesScentaplus, Map<Souscentre, ArrayList<Character>> souscentrePhasesMap, Souscentre souscentre, List<Souscentre> souscentresNosoList, List<Souscentre> souscentresArisquesExtNordList) {
        //pour sous-centre d'examen à un seul secrétariat
        nbcand = souscentreEffectifMap.get(souscentre);
        int vac = 0;

        //la liste des examens contient-il un BP IND ou BP COM?
        boolean test = false;
        for (Examen e : examensSelected) {
            if (e.getSigle().equals("BP IND")) {//ancien était: if (e.getSigle().equals("BP IND") || e.getSigle().equals("BP COM"))
                test = true;
                break;
            }
        }
        //souscentresNosoList,souscentresArisquesExtNordList  
        //on détermine le nombre de membres de secrétariat
        if (nbcand <= 150) {
            membre = 3;
        }
        if (nbcand <= 150 && (souscentresNosoList.contains(souscentre) || souscentresArisquesExtNordList.contains(souscentre))) {
            membre = 5;
        }

        if (nbcand > 150 && nbcand <= 300) {
            membre = 4;
        }
        if ((nbcand > 150 && nbcand <= 300) && (souscentresNosoList.contains(souscentre) || souscentresArisquesExtNordList.contains(souscentre))) {
            membre = 7;
        }

        if (nbcand > 300 && nbcand <= 500) {
            membre = 5;
        }

        if ((nbcand > 300 && nbcand <= 500) && (souscentresNosoList.contains(souscentre) || souscentresArisquesExtNordList.contains(souscentre))) {
            membre = 8;
        }

        if (nbcand > 500 && nbcand <= 700) {
            membre = 7;
        }
        if ((nbcand > 500 && nbcand <= 700) && (souscentresNosoList.contains(souscentre) || souscentresArisquesExtNordList.contains(souscentre))) {
            membre = 8;
        }

        if (nbcand > 700 && nbcand <= 900) {
            membre = 8;
        }
        if ((nbcand > 700 && nbcand <= 900) && (souscentresNosoList.contains(souscentre) || souscentresArisquesExtNordList.contains(souscentre))) {
            membre = 9;
        }

        if (nbcand > 900 && nbcand <= 1000) {
            membre = 9;
        }
        if (nbcand > 1000 && nbcand <= 1200) {
            membre = 11;
        }
        if (nbcand > 1200 && nbcand <= 1300) {
            membre = 12;
        }
        if (nbcand > 1300 && nbcand <= 1400) {
            membre = 13;
        }
        if (nbcand > 1400 && nbcand <= 1600) {
            membre = 14;
        }

        ArrayList<Character> phasesList = souscentrePhasesMap.get(souscentre);
        System.out.println("------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
        System.out.println("souscentre=" + souscentre.getNomsouscent());
        String phasesEnchaine = "";
        if (!phasesList.isEmpty()) {
            for (char c : phasesList) {
                if (c != 'T' && c != 'S') {
                    phasesEnchaine += c;
                }
            }
        }
        if (tousLesScentaplus.contains(souscentre)) {
            phasesPourAffichage = phasesEnchaine + "+";
        } else {
            phasesPourAffichage = phasesEnchaine;
        }

        //on détermine le nombre de vacations par membre: il est fonction du niveau et du type d'examen 
        if (typeSelected.equals("IND") || typeSelected.equals("IND PROF")) {
            if (phasesEnchaine.equals("E")) {
                if (tousLesScentaplus.contains(souscentre)) {
                    vac = 44;
                } else {
                    vac = 32;
                }
            }
            if (phasesEnchaine.equals("EP")) {
                if (tousLesScentaplus.contains(souscentre)) {
                    vac = 44;
                } else {
                    if (test) {
                        vac = 64;
                    } else {
                        vac = 32;
                    }
                }
            }
            if (phasesEnchaine.equals("CDP")) {
                if (tousLesScentaplus.contains(souscentre)) {
                    vac = 66;
                } else {
                    vac = 54;
                }
            }
            if (phasesEnchaine.equals("CDE")) {
                if (tousLesScentaplus.contains(souscentre)) {
                    vac = 86;
                } else {
                    vac = 74;
                }
            }
            if (phasesEnchaine.equals("CDEP")) {
                if (tousLesScentaplus.contains(souscentre)) {
                    if (test) {
                        vac = 66;
                    } else {
                        vac = 86;
                    }
                } else {
                    if (test) {
                        vac = 64;
                    } else {
                        vac = 74;
                    }
                }
            }
            //aux examens industriels la durée du secrétariat est fonction du nombre d'épreuves professionnelles contraignantes
            //on détermine la durée en jour du secrétariat
            if (souscentreNbMaxEpreuveMap.get(souscentre) == 1) {
                nbjour = 9;
            }
            if (souscentreNbMaxEpreuveMap.get(souscentre) > 1) {
                nbjour = 12;
            }
        }
        if (typeSelected.equals("GEN") && niveauSelected.equals("BACC")) {
            if (phasesPourAffichage.equals("E") || phasesPourAffichage.equals("E+") || phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("P")) {
                vac = 27;
            }
            if (phasesPourAffichage.equals("CE") || phasesPourAffichage.equals("CE+") || phasesPourAffichage.equals("CEP") || phasesPourAffichage.equals("CEP+")) {
                vac = 44;
            }
            if (phasesPourAffichage.equals("CDE") || phasesPourAffichage.equals("CDE+") || phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                vac = 73;
            }
            nbjour = 7;
        }
        if (typeSelected.equals("GEN") && niveauSelected.equals("PROB")) {
            if (phasesPourAffichage.equals("E") || phasesPourAffichage.equals("E+") || phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("P")) {
                vac = 26;
            }
            if (phasesPourAffichage.equals("CE") || phasesPourAffichage.equals("CE+") || phasesPourAffichage.equals("CEP") || phasesPourAffichage.equals("CEP+")) {
                vac = 40;
            }
            if (phasesPourAffichage.equals("CDE") || phasesPourAffichage.equals("CDE+") || phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                vac = 70;
            }
            nbjour = 6;
        }
        if (typeSelected.equals("STT") && niveauSelected.equals("BACC")) {
            if (phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("EP+")) {
                vac = 48;
            }
            if (phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                vac = 100;
            }
            nbjour = 9;
        }
        if (typeSelected.equals("STT") && niveauSelected.equals("PROB")) {
            if (phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("EP+")) {
                vac = 44;
            }
            if (phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                vac = 96;
            }
            nbjour = 8;
        }
        if (typeSelected.equals("STT PROF") && (niveauSelected.equals("PROB") || niveauSelected.equals("BACC"))) {
            if (phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("EP+") || phasesPourAffichage.equals("CDEP")) {
                vac = 64;
            }
            if (phasesPourAffichage.equals("CDEP+")) {
                vac = 66;
            }
            nbjour = 3;
        }

        coutvac = membre * vac * 1500;

        //on détermine l'indemnité du chef de secrétariat
        if (phasesEnchaine.length() == 1) {
            indchefsec = 5000;
        }
        if (phasesEnchaine.length() == 2) {
            indchefsec = 10000;
        }
        if (phasesEnchaine.length() > 2) {
            indchefsec = 20000;
        }

        //on détermine la prime de confidentialité
        if (phasesEnchaine.length() == 1) {
            primeconfid = 25000 * membre;
        } else {
            primeconfid = 30000 * membre;
        }

        //on détermine le coût d'entretien du secrétariat
        entretien = membre * nbjour * 500;

        //on détermine le coût du tranport urbain et manutention
        transport = membre * 10000;

        //montant total
        montant = coutvac + indchefsec + primeconfid + entretien + transport;
    }

    private void determinerCout1(Map<Souscentre, Integer> souscentreNbMaxEpreuveMap, List<Souscentre> tousLesScentaplus, Souscentre souscentre, Map<Secretariat, Integer> secretariatEffectifMap, Secretariat secretariat, List<Souscentre> souscentresNosoList, List<Souscentre> souscentresArisquesExtNordList, Map<Secretariat, ArrayList<Character>> activitesSecretariatMap) {
        //pour sous-centre d'examen à secrétariats démultipliés
        nbcand = secretariatEffectifMap.get(secretariat);
        ArrayList<Character> phasesList = activitesSecretariatMap.get(secretariat);;
        int vac = 0;

        //la liste des examens contient-il un BP IND ou BP COM?
        boolean test = false;
        for (Examen e : examensSelected) {
            if (e.getSigle().equals("BP IND")) {//ancien était: if (e.getSigle().equals("BP IND") || e.getSigle().equals("BP COM"))
                test = true;
                break;
            }
        }
        //on détermine le nombre de membres de secrétariat
        if (nbcand <= 150) {
            membre = 3;
        }
        if (nbcand <= 150 && (souscentresNosoList.contains(souscentre) || souscentresArisquesExtNordList.contains(souscentre))) {
            membre = 5;
        }

        if (nbcand > 150 && nbcand <= 300) {
            membre = 4;
        }
        if ((nbcand > 150 && nbcand <= 300) && (souscentresNosoList.contains(souscentre) || souscentresArisquesExtNordList.contains(souscentre))) {
            membre = 7;
        }

        if (nbcand > 300 && nbcand <= 500) {
            membre = 5;
        }

        if ((nbcand > 300 && nbcand <= 500) && (souscentresNosoList.contains(souscentre) || souscentresArisquesExtNordList.contains(souscentre))) {
            membre = 8;
        }

        if (nbcand > 500 && nbcand <= 700) {
            membre = 7;
        }
        if ((nbcand > 500 && nbcand <= 700) && (souscentresNosoList.contains(souscentre) || souscentresArisquesExtNordList.contains(souscentre))) {
            membre = 8;
        }

        if (nbcand > 700 && nbcand <= 900) {
            membre = 8;
        }
        if ((nbcand > 700 && nbcand <= 900) && (souscentresNosoList.contains(souscentre) || souscentresArisquesExtNordList.contains(souscentre))) {
            membre = 9;
        }

        if (nbcand > 900 && nbcand <= 1000) {
            membre = 9;
        }
        if (nbcand > 1000 && nbcand <= 1200) {
            membre = 11;
        }
        if (nbcand > 1200 && nbcand <= 1300) {
            membre = 12;
        }
        if (nbcand > 1300 && nbcand <= 1400) {
            membre = 13;
        }
        if (nbcand > 1400 && nbcand <= 1600) {
            membre = 14;
        }

        String phasesEnchaine = "";
        if (!phasesList.isEmpty()) {
            for (char c : phasesList) {
                if (c != 'T' && c != 'S') {
                    phasesEnchaine += c;
                }
            }
        }
        if (tousLesScentaplus.contains(souscentre)) {
            phasesPourAffichage = phasesEnchaine + "+";
        } else {
            phasesPourAffichage = phasesEnchaine;
        }

        //on détermine le nombre de vacations par membre: il est fonction du niveau et du type d'examen 
        if (typeSelected.equals("IND") || typeSelected.equals("IND PROF")) {
            if (phasesEnchaine.equals("E")) {
                if (tousLesScentaplus.contains(souscentre)) {
                    vac = 44;
                } else {
                    vac = 32;
                }
            }
            if (phasesEnchaine.equals("EP")) {
                if (tousLesScentaplus.contains(souscentre)) {
                    vac = 44;
                } else {
                    if (test) {
                        vac = 64;
                    } else {
                        vac = 32;
                    }
                }
            }
            if (phasesEnchaine.equals("CDP")) {
                if (tousLesScentaplus.contains(souscentre)) {
                    vac = 66;
                } else {
                    vac = 54;
                }
            }
            if (phasesEnchaine.equals("CDE")) {
                if (tousLesScentaplus.contains(souscentre)) {
                    vac = 86;
                } else {
                    vac = 74;
                }
            }
            if (phasesEnchaine.equals("CDEP")) {
                if (tousLesScentaplus.contains(souscentre)) {
                    if (test) {
                        vac = 66;
                    } else {
                        vac = 86;
                    }
                } else {
                    if (test) {
                        vac = 64;
                    } else {
                        vac = 74;
                    }
                }
            }
            //aux examens industriels la durée du secrétariat est fonction du nombre d'épreuves professionnelles contraignantes
            //on détermine la durée en jour du secrétariat
            if (souscentreNbMaxEpreuveMap.get(souscentre) == 1) {
                nbjour = 9;
            }
            if (souscentreNbMaxEpreuveMap.get(souscentre) > 1) {
                nbjour = 12;
            }
        }
        if (typeSelected.equals("GEN") && niveauSelected.equals("BACC")) {
            if (phasesPourAffichage.equals("E") || phasesPourAffichage.equals("E+") || phasesPourAffichage.equals("P")) {
                vac = 27;
            }
            if (phasesPourAffichage.equals("CE") || phasesPourAffichage.equals("CE+")) {
                vac = 44;
            }
            if (phasesPourAffichage.equals("CDE") || phasesPourAffichage.equals("CDE+") || phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                vac = 73;
            }
            nbjour = 7;
        }
        if (typeSelected.equals("GEN") && niveauSelected.equals("PROB")) {
            if (phasesPourAffichage.equals("E") || phasesPourAffichage.equals("E+") || phasesPourAffichage.equals("P")) {
                vac = 26;
            }
            if (phasesPourAffichage.equals("CE") || phasesPourAffichage.equals("CE+")) {
                vac = 40;
            }
            if (phasesPourAffichage.equals("CDE") || phasesPourAffichage.equals("CDE+")) {
                vac = 70;
            }
            nbjour = 6;
        }
        if (typeSelected.equals("STT") && niveauSelected.equals("BACC")) {
            if (phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("EP+")) {
                vac = 48;
            }
            if (phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                vac = 100;
            }
            nbjour = 9;
        }
        if (typeSelected.equals("STT") && niveauSelected.equals("PROB")) {
            if (phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("EP+")) {
                vac = 44;
            }
            if (phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                vac = 96;
            }
            nbjour = 8;
        }
        if (typeSelected.equals("STT PROF") && (niveauSelected.equals("PROB") || niveauSelected.equals("BACC"))) {
            if (phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("EP+") || phasesPourAffichage.equals("CDEP")) {
                vac = 64;
            }
            if (phasesPourAffichage.equals("CDEP+")) {
                vac = 66;
            }
            nbjour = 3;
        }

        coutvac = membre * vac * 1500;

        //on détermine l'indemnité du chef de secrétariat
        //on détermine l'indemnité du chef de secrétariat
        if (phasesEnchaine.length() == 1) {
            indchefsec = 5000;
        }
        if (phasesEnchaine.length() == 2) {
            indchefsec = 10000;
        }
        if (phasesEnchaine.length() > 2) {
            indchefsec = 20000;
        }

        //on détermine la prime de confidentialité
        if (phasesEnchaine.length() == 1) {
            primeconfid = 25000 * membre;
        } else {
            primeconfid = 30000 * membre;
        }

        //on détermine le coût d'entretien du secrétariat
        entretien = membre * nbjour * 500;

        //on détermine le coût du tranport urbain et manutention
        transport = membre * 10000;

        //montant total
        montant = coutvac + indchefsec + primeconfid + entretien + transport;
    }

    public int max(int a, int b) {
        int tampon = a;
        if (b > a) {
            tampon = b;
        }
        return tampon;
    }

    private void determinerCout2(Map<Centredispatching, Integer> centreregroupementEffectifMap, List<Souscentre> tousLesScentaplus, Map<Souscentre, ArrayList<Character>> souscentrePhasesMap, Centredispatching centreregroupement, Souscentre souscentre, List<Souscentre> souscentresNosoList, List<Souscentre> souscentresArisquesExtNordList) {
        //pour centre de regroupement
        nbcand = centreregroupementEffectifMap.get(centreregroupement);
        int vac = 0;

        //on détermine le nombre de membres de secrétariat
        if (nbcand <= 150) {
            membre = 3;
        }
        if (nbcand <= 150 && (souscentresNosoList.contains(souscentre) || souscentresArisquesExtNordList.contains(souscentre))) {
            membre = 5;
        }

        if (nbcand > 150 && nbcand <= 300) {
            membre = 4;
        }
        if ((nbcand > 150 && nbcand <= 300) && (souscentresNosoList.contains(souscentre) || souscentresArisquesExtNordList.contains(souscentre))) {
            membre = 7;
        }

        if (nbcand > 300 && nbcand <= 500) {
            membre = 5;
        }

        if ((nbcand > 300 && nbcand <= 500) && (souscentresNosoList.contains(souscentre) || souscentresArisquesExtNordList.contains(souscentre))) {
            membre = 8;
        }

        if (nbcand > 500 && nbcand <= 700) {
            membre = 7;
        }
        if ((nbcand > 500 && nbcand <= 700) && (souscentresNosoList.contains(souscentre) || souscentresArisquesExtNordList.contains(souscentre))) {
            membre = 8;
        }

        if (nbcand > 700 && nbcand <= 900) {
            membre = 8;
        }
        if ((nbcand > 700 && nbcand <= 900) && (souscentresNosoList.contains(souscentre) || souscentresArisquesExtNordList.contains(souscentre))) {
            membre = 9;
        }

        if (nbcand > 900 && nbcand <= 1000) {
            membre = 9;
        }
        if (nbcand > 1000 && nbcand <= 1200) {
            membre = 11;
        }
        if (nbcand > 1200 && nbcand <= 1300) {
            membre = 12;
        }
        if (nbcand > 1300 && nbcand <= 1400) {
            membre = 13;
        }
        if (nbcand > 1400 && nbcand <= 1600) {
            membre = 14;
        }

        ArrayList<Character> phasesList = souscentrePhasesMap.get(souscentre);
        String phasesEnchaine = "";
        if (!phasesList.isEmpty()) {
            for (char c : phasesList) {
                if (c != 'T' && c != 'S') {
                    phasesEnchaine += c;
                }
            }
        }
        if (tousLesScentaplus.contains(souscentre)) {
            phasesPourAffichage = phasesEnchaine + "+";
        } else {
            phasesPourAffichage = phasesEnchaine;
        }

        if (typeSelected.equals("GEN") && niveauSelected.equals("BACC")) {
            if (phasesPourAffichage.equals("CE") || phasesPourAffichage.equals("CE+") || phasesPourAffichage.equals("CDE") || phasesPourAffichage.equals("CDE+") || phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                vac = 83;
            }
            if (phasesPourAffichage.equals("E") || phasesPourAffichage.equals("E+")) {
                vac = 37;
            }
            nbjour = 7;
        }
        if (typeSelected.equals("GEN") && niveauSelected.equals("PROB")) {
            if (phasesPourAffichage.equals("CE") || phasesPourAffichage.equals("CE+") || phasesPourAffichage.equals("CDE") || phasesPourAffichage.equals("CDE+") || phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                vac = 80;
            }
            if (phasesPourAffichage.equals("E") || phasesPourAffichage.equals("E+")) {
                vac = 36;
            }
            nbjour = 6;
        }

        coutvac = membre * vac * 1500;

        //on détermine l'indemnité du chef de secrétariat
        if (phasesPourAffichage.equals("E") || phasesPourAffichage.equals("E+")) {
            indchefsec = 5000;
        }
        if (phasesPourAffichage.equals("CE") || phasesPourAffichage.equals("CE+") || phasesPourAffichage.equals("CEP") || phasesPourAffichage.equals("CEP+")) {
            indchefsec = 10000;
        }
        if (phasesEnchaine.length() >= 3 && phasesList.contains('D')) {
            indchefsec = 20000;
        }

        //on détermine la prime de confidentialité
        if (phasesEnchaine.length() == 1) {
            primeconfid = 25000 * membre;
        } else {
            primeconfid = 30000 * membre;
        }

        //on détermine le coût d'entretien du secrétariat
        entretien = membre * nbjour * 500;

        //on détermine le supplement de l'entretien
        supplentretien = membre * 2500;

        //on détermine le coût du tranport urbain et manutention
        supplmanut = membre * 2500;

        //on détermine le supplement de la manutention
        transport = membre * 10000;

        //montant total
        montant = coutvac + indchefsec + primeconfid + entretien + supplentretien + transport + supplmanut;
    }

    private void determinerCout2secret(Map<Secretariat, Integer> secretariatEffectifMap, Map<Secretariat, ArrayList<Character>> activiteSecretariatMap, Secretariat secretariatcourant, List<Souscentre> souscentresNosoList, List<Souscentre> souscentresArisquesExtNordList) {
        //pour centre de regroupement
        nbcand = secretariatEffectifMap.get(secretariatcourant);
        int vac = 0;

        //on détermine le nombre de membres de secrétariat
        if (nbcand <= 150) {
            membre = 3;
        }
        if (nbcand > 150 && nbcand <= 300) {
            membre = 4;
        }
        if (nbcand > 300 && nbcand <= 500) {
            membre = 5;
        }
        if (nbcand > 500 && nbcand <= 700) {
            membre = 7;
        }
        if (nbcand > 700 && nbcand <= 900) {
            membre = 8;
        }
        if (nbcand > 900 && nbcand <= 1000) {
            membre = 9;
        }
        if (nbcand > 1000 && nbcand <= 1200) {
            membre = 11;
        }
        if (nbcand > 1200 && nbcand <= 1300) {
            membre = 12;
        }
        if (nbcand > 1300 && nbcand <= 1400) {
            membre = 13;
        }
        if (nbcand > 1400 && nbcand <= 1600) {
            membre = 14;
        }

        ArrayList<Character> phasesList = activiteSecretariatMap.get(secretariatcourant);
        String phasesEnchaine = "";
        if (!phasesList.isEmpty()) {
            for (char c : phasesList) {
                if (c != 'T' && c != 'S') {
                    phasesEnchaine += c;
                }
            }
        }
                            
        phasesPourAffichage = phasesEnchaine;
        

        if (typeSelected.equals("GEN") && niveauSelected.equals("BACC")) {
            if (phasesPourAffichage.equals("CE") || phasesPourAffichage.equals("CE+") || phasesPourAffichage.equals("CDE") || phasesPourAffichage.equals("CDE+") || phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                vac = 83;
            }
            if (phasesPourAffichage.equals("E") || phasesPourAffichage.equals("E+")) {
                vac = 37;
            }
            nbjour = 7;
        }
        if (typeSelected.equals("GEN") && niveauSelected.equals("PROB")) {
            if (phasesPourAffichage.equals("CE") || phasesPourAffichage.equals("CE+") || phasesPourAffichage.equals("CDE") || phasesPourAffichage.equals("CDE+") || phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                vac = 80;
            }
            if (phasesPourAffichage.equals("E") || phasesPourAffichage.equals("E+")) {
                vac = 36;
            }
            nbjour = 6;
        }

        coutvac = membre * vac * 1500;

        //on détermine l'indemnité du chef de secrétariat
        if (phasesPourAffichage.equals("E") || phasesPourAffichage.equals("E+")) {
            indchefsec = 5000;
        }
        if (phasesPourAffichage.equals("CE") || phasesPourAffichage.equals("CE+") || phasesPourAffichage.equals("CEP") || phasesPourAffichage.equals("CEP+")) {
            indchefsec = 10000;
        }
        if (phasesEnchaine.length() >= 3 && phasesList.contains('D')) {
            indchefsec = 20000;
        }

        //on détermine la prime de confidentialité
        if (phasesEnchaine.length() == 1) {
            primeconfid = 25000 * membre;
        } else {
            primeconfid = 30000 * membre;
        }

        //on détermine le coût d'entretien du secrétariat
        entretien = membre * nbjour * 500;

        //on détermine le supplement de l'entretien
        supplentretien = membre * 2500;

        //on détermine le coût du tranport urbain et manutention
        supplmanut = membre * 2500;

        //on détermine le supplement de la manutention
        transport = membre * 10000;

        //montant total
        montant = coutvac + indchefsec + primeconfid + entretien + supplentretien + transport + supplmanut;
    }

    private void determinerCout2Additif(Map<Centredispatching, Integer> centreregroupementEffectifMap, List<Souscentre> tousLesScentaplus, Map<Souscentre, ArrayList<Character>> souscentrePhasesMap, Centredispatching centreregroupement, Souscentre souscentre) {
        //pour secrétariat additif de centre de regroupement
        nbcand = centreregroupementEffectifMap.get(centreregroupement);
        int vac = 0;

        //on détermine le nombre de membres de secrétariat
        if (nbcand <= 150) {
            membre = 3;
        }
        if (nbcand > 150 && nbcand <= 300) {
            membre = 4;
        }
        if (nbcand > 300 && nbcand <= 500) {
            membre = 5;
        }
        if (nbcand > 500 && nbcand <= 700) {
            membre = 7;
        }
        if (nbcand > 700 && nbcand <= 900) {
            membre = 8;
        }
        if (nbcand > 900 && nbcand <= 1000) {
            membre = 9;
        }
        if (nbcand > 1000 && nbcand <= 1200) {
            membre = 11;
        }
        if (nbcand > 1200 && nbcand <= 1300) {
            membre = 12;
        }
        if (nbcand > 1300 && nbcand <= 1400) {
            membre = 13;
        }
        if (nbcand > 1400 && nbcand <= 1600) {
            membre = 14;
        }

        ArrayList<Character> phasesList = souscentrePhasesMap.get(souscentre);
        String phasesEnchaine = "";
        if (!phasesList.isEmpty()) {
            for (char c : phasesList) {
                if (c != 'T' && c != 'S') {
                    phasesEnchaine += c;
                }
            }
        }
        if (tousLesScentaplus.contains(souscentre)) {
            phasesPourAffichage = phasesEnchaine + "+";
        } else {
            phasesPourAffichage = phasesEnchaine;
        }

        vac = 5;
        nbjour = 2;
        coutvac = membre * vac * 1500;

        //on détermine le coût d'entretien du secrétariat
        entretien = membre * nbjour * 500;

        //montant total
        montant = coutvac + entretien;
    }

    private boolean testerSiSecretariatFaitCorrectionOuDeliberation(Examen exam, Secretariat sec) {
        boolean result = false;
        List<Naturesecretariat> lesNatsecs = metier.findAllNaturesecretariatsD1Secreatariat(sec.getIdsec());
        ArrayList<Character> phasesList = new ArrayList<>();
        for (Naturesecretariat natsec : lesNatsecs) {
            if (!phasesList.contains(natsec.getActivite().getInitiale())) {
                phasesList.add(natsec.getActivite().getInitiale());
            }
        }
        if (!phasesList.isEmpty()) {
            for (char c : phasesList) {
                if (c == 'D' || (c == 'C') && exam.getType().equals("GEN")) {
                    result = true;
                    break;
                }
            }
        }
        return result;
    }

    private boolean testSiCentreDeRegroupement(Souscentre souscentre) {
        //NB: un sous-centre abrité par un établissement qui abrite aussi un centres de regroupement ne bénéficie pas des frais de secrétariat d'examen
        //on déterminent la liste des centres de regroupement
        List<Centredispatching> centresRegroupement = metier.findAllCentredispatchingD1Type("Regroupement");
        boolean valTest = false;
        for (Centredispatching centreregroupement : centresRegroupement) {
            if (centreregroupement.getEtablissement().getNometab().equals(souscentre.getEtablissement().getNometab())) {
                //le même établissement abrite ce sous-centre et un centre de regroupement
                valTest = true;
                break;
            }
        }
        return valTest;
    }

    private void ordonnerSecretariatsD1souscentre(ArrayList<Secretariat> lesSecrets) {
        for (int i = 0; i < lesSecrets.size() - 1; i++) {
            for (int j = i + 1; j < lesSecrets.size(); j++) {
                if (lesSecrets.get(j).getNumsec() < lesSecrets.get(i).getNumsec()) {
                    //on échange les deux
                    Secretariat tampon = lesSecrets.get(i);
                    lesSecrets.set(i, lesSecrets.get(j));
                    lesSecrets.set(j, tampon);
                }
            }
        }
    }
}
