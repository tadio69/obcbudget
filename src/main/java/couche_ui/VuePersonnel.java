package couche_ui;

import couche_jpa.Arrondissement;
import couche_jpa.Departement;
import couche_jpa.Fonction;
import couche_jpa.Personnel;
import couche_jpa.Region;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VuePersonnel extends javax.swing.JFrame {

    DefaultTableModel model;

    public VuePersonnel() {
        initComponents();
        model = (DefaultTableModel) jTable1.getModel();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        buttonGroup7 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabelNom = new javax.swing.JLabel();
        jLabelPrenom = new javax.swing.JLabel();
        jLabelFonction = new javax.swing.JLabel();
        jTextFieldNom = new javax.swing.JTextField();
        jTextFieldPrenom = new javax.swing.JTextField();
        jComboBoxFonction = new javax.swing.JComboBox<>();
        jButtonCreer = new javax.swing.JButton();
        jButtonRechercher = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanelDateNaissance = new javax.swing.JPanel();
        jLabelRégion = new javax.swing.JLabel();
        jComboBoxRegion = new javax.swing.JComboBox<>();
        jLabelDepartement = new javax.swing.JLabel();
        jComboBoxDepartement = new javax.swing.JComboBox<>();
        jLabelArrondissement = new javax.swing.JLabel();
        jComboBoxArrondissement = new javax.swing.JComboBox<>();
        jLabelStructure = new javax.swing.JLabel();
        jTextFieldStructure = new javax.swing.JTextField();
        jButtonVisualiser = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("PERSONNEL");

        jLabelNom.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNom.setText("Nom :");

        jLabelPrenom.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelPrenom.setText("Prénom :");

        jLabelFonction.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelFonction.setText("Fonction :");

        jTextFieldNom.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jTextFieldPrenom.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jComboBoxFonction.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonCreer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreer.setText("Créer");
        jButtonCreer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerActionPerformed(evt);
            }
        });

        jButtonRechercher.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonRechercher.setText("Rechercher");
        jButtonRechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRechercherActionPerformed(evt);
            }
        });

        jButtonModifier.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonModifier.setText("Modifier");
        jButtonModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierActionPerformed(evt);
            }
        });

        jButtonSupprimer.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jButtonAnnuler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "N° Ordre", "Nom", "Prénom", "Fonction", "Région", "Département", "Arrondissement", "Structure d'attache"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(true);
        jTable1.setShowVerticalLines(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(8).setResizable(false);
        }

        jPanelDateNaissance.setBackground(new java.awt.Color(51, 255, 153));
        jPanelDateNaissance.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Structure d'attache", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 225))); // NOI18N

        jLabelRégion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRégion.setText("Région :");

        jComboBoxRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionActionPerformed(evt);
            }
        });

        jLabelDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartement.setText("Département :");

        jComboBoxDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementActionPerformed(evt);
            }
        });

        jLabelArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissement.setText("Arrondissement :");

        jComboBoxArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelStructure.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelStructure.setText("Nom :");

        jTextFieldStructure.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanelDateNaissanceLayout = new javax.swing.GroupLayout(jPanelDateNaissance);
        jPanelDateNaissance.setLayout(jPanelDateNaissanceLayout);
        jPanelDateNaissanceLayout.setHorizontalGroup(
            jPanelDateNaissanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDateNaissanceLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanelDateNaissanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelArrondissement, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelDepartement, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelRégion, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelStructure, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDateNaissanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldStructure)
                    .addGroup(jPanelDateNaissanceLayout.createSequentialGroup()
                        .addGroup(jPanelDateNaissanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.Alignment.LEADING, 0, 323, Short.MAX_VALUE)
                            .addComponent(jComboBoxDepartement, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxRegion, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 122, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelDateNaissanceLayout.setVerticalGroup(
            jPanelDateNaissanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDateNaissanceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDateNaissanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldStructure, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelStructure, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanelDateNaissanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRégion, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanelDateNaissanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelDateNaissanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(jLabelArrondissement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(19, 19, 19))
        );

        jButtonVisualiser.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiser.setText("Visualiser");
        jButtonVisualiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(313, 313, 313)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelPrenom)
                            .addComponent(jLabelNom)
                            .addComponent(jLabelFonction))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldPrenom, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                            .addComponent(jTextFieldNom, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                            .addComponent(jComboBoxFonction, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(230, 230, 230)
                        .addComponent(jPanelDateNaissance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(477, 477, 477)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(238, 238, 238)
                        .addComponent(jButtonCreer)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonRechercher)
                        .addGap(17, 17, 17)
                        .addComponent(jButtonModifier)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSupprimer)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnuler)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonFermer)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonVisualiser))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1080, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNom, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNom, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPrenom, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldPrenom, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelFonction, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxFonction, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanelDateNaissance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonVisualiser, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonRechercher, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonModifier, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonSupprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonAnnuler, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCreer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jButtonCreerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        if (!nomSaisi.equals("") && !structureSaisie.equals("") && !titreFonctionSelected.equals("---") && !nomArrondissementSelected.equals("---")) {
            for (Arrondissement a : arrondissements) {
                if (a.getNomarr().equals(nomArrondissementSelected)) {
                    arrondissementSelected = a;
                    break;
                }
            }
            for (Fonction f : fonctions) {
                if (f.getTitre().equals(titreFonctionSelected)) {
                    fonctionSelected = f;
                    break;
                }
            }
            try {
                metier.creerPersonnel(new Personnel(nomSaisi.toUpperCase(), prenomSaisi.toUpperCase(), structureSaisie.toUpperCase(), fonctionSelected, arrondissementSelected));
                JOptionPane.showMessageDialog(this, " Personnel créé avec succès !");
                int i = 1;
                personnels = metier.findAllPersonnelsD1Arrondissement(nomArrondissementSelected);
                for (Personnel p : personnels) {
                    model.insertRow(model.getRowCount(), new Object[]{p.getIdpers(), i++, p.getNompers(), p.getPrenom(), p.getFonction().getTitre(), p.getArrondissement().getDepartement().getRegion().getNomreg(), p.getArrondissement().getDepartement().getNomdepart(), p.getArrondissement().getNomarr(), p.getStructure()});
                }
            } catch (ObcbudgetException ex) {
                JOptionPane.showMessageDialog(this, "Impossible de créer le personnel de nom [" + nomSaisi.toUpperCase() + " " + prenomSaisi.toUpperCase() + "] \n raison:" + ex.getMessage());
            }

        } else {
            JOptionPane.showMessageDialog(this, " Tous les champs sont obligatoires sauf le prénom!");
        }
    }//GEN-LAST:event_jButtonCreerActionPerformed

    private void jButtonRechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRechercherActionPerformed
        model.setRowCount(0);//vide la jTable
        nomSaisi = (String) jTextFieldNom.getText();
        if (!nomSaisi.equals("") && !nomSaisi.equalsIgnoreCase("tous")) {
            try {
                personnelsRecherches = metier.findAllPersonnelsLikeName(nomSaisi.toUpperCase());
                int i = 1;
                for (Personnel p : personnelsRecherches) {
                    model.insertRow(model.getRowCount(), new Object[]{p.getIdpers(), i++, p.getNompers(), p.getPrenom(), p.getFonction().getTitre(), p.getArrondissement().getDepartement().getRegion().getNomreg(), p.getArrondissement().getDepartement().getNomdepart(), p.getArrondissement().getNomarr(), p.getStructure()});
                }
            } catch (ObcbudgetException ex) {
                JOptionPane.showMessageDialog(this, "Impossible de trouver des personnels de nom proche de [" + nomSaisi + "] \n raison:" + ex.getMessage());
            }
        } else {
            if (nomSaisi.equals("")) {
                JOptionPane.showMessageDialog(this, " Le champ nom est obligatoire !");
            } else {//tous les personnels d'un arrondissement
                nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
                if (!nomArrondissementSelected.equals("---")) {
                    personnels = metier.findAllPersonnelsD1Arrondissement(nomArrondissementSelected);
                    int i = 1;
                    for (Personnel p : personnels) {
                        model.insertRow(model.getRowCount(), new Object[]{p.getIdpers(), i++, p.getNompers(), p.getPrenom(), p.getFonction().getTitre(), p.getArrondissement().getDepartement().getRegion().getNomreg(), p.getArrondissement().getDepartement().getNomdepart(), p.getArrondissement().getNomarr(), p.getStructure()});
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Veuillez sélectionner un arrondissement svp.");
                }
            }
        }
    }//GEN-LAST:event_jButtonRechercherActionPerformed

    private void jComboBoxRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionActionPerformed
        remplirDepartementCombobox();
    }//GEN-LAST:event_jComboBoxRegionActionPerformed

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        videFrame();
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        //remplit les champs
        int ligne = jTable1.getSelectedRow();
        idPersonnelCliked = (int) model.getValueAt(ligne, 0);
        jTextFieldNom.setText((String) model.getValueAt(ligne, 2));
        jTextFieldPrenom.setText((String) model.getValueAt(ligne, 3));
        jComboBoxFonction.setSelectedItem((String) model.getValueAt(ligne, 4));
        jComboBoxRegion.setSelectedItem((String) model.getValueAt(ligne, 5));
        jComboBoxDepartement.setSelectedItem((String) model.getValueAt(ligne, 6));
        jComboBoxArrondissement.setSelectedItem((String) model.getValueAt(ligne, 7));
        jTextFieldStructure.setText((String) model.getValueAt(ligne, 8));
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButtonModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier ce personnel?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!nomSaisi.equals("") && !structureSaisie.equals("") && !titreFonctionSelected.equals("---") && !nomArrondissementSelected.equals("---")) {
                personnelCliked = metier.findPersonnelById(idPersonnelCliked);
                for (Arrondissement a : arrondissements) {
                    if (a.getNomarr().equals(nomArrondissementSelected)) {
                        arrondissementSelected = a;
                        break;
                    }
                }
                for (Fonction f : fonctions) {
                    if (f.getTitre().equals(titreFonctionSelected)) {
                        fonctionSelected = f;
                        break;
                    }
                }
                personnelCliked.setNompers(nomSaisi.toUpperCase());
                personnelCliked.setPrenom(prenomSaisi.toUpperCase());
                personnelCliked.setStructure(structureSaisie.toUpperCase());
                personnelCliked.setFonction(fonctionSelected);
                personnelCliked.setArrondissement(arrondissementSelected);
                try {
                    metier.modifierPersonnel(personnelCliked);
                    JOptionPane.showMessageDialog(this, " Personnel modifié avec succès !");
                    int i = 1;
                    personnels = metier.findAllPersonnelsD1Arrondissement(nomArrondissementSelected);
                    for (Personnel p : personnels) {
                        model.insertRow(model.getRowCount(), new Object[]{p.getIdpers(), i++, p.getNompers(), p.getPrenom(), p.getFonction().getTitre(), p.getArrondissement().getDepartement().getRegion().getNomreg(), p.getArrondissement().getDepartement().getNomdepart(), p.getArrondissement().getNomarr(), p.getStructure()});
                    }
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de modifier le personnel de nom [" + nomSaisi.toUpperCase() + " " + prenomSaisi.toUpperCase() + "] \n raison:" + ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, " Tous les champs sont obligatoires sauf le prénom!");
            }
        }
    }//GEN-LAST:event_jButtonModifierActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer ce personnel?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!nomSaisi.equals("") && !structureSaisie.equals("") && !titreFonctionSelected.equals("---") && !nomArrondissementSelected.equals("---")) {
                try {
                    metier.supprimerPersonnel(metier.findPersonnelById(idPersonnelCliked));
                    JOptionPane.showMessageDialog(this, " Personnel supprimé avec succès !");
                    //videFrame();
                    nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
                    int i = 1;
                    personnels = metier.findAllPersonnelsD1Arrondissement(nomArrondissementSelected);
                    for (Personnel p : personnels) {
                        model.insertRow(model.getRowCount(), new Object[]{p.getIdpers(), i++, p.getNompers(), p.getPrenom(), p.getFonction().getTitre(), p.getArrondissement().getDepartement().getRegion().getNomreg(), p.getArrondissement().getDepartement().getNomdepart(), p.getArrondissement().getNomarr(), p.getStructure()});
                    }
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer le personnel de nom [" + nomSaisi + " " + prenomSaisi + "] \n raison:" + ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, " Tous les champs sont obligatoires sauf le prénom!");
            }
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jComboBoxDepartementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementActionPerformed
        remplirArrodissementCombobox();
    }//GEN-LAST:event_jComboBoxDepartementActionPerformed

    private void jButtonVisualiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserActionPerformed
        personnels = metier.findAllPersonnels();
        try {
            List<Map<String, Object>> datasource = new ArrayList<>();
            int i = 1;
            for (Personnel p : personnels) {
                Map<String, Object> row = new HashMap<>();
                String numero = "" + i++;
                row.put("numero", numero);
                row.put("region", p.getArrondissement().getDepartement().getRegion().getNomreg());
                row.put("departement", p.getArrondissement().getDepartement().getNomdepart());
                row.put("arrondissement", p.getArrondissement().getNomarr());
                row.put("nom", p.getNompers());
                row.put("prenom", p.getPrenom());
                row.put("structure", p.getStructure());
                row.put("fonction", p.getFonction().getTitre());
                datasource.add(row);
            }
            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\personnelReport.jrxml");
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
            jasperViewer.setVisible(true);
        } catch (JRException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_jButtonVisualiserActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VuePersonnel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VuePersonnel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VuePersonnel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VuePersonnel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VuePersonnel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.ButtonGroup buttonGroup7;
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonCreer;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonRechercher;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JButton jButtonVisualiser;
    private javax.swing.JComboBox<String> jComboBoxArrondissement;
    private javax.swing.JComboBox<String> jComboBoxDepartement;
    private javax.swing.JComboBox<String> jComboBoxFonction;
    private javax.swing.JComboBox<String> jComboBoxRegion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelArrondissement;
    private javax.swing.JLabel jLabelDepartement;
    private javax.swing.JLabel jLabelFonction;
    private javax.swing.JLabel jLabelNom;
    private javax.swing.JLabel jLabelPrenom;
    private javax.swing.JLabel jLabelRégion;
    private javax.swing.JLabel jLabelStructure;
    private javax.swing.JPanel jPanelDateNaissance;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldNom;
    private javax.swing.JTextField jTextFieldPrenom;
    private javax.swing.JTextField jTextFieldStructure;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private String[] fonctionsCombo = null;
    private String[] regionsCombo = null;
    private String[] departementsCombo = null;
    private String[] arrondissementsCombo = null;
    private String nomSaisi = "";
    private String prenomSaisi = "";
    private String titreFonctionSelected = "";
    private String structureSaisie = "";
    private int idPersonnelCliked = 0;
    private List<Personnel> personnelsRecherches = null;
    private List<Personnel> personnels = null;
    private Personnel personnelCliked = null;
    private List<Departement> departements = null;
    private Departement departementSelected = null;
    private List<Fonction> fonctions = null;
    private Fonction fonctionSelected = null;
    private Arrondissement arrondissementSelected = null;
    private List<Arrondissement> arrondissements = null;
    private List<Region> regions = null;
    private String nomRegionSelected = "";
    private String nomDepartementSelected = "";
    private String nomArrondissementSelected = "";

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");

        //on remplit la combobox des fonctions
        fonctions = metier.findAllFonctions();
        fonctionsCombo = new String[fonctions.size() + 1];
        fonctionsCombo[0] = "---";
        int j = 1;
        for (Fonction fonction : fonctions) {
            fonctionsCombo[j++] = fonction.getTitre();
        }
        jComboBoxFonction.setModel(new DefaultComboBoxModel(fonctionsCombo));

        //on remplit la combobox des régions
        regions = metier.findAllRegions();
        regionsCombo = new String[regions.size() + 1];
        regionsCombo[0] = "---";
        int i = 1;
        for (Region region : regions) {
            regionsCombo[i++] = region.getNomreg();
        }
        jComboBoxRegion.setModel(new DefaultComboBoxModel(regionsCombo));

        remplirDepartementCombobox();
        remplirArrodissementCombobox();
    }

    private void infoSaisies() {
        nomSaisi = (String) jTextFieldNom.getText();
        prenomSaisi = (String) jTextFieldPrenom.getText();
        structureSaisie = jTextFieldStructure.getText();
        titreFonctionSelected = (String) jComboBoxFonction.getSelectedItem();
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
    }

    private void videFrame() {
        jTextFieldNom.setText("");
        jTextFieldPrenom.setText("");
        jComboBoxFonction.setSelectedIndex(0);
        jComboBoxRegion.setSelectedIndex(0);
        jComboBoxDepartement.setSelectedIndex(0);
        jComboBoxArrondissement.setSelectedIndex(0);
        jTextFieldStructure.setText("");
        model.setRowCount(0);//vide la jTable
    }

    private void remplirDepartementCombobox() {
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        departements = metier.findAllDepartementsD1Region(nomRegionSelected);
        //on remplit la combobox des départements
        departementsCombo = new String[departements.size() + 1];
        departementsCombo[0] = "---";
        int i = 1;
        for (Departement departement : departements) {
            departementsCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartement.setModel(new DefaultComboBoxModel(departementsCombo));
    }

    private void remplirArrodissementCombobox() {
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        arrondissements = metier.findAllArrondissementsD1Departement(nomDepartementSelected);
        //on remplit la combobox des départements
        arrondissementsCombo = new String[arrondissements.size() + 1];
        arrondissementsCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissements) {
            arrondissementsCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissement.setModel(new DefaultComboBoxModel(arrondissementsCombo));
    }
}
