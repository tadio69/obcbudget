package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Arrondissement;
import couche_jpa.Caisse;
import couche_jpa.Centrebilletage;
import couche_jpa.Departement;
import couche_jpa.Eltpratique1ind;
import couche_jpa.Eltpratiquinfo;
import couche_jpa.Examen;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Option;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_jpa.Specialisation;
import couche_jpa.Statistique;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 *
 * @author famille chijou
 */
public class VueEtatVacationPratique1INDetGENEserieE extends javax.swing.JFrame {

    /**
     * Creates new form VueEtatMatiereDoeuvre
     */
    public VueEtatVacationPratique1INDetGENEserieE() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jPanelGestionEtat = new javax.swing.JPanel();
        jButtonCreerEtats = new javax.swing.JButton();
        jButtonMettreAjourEtats = new javax.swing.JButton();
        jButtonVisualiserEtats = new javax.swing.JButton();
        jButtonSupprimerEtats = new javax.swing.JButton();
        jPanelChoixSouscentre = new javax.swing.JPanel();
        jLabelRegion = new javax.swing.JLabel();
        jComboBoxRegion = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixSouscentrepratique = new javax.swing.JButton();
        jLabelDepartement = new javax.swing.JLabel();
        jComboBoxDepartement = new javax.swing.JComboBox<>();
        jLabelNomCentre = new javax.swing.JLabel();
        jComboBoxSouscentre = new javax.swing.JComboBox<>();
        jLabelDepartement1 = new javax.swing.JLabel();
        jComboBoxArrondissement = new javax.swing.JComboBox<>();
        jPanelParametresIndParSpecialite = new javax.swing.JPanel();
        jButtonCreerParametresSpecialite = new javax.swing.JButton();
        jButtonListerParametresSpecialite = new javax.swing.JButton();
        jButtonAnnulerParametresSpecialite = new javax.swing.JButton();
        jLabelNbepreuveSpec = new javax.swing.JLabel();
        jTextFieldNbepreuveSpec = new javax.swing.JTextField();
        jButtonSupprimerParametresSpecialite = new javax.swing.JButton();
        jTextFieldNbexaminRapport = new javax.swing.JTextField();
        jLabelNbexaminRapport = new javax.swing.JLabel();
        jLabelNbepreuves = new javax.swing.JLabel();
        jTextFieldNbvacationRapport = new javax.swing.JTextField();
        jLabelNbchefsalRapport = new javax.swing.JLabel();
        jTextFieldNbchefsalRapport = new javax.swing.JTextField();
        jLabelSpecialite = new javax.swing.JLabel();
        jComboBoxSpecialite = new javax.swing.JComboBox<>();
        jLabelNbsalSpec = new javax.swing.JLabel();
        jTextFieldNbsalSpec = new javax.swing.JTextField();
        jTextFieldNbvacationPratSpec = new javax.swing.JTextField();
        jLabelNbvacationSpec = new javax.swing.JLabel();
        jLabelNbchefsalPratSpec = new javax.swing.JLabel();
        jTextFieldNbchefsalPratSpec = new javax.swing.JTextField();
        jLabelNbexaminPratSpec = new javax.swing.JLabel();
        jTextFieldNbexaminPratSpec = new javax.swing.JTextField();
        jPanelChoixExamen = new javax.swing.JPanel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixExamen = new javax.swing.JButton();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();
        jLabelExamen = new javax.swing.JLabel();
        jPanelParametresInformatique = new javax.swing.JPanel();
        jButtonCreerParametresInfo = new javax.swing.JButton();
        jButtonListerParametresInfo = new javax.swing.JButton();
        jButtonAnnulerParametresInfo = new javax.swing.JButton();
        jButtonSupprimerParametresInfo = new javax.swing.JButton();
        jTextFieldNbchefsalcorrectInfo = new javax.swing.JTextField();
        jLabelNbchefsalcorrectInfo = new javax.swing.JLabel();
        jLabelNbvacationcorrectInfo = new javax.swing.JLabel();
        jTextFieldNbvacationcorrectInfo = new javax.swing.JTextField();
        jLabelNbexaminInfo = new javax.swing.JLabel();
        jTextFieldNbexaminInfo = new javax.swing.JTextField();
        jLabelNbchefsalpratInfo = new javax.swing.JLabel();
        jTextFieldNbchefsalpratInfo = new javax.swing.JTextField();
        jTextFieldNbsalInfo = new javax.swing.JTextField();
        jLabelNbsalInfo = new javax.swing.JLabel();
        jButtonFermer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT VACATION PRATIQUE 1 PROB/BAC INDUSTRIEL ET GENERAL série E");

        jPanelGestionEtat.setBackground(new java.awt.Color(0, 255, 255));
        jPanelGestionEtat.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer l'état", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 102, 255))); // NOI18N

        jButtonCreerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEtats.setText("Créer");
        jButtonCreerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEtatsActionPerformed(evt);
            }
        });

        jButtonMettreAjourEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjourEtats.setText("Mettre à jour");
        jButtonMettreAjourEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourEtatsActionPerformed(evt);
            }
        });

        jButtonVisualiserEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserEtats.setText("Visualiser");
        jButtonVisualiserEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserEtatsActionPerformed(evt);
            }
        });

        jButtonSupprimerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEtats.setText("Supprimer");
        jButtonSupprimerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEtatsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelGestionEtatLayout = new javax.swing.GroupLayout(jPanelGestionEtat);
        jPanelGestionEtat.setLayout(jPanelGestionEtatLayout);
        jPanelGestionEtatLayout.setHorizontalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jButtonCreerEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonMettreAjourEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiserEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerEtats)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanelGestionEtatLayout.setVerticalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonMettreAjourEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCreerEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonSupprimerEtats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVisualiserEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanelChoixSouscentre.setBackground(new java.awt.Color(153, 255, 255));
        jPanelChoixSouscentre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un sous-centre pratique", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jLabelRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegion.setText("Région :");

        jComboBoxRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixSouscentrepratique.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixSouscentrepratique.setText("Annuler");
        jButtonAnnulerChoixSouscentrepratique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixSouscentrepratiqueActionPerformed(evt);
            }
        });

        jLabelDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartement.setText("Département :");

        jComboBoxDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementActionPerformed(evt);
            }
        });

        jLabelNomCentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNomCentre.setText("Sous-centre pratique:");

        jComboBoxSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSouscentreActionPerformed(evt);
            }
        });

        jLabelDepartement1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartement1.setText("Arrondissement :");

        jComboBoxArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixSouscentreLayout = new javax.swing.GroupLayout(jPanelChoixSouscentre);
        jPanelChoixSouscentre.setLayout(jPanelChoixSouscentreLayout);
        jPanelChoixSouscentreLayout.setHorizontalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelRegion)
                    .addComponent(jLabelDepartement))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBoxRegion, 0, 217, Short.MAX_VALUE)
                    .addComponent(jComboBoxDepartement, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabelNomCentre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxSouscentre, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jLabelDepartement1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jButtonAnnulerChoixSouscentrepratique)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelChoixSouscentreLayout.setVerticalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelDepartement1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonAnnulerChoixSouscentrepratique, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelNomCentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelParametresIndParSpecialite.setBackground(new java.awt.Color(204, 255, 102));
        jPanelParametresIndParSpecialite.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Paramètres de calcul par série/spécialité (NB: nombre vacations par examinateur)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jButtonCreerParametresSpecialite.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerParametresSpecialite.setText("Créer");
        jButtonCreerParametresSpecialite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerParametresSpecialiteActionPerformed(evt);
            }
        });

        jButtonListerParametresSpecialite.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonListerParametresSpecialite.setText("Lister");
        jButtonListerParametresSpecialite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerParametresSpecialiteActionPerformed(evt);
            }
        });

        jButtonAnnulerParametresSpecialite.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerParametresSpecialite.setText("Annuler");
        jButtonAnnulerParametresSpecialite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerParametresSpecialiteActionPerformed(evt);
            }
        });

        jLabelNbepreuveSpec.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabelNbepreuveSpec.setText("Nombre épreuves :");

        jTextFieldNbepreuveSpec.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonSupprimerParametresSpecialite.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerParametresSpecialite.setText("Supprimer");
        jButtonSupprimerParametresSpecialite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerParametresSpecialiteActionPerformed(evt);
            }
        });

        jTextFieldNbexaminRapport.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelNbexaminRapport.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabelNbexaminRapport.setText("Nombre examinateurs rapport :");

        jLabelNbepreuves.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabelNbepreuves.setText("Nombre vacations rapport :");

        jTextFieldNbvacationRapport.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelNbchefsalRapport.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabelNbchefsalRapport.setText("Nombre chefs salle de rapport :");

        jTextFieldNbchefsalRapport.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelSpecialite.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabelSpecialite.setText("Spécialité :");

        jComboBoxSpecialite.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelNbsalSpec.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabelNbsalSpec.setText("Nombre salles :");

        jTextFieldNbsalSpec.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jTextFieldNbvacationPratSpec.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelNbvacationSpec.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabelNbvacationSpec.setText("Nombre vacations pratique :");

        jLabelNbchefsalPratSpec.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabelNbchefsalPratSpec.setText("Nombre chefs salle de pratique :");

        jTextFieldNbchefsalPratSpec.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelNbexaminPratSpec.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabelNbexaminPratSpec.setText("Nombre examinateurs pratique :");

        jTextFieldNbexaminPratSpec.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanelParametresIndParSpecialiteLayout = new javax.swing.GroupLayout(jPanelParametresIndParSpecialite);
        jPanelParametresIndParSpecialite.setLayout(jPanelParametresIndParSpecialiteLayout);
        jPanelParametresIndParSpecialiteLayout.setHorizontalGroup(
            jPanelParametresIndParSpecialiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelParametresIndParSpecialiteLayout.createSequentialGroup()
                .addGroup(jPanelParametresIndParSpecialiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelParametresIndParSpecialiteLayout.createSequentialGroup()
                        .addGap(409, 409, 409)
                        .addComponent(jButtonCreerParametresSpecialite)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonListerParametresSpecialite)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSupprimerParametresSpecialite)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnulerParametresSpecialite))
                    .addGroup(jPanelParametresIndParSpecialiteLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabelSpecialite)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxSpecialite, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addGroup(jPanelParametresIndParSpecialiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelNbsalSpec)
                            .addComponent(jLabelNbvacationSpec))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelParametresIndParSpecialiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldNbsalSpec, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                            .addComponent(jTextFieldNbvacationPratSpec))
                        .addGap(45, 45, 45)
                        .addGroup(jPanelParametresIndParSpecialiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelNbepreuveSpec)
                            .addComponent(jLabelNbepreuves))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelParametresIndParSpecialiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldNbepreuveSpec, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                            .addComponent(jTextFieldNbvacationRapport))
                        .addGap(45, 45, 45)
                        .addGroup(jPanelParametresIndParSpecialiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelNbchefsalPratSpec)
                            .addComponent(jLabelNbexaminPratSpec))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelParametresIndParSpecialiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldNbexaminPratSpec, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldNbchefsalPratSpec, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(44, 44, 44)
                .addGroup(jPanelParametresIndParSpecialiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelParametresIndParSpecialiteLayout.createSequentialGroup()
                        .addComponent(jLabelNbexaminRapport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldNbexaminRapport, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelParametresIndParSpecialiteLayout.createSequentialGroup()
                        .addComponent(jLabelNbchefsalRapport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldNbchefsalRapport, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 21, Short.MAX_VALUE))
        );
        jPanelParametresIndParSpecialiteLayout.setVerticalGroup(
            jPanelParametresIndParSpecialiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelParametresIndParSpecialiteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelParametresIndParSpecialiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelParametresIndParSpecialiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxSpecialite, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelSpecialite, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelParametresIndParSpecialiteLayout.createSequentialGroup()
                        .addGroup(jPanelParametresIndParSpecialiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelNbsalSpec, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldNbsalSpec, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelParametresIndParSpecialiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelNbvacationSpec, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldNbvacationPratSpec, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelParametresIndParSpecialiteLayout.createSequentialGroup()
                        .addGroup(jPanelParametresIndParSpecialiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelNbepreuveSpec, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldNbepreuveSpec, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelParametresIndParSpecialiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelNbepreuves, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldNbvacationRapport, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelParametresIndParSpecialiteLayout.createSequentialGroup()
                        .addGroup(jPanelParametresIndParSpecialiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelNbexaminRapport, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldNbexaminRapport, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelParametresIndParSpecialiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelNbchefsalRapport, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldNbchefsalRapport, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelParametresIndParSpecialiteLayout.createSequentialGroup()
                        .addGroup(jPanelParametresIndParSpecialiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelNbexaminPratSpec, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldNbexaminPratSpec, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelParametresIndParSpecialiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelNbchefsalPratSpec, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldNbchefsalPratSpec, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelParametresIndParSpecialiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelParametresIndParSpecialiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonListerParametresSpecialite, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCreerParametresSpecialite, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelParametresIndParSpecialiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonSupprimerParametresSpecialite, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonAnnulerParametresSpecialite, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelChoixExamen.setBackground(new java.awt.Color(102, 255, 153));
        jPanelChoixExamen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un groupe d'examens et une session", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixExamen.setText("Annuler");
        jButtonAnnulerChoixExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixExamenActionPerformed(evt);
            }
        });

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxNiveau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNiveauActionPerformed(evt);
            }
        });

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jTextArea.setColumns(20);
        jTextArea.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea.setRows(5);
        jTextArea.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea);

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        javax.swing.GroupLayout jPanelChoixExamenLayout = new javax.swing.GroupLayout(jPanelChoixExamen);
        jPanelChoixExamen.setLayout(jPanelChoixExamenLayout);
        jPanelChoixExamenLayout.setHorizontalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(0, 10, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addGap(13, 13, 13))
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabelSession)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(jButtonAnnulerChoixExamen)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixExamenLayout.setVerticalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        jPanelParametresInformatique.setBackground(new java.awt.Color(255, 204, 204));
        jPanelParametresInformatique.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Paramètres de calcul de la pratique d'informatique (NB: nombre vacations par examinateur)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jButtonCreerParametresInfo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerParametresInfo.setText("Créer");
        jButtonCreerParametresInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerParametresInfoActionPerformed(evt);
            }
        });

        jButtonListerParametresInfo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonListerParametresInfo.setText("Lister");
        jButtonListerParametresInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerParametresInfoActionPerformed(evt);
            }
        });

        jButtonAnnulerParametresInfo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerParametresInfo.setText("Annuler");
        jButtonAnnulerParametresInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerParametresInfoActionPerformed(evt);
            }
        });

        jButtonSupprimerParametresInfo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerParametresInfo.setText("Supprimer");
        jButtonSupprimerParametresInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerParametresInfoActionPerformed(evt);
            }
        });

        jTextFieldNbchefsalcorrectInfo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelNbchefsalcorrectInfo.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabelNbchefsalcorrectInfo.setText("Nombre chefs salle correction :");

        jLabelNbvacationcorrectInfo.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabelNbvacationcorrectInfo.setText("Nombre vacations correction :");

        jTextFieldNbvacationcorrectInfo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelNbexaminInfo.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabelNbexaminInfo.setText("Nombre examinateurs :");

        jTextFieldNbexaminInfo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelNbchefsalpratInfo.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabelNbchefsalpratInfo.setText("Nombre chefs salle pratique :");

        jTextFieldNbchefsalpratInfo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jTextFieldNbsalInfo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelNbsalInfo.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabelNbsalInfo.setText("Nombre de salle :");

        javax.swing.GroupLayout jPanelParametresInformatiqueLayout = new javax.swing.GroupLayout(jPanelParametresInformatique);
        jPanelParametresInformatique.setLayout(jPanelParametresInformatiqueLayout);
        jPanelParametresInformatiqueLayout.setHorizontalGroup(
            jPanelParametresInformatiqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelParametresInformatiqueLayout.createSequentialGroup()
                .addGroup(jPanelParametresInformatiqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelParametresInformatiqueLayout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(jButtonCreerParametresInfo)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonListerParametresInfo)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSupprimerParametresInfo)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnulerParametresInfo))
                    .addGroup(jPanelParametresInformatiqueLayout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addGroup(jPanelParametresInformatiqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelNbchefsalpratInfo)
                            .addGroup(jPanelParametresInformatiqueLayout.createSequentialGroup()
                                .addComponent(jLabelNbsalInfo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldNbsalInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelNbvacationcorrectInfo)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelParametresInformatiqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelParametresInformatiqueLayout.createSequentialGroup()
                                .addComponent(jTextFieldNbvacationcorrectInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(jLabelNbchefsalcorrectInfo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldNbchefsalcorrectInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelParametresInformatiqueLayout.createSequentialGroup()
                                .addComponent(jTextFieldNbchefsalpratInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(79, 79, 79)
                                .addComponent(jLabelNbexaminInfo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldNbexaminInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 15, Short.MAX_VALUE))
        );
        jPanelParametresInformatiqueLayout.setVerticalGroup(
            jPanelParametresInformatiqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelParametresInformatiqueLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelParametresInformatiqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelParametresInformatiqueLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanelParametresInformatiqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldNbsalInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelNbvacationcorrectInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldNbvacationcorrectInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelNbchefsalcorrectInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldNbchefsalcorrectInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabelNbsalInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelParametresInformatiqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelParametresInformatiqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelNbexaminInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldNbexaminInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextFieldNbchefsalpratInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNbchefsalpratInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelParametresInformatiqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonListerParametresInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSupprimerParametresInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCreerParametresInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerParametresInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                            .addGroup(layout.createSequentialGroup()
                                .addGap(111, 111, 111)
                                .addComponent(jPanelParametresInformatique, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(88, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(349, 349, 349)
                                .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonFermer))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jPanelParametresIndParSpecialite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelParametresInformatique, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(4, 4, 4)
                .addComponent(jPanelParametresIndParSpecialite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCreerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEtatsActionPerformed
        infoSaisies();
        Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueMap = new HashMap<>();//contient chaque sous-centre et le tableau de ses statistiques
        Map<Souscentre, Integer> souscentreStatinfoMap = new HashMap<>();//contient chaque sous-centre de probatoire industrielle avec son effectif global utilisé pour l'informatique pratique 
        Map<Souscentre, ArrayList<Eltpratique1ind>> souscentreEltpratique1indMap = new HashMap<>();//contient chaque sous-centre et le tableau de ses Eltpratique1ind
        Map<Souscentre, Eltpratiquinfo> souscentreEltpratiquinfoMap = new HashMap<>();//contient chaque sous-centre de probatoire industriel et son Eltpratiquinfo 
        ArrayList<Souscentre> souscentresAyantEltpratique1indList = new ArrayList<>();//liste des sous-centres ayant des Eltpratique1ind
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION PRATIQUE 1");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
            if (!caisses.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de vacation pratique 1 existent déjà pour ce groupe d'examens !");
            } else {
                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                //remplissage de souscentreStatistiqueMap
                for (Examen e : examensSelected) {
                    List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                    for (Statistique s : lesStats) {
                        ArrayList<Statistique> statList = new ArrayList<>();
                        if (souscentreStatistiqueMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueMap
                            statList = souscentreStatistiqueMap.get(s.getSouscentre());
                            statList.add(s);//on lui ajoute s
                            souscentreStatistiqueMap.put(s.getSouscentre(), statList);
                        } else {
                            statList.add(s);
                            souscentreStatistiqueMap.put(s.getSouscentre(), statList);
                        }
                    }
                }

                lesEltpratique1ind = metier.findAllEltpratique1indD1GroupedexamensD1Session(niveauSelected, typeSelected, anneeSelected);

                if (lesEltpratique1ind.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Aucun paramètre de pratique 1 trouvée dans la base des données pour ce groupe d'examens !");
                } else {
                    //remplissage de souscentresAyantEltpratique1indDesList
                    for (Eltpratique1ind eltpratique1ind : lesEltpratique1ind) {
                        if (!souscentresAyantEltpratique1indList.contains(eltpratique1ind.getSouscentre())) {
                            souscentresAyantEltpratique1indList.add(eltpratique1ind.getSouscentre());
                        }
                    }
                    //remplissage de souscentreEltpratique1indMap
                    for (Souscentre souscentre : souscentreStatistiqueMap.keySet()) {//on ne gère pas les éléments de souscentreEltpratiquesttMap dont le sous-centre n'a pas de statistique 
                        ArrayList<Eltpratique1ind> eltpratique1indD1souscentreList = new ArrayList<>();//liste des Eltpratiquestt du souscentre courant
                        for (Eltpratique1ind eltpratique1ind : lesEltpratique1ind) {
                            if (eltpratique1ind.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                eltpratique1indD1souscentreList.add(eltpratique1ind);
                            }
                        }
                        if (!eltpratique1indD1souscentreList.isEmpty()) {
                            souscentreEltpratique1indMap.put(souscentre, eltpratique1indD1souscentreList);
                        }
                    }

                    if (niveauSelected.equals("PROB") && !typeSelected.equals("GEN")) {
                        souscentreStatinfoMap.clear();//on vide car il double l'effectif sur l'état
                        lesEltpratiquinfo = metier.findAllEltpratiquinfoD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                        //remplissage de souscentreEltpratiquinfoMap
                        for (Souscentre souscentre : souscentreStatistiqueMap.keySet()) {//on ne gère pas les éléments de souscentreEltpratiquesttMap dont le sous-centre n'a pas de statistique 
                            for (Eltpratiquinfo eltpratiquinfo : lesEltpratiquinfo) {
                                if (eltpratiquinfo.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                    souscentreEltpratiquinfoMap.put(souscentre, eltpratiquinfo);
                                }
                            }
                        }

                        //remplissage de souscentreStatinfoMap 
                        for (Souscentre souscentre : souscentreStatistiqueMap.keySet()) {
                            int nb = 0;
                            for (Statistique stat : souscentreStatistiqueMap.get(souscentre)) {
                                nb += stat.getNombre();
                            }
                            souscentreStatinfoMap.put(souscentre, nb);
                        }
                    }
                }

                if (!souscentreEltpratique1indMap.isEmpty()) {
                    boolean testSicreer = false;
                    try {
                        for (Souscentre souscentre : souscentreEltpratique1indMap.keySet()) {
                            int net = 0;
                            if (souscentreStatistiqueMap.containsKey(souscentre)) {
                                if (souscentresAyantEltpratique1indList.contains(souscentre)) {
                                    for (Eltpratique1ind eltpratique1ind : souscentreEltpratique1indMap.get(souscentre)) {
                                        if (typeSelected.equals("GEN")) {
                                            determinerCoutD1Eltpratique1SerieE(souscentre, souscentreStatistiqueMap, eltpratique1ind, niveauSelected);
                                            net += (int) Math.ceil((double) (totalEltprat) / (double) 1000) * 1000 + 10000 + 15000;//10000 pour MO et 15000 pour secrétariat
                                        } else {
                                            determinerCoutD1Eltpratique1ind(souscentre, souscentreStatistiqueMap, eltpratique1ind, niveauSelected);
                                            net += (int) Math.ceil((double) (totalEltprat + totalEltrapp) / (double) 1000) * 1000;
                                        }
                                    }
                                    if (niveauSelected.equals("PROB") && typeSelected.equals("IND") && souscentreEltpratiquinfoMap.containsKey(souscentre)) {
                                        eltpratiquinfo = souscentreEltpratiquinfoMap.get(souscentre);
                                        int stat = souscentreStatinfoMap.get(souscentre);
                                        determinerCoutInfo(stat, eltpratiquinfo);
                                        net += (int) Math.ceil((double) (totalpratinfo + totalcorinfo) / (double) 1000) * 1000;
                                    }

                                    metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                    testSicreer = true;
                                }
                            }
                        }
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testSicreer) {
                        JOptionPane.showMessageDialog(this, "Etats de vacation pratique 1 créés avec succès pour ce groupe d'examens !");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Aucun paramètre de pratique 1 trouvée dans la base des données pour ce groupe d'examens !");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Les champs session et imputation sont obligatoires !");
        }
        souscentreStatistiqueMap.clear();
        souscentreStatinfoMap.clear();
        souscentreEltpratique1indMap.clear();
        souscentresAyantEltpratique1indList.clear();
    }//GEN-LAST:event_jButtonCreerEtatsActionPerformed

    private void jButtonMettreAjourEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourEtatsActionPerformed
        infoSaisies();
        Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueMap = new HashMap<>();//contient chaque sous-centre et le tableau de ses statistiques
        Map<Souscentre, Integer> souscentreStatinfoMap = new HashMap<>();//contient chaque sous-centre de probatoire industrielle avec son effectif global utilisé pour l'informatique pratique 
        Map<Souscentre, ArrayList<Eltpratique1ind>> souscentreEltpratique1indMap = new HashMap<>();//contient chaque sous-centre et le tableau de ses Eltpratique1ind
        Map<Souscentre, Eltpratiquinfo> souscentreEltpratiquinfoMap = new HashMap<>();//contient chaque sous-centre de probatoire industriel et son Eltpratiquinfo 
        ArrayList<Souscentre> souscentresAyantEltpratique1indList = new ArrayList<>();//liste des sous-centres ayant des Eltpratique1ind
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de vacation pratique 1 pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION PRATIQUE 1");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de vacation de pratique 1 n'existe encore pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    //on conserve quelques info de ces anciennes caisses
                    Groupe groupe = caisses.get(0).getGroupe();
                    sessionSelected = caisses.get(0).getSession();
                    //on supprime toutes les anciennes caisses du groupe d'examens
                    for (Caisse c : caisses) {
                        metier.supprimerCaisse(c);
                    }

                    //remplissage de souscentreStatistiqueMap
                    for (Examen e : examensSelected) {
                        List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                        for (Statistique s : lesStats) {
                            ArrayList<Statistique> statList = new ArrayList<>();
                            if (souscentreStatistiqueMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueMap
                                statList = souscentreStatistiqueMap.get(s.getSouscentre());
                                statList.add(s);//on lui ajoute s
                                souscentreStatistiqueMap.put(s.getSouscentre(), statList);
                            } else {
                                statList.add(s);
                                souscentreStatistiqueMap.put(s.getSouscentre(), statList);
                            }
                        }
                    }

                    lesEltpratique1ind = metier.findAllEltpratique1indD1GroupedexamensD1Session(niveauSelected, typeSelected, anneeSelected);

                    if (lesEltpratique1ind.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Aucun paramètre de pratique 1 trouvée dans la base des données pour ce groupe d'examens !");
                    } else {
                        //remplissage de souscentresAyantEltpratique1indDesList
                        for (Eltpratique1ind eltpratique1ind : lesEltpratique1ind) {
                            if (!souscentresAyantEltpratique1indList.contains(eltpratique1ind.getSouscentre())) {
                                souscentresAyantEltpratique1indList.add(eltpratique1ind.getSouscentre());
                            }
                        }
                        //remplissage de souscentreEltpratique1indMap
                        for (Souscentre souscentre : souscentreStatistiqueMap.keySet()) {//on ne gère pas les éléments de souscentreEltpratiquesttMap dont le sous-centre n'a pas de statistique 
                            ArrayList<Eltpratique1ind> eltpratique1indD1souscentreList = new ArrayList<>();//liste des Eltpratiquestt du souscentre courant
                            for (Eltpratique1ind eltpratique1ind : lesEltpratique1ind) {
                                if (eltpratique1ind.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                    eltpratique1indD1souscentreList.add(eltpratique1ind);
                                }
                            }
                            if (!eltpratique1indD1souscentreList.isEmpty()) {
                                souscentreEltpratique1indMap.put(souscentre, eltpratique1indD1souscentreList);
                            }
                        }

                        if (niveauSelected.equals("PROB") && !typeSelected.equals("GEN")) {
                            souscentreStatinfoMap.clear();//on vide car il double l'effectif sur l'état
                            lesEltpratiquinfo = metier.findAllEltpratiquinfoD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                            //remplissage de souscentreEltpratiquinfoMap
                            for (Souscentre souscentre : souscentreStatistiqueMap.keySet()) {//on ne gère pas les éléments de souscentreEltpratiquesttMap dont le sous-centre n'a pas de statistique 
                                for (Eltpratiquinfo eltpratiquinfo : lesEltpratiquinfo) {
                                    if (eltpratiquinfo.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                        souscentreEltpratiquinfoMap.put(souscentre, eltpratiquinfo);
                                    }
                                }
                            }
                            //remplissage de souscentreStatinfoMap 
                            for (Souscentre souscentre : souscentreStatistiqueMap.keySet()) {
                                int nb = 0;
                                for (Statistique stat : souscentreStatistiqueMap.get(souscentre)) {
                                    nb += stat.getNombre();
                                }
                                souscentreStatinfoMap.put(souscentre, nb);
                            }
                        }
                    }

                    if (!souscentreEltpratique1indMap.isEmpty()) {
                        boolean testSimodifier = false;
                        try {
                            for (Souscentre souscentre : souscentreEltpratique1indMap.keySet()) {
                                int net = 0;
                                if (souscentreStatistiqueMap.containsKey(souscentre)) {
                                    if (souscentresAyantEltpratique1indList.contains(souscentre)) {
                                        for (Eltpratique1ind eltpratique1ind : souscentreEltpratique1indMap.get(souscentre)) {
                                            if (typeSelected.equals("GEN")) {
                                                determinerCoutD1Eltpratique1SerieE(souscentre, souscentreStatistiqueMap, eltpratique1ind, niveauSelected);
                                                net += (int) Math.ceil((double) (totalEltprat) / (double) 1000) * 1000 + 10000 + 15000;//10000 pour MO et 15000 pour secrétariat
                                            } else {
                                                determinerCoutD1Eltpratique1ind(souscentre, souscentreStatistiqueMap, eltpratique1ind, niveauSelected);
                                                net += (int) Math.ceil((double) (totalEltprat + totalEltrapp) / (double) 1000) * 1000;
                                            }
                                        }
                                        if (niveauSelected.equals("PROB") && typeSelected.equals("IND") && souscentreEltpratiquinfoMap.containsKey(souscentre)) {
                                            eltpratiquinfo = souscentreEltpratiquinfoMap.get(souscentre);
                                            int stat = souscentreStatinfoMap.get(souscentre);
                                            determinerCoutInfo(stat, eltpratiquinfo);
                                            net += (int) Math.ceil((double) (totalpratinfo + totalcorinfo) / (double) 1000) * 1000;
                                        }

                                        metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                        testSimodifier = true;
                                    }
                                }
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testSimodifier) {
                            JOptionPane.showMessageDialog(this, "Etats de vacations de pratique 1 modifiés avec succès !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun paramètre de pratique 1 trouvée dans la base des données pour ce groupe d'examens !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Les champs examen(s) et session sont obligatoires !");
            }
        }
        souscentreStatistiqueMap.clear();
        souscentreStatinfoMap.clear();
        souscentreEltpratique1indMap.clear();
        souscentresAyantEltpratique1indList.clear();
    }//GEN-LAST:event_jButtonMettreAjourEtatsActionPerformed

    private void jButtonVisualiserEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserEtatsActionPerformed
        infoSaisies();
        Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueMap = new HashMap<>();//contient chaque sous-centre et le tableau de ses statistiques
        Map<Souscentre, Integer> souscentreStatinfoMap = new HashMap<>();//contient chaque sous-centre de probatoire industrielle avec son effectif global utilisé pour l'informatique pratique 
        Map<Souscentre, ArrayList<Eltpratique1ind>> souscentreEltpratique1indMap = new HashMap<>();//contient chaque sous-centre et le tableau de ses Eltpratique1ind
        Map<Souscentre, Eltpratiquinfo> souscentreEltpratiquinfoMap = new HashMap<>();//contient chaque sous-centre de probatoire industriel et son Eltpratiquinfo 
        Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
        ArrayList<Souscentre> souscentresAyantEltpratique1indList = new ArrayList<>();//liste des sous-centres ayant des Eltpratique1ind
        ArrayList<String> typesBruts = new ArrayList<>();
        ArrayList<String> typesAconsiderer = new ArrayList<>();
        ArrayList<String> niveauxAconsiderer = new ArrayList<>();
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION PRATIQUE 1");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);

            boolean continuer = false;
            for (Caisse c : caisses) {
                if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                    continuer = true;
                    break;
                }
            }
            if (!continuer) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de vacations de pratique 1 n'ont pas encore été créés pour ce groupe d'examens !");
            } else {

                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                //recherche des types des examens à utiliser
                for (Examen examen : examensSelected) {
                    System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                    if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                        typesBruts.add("ESG");
                    }
                    if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                        typesBruts.add("ESTP");
                    }
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 2) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                //recherche des niveaux des examens à utiliser
                if (!niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add(niveauSelected);
                    niveauxAconsiderer.add("TOUT");
                }
                if (niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add("PROB");
                    niveauxAconsiderer.add("BACC");
                    niveauxAconsiderer.add("TOUT");
                }

                //recherche des centres de billetage
                for (String niveau : niveauxAconsiderer) {
                    for (String type : typesAconsiderer) {
                        List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                        for (Centrebilletage centrebilletage : desCentrebilletages) {
                            ArrayList<Souscentre> souscentresList = new ArrayList<>();
                            if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                for (Secteurcouv sect : secteurs) {
                                    if (!souscentresList.contains(sect.getSouscentre())) {
                                        souscentresList.add(sect.getSouscentre());
                                    }
                                }
                                centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                            }
                        }
                    }
                }

                //remplissage de souscentreStatistiqueMap
                for (Examen e : examensSelected) {
                    List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                    for (Statistique s : lesStats) {
                        ArrayList<Statistique> statList = new ArrayList<>();
                        if (souscentreStatistiqueMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueMap
                            statList = souscentreStatistiqueMap.get(s.getSouscentre());
                            statList.add(s);//on lui ajoute s
                            souscentreStatistiqueMap.put(s.getSouscentre(), statList);
                        } else {
                            statList.add(s);
                            souscentreStatistiqueMap.put(s.getSouscentre(), statList);
                        }
                    }
                }

                lesEltpratique1ind = metier.findAllEltpratique1indD1GroupedexamensD1Session(niveauSelected, typeSelected, anneeSelected);

                if (lesEltpratique1ind.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Aucun paramètre de pratique 1 trouvée dans la base des données pour ce groupe d'examens !");
                } else {
                    //remplissage de souscentresAyantEltpratique1indDesList
                    for (Eltpratique1ind eltpratique1ind : lesEltpratique1ind) {
                        if (!souscentresAyantEltpratique1indList.contains(eltpratique1ind.getSouscentre())) {
                            souscentresAyantEltpratique1indList.add(eltpratique1ind.getSouscentre());
                        }
                    }
                    //remplissage de souscentreEltpratique1indMap
                    for (Souscentre souscentre : souscentreStatistiqueMap.keySet()) {//on ne gère pas les éléments de souscentreEltpratiquesttMap dont le sous-centre n'a pas de statistique 
                        ArrayList<Eltpratique1ind> eltpratique1indD1souscentreList = new ArrayList<>();//liste des Eltpratiquestt du souscentre courant
                        for (Eltpratique1ind eltpratique1ind : lesEltpratique1ind) {
                            if (eltpratique1ind.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                eltpratique1indD1souscentreList.add(eltpratique1ind);
                            }
                        }
                        if (!eltpratique1indD1souscentreList.isEmpty()) {
                            souscentreEltpratique1indMap.put(souscentre, eltpratique1indD1souscentreList);
                        }
                    }
                }

                if (!souscentreEltpratique1indMap.isEmpty()) {
                    if (niveauSelected.equals("PROB") && typeSelected.equals("IND")) {
                        souscentreStatinfoMap.clear();//on vide car il double l'effectif sur l'état
                        lesEltpratiquinfo = metier.findAllEltpratiquinfoD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                        //remplissage de souscentreEltpratiquinfoMap
                        for (Souscentre souscentre : souscentreStatistiqueMap.keySet()) {//on ne gère pas les éléments de souscentreEltpratiquinfoMap dont le sous-centre n'a pas de statistique 
                            for (Eltpratiquinfo eltpratiquinfo : lesEltpratiquinfo) {
                                if (eltpratiquinfo.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                    souscentreEltpratiquinfoMap.put(souscentre, eltpratiquinfo);
                                }
                            }
                        }
                        //remplissage de souscentreStatinfoMap 
                        for (Souscentre souscentre : souscentreStatistiqueMap.keySet()) {
                            int nb = 0;
                            for (Statistique stat : souscentreStatistiqueMap.get(souscentre)) {
                                nb += stat.getNombre();
                            }
                            souscentreStatinfoMap.put(souscentre, nb);
                        }
                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            for (Region region : regions) {
                                for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                    if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                        int totalMontant = 0;
                                        ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                        for (int i = 0; i < souscentresList.size(); i++) {
                                            Souscentre souscentre = souscentresList.get(i);
                                            int num = 1;
                                            String optionAffiche = "";
                                            int effectifAffiche = 0;
                                            int nbsalAffiche = 0;
                                            int nbepreuveAffiche = 0;
                                            int nbexaminAffiche = 0;
                                            int nbsurvAffiche = 0;
                                            int nbvacAffiche = 0;
                                            int nbtotalvacAffiche = 0;
                                            int coutvacAffiche = 0;
                                            int nbcopiesAffiche = 0;
                                            int coutcopiesAffiche = 0;
                                            int nbchefsalAffiche = 0;
                                            int indemniteAffiche = 0;
                                            int nbsurvdessurvAffiche = 0;
                                            int vacsurvdessurvAffiche = 0;
                                            int supplementAffiche = 0;
                                            int totalAffiche = 0;
                                            if (souscentreStatistiqueMap.containsKey(souscentre) && souscentreEltpratiquinfoMap.containsKey(souscentre)) {
                                                int nbtours = 0;//nombre de tours dans la boucle d'affichage
                                                int nbspec = 0;//nombre de spécialités du sous-centre                                               
                                                if (souscentresAyantEltpratique1indList.contains(souscentre)) {
                                                    nbspec = souscentreEltpratique1indMap.get(souscentre).size();
                                                }
                                                nbtours = nbspec + 2;//2 tours pour l'informatique mais 2*nbspec+2 au finish
                                                int j = 0;
                                                int k = 0;//va de 0 à 1 pour les deux tours de chaque spécialité
                                                Eltpratique1ind eltpratique1ind = new Eltpratique1ind();
                                                statinfo = souscentreStatinfoMap.get(souscentre);
                                                while (j < nbtours) {
                                                    if (j > 1 && nbspec == 0) {
                                                        break;
                                                    }
                                                    if (j == 0) {
                                                        eltpratiquinfo = souscentreEltpratiquinfoMap.get(souscentre);

                                                        determinerCoutInfo(statinfo, eltpratiquinfo);

                                                        optionAffiche = "Informatique (toute spécialité)";
                                                        effectifAffiche = statinfo;
                                                        nbsalAffiche = eltpratiquinfo.getNbsal();
                                                        nbepreuveAffiche = 1;
                                                        nbexaminAffiche = 0;
                                                        nbsurvAffiche = 2 * eltpratiquinfo.getNbsal();
                                                        nbvacAffiche = 1;
                                                        nbtotalvacAffiche = 2 * eltpratiquinfo.getNbsal();
                                                        coutvacAffiche = coutvacpratinfo;
                                                        nbcopiesAffiche = 0;
                                                        coutcopiesAffiche = 0;
                                                        nbchefsalAffiche = eltpratiquinfo.getNbchefsalprat();
                                                        indemniteAffiche = indempratinfo;
                                                        supplementAffiche = 0;
                                                        nbsurvdessurvAffiche = nbsurvdessurv;
                                                        vacsurvdessurvAffiche = vacsurvdessurv;
                                                        totalAffiche = totalpratinfo;
                                                    }
                                                    if (j == 1) {
                                                        optionAffiche = "Informatique (toute spécialité)";
                                                        effectifAffiche = statinfo;
                                                        nbsalAffiche = 0;
                                                        nbepreuveAffiche = 1;
                                                        nbexaminAffiche = eltpratiquinfo.getNbexamin();
                                                        nbsurvAffiche = 0;
                                                        nbvacAffiche = eltpratiquinfo.getNbvaccor();
                                                        nbtotalvacAffiche = eltpratiquinfo.getNbvaccor() * eltpratiquinfo.getNbexamin();
                                                        coutvacAffiche = coutvaccorinfo;
                                                        nbcopiesAffiche = statinfo;
                                                        coutcopiesAffiche = coutcopiescorinfo;
                                                        nbchefsalAffiche = eltpratiquinfo.getNbchefsalcor();
                                                        indemniteAffiche = indemcorinfo;
                                                        supplementAffiche = supplementcorinfo;
                                                        nbsurvdessurvAffiche = 0;
                                                        vacsurvdessurvAffiche = 0;
                                                        totalAffiche = totalcorinfo;
                                                    }
                                                    if (j > 1 && nbspec > 0) {
                                                        if (k == 0) {
                                                            eltpratique1ind = souscentreEltpratique1indMap.get(souscentre).get(j - 2);
                                                            determinerCoutD1Eltpratique1ind(souscentre, souscentreStatistiqueMap, eltpratique1ind, niveauSelected);

                                                            optionAffiche = eltpratique1ind.getOption().getSigle();
                                                            effectifAffiche = effectif;
                                                            nbsalAffiche = eltpratique1ind.getNbsal();
                                                            nbepreuveAffiche = eltpratique1ind.getNbepreuve();
                                                            nbexaminAffiche = eltpratique1ind.getNbexaminprat();
                                                            nbsurvAffiche = 2 * eltpratique1ind.getNbsal();
                                                            nbvacAffiche = eltpratique1ind.getNbvacprat();
                                                            nbtotalvacAffiche = (eltpratique1ind.getNbexaminprat() + 2 * eltpratique1ind.getNbsal()) * eltpratique1ind.getNbvacprat();
                                                            coutvacAffiche = coutvacprat;
                                                            nbcopiesAffiche = nbcopiesprat;
                                                            coutcopiesAffiche = coutcopiesprat;
                                                            nbchefsalAffiche = eltpratique1ind.getNbchefsalprat();
                                                            indemniteAffiche = indemchefsalprat;
                                                            supplementAffiche = supplementprat;
                                                            nbsurvdessurvAffiche = nbsurvdessurv;
                                                            vacsurvdessurvAffiche = vacsurvdessurv;
                                                            totalAffiche = totalEltprat;
                                                        }
                                                        if (k == 1) {
                                                            optionAffiche = eltpratique1ind.getOption().getSigle() + " (Prés. Rapport)";
                                                            effectifAffiche = effectif;
                                                            nbsalAffiche = 0;
                                                            if (!eltpratique1ind.getOption().getSigle().equals("AF1") && !eltpratique1ind.getOption().getSigle().equals("AF2") && !eltpratique1ind.getOption().getSigle().equals("AF3") && !eltpratique1ind.getOption().getSigle().equals("F4-BE") && !eltpratique1ind.getOption().getSigle().equals("F4-TP") && !eltpratique1ind.getOption().getSigle().equals("F6-BIPE") && !eltpratique1ind.getOption().getSigle().equals("F6-COPH") && !eltpratique1ind.getOption().getSigle().equals("F6-MIPE") && !eltpratique1ind.getOption().getSigle().equals("F7-BIOLAP") && !eltpratique1ind.getOption().getSigle().equals("F7-BIOTECH") && !eltpratique1ind.getOption().getSigle().equals("F8")) {
                                                                nbepreuveAffiche = 1;
                                                            }
                                                            nbexaminAffiche = eltpratique1ind.getNbexaminrapp();
                                                            nbsurvAffiche = 0;
                                                            nbvacAffiche = eltpratique1ind.getNbvacrapp();
                                                            nbtotalvacAffiche = eltpratique1ind.getNbexaminrapp() * eltpratique1ind.getNbvacrapp();
                                                            coutvacAffiche = coutvacrapp;
                                                            nbcopiesAffiche = nbcopiesrapp;
                                                            coutcopiesAffiche = coutcopiesrapp;
                                                            nbchefsalAffiche = eltpratique1ind.getNbchefsalrapp();
                                                            indemniteAffiche = indemchefsalrapp;
                                                            supplementAffiche = supplementrapp;
                                                            nbsurvdessurvAffiche = 0;
                                                            vacsurvdessurvAffiche = 0;
                                                            totalAffiche = totalEltrapp;
                                                        }
                                                    }

                                                    Map<String, Object> row = new HashMap<>();
                                                    row.put("session", anneeSelected);
                                                    row.put("examen", groupedexamensEnstring);
                                                    row.put("num", num++);
                                                    row.put("region", region.getNomreg());
                                                    row.put("reference", "");
                                                    row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                    row.put("souscentre", souscentre.getNomsouscent());
                                                    row.put("option", optionAffiche);
                                                    row.put("effectif", effectifAffiche);
                                                    row.put("nbsal", nbsalAffiche);
                                                    row.put("nbepreuve", nbepreuveAffiche);
                                                    row.put("nbexamin", nbexaminAffiche);
                                                    row.put("nbsurv", nbsurvAffiche);
                                                    row.put("nbvac", nbvacAffiche);
                                                    row.put("nbtotalvac", nbtotalvacAffiche);
                                                    row.put("coutvac", coutvacAffiche);
                                                    row.put("nbcopies", nbcopiesAffiche);
                                                    row.put("coutcopies", coutcopiesAffiche);
                                                    row.put("nbchefsal", nbchefsalAffiche);
                                                    row.put("indemnite", indemniteAffiche);
                                                    row.put("supplement", supplementAffiche);
                                                    row.put("nbsurvdessurv", nbsurvdessurvAffiche);
                                                    row.put("montantsurvdessurv", vacsurvdessurvAffiche);
                                                    row.put("baspage", "OBC/AR/"+centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                    int totalArrondi = (int) Math.ceil((double) totalAffiche / (double) 1000) * 1000;
                                                    row.put("total", totalArrondi);
                                                    totalMontant += totalArrondi;
                                                    row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                    datasource.add(row);

                                                    if (j > 1 && nbspec > 0) {
                                                        if (k == 1) {
                                                            k = 0;
                                                        } else {
                                                            k = 1;
                                                        }
                                                    }
                                                    if (k == 0 || j < 1) {
                                                        j++;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatVacationPratique1IndReport.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        souscentreStatinfoMap.clear();
                    }
                    if (niveauSelected.equals("BACC") && typeSelected.equals("IND")) {
                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            for (Region region : regions) {
                                for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                    if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                        int totalMontant = 0;
                                        ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                        for (int i = 0; i < souscentresList.size(); i++) {
                                            Souscentre souscentre = souscentresList.get(i);
                                            int num = 1;
                                            String optionAffiche = "";
                                            int effectifAffiche = 0;
                                            int nbsalAffiche = 0;
                                            int nbepreuveAffiche = 0;
                                            int nbexaminAffiche = 0;
                                            int nbsurvAffiche = 0;
                                            int nbvacAffiche = 0;
                                            int nbtotalvacAffiche = 0;
                                            int coutvacAffiche = 0;
                                            int nbcopiesAffiche = 0;
                                            int coutcopiesAffiche = 0;
                                            int nbchefsalAffiche = 0;
                                            int indemniteAffiche = 0;
                                            int supplementAffiche = 0;
                                            int nbsurvdessurvAffiche = 0;
                                            int vacsurvdessurvAffiche = 0;
                                            int totalAffiche = 0;

                                            if (souscentreStatistiqueMap.containsKey(souscentre) && souscentreEltpratique1indMap.containsKey(souscentre)) {
                                                for (Eltpratique1ind eltpratique1ind : souscentreEltpratique1indMap.get(souscentre)) {
                                                    determinerCoutD1Eltpratique1ind(souscentre, souscentreStatistiqueMap, eltpratique1ind, niveauSelected);

                                                    for (int j = 0; j < 2; j++) {
                                                        if (j == 0) {
                                                            optionAffiche = eltpratique1ind.getOption().getSigle();
                                                            effectifAffiche = effectif;
                                                            nbsalAffiche = eltpratique1ind.getNbsal();
                                                            nbepreuveAffiche = eltpratique1ind.getNbepreuve();
                                                            nbexaminAffiche = eltpratique1ind.getNbexaminprat();
                                                            nbsurvAffiche = 2 * eltpratique1ind.getNbsal();
                                                            nbvacAffiche = eltpratique1ind.getNbvacprat();
                                                            nbtotalvacAffiche = ((2 * eltpratique1ind.getNbsal()) + eltpratique1ind.getNbexaminprat()) * eltpratique1ind.getNbvacprat();
                                                            coutvacAffiche = coutvacprat;
                                                            nbcopiesAffiche = effectif * eltpratique1ind.getNbepreuve();
                                                            coutcopiesAffiche = coutcopiesprat;
                                                            nbchefsalAffiche = eltpratique1ind.getNbchefsalprat();
                                                            indemniteAffiche = indemchefsalprat;
                                                            supplementAffiche = supplementprat;
                                                            nbsurvdessurvAffiche = nbsurvdessurv;
                                                            vacsurvdessurvAffiche = vacsurvdessurv;
                                                            totalAffiche = totalEltprat;
                                                        }
                                                        if (j == 1) {//&& (eltpratique1ind.getOption().getSigle().equals("MHB") || eltpratique1ind.getOption().getSigle().equals("MEM") || eltpratique1ind.getOption().getSigle().equals("MISE") || eltpratique1ind.getOption().getSigle().equals("F4-BE") || eltpratique1ind.getOption().getSigle().equals("F8"))
                                                            optionAffiche = eltpratique1ind.getOption().getSigle() + " (Prés. Rapport)";
                                                            effectifAffiche = effectif;
                                                            nbsalAffiche = 0;
                                                            nbepreuveAffiche = 1;
                                                            nbexaminAffiche = eltpratique1ind.getNbexaminrapp();
                                                            nbsurvAffiche = 0;
                                                            nbvacAffiche = eltpratique1ind.getNbvacrapp();
                                                            nbtotalvacAffiche = eltpratique1ind.getNbexaminrapp() * eltpratique1ind.getNbvacrapp();
                                                            coutvacAffiche = coutvacrapp;
                                                            nbcopiesAffiche = effectif;
                                                            coutcopiesAffiche = coutcopiesrapp;
                                                            nbchefsalAffiche = eltpratique1ind.getNbchefsalrapp();
                                                            indemniteAffiche = indemchefsalrapp;
                                                            supplementAffiche = supplementrapp;
                                                            nbsurvdessurvAffiche = 0;
                                                            vacsurvdessurvAffiche = 0;
                                                            totalAffiche = totalEltrapp;
                                                        }
                                                        /*
                                                        if (j == 1 && (!eltpratique1ind.getOption().getSigle().equals("MHB") && !eltpratique1ind.getOption().getSigle().equals("MEM") && !eltpratique1ind.getOption().getSigle().equals("MISE") && !eltpratique1ind.getOption().getSigle().equals("F4-BE") && !eltpratique1ind.getOption().getSigle().equals("F8"))) {
                                                            break;
                                                        }
                                                         */
                                                        Map<String, Object> row = new HashMap<>();
                                                        row.put("session", anneeSelected);
                                                        row.put("examen", groupedexamensEnstring);
                                                        row.put("num", num++);                                           
                                                        row.put("region", region.getNomreg());
                                                        row.put("reference", "");
                                                        row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                        row.put("souscentre", souscentre.getNomsouscent());
                                                        row.put("option", optionAffiche);
                                                        row.put("effectif", effectifAffiche);
                                                        row.put("nbsal", nbsalAffiche);
                                                        row.put("nbepreuve", nbepreuveAffiche);
                                                        row.put("nbexamin", nbexaminAffiche);
                                                        row.put("nbsurv", nbsurvAffiche);
                                                        row.put("nbvac", nbvacAffiche);
                                                        row.put("nbtotalvac", nbtotalvacAffiche);
                                                        row.put("coutvac", coutvacAffiche);
                                                        row.put("nbcopies", nbcopiesAffiche);
                                                        row.put("coutcopies", coutcopiesAffiche);
                                                        row.put("nbchefsal", nbchefsalAffiche);
                                                        row.put("indemnite", indemniteAffiche);
                                                        row.put("supplement", supplementAffiche);
                                                        row.put("nbsurvdessurv", nbsurvdessurvAffiche);
                                                        row.put("montantsurvdessurv", vacsurvdessurvAffiche);
                                                        row.put("baspage", "OBC/AR/"+centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                        int totalArrondi = (int) Math.ceil((double) totalAffiche / (double) 1000) * 1000;
                                                        row.put("total", totalArrondi);
                                                        totalMontant += totalArrondi;
                                                        row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                        datasource.add(row);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatVacationPratique1IndReport.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    }
                    if (typeSelected.equals("GEN")) {
                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            for (Region region : regions) {
                                for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                    if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                        int totalMontant = 0;
                                        ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                        for (int i = 0; i < souscentresList.size(); i++) {
                                            Souscentre souscentre = souscentresList.get(i);
                                            int num = 1;
                                            String optionAffiche = "";
                                            int effectifAffiche = 0;
                                            int nbsalAffiche = 0;
                                            int nbepreuveAffiche = 0;
                                            int nbexaminAffiche = 0;
                                            int nbsurvAffiche = 0;
                                            int nbvacAffiche = 0;
                                            int nbtotalvacAffiche = 0;
                                            int coutvacAffiche = 0;
                                            int nbcopiesAffiche = 0;
                                            int coutcopiesAffiche = 0;
                                            int nbchefsalAffiche = 0;
                                            int indemniteAffiche = 0;
                                            int supplementAffiche = 0;
                                            int totalAffiche = 0;

                                            if (souscentreStatistiqueMap.containsKey(souscentre) && souscentreEltpratique1indMap.containsKey(souscentre)) {
                                                for (Eltpratique1ind eltpratique1ind : souscentreEltpratique1indMap.get(souscentre)) {
                                                    determinerCoutD1Eltpratique1SerieE(souscentre, souscentreStatistiqueMap, eltpratique1ind, niveauSelected);

                                                    for (int j = 0; j < 3; j++) {//3 lignes pour chaque sous-centre                                                        
                                                        if (j == 0) {
                                                            optionAffiche = eltpratique1ind.getOption().getSigle();
                                                            effectifAffiche = effectif;
                                                            nbsalAffiche = eltpratique1ind.getNbsal();
                                                            nbepreuveAffiche = eltpratique1ind.getNbepreuve();
                                                            nbexaminAffiche = eltpratique1ind.getNbexaminprat();
                                                            nbsurvAffiche = 2 * eltpratique1ind.getNbsal();
                                                            nbvacAffiche = eltpratique1ind.getNbvacprat();
                                                            nbtotalvacAffiche = ((2 * eltpratique1ind.getNbsal()) + eltpratique1ind.getNbexaminprat()) * eltpratique1ind.getNbvacprat();
                                                            coutvacAffiche = coutvacprat;
                                                            nbcopiesAffiche = effectif * eltpratique1ind.getNbepreuve();
                                                            coutcopiesAffiche = coutcopiesprat;
                                                            nbchefsalAffiche = eltpratique1ind.getNbchefsalprat();
                                                            indemniteAffiche = indemchefsalprat;
                                                            supplementAffiche = supplementprat;
                                                            totalAffiche = totalEltprat;
                                                        }
                                                        if (j == 1) {
                                                            optionAffiche = "Préparation matière d'oeuvre Chef/travaux et autres";
                                                            effectifAffiche = 0;
                                                            nbsalAffiche = 0;
                                                            nbepreuveAffiche = 0;
                                                            nbexaminAffiche = 0;
                                                            nbsurvAffiche = 0;
                                                            nbvacAffiche = 0;
                                                            nbtotalvacAffiche = 0;
                                                            coutvacAffiche = 10000;
                                                            nbcopiesAffiche = 0;
                                                            coutcopiesAffiche = 0;
                                                            nbchefsalAffiche = 0;
                                                            indemniteAffiche = 0;
                                                            supplementAffiche = 0;
                                                            totalAffiche = 10000;
                                                        }
                                                        if (j == 2) {
                                                            optionAffiche = "Secrétariat";
                                                            effectifAffiche = 0;
                                                            nbsalAffiche = 0;
                                                            nbepreuveAffiche = 0;
                                                            nbexaminAffiche = 0;
                                                            nbsurvAffiche = 0;
                                                            nbvacAffiche = 0;
                                                            nbtotalvacAffiche = 0;
                                                            coutvacAffiche = 15000;
                                                            nbcopiesAffiche = 0;
                                                            coutcopiesAffiche = 0;
                                                            nbchefsalAffiche = 0;
                                                            indemniteAffiche = 0;
                                                            supplementAffiche = 0;
                                                            totalAffiche = 15000;
                                                        }

                                                        Map<String, Object> row = new HashMap<>();
                                                        row.put("session", anneeSelected);
                                                        row.put("examen", groupedexamensEnstring);
                                                        row.put("num", num++);                                       
                                                        row.put("region", region.getNomreg());
                                                        row.put("reference", "");
                                                        row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                        row.put("souscentre", souscentre.getNomsouscent());
                                                        row.put("option", optionAffiche);
                                                        row.put("effectif", effectifAffiche);
                                                        row.put("nbsal", nbsalAffiche);
                                                        row.put("nbepreuve", nbepreuveAffiche);
                                                        row.put("nbexamin", nbexaminAffiche);
                                                        row.put("nbsurv", nbsurvAffiche);
                                                        row.put("nbvac", nbvacAffiche);
                                                        row.put("nbtotalvac", nbtotalvacAffiche);
                                                        row.put("coutvac", coutvacAffiche);
                                                        row.put("nbcopies", nbcopiesAffiche);
                                                        row.put("coutcopies", coutcopiesAffiche);
                                                        row.put("nbchefsal", nbchefsalAffiche);
                                                        row.put("indemnite", indemniteAffiche);
                                                        row.put("supplement", supplementAffiche);
                                                        row.put("baspage", "OBC/AR/"+centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                        int totalArrondi = (int) Math.ceil((double) totalAffiche / (double) 1000) * 1000;
                                                        row.put("total", totalArrondi);
                                                        totalMontant += totalArrondi;
                                                        row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                        datasource.add(row);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatVacationPratique1SerieEReport.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Aucun paramètre de pratique 1 trouvée dans la base des données pour ce groupe d'examens !");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
        }
        souscentreStatistiqueMap.clear();
        souscentreStatinfoMap.clear();
        souscentreEltpratique1indMap.clear();
        souscentresAyantEltpratique1indList.clear();
        centrebilletageSouscentresMap.clear();
        
    }//GEN-LAST:event_jButtonVisualiserEtatsActionPerformed

    private void jButtonSupprimerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEtatsActionPerformed
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de pratique 1 pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION PRATIQUE 1");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de vacation de pratique 1 n'existe pour ce groupe d'examen !");
                } else {
                    try {
                        for (Caisse caisse : caisses) {
                            metier.supprimerCaisse(caisse);
                        }
                        JOptionPane.showMessageDialog(this, "Etats de vacations de pratique 1 supprimés avec succès !");
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
            }
        }
    }//GEN-LAST:event_jButtonSupprimerEtatsActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jComboBoxRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionActionPerformed
        remplirDepartementCombobox();
    }//GEN-LAST:event_jComboBoxRegionActionPerformed

    private void jButtonAnnulerChoixSouscentrepratiqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixSouscentrepratiqueActionPerformed
        jComboBoxRegion.setSelectedIndex(0);
        jComboBoxDepartement.setSelectedIndex(0);
        jComboBoxArrondissement.setSelectedIndex(0);
        jComboBoxSouscentre.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixSouscentrepratiqueActionPerformed

    private void jComboBoxDepartementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementActionPerformed
        remplirArrondissementCombobox();
    }//GEN-LAST:event_jComboBoxDepartementActionPerformed

    private void jComboBoxSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSouscentreActionPerformed
        remplirSpecialiteCombobox();
    }//GEN-LAST:event_jComboBoxSouscentreActionPerformed

    private void jButtonCreerParametresSpecialiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerParametresSpecialiteActionPerformed
        infoSaisies();
        if (sigleOptionSelected.equals("---") || groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nbsalspecString.equals("") || nbepreuvespecString.equals("") || nbvacpratspecString.equals("") || nbchefsalpratspecString.equals("") || nbchefsalrappString.equals("") || nbvacrappString.equals("") || nbexaminpratspecString.equals("") || nbexaminrappString.equals("")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir une session, un sous-centre de pratique et donner les 8 paramètres !");
        } else {
            validerNbsalspec(nbsalspecString);
            validerNbepreuvespec(nbepreuvespecString);
            validerNbvacpratspec(nbvacpratspecString);
            validerNbchefsalpratspec(nbchefsalpratspecString);
            validerNbchefsalrapp(nbchefsalrappString);
            validerNbvacrapp(nbvacrappString);
            validerNbexaminpratspec(nbexaminpratspecString);
            validerNbexaminrapp(nbexaminrappString);
            if (!continuerNbsalspec || !continuerNbepreuvespec || nbepreuvespecSaisi == 0 || !continuerNbvacpratspec || nbvacpratspecSaisi == 0 || !continuerNbchefsalpratspec || !continuerNbchefsalrapp || !continuerNbvacrapp || !continuerNbexaminpratspec || !continuerNbexaminrapp) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Au moins un des 8 nombres saisis est incorrect !");
            } else {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                for (Souscentre souscentre : souscentres) {
                    if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                        souscentreSelected = souscentre;
                        break;
                    }
                }
                for (Option option : options) {
                    if (option.getSigle().equals(sigleOptionSelected)) {
                        optionSelected = option;
                        break;
                    }
                }

                try {
                    metier.creerEltpratique1ind(new Eltpratique1ind(souscentreSelected, groupe, sessionSelected, optionSelected, nbsalspecSaisi, nbepreuvespecSaisi, nbexaminpratspecSaisi, nbexaminrappSaisi, nbvacpratspecSaisi, nbvacrappSaisi, nbchefsalpratspecSaisi, nbchefsalrappSaisi));
                    JOptionPane.showMessageDialog(this, "8 paramètres de pratique enregistrés avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de d'enregistrer les 8 paramètres du sous-centre de pratique [" + nomSouscentreSelected + "]" + "\n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonCreerParametresSpecialiteActionPerformed

    private void jButtonListerParametresSpecialiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerParametresSpecialiteActionPerformed
        infoSaisies();
        Map<Souscentre, ArrayList<Eltpratique1ind>> souscentreEltpratique1indMap = new HashMap<>();//contient chaque sous-centre la liste de ses Eltpratique1ind
        ArrayList<Souscentre> souscentresList = new ArrayList<>();//liste des sous-centres ayant des Eltpratique1ind
        if (groupedexamensEnstring.equals("") || anneeString.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir une session et un groupe d'examens !");
        } else {
            anneeSelected = Integer.parseInt(anneeString);
            lesEltpratique1ind = metier.findAllEltpratique1indD1GroupedexamensD1Session(niveauSelected, typeSelected, anneeSelected);

            if (!lesEltpratique1ind.isEmpty()) {
                for (Eltpratique1ind eltpratique1ind : lesEltpratique1ind) {
                    if (!souscentresList.contains(eltpratique1ind.getSouscentre())) {
                        souscentresList.add(eltpratique1ind.getSouscentre());
                    }
                }
                for (Souscentre souscentre : souscentresList) {
                    ArrayList<Eltpratique1ind> eltpratique1indList = new ArrayList<>();
                    for (Eltpratique1ind eltpratique1ind : lesEltpratique1ind) {
                        if (eltpratique1ind.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                            eltpratique1indList.add(eltpratique1ind);
                        }
                    }
                    souscentreEltpratique1indMap.put(souscentre, eltpratique1indList);
                }
                try {
                    List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                    for (Region region : regions) {
                        int i = 1;
                        for (Souscentre souscentre : souscentreEltpratique1indMap.keySet()) {
                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                                for (Eltpratique1ind eltpratique1ind : souscentreEltpratique1indMap.get(souscentre)) {

                                    Map<String, Object> row = new HashMap<>();
                                    row.put("session", anneeSelected);
                                    row.put("examen", groupedexamensEnstring);
                                    row.put("region", region.getNomreg());
                                    row.put("num", i++);
                                    row.put("souscentre", souscentre.getNomsouscent());
                                    row.put("option", eltpratique1ind.getOption().getSigle());
                                    row.put("nbsal", eltpratique1ind.getNbsal());
                                    row.put("nbepreuve", eltpratique1ind.getNbepreuve());
                                    row.put("nbexaminprat", eltpratique1ind.getNbexaminprat());
                                    row.put("nbexaminrapp", eltpratique1ind.getNbexaminrapp());
                                    row.put("nbvacprat", eltpratique1ind.getNbvacprat());
                                    row.put("nbvacrapp", eltpratique1ind.getNbvacrapp());
                                    row.put("nbchefsalprat", eltpratique1ind.getNbchefsalprat());
                                    row.put("nbchefsalrapp", eltpratique1ind.getNbchefsalrapp());
                                    datasource.add(row);
                                }
                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeParametresEltpratique1indReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Aucun paramètre de pratique trouvé dans la base de données !");
            }
        }
    }//GEN-LAST:event_jButtonListerParametresSpecialiteActionPerformed

    private void jButtonAnnulerParametresSpecialiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerParametresSpecialiteActionPerformed
        jComboBoxSpecialite.setSelectedIndex(0);
        jTextFieldNbexaminRapport.setText("");
        jTextFieldNbepreuveSpec.setText("");
        jTextFieldNbvacationRapport.setText("");
        jTextFieldNbchefsalRapport.setText("");
        jTextFieldNbchefsalPratSpec.setText("");
        jTextFieldNbsalSpec.setText("");
        jTextFieldNbexaminPratSpec.setText("");
        jTextFieldNbvacationPratSpec.setText("");
    }//GEN-LAST:event_jButtonAnnulerParametresSpecialiteActionPerformed

    private void jButtonSupprimerParametresSpecialiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerParametresSpecialiteActionPerformed
        infoSaisies();
        if (anneeString.equals("---") || nomSouscentreSelected.equals("---") || sigleOptionSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir une session, un sous-centre de pratique et une spécialité !");
        } else {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les 8 paramètres de pratique du sous-centre de pratique [" + nomSouscentreSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                anneeSelected = Integer.parseInt(anneeString);
                try {
                    Eltpratique1ind eltpratique1ind = metier.findEltpratique1indD1SouscentreD1OptionD1Session(nomSouscentreSelected, sigleOptionSelected, anneeSelected);
                    metier.supprimerEltpratique1ind(eltpratique1ind);
                    JOptionPane.showMessageDialog(this, "8 paramètres de pratique supprimés avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer les 8 paramètres de pratique au sous-centre de pratique [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerParametresSpecialiteActionPerformed

    private void jComboBoxArrondissementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementActionPerformed
        remplirSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonAnnulerChoixExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixExamenActionPerformed
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea.setText("");
        jComboBoxSession.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixExamenActionPerformed

    private void jComboBoxNiveauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNiveauActionPerformed
        //
    }//GEN-LAST:event_jComboBoxNiveauActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
        if (niveauSelected.equals("PROB") && typeSelected.equals("IND")) {
            jPanelParametresInformatique.setEnabled(true);
            jTextFieldNbsalInfo.setEnabled(true);
            jTextFieldNbchefsalcorrectInfo.setEnabled(true);
            jTextFieldNbchefsalpratInfo.setEnabled(true);
            jTextFieldNbvacationcorrectInfo.setEnabled(true);
            jTextFieldNbexaminInfo.setEnabled(true);
            jButtonCreerParametresInfo.setEnabled(true);
            jButtonListerParametresInfo.setEnabled(true);
            jButtonSupprimerParametresInfo.setEnabled(true);
            jButtonAnnulerParametresInfo.setEnabled(true);
        } else {
            jPanelParametresInformatique.setEnabled(false);
            jTextFieldNbsalInfo.setEnabled(false);
            jTextFieldNbchefsalcorrectInfo.setEnabled(false);
            jTextFieldNbchefsalpratInfo.setEnabled(false);
            jTextFieldNbvacationcorrectInfo.setEnabled(false);
            jTextFieldNbexaminInfo.setEnabled(false);
            jButtonCreerParametresInfo.setEnabled(false);
            jButtonListerParametresInfo.setEnabled(false);
            jButtonSupprimerParametresInfo.setEnabled(false);
            jButtonAnnulerParametresInfo.setEnabled(false);
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jButtonCreerParametresInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerParametresInfoActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nbsalinfoString.equals("") || nbchefsalcorinfoString.equals("") || nbchefsalpratinfoString.equals("") || nbvaccorinfoString.equals("") || nbexamininfoString.equals("")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir une session, un sous-centre de pratique et donner les 5 paramètres !");
        } else {
            validerNbsalinfo(nbsalinfoString);
            validerNbchefsalcorinfo(nbchefsalcorinfoString);
            validerNbchefsalpratinfo(nbchefsalpratinfoString);
            validerNbvaccorinfo(nbvaccorinfoString);
            validerNbexamininfo(nbexamininfoString);

            if (!continuerNbsalinfo || !continuerNbchefsalcorinfo || !continuerNbchefsalpratinfo || !continuerNbvaccorinfo || !continuerNbexamininfo) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Au moins un des 5 nombres saisis est incorrect !");
            } else {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                for (Souscentre souscentre : souscentres) {
                    if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                        souscentreSelected = souscentre;
                        break;
                    }
                }

                try {
                    metier.creerEltpratiquinfo(new Eltpratiquinfo(souscentreSelected, sessionSelected, groupe, nbsalinfoSaisi, nbexamininfoSaisi, nbvaccorinfoSaisi, nbchefsalpratinfoSaisi, nbchefsalcorinfoSaisi));
                    JOptionPane.showMessageDialog(this, "5 paramètres de pratique informatique enregistrés avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de d'enregistrer les 5 paramètres de pratique informatique au sous-centre [" + nomSouscentreSelected + "]" + "\n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonCreerParametresInfoActionPerformed

    private void jButtonListerParametresInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerParametresInfoActionPerformed
        infoSaisies();
        Map<Souscentre, Eltpratiquinfo> souscentreEltpratiquinfoMap = new HashMap<>();//contient chaque sous-centre et son Eltpratiquinfo
        if (groupedexamensEnstring.equals("") || anneeString.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir une session et un groupe d'examens !");
        } else {
            anneeSelected = Integer.parseInt(anneeString);
            lesEltpratiquinfo = metier.findAllEltpratiquinfoD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);

            if (!lesEltpratiquinfo.isEmpty()) {
                for (Eltpratiquinfo eltpratiquinfo : lesEltpratiquinfo) {
                    if (!souscentreEltpratiquinfoMap.containsKey(eltpratiquinfo.getSouscentre())) {
                        souscentreEltpratiquinfoMap.put(eltpratiquinfo.getSouscentre(), eltpratiquinfo);
                    }
                }
                try {
                    List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                    for (Region region : regions) {
                        int i = 1;
                        for (Souscentre souscentre : souscentreEltpratiquinfoMap.keySet()) {
                            Eltpratiquinfo eltpratiquinfo = souscentreEltpratiquinfoMap.get(souscentre);
                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                                Map<String, Object> row = new HashMap<>();
                                row.put("session", anneeSelected);
                                row.put("examen", groupedexamensEnstring);
                                row.put("region", region.getNomreg());
                                row.put("num", i++);
                                row.put("souscentre", souscentre.getNomsouscent());
                                row.put("nbsal", eltpratiquinfo.getNbsal());
                                row.put("nbchefsalcor", eltpratiquinfo.getNbchefsalcor());
                                row.put("nbchefsalprat", eltpratiquinfo.getNbchefsalprat());
                                row.put("nbvaccor", eltpratiquinfo.getNbvaccor());
                                row.put("nbexamin", eltpratiquinfo.getNbexamin());
                                datasource.add(row);
                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeParametresEltpratiquinfoReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Aucun paramètre de pratique informatique trouvé dans la base de données !");
            }
        }
    }//GEN-LAST:event_jButtonListerParametresInfoActionPerformed

    private void jButtonAnnulerParametresInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerParametresInfoActionPerformed
        jTextFieldNbsalInfo.setText("");
        jTextFieldNbchefsalcorrectInfo.setText("");
        jTextFieldNbchefsalpratInfo.setText("");
        jTextFieldNbvacationcorrectInfo.setText("");
        jTextFieldNbexaminInfo.setText("");
    }//GEN-LAST:event_jButtonAnnulerParametresInfoActionPerformed

    private void jButtonSupprimerParametresInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerParametresInfoActionPerformed
        infoSaisies();
        if (anneeString.equals("---") || nomSouscentreSelected.equals("---") || groupedexamensEnstring.equals("")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session et un sous-centre de pratique !");
        } else {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les 5 paramètres de pratique d'informatique au sous-centre de pratique [" + nomSouscentreSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                anneeSelected = Integer.parseInt(anneeString);
                try {
                    Eltpratiquinfo eltpratiquinfo = metier.findEltpratiquinfoD1GroupedexamensD1SouscentreD1Session(niveauSelected, typeSelected, nomSouscentreSelected, anneeSelected);
                    metier.supprimerEltpratiquinfo(eltpratiquinfo);
                    JOptionPane.showMessageDialog(this, "5 paramètres de pratique d'informatique supprimés avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer les 5 paramètres de pratique d'informatique au sous-centre de pratique [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerParametresInfoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatVacationPratique1INDetGENEserieE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatVacationPratique1INDetGENEserieE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatVacationPratique1INDetGENEserieE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatVacationPratique1INDetGENEserieE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatVacationPratique1INDetGENEserieE().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonAnnulerChoixExamen;
    private javax.swing.JButton jButtonAnnulerChoixSouscentrepratique;
    private javax.swing.JButton jButtonAnnulerParametresInfo;
    private javax.swing.JButton jButtonAnnulerParametresSpecialite;
    private javax.swing.JButton jButtonCreerEtats;
    private javax.swing.JButton jButtonCreerParametresInfo;
    private javax.swing.JButton jButtonCreerParametresSpecialite;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonListerParametresInfo;
    private javax.swing.JButton jButtonListerParametresSpecialite;
    private javax.swing.JButton jButtonMettreAjourEtats;
    private javax.swing.JButton jButtonSupprimerEtats;
    private javax.swing.JButton jButtonSupprimerParametresInfo;
    private javax.swing.JButton jButtonSupprimerParametresSpecialite;
    private javax.swing.JButton jButtonVisualiserEtats;
    private javax.swing.JComboBox<String> jComboBoxArrondissement;
    private javax.swing.JComboBox<String> jComboBoxDepartement;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxRegion;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxSouscentre;
    private javax.swing.JComboBox<String> jComboBoxSpecialite;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelDepartement;
    private javax.swing.JLabel jLabelDepartement1;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelNbchefsalPratSpec;
    private javax.swing.JLabel jLabelNbchefsalRapport;
    private javax.swing.JLabel jLabelNbchefsalcorrectInfo;
    private javax.swing.JLabel jLabelNbchefsalpratInfo;
    private javax.swing.JLabel jLabelNbepreuveSpec;
    private javax.swing.JLabel jLabelNbepreuves;
    private javax.swing.JLabel jLabelNbexaminInfo;
    private javax.swing.JLabel jLabelNbexaminPratSpec;
    private javax.swing.JLabel jLabelNbexaminRapport;
    private javax.swing.JLabel jLabelNbsalInfo;
    private javax.swing.JLabel jLabelNbsalSpec;
    private javax.swing.JLabel jLabelNbvacationSpec;
    private javax.swing.JLabel jLabelNbvacationcorrectInfo;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelNomCentre;
    private javax.swing.JLabel jLabelRegion;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelSpecialite;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanelChoixExamen;
    private javax.swing.JPanel jPanelChoixSouscentre;
    private javax.swing.JPanel jPanelGestionEtat;
    private javax.swing.JPanel jPanelParametresIndParSpecialite;
    private javax.swing.JPanel jPanelParametresInformatique;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea;
    private javax.swing.JTextField jTextFieldNbchefsalPratSpec;
    private javax.swing.JTextField jTextFieldNbchefsalRapport;
    private javax.swing.JTextField jTextFieldNbchefsalcorrectInfo;
    private javax.swing.JTextField jTextFieldNbchefsalpratInfo;
    private javax.swing.JTextField jTextFieldNbepreuveSpec;
    private javax.swing.JTextField jTextFieldNbexaminInfo;
    private javax.swing.JTextField jTextFieldNbexaminPratSpec;
    private javax.swing.JTextField jTextFieldNbexaminRapport;
    private javax.swing.JTextField jTextFieldNbsalInfo;
    private javax.swing.JTextField jTextFieldNbsalSpec;
    private javax.swing.JTextField jTextFieldNbvacationPratSpec;
    private javax.swing.JTextField jTextFieldNbvacationRapport;
    private javax.swing.JTextField jTextFieldNbvacationcorrectInfo;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Examen> examens = null;
    private List<Examen> examensSelected = new ArrayList<Examen>();
    private String[] examensList = null;
    private List<Option> options = null;
    private List<Region> regions = null;
    private String nomRegionSelected = "";
    private List<Departement> departements = null;
    private List<Arrondissement> arrondissements = null;
    private String[] sessionsCombo = null;
    private String[] regionsCombo = null;
    private String[] departementsCombo = null;
    private String[] arrondissementsCombo = null;
    private String nomArrondissementSelected = "";
    private String nomSouscentreSelected = "";
    private List<Souscentre> souscentres = null;
    private Souscentre souscentreSelected = null;
    private String[] souscentresCombo = null;
    private String nomDepartementSelected = "";
    private String phase = "ECRIT";
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private List<Caisse> caisses = null;
    private int effectif = 0, statinfo = 0, nbcopiesprat = 0, nbsurvdessurv = 0, vacsurvdessurv = 0, nbcopiesrapp = 0, totalEltprat = 0, totalEltrapp = 0, totalpratinfo = 0, totalcorinfo = 0, coutvacprat = 0, coutvacrapp = 0, coutcopiesprat = 0, coutcopiesrapp = 0, txindemChefsalprat = 0, txindemChefsalrapp = 0, txindemChefsalinfo = 0, indemchefsalprat = 0, indemchefsalrapp = 0, supplementprat = 0, supplementrapp = 0, txvac = 1500, txcopie = 150, coutvacpratinfo = 0, coutvaccorinfo = 0, coutcopiescorinfo = 0, indemcorinfo = 0, indempratinfo = 0, supplementcorinfo = 0;
    private String nbsalinfoString = "";
    private String nbchefsalcorinfoString = "";
    private String nbchefsalpratinfoString = "";
    private String nbvaccorinfoString = "";
    private String nbexamininfoString = "";
    private String nbsalspecString = "";
    private String nbepreuvespecString = "";
    private String nbvacpratspecString = "";
    private String nbchefsalpratspecString = "";
    private String nbchefsalrappString = "";
    private String nbvacrappString = "";
    private String nbexaminpratspecString = "";
    private String nbexaminrappString = "";
    private int nbsalinfoSaisi = 0;
    private int nbchefsalcorinfoSaisi = 0;
    private int nbchefsalpratinfoSaisi = 0;
    private int nbvaccorinfoSaisi = 0;
    private int nbexamininfoSaisi = 0;
    private int nbsalspecSaisi = 0;
    private int nbepreuvespecSaisi = 0;
    private int nbvacpratspecSaisi = 0;
    private int nbchefsalpratspecSaisi = 0;
    private int nbchefsalrappSaisi = 0;
    private int nbvacrappSaisi = 0;
    private int nbexaminpratspecSaisi = 0;
    private int nbexaminrappSaisi = 0;
    private boolean continuerNbvaccorinfo = false;
    private boolean continuerNbchefsalpratinfo = false;
    private boolean continuerNbchefsalcorinfo = false;
    private boolean continuerNbsalinfo = false;
    private boolean continuerNbexamininfo = false;
    private boolean continuerNbsalspec = false;
    private boolean continuerNbepreuvespec = false;
    private boolean continuerNbvacpratspec = false;
    private boolean continuerNbchefsalpratspec = false;
    private boolean continuerNbchefsalrapp = false;
    private boolean continuerNbvacrapp = false;
    private boolean continuerNbexaminpratspec = false;
    private boolean continuerNbexaminrapp = false;
    private Eltpratiquinfo eltpratiquinfo = null;
    private List<Eltpratiquinfo> lesEltpratiquinfo = null;
    private Eltpratique1ind eltpratique1ind = null;
    private List<Eltpratique1ind> lesEltpratique1ind = null;
    private String[] specialitesCombo = null;
    private List<Specialisation> specialites = null;
    private String sigleOptionSelected = "";
    private Option optionSelected = null;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        examens = metier.findAllExamens();
        regions = metier.findAllRegions();
        departements = metier.findAllDepartements();
        examens = metier.findAllExamens();
        options = metier.findAllOptions();

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int i = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[i++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des régions
        regionsCombo = new String[regions.size() + 1];
        regionsCombo[0] = "---";
        int j = 1;
        for (Region region : regions) {
            regionsCombo[j++] = region.getNomreg();
        }
        jComboBoxRegion.setModel(new DefaultComboBoxModel(regionsCombo));

        //on remplit la combobox des types d'examen
        typesCombo = new String[]{"---", "IND", "GEN"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        remplirDepartementCombobox();
        remplirArrondissementCombobox();
        remplirSouscentreCombobox();

        jPanelParametresInformatique.setEnabled(false);
        jTextFieldNbsalInfo.setEnabled(false);
        jTextFieldNbchefsalcorrectInfo.setEnabled(false);
        jTextFieldNbchefsalpratInfo.setEnabled(false);
        jTextFieldNbvacationcorrectInfo.setEnabled(false);
        jTextFieldNbexaminInfo.setEnabled(false);
        jButtonCreerParametresInfo.setEnabled(false);
        jButtonListerParametresInfo.setEnabled(false);
        jButtonSupprimerParametresInfo.setEnabled(false);
        jButtonAnnulerParametresInfo.setEnabled(false);
    }

    private void infoSaisies() {
        anneeString = (String) jComboBoxSession.getSelectedItem();
        groupedexamensEnstring = jTextArea.getText();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        nbsalinfoString = (String) jTextFieldNbsalInfo.getText();
        nbchefsalcorinfoString = (String) jTextFieldNbchefsalcorrectInfo.getText();
        nbchefsalpratinfoString = (String) jTextFieldNbchefsalpratInfo.getText();
        nbvaccorinfoString = (String) jTextFieldNbvacationcorrectInfo.getText();
        nbexamininfoString = (String) jTextFieldNbexaminInfo.getText();
        sigleOptionSelected = (String) jComboBoxSpecialite.getSelectedItem();
        nbsalspecString = jTextFieldNbsalSpec.getText();
        nbepreuvespecString = jTextFieldNbepreuveSpec.getText();
        nbvacpratspecString = jTextFieldNbvacationPratSpec.getText();
        nbchefsalpratspecString = jTextFieldNbchefsalPratSpec.getText();
        nbchefsalrappString = jTextFieldNbchefsalRapport.getText();
        nbvacrappString = jTextFieldNbvacationRapport.getText();
        nbexaminpratspecString = jTextFieldNbexaminPratSpec.getText();
        nbexaminrappString = jTextFieldNbexaminRapport.getText();
    }

    private void determinerCoutD1Eltpratique1ind(Souscentre souscentre, Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueMap, Eltpratique1ind eltpratique1ind, String niveau) {
        effectif = 0;
        nbcopiesprat = 0;
        nbcopiesrapp = 0;
        totalEltprat = 0;
        totalEltrapp = 0;
        coutvacprat = 0;
        coutvacrapp = 0;
        coutcopiesprat = 0;
        coutcopiesrapp = 0;
        txindemChefsalprat = 0;
        txindemChefsalrapp = 0;
        indemchefsalprat = 0;
        indemchefsalrapp = 0;
        supplementprat = 0;
        supplementrapp = 0;
        nbsurvdessurv = 0;
        vacsurvdessurv = 0;
        for (Statistique stat : souscentreStatistiqueMap.get(souscentre)) {
            if (eltpratique1ind.getOption().getSigle().equals(stat.getOption().getSigle())) {
                effectif = stat.getNombre();
                break;
            }
        }
        if (niveau.equals("BACC")) {
            txcopie = 200;//txcopie étant initialisé à 150
        }

        coutvacprat = txvac * ((2 * eltpratique1ind.getNbsal() + eltpratique1ind.getNbexaminprat()) * eltpratique1ind.getNbvacprat());
        coutvacrapp = txvac * ((2 * eltpratique1ind.getNbsal() + eltpratique1ind.getNbexaminrapp()) * eltpratique1ind.getNbvacrapp());
        if (!eltpratique1ind.getOption().getSigle().equals("IH")) {
            nbcopiesprat = effectif * eltpratique1ind.getNbepreuve();
            coutcopiesprat = effectif * eltpratique1ind.getNbepreuve() * txcopie;
        }
        if (!eltpratique1ind.getOption().getSigle().equals("IH") && !eltpratique1ind.getOption().getSigle().equals("AF1") && !eltpratique1ind.getOption().getSigle().equals("AF2") && !eltpratique1ind.getOption().getSigle().equals("AF3") && !eltpratique1ind.getOption().getSigle().equals("F4-BE") && !eltpratique1ind.getOption().getSigle().equals("F4-TP") && !eltpratique1ind.getOption().getSigle().equals("F6-BIPE") && !eltpratique1ind.getOption().getSigle().equals("F6-COPH") && !eltpratique1ind.getOption().getSigle().equals("F6-MIPE") && !eltpratique1ind.getOption().getSigle().equals("F7-BIOLAP") && !eltpratique1ind.getOption().getSigle().equals("F7-BIOTECH") && !eltpratique1ind.getOption().getSigle().equals("F8")) {
            nbcopiesrapp = effectif;
            coutcopiesrapp = effectif * txcopie;
        }

        //surveillants des surveillants et vacation
        nbsurvdessurv = calculNombreSurvDesSurv(eltpratique1ind.getNbsal());
        vacsurvdessurv = nbsurvdessurv * txvac*eltpratique1ind.getNbvacprat();

        //txindem= effectif/nbchefsal
        int nbchefsalprat = eltpratique1ind.getNbchefsalprat();
        int effectifchefsalprat = 0;
        if (nbchefsalprat != 0) {
            effectifchefsalprat = effectif / nbchefsalprat;
        }
        if (eltpratique1ind.getOption().getSigle().equals("MEM") || eltpratique1ind.getOption().getSigle().equals("MHB")) {
            effectifchefsalprat = effectif;
        }

        if (effectifchefsalprat > 0 && effectifchefsalprat <= 25) {
            txindemChefsalprat = 10000;
        }
        if (effectifchefsalprat >= 26 && effectifchefsalprat <= 50) {
            txindemChefsalprat = 15000;
        }
        if (effectifchefsalprat >= 51 && effectifchefsalprat <= 100) {
            txindemChefsalprat = 20000;
        }
        if (effectifchefsalprat >= 101) {
            txindemChefsalprat = 30000;
        }

        int nbchefsalrapp = eltpratique1ind.getNbchefsalrapp();
        int effectifrapp = 0;
        if (nbchefsalrapp != 0) {
            effectifrapp = effectif / nbchefsalrapp;
        }
        if (eltpratique1ind.getOption().getSigle().equals("MEM") || eltpratique1ind.getOption().getSigle().equals("MHB")) {
            effectifrapp = effectif;
        }
        if (effectifrapp > 0 && effectifrapp <= 25) {
            txindemChefsalrapp = 10000;
        }
        if (effectifrapp >= 26 && effectifrapp <= 50) {
            txindemChefsalrapp = 15000;
        }
        if (effectifrapp >= 51 && effectifrapp <= 100) {
            txindemChefsalrapp = 20000;
        }
        if (effectifrapp >= 101) {
            txindemChefsalrapp = 30000;
        }

        indemchefsalprat = txindemChefsalprat * eltpratique1ind.getNbchefsalprat();
        indemchefsalrapp = txindemChefsalrapp * eltpratique1ind.getNbchefsalrapp();
        if (nbchefsalprat != 0) {
            supplementprat = effectif * eltpratique1ind.getNbepreuve() * 25;
        }
        if (nbchefsalrapp != 0) {
            supplementrapp = effectif * 25;//ici nbepreuve=1
        }
        totalEltprat = coutvacprat + coutcopiesprat + indemchefsalprat + supplementprat + vacsurvdessurv;
        totalEltrapp = coutvacrapp + coutcopiesrapp + indemchefsalrapp + supplementrapp;
    }

    private void determinerCoutD1Eltpratique1SerieE(Souscentre souscentre, Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueMap, Eltpratique1ind eltpratique1ind, String niveau) {
        effectif = 0;
        nbcopiesprat = 0;
        totalEltprat = 0;
        coutvacprat = 0;
        coutcopiesprat = 0;
        txindemChefsalprat = 0;
        indemchefsalprat = 0;
        supplementprat = 0;
        for (Statistique stat : souscentreStatistiqueMap.get(souscentre)) {
            if (eltpratique1ind.getOption().getSigle().equals(stat.getOption().getSigle())) {
                effectif = stat.getNombre();
                break;
            }
        }
        if (niveau.equals("BACC")) {
            txcopie = 200;//txcopie étant initialisé à 150
        }

        coutvacprat = txvac * ((2 * eltpratique1ind.getNbsal() + eltpratique1ind.getNbexaminprat()) * eltpratique1ind.getNbvacprat());

        if (!eltpratique1ind.getOption().getSigle().equals("IH")) {
            nbcopiesprat = effectif * eltpratique1ind.getNbepreuve();
            coutcopiesprat = effectif * eltpratique1ind.getNbepreuve() * txcopie;
        }

        int nbchefsalprat = eltpratique1ind.getNbchefsalprat();
        int effectifchefsalprat = 0;
        if (nbchefsalprat != 0) {
            effectifchefsalprat = effectif / nbchefsalprat;
        }

        if (effectifchefsalprat > 0 && effectifchefsalprat <= 25) {
            txindemChefsalprat = 10000;
        }
        if (effectifchefsalprat >= 26 && effectifchefsalprat <= 50) {
            txindemChefsalprat = 15000;
        }
        if (effectifchefsalprat >= 51 && effectifchefsalprat <= 100) {
            txindemChefsalprat = 20000;
        }
        if (effectifchefsalprat >= 101) {
            txindemChefsalprat = 30000;
        }

        indemchefsalprat = txindemChefsalprat * eltpratique1ind.getNbchefsalprat();
        if (nbchefsalprat != 0) {
            supplementprat = effectif * eltpratique1ind.getNbepreuve() * 25;
        }

        totalEltprat = coutvacprat + coutcopiesprat + indemchefsalprat + supplementprat;
    }

    private void determinerCoutInfo(int nbcand, Eltpratiquinfo eltpratiquinfo) {
        totalpratinfo = 0;
        totalcorinfo = 0;
        coutvacpratinfo = 0;
        coutvaccorinfo = 0;
        coutcopiescorinfo = 0;
        txindemChefsalinfo = 0;
        indemcorinfo = 0;
        indempratinfo = 0;
        supplementcorinfo = 0;
        nbsurvdessurv = 0;
        vacsurvdessurv = 0;

        coutvaccorinfo = eltpratiquinfo.getNbexamin() * eltpratiquinfo.getNbvaccor() * txvac;
        coutvacpratinfo = 2 * eltpratiquinfo.getNbsal() * txvac;
        coutcopiescorinfo = nbcand * txcopie;

        if (nbcand > 0 && nbcand <= 25) {
            txindemChefsalinfo = 10000;
        }
        if (nbcand >= 26 && nbcand <= 50) {
            txindemChefsalinfo = 15000;
        }
        if (nbcand >= 51 && nbcand <= 100) {
            txindemChefsalinfo = 20000;
        }
        if (nbcand >= 101) {
            txindemChefsalinfo = 30000;
        }

        //surveillants des surveillants et vacation
        nbsurvdessurv = calculNombreSurvDesSurv(eltpratiquinfo.getNbsal());
        vacsurvdessurv = nbsurvdessurv * txvac*eltpratiquinfo.getNbvaccor();

        indemcorinfo = eltpratiquinfo.getNbchefsalcor() * txindemChefsalinfo;
        indempratinfo = eltpratiquinfo.getNbchefsalprat() * txvac;
        supplementcorinfo = nbcand * 25;

        totalpratinfo = coutvacpratinfo + indempratinfo + vacsurvdessurv;
        totalcorinfo = coutvaccorinfo + coutcopiescorinfo + indemcorinfo + supplementcorinfo;
    }

    /*
    private void determinerCoutInfoSerieE(int nbcand, Eltpratiquinfo eltpratiquinfo) {
        totalpratinfo = 0;
        //totalcorinfo = 0;
        coutvacpratinfo = 0;
        //coutvaccorinfo = 0;
        coutcopiescorinfo = 0;
        txindemChefsalinfo = 0;
        //indemcorinfo = 0;
        indempratinfo = 0;
        supplementcorinfo = 0;

        //coutvaccorinfo = eltpratiquinfo.getNbexamin() * eltpratiquinfo.getNbvaccor() * txvac;
        coutvacpratinfo = (2 * eltpratiquinfo.getNbsal() + eltpratiquinfo.getNbexamin()) * eltpratiquinfo.getNbvaccor() * txvac;
        coutcopiescorinfo = nbcand * txcopie;

        if (nbcand > 0 && nbcand <= 25) {
            txindemChefsalinfo = 10000;
        }
        if (nbcand >= 26 && nbcand <= 50) {
            txindemChefsalinfo = 15000;
        }
        if (nbcand >= 51 && nbcand <= 100) {
            txindemChefsalinfo = 20000;
        }
        if (nbcand >= 101) {
            txindemChefsalinfo = 30000;
        }

        //indemcorinfo = eltpratiquinfo.getNbchefsalcor() * txindemChefsalinfo;
        indempratinfo = eltpratiquinfo.getNbchefsalprat() * txindemChefsalinfo;
        supplementcorinfo = nbcand * 25;

        totalpratinfo = coutvacpratinfo + indempratinfo + coutcopiescorinfo + supplementcorinfo;
    }
    */

    private void remplirDepartementCombobox() {
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        departements = metier.findAllDepartementsD1Region(nomRegionSelected);
        //on remplit la combobox des départements
        departementsCombo = new String[departements.size() + 1];
        departementsCombo[0] = "---";
        int i = 1;
        for (Departement departement : departements) {
            departementsCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartement.setModel(new DefaultComboBoxModel(departementsCombo));
    }

    private void remplirArrondissementCombobox() {
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        arrondissements = metier.findAllArrondissementsD1Departement(nomDepartementSelected);
        //on remplit la combobox des arrondissements
        arrondissementsCombo = new String[arrondissements.size() + 1];
        arrondissementsCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissements) {
            arrondissementsCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissement.setModel(new DefaultComboBoxModel(arrondissementsCombo));
    }

    private void remplirSouscentreCombobox() {
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        souscentres = metier.findAllSouscentresD1Arrondissement(nomArrondissementSelected);
        //on remplit la combobox des sous-centres de pratique
        souscentresCombo = new String[souscentres.size() + 1];
        souscentresCombo[0] = "---";
        int i = 1;
        for (Souscentre souscentre : souscentres) {
            souscentresCombo[i++] = souscentre.getNomsouscent();
        }
        jComboBoxSouscentre.setModel(new DefaultComboBoxModel(souscentresCombo));
    }

    private void validerNbsalinfo(String nbreString) {
        try {
            nbsalinfoSaisi = Integer.parseInt(nbreString);
            continuerNbsalinfo = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de salles doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbsalinfo = false;
        }
    }

    private void validerNbchefsalcorinfo(String nbreString) {
        try {
            nbchefsalcorinfoSaisi = Integer.parseInt(nbreString);
            continuerNbchefsalcorinfo = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de chefs de salle de correction doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbchefsalcorinfo = false;
        }
    }

    private void validerNbchefsalpratinfo(String nbreString) {
        try {
            nbchefsalpratinfoSaisi = Integer.parseInt(nbreString);
            continuerNbchefsalpratinfo = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de chefs de salle de pratique doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbchefsalpratinfo = false;
        }
    }

    private void validerNbvaccorinfo(String nbreString) {
        try {
            nbvaccorinfoSaisi = Integer.parseInt(nbreString);
            continuerNbvaccorinfo = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de vacations de correction doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbvaccorinfo = false;
        }
    }

    private void validerNbexamininfo(String nbreString) {
        try {
            nbexamininfoSaisi = Integer.parseInt(nbreString);
            continuerNbexamininfo = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre d'examinateurs doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbexamininfo = false;
        }
    }

    private void validerNbsalspec(String nbreString) {
        try {
            nbsalspecSaisi = Integer.parseInt(nbreString);
            continuerNbsalspec = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de salles doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbsalspec = false;
        }
    }

    private void validerNbepreuvespec(String nbreString) {
        try {
            nbepreuvespecSaisi = Integer.parseInt(nbreString);
            continuerNbepreuvespec = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre d'épreuves doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbepreuvespec = false;
        }
    }

    private void validerNbvacpratspec(String nbreString) {
        try {
            nbvacpratspecSaisi = Integer.parseInt(nbreString);
            continuerNbvacpratspec = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de vacations de pratique doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbvacpratspec = false;
        }
    }

    private void validerNbchefsalpratspec(String nbreString) {
        try {
            nbchefsalpratspecSaisi = Integer.parseInt(nbreString);
            continuerNbchefsalpratspec = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de chefs de salle de pratique doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbchefsalpratspec = false;
        }
    }

    private void validerNbchefsalrapp(String nbreString) {
        try {
            nbchefsalrappSaisi = Integer.parseInt(nbreString);
            continuerNbchefsalrapp = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de chefs de salle de rapport doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbchefsalrapp = false;
        }
    }

    private void validerNbvacrapp(String nbreString) {
        try {
            nbvacrappSaisi = Integer.parseInt(nbreString);
            continuerNbvacrapp = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de vacations de rapport doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbvacrapp = false;
        }
    }

    private void validerNbexaminpratspec(String nbreString) {
        try {
            nbexaminpratspecSaisi = Integer.parseInt(nbreString);
            continuerNbexaminpratspec = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre d'examinateurs de pratique doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbexaminpratspec = false;
        }
    }

    private void validerNbexaminrapp(String nbreString) {
        try {
            nbexaminrappSaisi = Integer.parseInt(nbreString);
            continuerNbexaminrapp = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre d'examinateurs de rapport doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbexaminrapp = false;
        }
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea.setText(examensSelectedEnchaine);
            jTextArea.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    private void remplirSpecialiteCombobox() {
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        if (!anneeString.equals("---") && !nomSouscentreSelected.equals("---") && !niveauSelected.equals("---") && !typeSelected.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            specialites = metier.findAllSpecialisationsD1SouscentrePour1SessionD1NiveauEtType(anneeSelected, nomSouscentreSelected, niveauSelected, typeSelected);//ici il n'y a pas de vrai groupe d'examens
            if (specialites.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. ce sous-centre de pratique n'a aucune spécialité pour la session, niveau et type d'examen choisis !");
            } else {
                for (int i = 0; i < specialites.size() - 2; i++) {//élimination des doublons
                    for (int j = i; j < specialites.size() - 1; j++) {
                        if (specialites.get(j).getOption().getSigle().equals(specialites.get(i).getOption().getSigle())) {
                            //specialites.remove(j);
                        }
                    }
                }
                specialitesCombo = new String[specialites.size() + 1];
                specialitesCombo[0] = "---";
                int i = 1;
                for (Specialisation spec : specialites) {
                    if (!typeSelected.equals("GEN")) {
                        specialitesCombo[i++] = spec.getOption().getSigle();
                    }
                    if (typeSelected.equals("GEN") && spec.getOption().getSigle().equals("E")) {
                        specialitesCombo[i++] = spec.getOption().getSigle();
                    }
                }
                jComboBoxSpecialite.setModel(new DefaultComboBoxModel(specialitesCombo));
            }
        }
    }

    private int calculNombreSurvDesSurv(int nbsal) {
        int nbSurvDesSurv = 0;
        if (nbsal >= 4 && nbsal <= 6) {
            nbSurvDesSurv = 1;
        }
        if (nbsal >= 7 && nbsal <= 13) {
            nbSurvDesSurv = 2;
        }
        if (nbsal >= 14 && nbsal <= 20) {
            nbSurvDesSurv = 3;
        }
        if (nbsal >= 21 && nbsal <= 27) {
            nbSurvDesSurv = 4;
        }
        if (nbsal >= 28 && nbsal <= 34) {
            nbSurvDesSurv = 5;
        }
        if (nbsal >= 35 && nbsal <= 41) {
            nbSurvDesSurv = 6;
        }
        if (nbsal >= 42 && nbsal <= 48) {
            nbSurvDesSurv = 7;
        }
        if (nbsal >= 49 && nbsal <= 54) {
            nbSurvDesSurv = 8;
        }
        if (nbsal >= 55) {
            nbSurvDesSurv = 9;
        }
        return nbSurvDesSurv;
    }
}
