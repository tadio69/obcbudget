package couche_ui;

import couche_jpa.Combine;
import couche_jpa.Combinetout;
import couche_jpa.Epreuve;
import couche_jpa.Examen;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Nbepreuveprof;
import couche_jpa.Option;
import couche_jpa.Session;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueBordereauxEtiquettesEnveloppes extends javax.swing.JFrame {

    DefaultTableModel model;

    public VueBordereauxEtiquettesEnveloppes() {
        initComponents();
        model = (DefaultTableModel) jTable1.getModel();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButtonVisualiserDistribution = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanelChoixExamen = new javax.swing.JPanel();
        jLabelNibreparpage = new javax.swing.JLabel();
        jComboBoxNbreparpage = new javax.swing.JComboBox<>();
        jButtonVisualiserEtiquettes = new javax.swing.JButton();
        jPanelChoixEpreuveOptions = new javax.swing.JPanel();
        jLabelOption = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListOption = new javax.swing.JList<>();
        jLabelCaractere = new javax.swing.JLabel();
        jComboBoxCaractere = new javax.swing.JComboBox<>();
        jLabelEpreuve = new javax.swing.JLabel();
        jComboBoxEpreuve = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixEpreuveOptions = new javax.swing.JButton();
        jRadioButtonToutesAvecexclusion = new javax.swing.JRadioButton();
        jLabelNbrepartitions = new javax.swing.JLabel();
        jTextFieldNbrepartition = new javax.swing.JTextField();
        jRadioButtonToutesSansexclusion = new javax.swing.JRadioButton();
        jRadioButtonCombinaisons = new javax.swing.JRadioButton();
        jPanelChoixExamen2 = new javax.swing.JPanel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixExamen = new javax.swing.JButton();
        jLabelNiveau = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelExamen = new javax.swing.JLabel();
        jLabelNumpratique = new javax.swing.JLabel();
        jComboBoxNumpratique = new javax.swing.JComboBox<>();
        jPanelEnveloppes = new javax.swing.JPanel();
        jLabelOperateurs = new javax.swing.JLabel();
        jButtonVisualiserEtiquettes1 = new javax.swing.JButton();
        jTextFieldNumOperateur = new javax.swing.JTextField();
        jButtonVisualiserDistribution1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPanelChoixBoutonsCombinaison = new javax.swing.JPanel();
        jButtonCreer = new javax.swing.JButton();
        jButtonRechercher = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jButtonVisualiserCombinaisons = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETIQUETTES, ENVELOPPES, BORDEREAUX ET DISTRIBUTION");

        jButtonVisualiserDistribution.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserDistribution.setText("Visualiser Distribution");
        jButtonVisualiserDistribution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserDistributionActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Session", "Niveau", "Type", "examen(s)", "Pratique n°", "Epreuve", "Caractère", "Nbre part.", "Séries/spécialités", "Exclue?"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(true);
        jTable1.setShowVerticalLines(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanelChoixExamen.setBackground(new java.awt.Color(255, 204, 0));
        jPanelChoixExamen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Etiquettes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelNibreparpage.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNibreparpage.setText("Nombre par page :");

        jComboBoxNbreparpage.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonVisualiserEtiquettes.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserEtiquettes.setText("Visualiser");
        jButtonVisualiserEtiquettes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserEtiquettesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixExamenLayout = new javax.swing.GroupLayout(jPanelChoixExamen);
        jPanelChoixExamen.setLayout(jPanelChoixExamenLayout);
        jPanelChoixExamenLayout.setHorizontalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelNibreparpage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxNbreparpage, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(jButtonVisualiserEtiquettes)
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanelChoixExamenLayout.setVerticalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNibreparpage, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNbreparpage, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVisualiserEtiquettes, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanelChoixEpreuveOptions.setBackground(new java.awt.Color(102, 255, 102));
        jPanelChoixEpreuveOptions.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choix épreuve et liste des séries/spécialités", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelOption.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelOption.setText("Série/Spécialité :");

        jListOption.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jScrollPane3.setViewportView(jListOption);

        jLabelCaractere.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelCaractere.setText("Caractère :");

        jComboBoxCaractere.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxCaractere.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCaractereActionPerformed(evt);
            }
        });

        jLabelEpreuve.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelEpreuve.setText("Epreuve :");

        jComboBoxEpreuve.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxEpreuve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEpreuveActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixEpreuveOptions.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixEpreuveOptions.setText("Annuler");
        jButtonAnnulerChoixEpreuveOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixEpreuveOptionsActionPerformed(evt);
            }
        });

        jRadioButtonToutesAvecexclusion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jRadioButtonToutesAvecexclusion.setText("Toutes séries/spécialités sauf");
        jRadioButtonToutesAvecexclusion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonToutesAvecexclusionActionPerformed(evt);
            }
        });

        jLabelNbrepartitions.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbrepartitions.setText("Nombre partitions de l'épreuve :");

        jTextFieldNbrepartition.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldNbrepartition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNbrepartitionActionPerformed(evt);
            }
        });

        jRadioButtonToutesSansexclusion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jRadioButtonToutesSansexclusion.setText("Toutes séries/spécialités");
        jRadioButtonToutesSansexclusion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonToutesSansexclusionActionPerformed(evt);
            }
        });

        jRadioButtonCombinaisons.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jRadioButtonCombinaisons.setText("Séries/spécialités combinées");
        jRadioButtonCombinaisons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonCombinaisonsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixEpreuveOptionsLayout = new javax.swing.GroupLayout(jPanelChoixEpreuveOptions);
        jPanelChoixEpreuveOptions.setLayout(jPanelChoixEpreuveOptionsLayout);
        jPanelChoixEpreuveOptionsLayout.setHorizontalGroup(
            jPanelChoixEpreuveOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixEpreuveOptionsLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanelChoixEpreuveOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixEpreuveOptionsLayout.createSequentialGroup()
                        .addGroup(jPanelChoixEpreuveOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonCombinaisons)
                            .addGroup(jPanelChoixEpreuveOptionsLayout.createSequentialGroup()
                                .addGroup(jPanelChoixEpreuveOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButtonToutesSansexclusion)
                                    .addComponent(jRadioButtonToutesAvecexclusion))
                                .addGap(33, 33, 33)
                                .addComponent(jLabelOption, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanelChoixEpreuveOptionsLayout.createSequentialGroup()
                        .addGroup(jPanelChoixEpreuveOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelNbrepartitions)
                            .addComponent(jLabelEpreuve)
                            .addComponent(jLabelCaractere))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelChoixEpreuveOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelChoixEpreuveOptionsLayout.createSequentialGroup()
                                .addGroup(jPanelChoixEpreuveOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBoxCaractere, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxEpreuve, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanelChoixEpreuveOptionsLayout.createSequentialGroup()
                                .addComponent(jTextFieldNbrepartition, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonAnnulerChoixEpreuveOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(118, 118, 118))))))
        );
        jPanelChoixEpreuveOptionsLayout.setVerticalGroup(
            jPanelChoixEpreuveOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixEpreuveOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelChoixEpreuveOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCaractere, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxCaractere, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixEpreuveOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxEpreuve, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelEpreuve, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixEpreuveOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNbrepartitions, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNbrepartition, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixEpreuveOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixEpreuveOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelChoixEpreuveOptionsLayout.createSequentialGroup()
                        .addGroup(jPanelChoixEpreuveOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonToutesSansexclusion, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelOption))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButtonToutesAvecexclusion, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButtonCombinaisons, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanelChoixExamen2.setBackground(new java.awt.Color(0, 255, 255));
        jPanelChoixExamen2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un groupe d'examens et une session", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixExamen.setText("Annuler");
        jButtonAnnulerChoixExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixExamenActionPerformed(evt);
            }
        });

        jLabelNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveau.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane4.setViewportView(jTextArea1);

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        jLabelNumpratique.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNumpratique.setText("Pratique n° :");

        jComboBoxNumpratique.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxNumpratique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNumpratiqueActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixExamen2Layout = new javax.swing.GroupLayout(jPanelChoixExamen2);
        jPanelChoixExamen2.setLayout(jPanelChoixExamen2Layout);
        jPanelChoixExamen2Layout.setHorizontalGroup(
            jPanelChoixExamen2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamen2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelChoixExamen2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixExamen2Layout.createSequentialGroup()
                        .addGroup(jPanelChoixExamen2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelExamen)
                            .addComponent(jLabelNiveau))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelChoixExamen2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanelChoixExamen2Layout.createSequentialGroup()
                                .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(60, 60, 60)
                                .addComponent(jLabelType)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelChoixExamen2Layout.createSequentialGroup()
                        .addComponent(jLabelSession)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelNumpratique)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxNumpratique, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixExamen2Layout.setVerticalGroup(
            jPanelChoixExamen2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamen2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanelChoixExamen2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixExamen2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixExamen2Layout.createSequentialGroup()
                        .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane4))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixExamen2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixExamen2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelNumpratique, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxNumpratique, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelChoixExamen2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );

        jPanelEnveloppes.setBackground(new java.awt.Color(255, 153, 153));
        jPanelEnveloppes.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enveloppes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelOperateurs.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelOperateurs.setText("Numéro opérateur :");

        jButtonVisualiserEtiquettes1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserEtiquettes1.setText("Visualiser");
        jButtonVisualiserEtiquettes1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserEtiquettes1ActionPerformed(evt);
            }
        });

        jTextFieldNumOperateur.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldNumOperateur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNumOperateurActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelEnveloppesLayout = new javax.swing.GroupLayout(jPanelEnveloppes);
        jPanelEnveloppes.setLayout(jPanelEnveloppesLayout);
        jPanelEnveloppesLayout.setHorizontalGroup(
            jPanelEnveloppesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEnveloppesLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabelOperateurs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldNumOperateur, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(jButtonVisualiserEtiquettes1)
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanelEnveloppesLayout.setVerticalGroup(
            jPanelEnveloppesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEnveloppesLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanelEnveloppesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelOperateurs, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVisualiserEtiquettes1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNumOperateur, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jButtonVisualiserDistribution1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserDistribution1.setText("Visualiser Bordereaux");
        jButtonVisualiserDistribution1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserDistribution1ActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jPanelChoixBoutonsCombinaison.setBackground(new java.awt.Color(204, 204, 0));
        jPanelChoixBoutonsCombinaison.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gestion des sauvegardes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jButtonCreer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreer.setText("Créer");
        jButtonCreer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerActionPerformed(evt);
            }
        });

        jButtonRechercher.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonRechercher.setText("Rechercher");
        jButtonRechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRechercherActionPerformed(evt);
            }
        });

        jButtonSupprimer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jButtonVisualiserCombinaisons.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserCombinaisons.setText("Visualiser sauvegardes");
        jButtonVisualiserCombinaisons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserCombinaisonsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixBoutonsCombinaisonLayout = new javax.swing.GroupLayout(jPanelChoixBoutonsCombinaison);
        jPanelChoixBoutonsCombinaison.setLayout(jPanelChoixBoutonsCombinaisonLayout);
        jPanelChoixBoutonsCombinaisonLayout.setHorizontalGroup(
            jPanelChoixBoutonsCombinaisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixBoutonsCombinaisonLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jButtonCreer)
                .addGap(18, 18, 18)
                .addComponent(jButtonRechercher)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimer)
                .addGap(18, 18, 18)
                .addComponent(jButtonFermer)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiserCombinaisons)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanelChoixBoutonsCombinaisonLayout.setVerticalGroup(
            jPanelChoixBoutonsCombinaisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixBoutonsCombinaisonLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanelChoixBoutonsCombinaisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixBoutonsCombinaisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonVisualiserCombinaisons, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonSupprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelChoixBoutonsCombinaisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonCreer, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonRechercher, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(203, 203, 203)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanelChoixExamen2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanelChoixEpreuveOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonVisualiserDistribution)
                                    .addComponent(jButtonVisualiserDistribution1)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jPanelChoixBoutonsCombinaison, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanelEnveloppes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator1)
                    .addComponent(jPanelChoixEpreuveOptions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addComponent(jButtonVisualiserDistribution1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(jButtonVisualiserDistribution, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanelChoixExamen2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelChoixBoutonsCombinaison, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelEnveloppes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldNumOperateurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNumOperateurActionPerformed
        //
    }//GEN-LAST:event_jTextFieldNumOperateurActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jButtonVisualiserDistributionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserDistributionActionPerformed
        /*
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || numpratSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session et le numéro de pratique !");
        } else {
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            int numprat = Integer.parseInt(numpratSelected);
            anneeSelected = Integer.parseInt(anneeString);
            lesNbcartons = metier.findAllNbcartonsD1GroupedexamensDans1SessionD1Numprat(anneeSelected, niveauSelected, typeSelected, numprat);
            if (!lesNbcartons.isEmpty()) {
                try {
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    for (Region region : regions) {
                        for (Nbcartons nbcart : lesNbcartons) {
                            if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                Map<String, Object> row = new HashMap<>();
                                row.put("examen", groupedexamensEnstring);
                                row.put("session", nbcart.getSession().getAnnee());
                                row.put("region", region.getNomreg());
                                row.put("departement", nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getNomdepart());
                                row.put("arrondissement", nbcart.getSouscentre().getEtablissement().getArrondissement().getNomarr());
                                row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                row.put("nombre", nbcart.getNbcart());
                                datasource.add(row);
                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\nbcartonsReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Aucun nombre de cartons trouvé dans la base des données !");
            }
        }
         */
    }//GEN-LAST:event_jButtonVisualiserDistributionActionPerformed

    private void jButtonCreerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerActionPerformed
        infoSaisies();
        if (jRadioButtonToutesAvecexclusion.isSelected() || jRadioButtonCombinaisons.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || titreEpreuveSelected.equals("---") || listeOptionsSelected.isEmpty() || numpratSelected.equals("---") || nbpartString.equals("")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un numéro de pratique , un nombre de partitions, une épreuve et des séries/spécialités !");
            } else {
                validerNbpart(nbpartString);
                if (!continuerNbpart || nbpartSaisi == 0) {
                    JOptionPane.showMessageDialog(this, "Recommencez svp. Le nombre de partitions fourni est incorrect !");
                } else {
                    model.setRowCount(0);//vide la jTable
                    Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                    int numprat = Integer.parseInt(numpratSelected);
                    anneeSelected = Integer.parseInt(anneeString);
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    for (Epreuve epreuve : epreuves) {
                        if (epreuve.getTitre().equals(titreEpreuveSelected)) {
                            epreuveSelected = epreuve;
                            break;
                        }
                    }

                    for (int i = 0; i < listeOptionsSelected.size(); i++) {
                        for (Option o : options) {
                            if (o.getSigle().equals(listeOptionsSelected.get(i))) {
                                optionsSelected.add(o);
                                break;
                            }
                        }
                    }

                    boolean exclu = false;
                    if (jRadioButtonToutesAvecexclusion.isSelected()) {
                        exclu = true;
                    }
                    else exclu = false;

                    try {
                        for (Option o : optionsSelected) {
                            metier.creerCombine(new Combine(groupe, epreuveSelected, sessionSelected, o, numprat, nbpartSaisi, exclu));
                        }
                        JOptionPane.showMessageDialog(this, "Sauvegarde effectuée avec succès !");
                        combines = metier.findAllCombinesD1EpreuveD1GroupedexamensDans1SessionD1Numprat(titreEpreuveSelected, anneeSelected, niveauSelected, typeSelected, numprat);

                        for (Combine comb : combines) {
                            model.insertRow(model.getRowCount(), new Object[]{comb.getIdcomb(), comb.getSession().getAnnee(), comb.getGroupe().getNiveau(), comb.getGroupe().getType(), groupedexamensEnstring, comb.getNumprat(), comb.getEpreuve().getTitre(), comb.getEpreuve().getCaractere(), comb.getNbpart(), comb.getOption().getSigle(), exclu});
                        }
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible d'effectuer la sauvegarde souhaitée \n raison:" + ex.getMessage());
                    }
                    listeOptionsSelected.clear();
                    optionsSelected.clear();
                    jTextFieldNbrepartition.setText("1");
                }
            }
        }

        if (jRadioButtonToutesSansexclusion.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || titreEpreuveSelected.equals("---") || numpratSelected.equals("---") || nbpartString.equals("")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un numéro de pratique, un nombre de partitions  et une épreuve !");
            } else {
                validerNbpart(nbpartString);
                if (!continuerNbpart || nbpartSaisi == 0) {
                    JOptionPane.showMessageDialog(this, "Recommencez svp. Le nombre de partitions fourni est incorrect !");
                } else {
                    model.setRowCount(0);//vide la jTable
                    Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                    int numprat = Integer.parseInt(numpratSelected);
                    anneeSelected = Integer.parseInt(anneeString);
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    for (Epreuve epreuve : epreuves) {
                        if (epreuve.getTitre().equals(titreEpreuveSelected)) {
                            epreuveSelected = epreuve;
                            break;
                        }
                    }

                    try {

                        metier.creerCombinetout(new Combinetout(groupe, sessionSelected, epreuveSelected, numprat, nbpartSaisi));

                        JOptionPane.showMessageDialog(this, "Sauvegarde effectuée avec succès !");
                        combinetout = metier.findCombinetoutD1EpreuveD1GroupedexamensDans1SessionD1Numprat(titreEpreuveSelected, anneeSelected, niveauSelected, typeSelected, numprat);

                        String optionsPourAffichage = "Toutes";

                        model.insertRow(model.getRowCount(), new Object[]{combinetout.getIdcombto(), combinetout.getSession().getAnnee(), combinetout.getGroupe().getNiveau(), combinetout.getGroupe().getType(), groupedexamensEnstring, combinetout.getNumprat(), combinetout.getEpreuve().getTitre(), combinetout.getEpreuve().getCaractere(), combinetout.getNbpart(), optionsPourAffichage, false});

                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible d'effectuer la sauvegarde souhaitée \n raison:" + ex.getMessage());
                    }
                    listeOptionsSelected.clear();
                    optionsSelected.clear();
                    jTextFieldNbrepartition.setText("1");
                }
            }
        }
    }//GEN-LAST:event_jButtonCreerActionPerformed

    private void jButtonRechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRechercherActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        if (jRadioButtonToutesSansexclusion.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || titreEpreuveSelected.equals("---") || numpratSelected.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un numéro de pratique et une épreuve !");
            } else {
                try {
                    int numprat = Integer.parseInt(numpratSelected);
                    anneeSelected = Integer.parseInt(anneeString);
                    combinetout = metier.findCombinetoutD1EpreuveD1GroupedexamensDans1SessionD1Numprat(titreEpreuveSelected, anneeSelected, niveauSelected, typeSelected, numprat);
                    String optionsPourAffichage = "Toutes";
                    model.insertRow(model.getRowCount(), new Object[]{combinetout.getIdcombto(), combinetout.getSession().getAnnee(), combinetout.getGroupe().getNiveau(), combinetout.getGroupe().getType(), groupedexamensEnstring, combinetout.getNumprat(), combinetout.getEpreuve().getTitre(), combinetout.getEpreuve().getCaractere(), combinetout.getNbpart(), optionsPourAffichage, false});
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "La sauvegarde recherchée n'existe sans doute pas ! ");
                }
            }
        }

        if (jRadioButtonToutesAvecexclusion.isSelected() || jRadioButtonCombinaisons.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || titreEpreuveSelected.equals("---") || numpratSelected.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un numéro de pratique et une épreuve !");
            } else {
                try {
                    int numprat = Integer.parseInt(numpratSelected);
                    anneeSelected = Integer.parseInt(anneeString);
                    combines = metier.findAllCombinesD1EpreuveD1GroupedexamensDans1SessionD1Numprat(titreEpreuveSelected, anneeSelected, niveauSelected, typeSelected, numprat);
                    for (Combine comb : combines) {
                        model.insertRow(model.getRowCount(), new Object[]{comb.getIdcomb(), comb.getSession().getAnnee(), comb.getGroupe().getNiveau(), comb.getGroupe().getType(), groupedexamensEnstring, comb.getNumprat(), comb.getEpreuve().getTitre(), comb.getEpreuve().getCaractere(), comb.getNbpart(), comb.getOption().getSigle(), comb.isExclus()});
                    }
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "La sauvegarde recherchée n'existe sans doute pas ! ");
                }
            }
        }
        jTextFieldNbrepartition.setText("1");
    }//GEN-LAST:event_jButtonRechercherActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        infoSaisies();
        if (jRadioButtonToutesSansexclusion.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || titreEpreuveSelected.equals("---") || numpratSelected.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un numéro de pratique, un nombre de partitions  et une épreuve !");
            } else {
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer cette sauvegarde?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    anneeSelected = Integer.parseInt(anneeString);
                    int numprat = Integer.parseInt(numpratSelected);
                    try {
                        combinetout = metier.findCombinetoutD1EpreuveD1GroupedexamensDans1SessionD1Numprat(titreEpreuveSelected, anneeSelected, niveauSelected, typeSelected, numprat);
                        metier.supprimerCombinetout(combinetout);
                        JOptionPane.showMessageDialog(this, "Sauvegarde supprimée avec succès !");
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de supprimer la sauvegarde souhaitée \n raison:" + ex.getMessage());
                    }
                }
            }
        }

        if (jRadioButtonToutesAvecexclusion.isSelected() || jRadioButtonCombinaisons.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || titreEpreuveSelected.equals("---") || numpratSelected.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un numéro de pratique , un nombre de partitions, une épreuve et des séries/spécialités !");
            } else {
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer cette sauvegarde?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    anneeSelected = Integer.parseInt(anneeString);
                    int numprat = Integer.parseInt(numpratSelected);
                    try {
                        combines = metier.findAllCombinesD1EpreuveD1GroupedexamensDans1SessionD1Numprat(titreEpreuveSelected, anneeSelected, niveauSelected, typeSelected, numprat);
                        for (Combine combine : combines) {
                            metier.supprimerCombine(combine);
                        }
                        JOptionPane.showMessageDialog(this, "Sauvegarde supprimée avec succès !");
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de supprimer la sauvegarde souhaitée \n raison:" + ex.getMessage());
                    }
                }
            }
        }
        jTextFieldNbrepartition.setText("1");
        model.setRowCount(0);//vide la jTable
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        //
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButtonVisualiserEtiquettesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserEtiquettesActionPerformed
        infoSaisies();
        /*
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || numpratSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session et le numéro de pratique !");
        } else {
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            int numprat = Integer.parseInt(numpratSelected);
            anneeSelected = Integer.parseInt(anneeString);
            lesNbcartons = metier.findAllNbcartonsD1GroupedexamensDans1SessionD1Numprat(anneeSelected, niveauSelected, typeSelected, numprat);
            if (!lesNbcartons.isEmpty()) {
                if (niveauSelected.equals("BACC") && typeSelected.equals("GEN")) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Nbcartons nbcart : lesNbcartons) {
                                if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    for (int i = 0; i < nbcart.getNbcart(); i++) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", nbcart.getSession().getAnnee());
                                        row.put("region", "AR/" + region.getNomreg());
                                        row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                        row.put("numcolis", (i + 1) + "/" + nbcart.getNbcart());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etiquettesBACCESGReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
                if (niveauSelected.equals("PROB") && typeSelected.equals("GEN")) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Nbcartons nbcart : lesNbcartons) {
                                if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    for (int i = 0; i < nbcart.getNbcart(); i++) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", nbcart.getSession().getAnnee());
                                        row.put("region", "AR/" + region.getNomreg());
                                        row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                        row.put("numcolis", (i + 1) + "/" + nbcart.getNbcart());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etiquettesPROBESGReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
                if (niveauSelected.equals("BACC") && typeSelected.equals("STT")) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Nbcartons nbcart : lesNbcartons) {
                                if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    for (int i = 0; i < nbcart.getNbcart(); i++) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", nbcart.getSession().getAnnee());
                                        row.put("region", "AR/" + region.getNomreg());
                                        row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                        row.put("numcolis", (i + 1) + "/" + nbcart.getNbcart());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etiquettesBACCSTTReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
                if (niveauSelected.equals("PROB") && typeSelected.equals("STT")) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Nbcartons nbcart : lesNbcartons) {
                                if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    for (int i = 0; i < nbcart.getNbcart(); i++) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", nbcart.getSession().getAnnee());
                                        row.put("region", "AR/" + region.getNomreg());
                                        row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                        row.put("numcolis", (i + 1) + "/" + nbcart.getNbcart());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etiquettesPROBSTTReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
                if (niveauSelected.equals("BACC") && typeSelected.equals("IND PROF")) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Nbcartons nbcart : lesNbcartons) {
                                if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    for (int i = 0; i < nbcart.getNbcart(); i++) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", nbcart.getSession().getAnnee());
                                        row.put("region", "AR/" + region.getNomreg());
                                        row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                        row.put("numcolis", (i + 1) + "/" + nbcart.getNbcart());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etiquettesBACCINDPROFReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
                if (niveauSelected.equals("BACC") && typeSelected.equals("STT PROF")) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Nbcartons nbcart : lesNbcartons) {
                                if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    for (int i = 0; i < nbcart.getNbcart(); i++) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", nbcart.getSession().getAnnee());
                                        row.put("region", "AR/" + region.getNomreg());
                                        row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                        row.put("numcolis", (i + 1) + "/" + nbcart.getNbcart());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etiquettesBACCSTTPROFReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
                if (niveauSelected.equals("PROB") && typeSelected.equals("IND PROF")) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Nbcartons nbcart : lesNbcartons) {
                                if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    for (int i = 0; i < nbcart.getNbcart(); i++) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", nbcart.getSession().getAnnee());
                                        row.put("region", "AR/" + region.getNomreg());
                                        row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                        row.put("numcolis", (i + 1) + "/" + nbcart.getNbcart());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etiquettesPROBINDPROFReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
                if (niveauSelected.equals("PROB") && typeSelected.equals("STT PROF")) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Nbcartons nbcart : lesNbcartons) {
                                if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    for (int i = 0; i < nbcart.getNbcart(); i++) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", nbcart.getSession().getAnnee());
                                        row.put("region", "AR/" + region.getNomreg());
                                        row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                        row.put("numcolis", (i + 1) + "/" + nbcart.getNbcart());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etiquettesPROBSTTPROFReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
                if (niveauSelected.equals("PROB") && typeSelected.equals("IND") && numpratSelected.equals("1")) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Nbcartons nbcart : lesNbcartons) {
                                if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    for (int i = 0; i < nbcart.getNbcart(); i++) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", nbcart.getSession().getAnnee());
                                        row.put("region", "AR/" + region.getNomreg());
                                        row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                        row.put("numcolis", (i + 1) + "/" + nbcart.getNbcart());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etiquettesPROBIND1Report.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
                if (niveauSelected.equals("PROB") && typeSelected.equals("IND") && numpratSelected.equals("2")) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Nbcartons nbcart : lesNbcartons) {
                                if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    for (int i = 0; i < nbcart.getNbcart(); i++) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", nbcart.getSession().getAnnee());
                                        row.put("region", "AR/" + region.getNomreg());
                                        row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                        row.put("numcolis", (i + 1) + "/" + nbcart.getNbcart());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etiquettesPROBIND2Report.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
                if (niveauSelected.equals("BACC") && typeSelected.equals("IND") && numpratSelected.equals("1")) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Nbcartons nbcart : lesNbcartons) {
                                if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    for (int i = 0; i < nbcart.getNbcart(); i++) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", nbcart.getSession().getAnnee());
                                        row.put("region", "AR/" + region.getNomreg());
                                        row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                        row.put("numcolis", (i + 1) + "/" + nbcart.getNbcart());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etiquettesBACCIND1Report.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
                if (niveauSelected.equals("BACC") && typeSelected.equals("IND") && numpratSelected.equals("2")) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Nbcartons nbcart : lesNbcartons) {
                                if (region.getNomreg().equals(nbcart.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    for (int i = 0; i < nbcart.getNbcart(); i++) {
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", nbcart.getSession().getAnnee());
                                        row.put("region", "AR/" + region.getNomreg());
                                        row.put("souscentre", nbcart.getSouscentre().getNomsouscent());
                                        row.put("numcolis", (i + 1) + "/" + nbcart.getNbcart());
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etiquettesBACCIND2Report.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Aucun nombre de cartons trouvé dans la base des données !");
            }
        }
         */
    }//GEN-LAST:event_jButtonVisualiserEtiquettesActionPerformed

    private void jComboBoxEpreuveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEpreuveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxEpreuveActionPerformed

    private void jComboBoxCaractereActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCaractereActionPerformed
        remplirEpreuveCombobox();
    }//GEN-LAST:event_jComboBoxCaractereActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonAnnulerChoixExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixExamenActionPerformed
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        jComboBoxSession.setSelectedIndex(0);
        jComboBoxNumpratique.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixExamenActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        //jListOption.removeAll();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        if (!niveauSelected.equals("---") && !typeSelected.equals("---")) {
            remplirExamensTextArea();
            remplirOptionJList();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jComboBoxNumpratiqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNumpratiqueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxNumpratiqueActionPerformed

    private void jButtonVisualiserEtiquettes1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserEtiquettes1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonVisualiserEtiquettes1ActionPerformed

    private void jButtonVisualiserDistribution1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserDistribution1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonVisualiserDistribution1ActionPerformed

    private void jButtonVisualiserCombinaisonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserCombinaisonsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonVisualiserCombinaisonsActionPerformed

    private void jButtonAnnulerChoixEpreuveOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixEpreuveOptionsActionPerformed
        jComboBoxCaractere.setSelectedIndex(0);
        jComboBoxEpreuve.setSelectedIndex(0);
        jTextFieldNbrepartition.setText("1");
        buttonGroup1.clearSelection();
        //DefaultListModel listmodel=new DefaultListModel();

        //jListOption.setModel(listmodel);
    }//GEN-LAST:event_jButtonAnnulerChoixEpreuveOptionsActionPerformed

    private void jTextFieldNbrepartitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNbrepartitionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNbrepartitionActionPerformed

    private void jRadioButtonToutesAvecexclusionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonToutesAvecexclusionActionPerformed
        jListOption.setEnabled(true);
    }//GEN-LAST:event_jRadioButtonToutesAvecexclusionActionPerformed

    private void jRadioButtonCombinaisonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonCombinaisonsActionPerformed
        jListOption.setEnabled(true);
    }//GEN-LAST:event_jRadioButtonCombinaisonsActionPerformed

    private void jRadioButtonToutesSansexclusionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonToutesSansexclusionActionPerformed
        jListOption.setEnabled(false);
    }//GEN-LAST:event_jRadioButtonToutesSansexclusionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueBordereauxEtiquettesEnveloppes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueBordereauxEtiquettesEnveloppes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueBordereauxEtiquettesEnveloppes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueBordereauxEtiquettesEnveloppes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueBordereauxEtiquettesEnveloppes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonAnnulerChoixEpreuveOptions;
    private javax.swing.JButton jButtonAnnulerChoixExamen;
    private javax.swing.JButton jButtonCreer;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonRechercher;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JButton jButtonVisualiserCombinaisons;
    private javax.swing.JButton jButtonVisualiserDistribution;
    private javax.swing.JButton jButtonVisualiserDistribution1;
    private javax.swing.JButton jButtonVisualiserEtiquettes;
    private javax.swing.JButton jButtonVisualiserEtiquettes1;
    private javax.swing.JComboBox<String> jComboBoxCaractere;
    private javax.swing.JComboBox<String> jComboBoxEpreuve;
    private javax.swing.JComboBox<String> jComboBoxNbreparpage;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxNumpratique;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelCaractere;
    private javax.swing.JLabel jLabelEpreuve;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelNbrepartitions;
    private javax.swing.JLabel jLabelNibreparpage;
    private javax.swing.JLabel jLabelNiveau;
    private javax.swing.JLabel jLabelNumpratique;
    private javax.swing.JLabel jLabelOperateurs;
    private javax.swing.JLabel jLabelOption;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JList<String> jListOption;
    private javax.swing.JPanel jPanelChoixBoutonsCombinaison;
    private javax.swing.JPanel jPanelChoixEpreuveOptions;
    private javax.swing.JPanel jPanelChoixExamen;
    private javax.swing.JPanel jPanelChoixExamen2;
    private javax.swing.JPanel jPanelEnveloppes;
    private javax.swing.JRadioButton jRadioButtonCombinaisons;
    private javax.swing.JRadioButton jRadioButtonToutesAvecexclusion;
    private javax.swing.JRadioButton jRadioButtonToutesSansexclusion;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldNbrepartition;
    private javax.swing.JTextField jTextFieldNumOperateur;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Examen> examens = null;
    private Examen examenSelected = null;
    private String[] examensList = null;
    private List<Examen> examensSelected = new ArrayList<>();
    private String[] sessionsCombo = null;
    private List<Option> options = null;
    private List<Option> optionsSelected = new ArrayList<Option>();
    private List<String> listeOptionsSelected = null;
    private String[] optionsList = null;
    private ArrayList<Nbepreuveprof> nbepreuveprofsList = new ArrayList<Nbepreuveprof>();
    private int anneeSelected = 0;
    private Session sessionSelected = null;
    boolean continuer = false;
    private String anneeString = "";
    private String[] numpratCombo = null;
    private String numpratSelected = "";
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String[] nbEtiquetCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private String numOperateurString = "";
    private int numOperateurSaisi = 0;
    private boolean continuerNumOperateur = false;
    private String nbpartString = "";
    private int nbpartSaisi = 0;
    private boolean continuerNbpart = false;
    private String nbEtiquetteSelected = "";
    private int nbEtiquette = 0;
    private String titreEpreuveSelected = "";
    private Epreuve epreuveSelected = null;
    private List<Epreuve> epreuves = null;
    private String[] epreuvesCombo = null;
    private List<Combine> combines = null;
    private List<Combinetout> combinetouts = null;
    private Combinetout combinetout = null;
    private Combine combineCliked = null;
    private Combinetout combinetoutCliked = null;
    private int idCombineCliked = 0;
    private int idCombinetoutCliked = 0;
    private String caractereSelected = "";
    private String[] caracteresCombo = null;
    private List<Nbepreuveprof> nbepreuveprofs = null;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        examens = metier.findAllExamens();
        epreuves = metier.findAllEpreuves();
        options = metier.findAllOptions();
        combines = metier.findAllCombines();
        combinetouts = metier.findAllCombinetouts();

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int i = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[i++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "GEN", "IND", "IND PROF", "STT", "STT PROF"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        //on remplit la combobox des numéros de pratique
        numpratCombo = new String[]{"---", "0", "1", "2"};
        jComboBoxNumpratique.setModel(new DefaultComboBoxModel(numpratCombo));

        //on remplit la combobox des nombres d'étiquettes par page
        nbEtiquetCombo = new String[]{"---", "16", "21", "24"};
        jComboBoxNbreparpage.setModel(new DefaultComboBoxModel(nbEtiquetCombo));

        jTextFieldNumOperateur.setText("0");

        jTextFieldNbrepartition.setText("1");

        //on remplit la combobox des niveaux
        caracteresCombo = new String[]{"---", "Facultative", "Contraignante"};
        jComboBoxCaractere.setModel(new DefaultComboBoxModel(caracteresCombo));

        buttonGroup1.add(jRadioButtonCombinaisons);
        buttonGroup1.add(jRadioButtonToutesAvecexclusion);
        buttonGroup1.add(jRadioButtonToutesSansexclusion);
    }

    private void infoSaisies() {
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        numpratSelected = (String) jComboBoxNumpratique.getSelectedItem();
        titreEpreuveSelected = (String) jComboBoxEpreuve.getSelectedItem();
        nbpartString = jTextFieldNbrepartition.getText();
        listeOptionsSelected = jListOption.getSelectedValuesList();
    }

    private void validerNbpart(String nbreString) {
        try {
            nbpartSaisi = Integer.parseInt(nbreString);
            continuerNbpart = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de partitions doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbpart = false;
        }
    }

    private void validerNumOperateur(String nbreString) {
        try {
            numOperateurSaisi = Integer.parseInt(nbreString);
            continuerNumOperateur = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le numéro de l'opérateur doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNumOperateur = false;
        }
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    private void remplirEpreuveCombobox() {
        caractereSelected = (String) jComboBoxCaractere.getSelectedItem();
        epreuves = metier.findAllEpreuvesD1Caractere(caractereSelected);
        //on remplit la combobox des épreuves
        epreuvesCombo = new String[epreuves.size() + 1];
        epreuvesCombo[0] = "---";
        int i = 1;
        for (Epreuve epreuve : epreuves) {
            epreuvesCombo[i++] = epreuve.getTitre();
        }
        jComboBoxEpreuve.setModel(new DefaultComboBoxModel(epreuvesCombo));
    }

    private void remplirOptionJList() {
        examensSelected.clear();
        nbepreuveprofsList.clear();
        optionsList = null;
        groupedexamensEnstring = jTextArea1.getText();
        if (!groupedexamensEnstring.equals("")) {
            String separateur = ", ";
            examensList = groupedexamensEnstring.split(separateur);
            for (int i = 0; i < examensList.length; i++) {
                for (Examen e : examens) {
                    if (e.getSigle().equals(examensList[i])) {
                        examensSelected.add(e);
                        break;
                    }
                }
            }
            for (Examen e : examensSelected) {
                nbepreuveprofs = metier.findAllNbepreuveprofsD1Examen(e.getSigle());
                for (Nbepreuveprof nbepreuveprof : nbepreuveprofs) {
                    nbepreuveprofsList.add(nbepreuveprof);
                }
            }
            //on remplit la jList des options
            optionsList = new String[nbepreuveprofsList.size()];
            int i = 0;
            for (Nbepreuveprof n : nbepreuveprofsList) {
                optionsList[i++] = n.getOption().getSigle();
            }
            jListOption.setListData(optionsList);
            jListOption.setLayoutOrientation(2);//affiche la jlist sur plusieurs colonnes
        }
    }
}
