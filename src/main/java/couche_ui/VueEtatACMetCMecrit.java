package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Activite;
import couche_jpa.Arrondissement;
import couche_jpa.Caisse;
import couche_jpa.Centrebilletage;
import couche_jpa.Departement;
import couche_jpa.Examen;
import couche_jpa.Fonction;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Intervenant;
import couche_jpa.Intervenantsecret;
import couche_jpa.Intervsec;
import couche_jpa.Nature;
import couche_jpa.Naturesecretariat;
import couche_jpa.Personnel;
import couche_jpa.Qualite;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Scentaplus;
import couche_jpa.Secretariat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_jpa.Statistique;
import couche_jpa.Statsecretariat;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueEtatACMetCMecrit extends javax.swing.JFrame {

    public VueEtatACMetCMecrit() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButtonFermer = new javax.swing.JButton();
        jPanelExaminateurs = new javax.swing.JPanel();
        jComboBoxDepartementListe = new javax.swing.JComboBox<>();
        jLabelDepartementListe = new javax.swing.JLabel();
        jLabelResponsable = new javax.swing.JLabel();
        jComboBoxArrondissementListe = new javax.swing.JComboBox<>();
        jComboBoxNomsEtPrenoms = new javax.swing.JComboBox<>();
        jLabelArrondissementListe = new javax.swing.JLabel();
        jComboBoxRegionListe = new javax.swing.JComboBox<>();
        jLabelRegionListe = new javax.swing.JLabel();
        jButtonSupprimerPersonnel = new javax.swing.JButton();
        jButtonAnnulerPersonnel = new javax.swing.JButton();
        jButtonCreerPersonnel = new javax.swing.JButton();
        jButtonListerPersonnels = new javax.swing.JButton();
        jPanelRésident = new javax.swing.JPanel();
        jLabelTypeResidence = new javax.swing.JLabel();
        jComboBoxTypeResidence = new javax.swing.JComboBox<>();
        jButtonImporter = new javax.swing.JButton();
        jPanelChoixExamen = new javax.swing.JPanel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixExamen = new javax.swing.JButton();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelExamen = new javax.swing.JLabel();
        jPanelGestionEtat = new javax.swing.JPanel();
        jButtonCreerEtats = new javax.swing.JButton();
        jButtonMettreAjourEtats = new javax.swing.JButton();
        jButtonVisualiserEtats = new javax.swing.JButton();
        jButtonSupprimerEtats = new javax.swing.JButton();
        jCheckBoxAdditif = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jRadioButtonCM = new javax.swing.JRadioButton();
        jRadioButtonACM = new javax.swing.JRadioButton();
        jButtonAnnulerChoixACMouCM1 = new javax.swing.JButton();
        jPanelChoixSouscentre = new javax.swing.JPanel();
        jComboBoxDepartementSouscentre = new javax.swing.JComboBox<>();
        jLabelDepartementSouscentre = new javax.swing.JLabel();
        jLabelSouscentre = new javax.swing.JLabel();
        jComboBoxArrondissementSouscentre = new javax.swing.JComboBox<>();
        jComboBoxSouscentre = new javax.swing.JComboBox<>();
        jLabelArrondissementSouscentre = new javax.swing.JLabel();
        jComboBoxRegionSouscentre = new javax.swing.JComboBox<>();
        jLabelRegionSouscentre = new javax.swing.JLabel();
        jButtonAnnulerChoixSouscentre = new javax.swing.JButton();
        jLabelExamen1 = new javax.swing.JLabel();
        jComboBoxNumsec = new javax.swing.JComboBox<>();
        jTextFieldEtablissement = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT DES ACM OU DES CM DES SOUS-CENTRES D'ECRIT");

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jPanelExaminateurs.setBackground(new java.awt.Color(255, 204, 0));
        jPanelExaminateurs.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer la liste des ACM ou CM des sous-centres d'écrit", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jComboBoxDepartementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartementListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementListeActionPerformed(evt);
            }
        });

        jLabelDepartementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartementListe.setText("Département :");

        jLabelResponsable.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelResponsable.setText("Noms et prénoms :");

        jComboBoxArrondissementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissementListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementListeActionPerformed(evt);
            }
        });

        jComboBoxNomsEtPrenoms.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxNomsEtPrenoms.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxNomsEtPrenoms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNomsEtPrenomsActionPerformed(evt);
            }
        });

        jLabelArrondissementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissementListe.setText("Arrondissement :");

        jComboBoxRegionListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegionListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionListeActionPerformed(evt);
            }
        });

        jLabelRegionListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegionListe.setText("Région :");

        jButtonSupprimerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerPersonnel.setText("Supprimer");
        jButtonSupprimerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerPersonnelActionPerformed(evt);
            }
        });

        jButtonAnnulerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerPersonnel.setText("Annuler");
        jButtonAnnulerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerPersonnelActionPerformed(evt);
            }
        });

        jButtonCreerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerPersonnel.setText("Créer");
        jButtonCreerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerPersonnelActionPerformed(evt);
            }
        });

        jButtonListerPersonnels.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonListerPersonnels.setText("Lister");
        jButtonListerPersonnels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerPersonnelsActionPerformed(evt);
            }
        });

        jPanelRésident.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Résidence", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 51, 204))); // NOI18N
        jPanelRésident.setEnabled(false);

        jLabelTypeResidence.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelTypeResidence.setText("Type résidence :");

        jComboBoxTypeResidence.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanelRésidentLayout = new javax.swing.GroupLayout(jPanelRésident);
        jPanelRésident.setLayout(jPanelRésidentLayout);
        jPanelRésidentLayout.setHorizontalGroup(
            jPanelRésidentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelRésidentLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelTypeResidence)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxTypeResidence, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelRésidentLayout.setVerticalGroup(
            jPanelRésidentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRésidentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelRésidentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxTypeResidence, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTypeResidence, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jButtonImporter.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonImporter.setText("Importer");
        jButtonImporter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImporterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelExaminateursLayout = new javax.swing.GroupLayout(jPanelExaminateurs);
        jPanelExaminateurs.setLayout(jPanelExaminateursLayout);
        jPanelExaminateursLayout.setHorizontalGroup(
            jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelDepartementListe)
                    .addComponent(jLabelRegionListe))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBoxRegionListe, 0, 238, Short.MAX_VALUE)
                    .addComponent(jComboBoxDepartementListe, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelResponsable)
                    .addComponent(jLabelArrondissementListe))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNomsEtPrenoms, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelRésident, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelExaminateursLayout.createSequentialGroup()
                .addContainerGap(488, Short.MAX_VALUE)
                .addComponent(jButtonCreerPersonnel)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerPersonnel)
                .addGap(18, 18, 18)
                .addComponent(jButtonAnnulerPersonnel)
                .addGap(18, 18, 18)
                .addComponent(jButtonListerPersonnels)
                .addGap(18, 18, 18)
                .addComponent(jButtonImporter)
                .addGap(404, 404, 404))
        );
        jPanelExaminateursLayout.setVerticalGroup(
            jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelExaminateursLayout.createSequentialGroup()
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBoxRegionListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelRegionListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabelDepartementListe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBoxDepartementListe, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)))
                            .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBoxArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelResponsable, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxNomsEtPrenoms, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18))
                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanelRésident, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonAnnulerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonSupprimerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonListerPersonnels, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonImporter, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonCreerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(136, 136, 136))
        );

        jPanelChoixExamen.setBackground(new java.awt.Color(102, 255, 153));
        jPanelChoixExamen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un groupe d'examens et une session", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixExamen.setText("Annuler");
        jButtonAnnulerChoixExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixExamenActionPerformed(evt);
            }
        });

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        javax.swing.GroupLayout jPanelChoixExamenLayout = new javax.swing.GroupLayout(jPanelChoixExamen);
        jPanelChoixExamen.setLayout(jPanelChoixExamenLayout);
        jPanelChoixExamenLayout.setHorizontalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(0, 10, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabelSession)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixExamenLayout.setVerticalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17))
        );

        jPanelGestionEtat.setBackground(new java.awt.Color(0, 255, 255));
        jPanelGestionEtat.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer l'état", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 102, 255))); // NOI18N

        jButtonCreerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEtats.setText("Créer");
        jButtonCreerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEtatsActionPerformed(evt);
            }
        });

        jButtonMettreAjourEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjourEtats.setText("Mettre à jour");
        jButtonMettreAjourEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourEtatsActionPerformed(evt);
            }
        });

        jButtonVisualiserEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserEtats.setText("Visualiser");
        jButtonVisualiserEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserEtatsActionPerformed(evt);
            }
        });

        jButtonSupprimerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEtats.setText("Supprimer");
        jButtonSupprimerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEtatsActionPerformed(evt);
            }
        });

        jCheckBoxAdditif.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jCheckBoxAdditif.setText("Additif");

        javax.swing.GroupLayout jPanelGestionEtatLayout = new javax.swing.GroupLayout(jPanelGestionEtat);
        jPanelGestionEtat.setLayout(jPanelGestionEtatLayout);
        jPanelGestionEtatLayout.setHorizontalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jCheckBoxAdditif)
                .addGap(18, 18, 18)
                .addComponent(jButtonCreerEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonMettreAjourEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiserEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerEtats)
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanelGestionEtatLayout.setVerticalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonMettreAjourEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCreerEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxAdditif))
                    .addComponent(jButtonSupprimerEtats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVisualiserEtats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(0, 255, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ACM ou CM ?", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 102, 255))); // NOI18N

        jRadioButtonCM.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jRadioButtonCM.setText("CM");
        jRadioButtonCM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonCMActionPerformed(evt);
            }
        });

        jRadioButtonACM.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jRadioButtonACM.setText("ACM");
        jRadioButtonACM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonACMActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixACMouCM1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixACMouCM1.setText("Annuler");
        jButtonAnnulerChoixACMouCM1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixACMouCM1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonAnnulerChoixACMouCM1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonACM)
                    .addComponent(jRadioButtonCM))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jRadioButtonACM)
                .addGap(52, 52, 52)
                .addComponent(jRadioButtonCM)
                .addGap(46, 46, 46)
                .addComponent(jButtonAnnulerChoixACMouCM1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelChoixSouscentre.setBackground(new java.awt.Color(204, 255, 0));
        jPanelChoixSouscentre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un sous-centre d'examen", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jComboBoxDepartementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartementSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementSouscentreActionPerformed(evt);
            }
        });

        jLabelDepartementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartementSouscentre.setText("Département :");

        jLabelSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSouscentre.setText("Sous-centre :");

        jComboBoxArrondissementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissementSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementSouscentreActionPerformed(evt);
            }
        });

        jComboBoxSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSouscentre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSouscentreActionPerformed(evt);
            }
        });

        jLabelArrondissementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissementSouscentre.setText("Arrondissement :");

        jComboBoxRegionSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegionSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionSouscentreActionPerformed(evt);
            }
        });

        jLabelRegionSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegionSouscentre.setText("Région :");

        jButtonAnnulerChoixSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixSouscentre.setText("Annuler");
        jButtonAnnulerChoixSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixSouscentreActionPerformed(evt);
            }
        });

        jLabelExamen1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen1.setText("Secrétariat N° :");

        jComboBoxNumsec.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxNumsec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNumsecActionPerformed(evt);
            }
        });

        jTextFieldEtablissement.setEditable(false);
        jTextFieldEtablissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldEtablissement.setEnabled(false);

        javax.swing.GroupLayout jPanelChoixSouscentreLayout = new javax.swing.GroupLayout(jPanelChoixSouscentre);
        jPanelChoixSouscentre.setLayout(jPanelChoixSouscentreLayout);
        jPanelChoixSouscentreLayout.setHorizontalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen1)
                    .addComponent(jLabelDepartementSouscentre)
                    .addComponent(jLabelArrondissementSouscentre)
                    .addComponent(jLabelSouscentre)
                    .addComponent(jLabelRegionSouscentre))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addComponent(jComboBoxNumsec, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldEtablissement))
                    .addComponent(jComboBoxSouscentre, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jComboBoxDepartementSouscentre, javax.swing.GroupLayout.Alignment.LEADING, 0, 351, Short.MAX_VALUE)
                            .addComponent(jComboBoxRegionSouscentre, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxArrondissementSouscentre, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnulerChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32))
        );
        jPanelChoixSouscentreLayout.setVerticalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxRegionSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRegionSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDepartementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxDepartementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelExamen1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNumsec, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldEtablissement, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(204, 204, 204)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(402, 402, 402)
                                .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(57, 57, 57)
                                .addComponent(jButtonFermer)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelExaminateurs, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(53, 53, 53)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelExaminateurs, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVisualiserEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserEtatsActionPerformed
        infoSaisies();
        if (jRadioButtonCM.isSelected()) {
            if (!jCheckBoxAdditif.isSelected()) {
                Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
                List<Souscentre> tousLesScentaplus = new ArrayList<>();//liste de tous les sous-centres à plus organisant les examens sélectionnés
                Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
                List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session 
                List<Souscentre> souscentreAvecCMList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des CM
                Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
                ArrayList<String> typesBruts = new ArrayList<>();
                ArrayList<String> typesAconsiderer = new ArrayList<>();
                ArrayList<String> niveauxAconsiderer = new ArrayList<>();

                List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats 
                Map<Secretariat, Integer> secretariatEffectifMap = new HashMap<>();//contient l'ensemble des secrétariats d'un groupe d'examens avec chacun avec son nombre de candidats
                Map<Secretariat, ArrayList<Character>> activitesSecretariatMap = new HashMap<>();//contient l'ensemble des secretariats chacun avec la liste des iniatiales de ses activités 
                Map<Souscentre, ArrayList<Secretariat>> souscentreSecretariatsMap = new HashMap<>();//contient les sous-centres chacun avec la liste de ses secretariats le cas échéant

                Map<Souscentre, ArrayList<Intervenantsecret>> souscentreIntervenantsecretMap = new HashMap<>();//contient les sous-centres chacun avec la liste de ses Intervenantsecret
                //Map<Secretariat, Intervenantsecret> secretariatIntervenantsecretMap = new HashMap<>();//contient les secrétariats chacun avec son Intervenantsecret
                Map<Souscentre, Intervenant> souscentreIntervenantMap = new HashMap<>();//contient les sous-centres chacun avec son Intervenant
                ArrayList<Souscentre> souscentresIntervenantsList = new ArrayList<>();//liste de tous les sous-centres ayant des intervenants dans le groupedexamensEnstring dans la session considérée
                ArrayList<Souscentre> souscentresIntervenantsecretsList = new ArrayList<>();//liste de tous les sous-centres ayant des intervenantsecrets dans le groupedexamensEnstring dans la session considérée                

                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE CM");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    boolean continuer = false;
                    for (Caisse c : caisses) {
                        if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                            continuer = true;
                            break;
                        }
                    }
                    if (!continuer) {
                        JOptionPane.showMessageDialog(this, "Erreur, les états de prise en charge des CM n'ont pas encore été créés pour ce groupe d'examens !");
                    } else {
                        String separateur = ", ";
                        examensList = groupedexamensEnstring.split(separateur);
                        for (int i = 0; i < examensList.length; i++) {
                            for (Examen e : examens) {
                                if (e.getSigle().equals(examensList[i])) {
                                    examensSelected.add(e);
                                    break;
                                }
                            }
                        }
                        for (Session s : sessions) {
                            if (s.getAnnee() == anneeSelected) {
                                sessionSelected = s;
                                break;
                            }
                        }

                        for (Examen e : examensSelected) {
                            List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                            for (Statistique s : lesStats) {
                                if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                    int nbcand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                                    souscentreEffectifMap.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                } else {
                                    souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                                }
                            }
                            List<Scentaplus> scentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, e.getSigle());
                            for (Scentaplus s : scentaplus) {
                                if (!tousLesScentaplus.contains(s.getSouscentre())) {
                                    tousLesScentaplus.add(s.getSouscentre());
                                }
                            }
                            List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                            for (Nature n : lesNats) {
                                Souscentre unSouscentre = n.getSouscentre();
                                if (!souscentreList.contains(unSouscentre)) {
                                    souscentreList.add(unSouscentre);
                                }
                            }
                            for (int j = 0; j < souscentreList.size(); j++) {
                                ArrayList<Character> phasesList = new ArrayList<>();
                                Souscentre s = souscentreList.get(j);
                                for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                    if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                        if (!phasesList.contains(n.getActivite().getInitiale())) {
                                            phasesList.add(n.getActivite().getInitiale());
                                        }
                                        //pas de break ici car on doit parcourir tous lesNats
                                    }
                                }
                                if (!souscentrePhasesMap.containsKey(s)) {
                                    souscentrePhasesMap.put(s, phasesList);
                                } else {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                    ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                    for (int k = 0; k < phasesList.size(); k++) {
                                        if (!phasesList1.contains(phasesList.get(k))) {
                                            phasesList1.add(phasesList.get(k));
                                        }
                                    }
                                    Collections.sort(phasesList1);
                                    souscentrePhasesMap.put(s, phasesList1);
                                }
                            }
                        }

                        //recherche des types des examens à utiliser
                        for (Examen examen : examensSelected) {
                            if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                                typesBruts.add("ESG");
                            }
                            if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                                typesBruts.add("ESTP");
                            }
                        }
                        if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                            typesAconsiderer.add("ESG");
                            typesAconsiderer.add("TOUT");
                        }
                        if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                            typesAconsiderer.add("ESTP");
                            typesAconsiderer.add("TOUT");
                        }
                        if (typesBruts.size() == 2) {
                            typesAconsiderer.add("ESG");
                            typesAconsiderer.add("ESTP");
                            typesAconsiderer.add("TOUT");
                        }
                        //recherche des niveaux des examens à utiliser
                        if (!niveauSelected.equals("TOUT")) {
                            niveauxAconsiderer.add(niveauSelected);
                            niveauxAconsiderer.add("TOUT");
                        }
                        if (niveauSelected.equals("TOUT")) {
                            niveauxAconsiderer.add("PROB");
                            niveauxAconsiderer.add("BACC");
                            niveauxAconsiderer.add("TOUT");
                        }
                        //recherche des centres de billetage
                        for (String niveau : niveauxAconsiderer) {
                            for (String type : typesAconsiderer) {
                                List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                                for (Centrebilletage centrebilletage : desCentrebilletages) {
                                    ArrayList<Souscentre> souscentresList = new ArrayList<>();
                                    if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                        List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                        for (Secteurcouv sect : secteurs) {
                                            if (!souscentresList.contains(sect.getSouscentre())) {
                                                souscentresList.add(sect.getSouscentre());
                                            }
                                        }
                                        centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                                    }
                                }
                            }
                        }
                        //remplissage souscentreAsecretariatsDemultipliesList
                        secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                        if (!secretariats.isEmpty()) {
                            for (Secretariat sec : secretariats) {
                                if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                                    souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                                }
                            }
                        }

                        //remplissage secretariatEffectifMap     
                        for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                            List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreEtSession(souscentre.getNomsouscent(), anneeSelected);
                            if (!secretariatsList.isEmpty()) {
                                for (Secretariat sec : secretariatsList) {
                                    int stat = 0;
                                    List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                                    for (Statsecretariat statsec : statsecretariatsList) {
                                        if (statsec.getSecretariat().getNumsec() == sec.getNumsec() && statsec.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                            stat += statsec.getNombre();
                                        }
                                    }
                                    secretariatEffectifMap.put(sec, stat);
                                }
                            }
                        }

                        //remplissage activitesSecretariatMap
                        List<Naturesecretariat> lesNatsec = metier.findAllNaturesecretariatsD1Session(anneeSelected);
                        for (Secretariat sec : secretariatEffectifMap.keySet()) {
                            ArrayList<Character> phasesList2 = new ArrayList<>();
                            for (Naturesecretariat natsec : lesNatsec) {
                                if (sec.getNumsec() == natsec.getSecretariat().getNumsec() && sec.getSouscentre().getNomsouscent().equals(natsec.getSecretariat().getSouscentre().getNomsouscent()) && sec.getEtablissement().getAbreviation().equals(natsec.getSecretariat().getEtablissement().getAbreviation())) {
                                    if (!phasesList2.contains(natsec.getActivite().getInitiale())) {
                                        phasesList2.add(natsec.getActivite().getInitiale());
                                    }
                                }
                            }
                            Collections.sort(phasesList2);
                            activitesSecretariatMap.put(sec, phasesList2);
                        }

                        //remplissage de souscentreSecretariatsMap
                        for (Souscentre souscentre : souscentreEffectifMap.keySet()) {
                            ArrayList<Secretariat> secretariatsList = new ArrayList<>();
                            for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                if (sec.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                    if (!secretariatsList.contains(sec)) {
                                        secretariatsList.add(sec);
                                    }
                                }
                            }
                            if (!secretariatsList.isEmpty()) {
                                ordonnerSecretariatsD1souscentre(secretariatsList);
                                souscentreSecretariatsMap.put(souscentre, secretariatsList);
                            }
                        }

                        intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION");
                        desIntervenantsecret = metier.findAllIntervenantsecretD1GroupedexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION");

                        souscentres = metier.findAllSouscentres();
                        for (Souscentre scentre : souscentres) {
                            for (Intervenant interv : intervenants) {
                                if (!souscentresIntervenantsList.contains(scentre) && interv.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                    souscentresIntervenantsList.add(scentre);
                                }
                            }
                            for (Intervenantsecret intersec : desIntervenantsecret) {
                                if (!souscentresIntervenantsecretsList.contains(scentre) && intersec.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                    souscentresIntervenantsecretsList.add(scentre);
                                }
                            }
                        }

                        for (Souscentre scentre : souscentresIntervenantsecretsList) {
                            ArrayList<Intervenantsecret> intervenantsecretsList = new ArrayList<>();
                            for (Intervenantsecret intersec : desIntervenantsecret) {
                                if (intersec.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                    intervenantsecretsList.add(intersec);
                                }
                            }

                            souscentreIntervenantsecretMap.put(scentre, intervenantsecretsList);
                        }
                        for (Souscentre scentre : souscentresIntervenantsList) {
                            for (Intervenant inter : intervenants) {
                                if (inter.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                    souscentreIntervenantMap.put(scentre, inter);
                                    break;
                                }
                            }
                        }

                        //on met tous les sous-centres dans souscentreAvecCMList
                        for (Souscentre scentre : souscentresIntervenantsList) {
                            if (!souscentreAvecCMList.contains(scentre)) {
                                souscentreAvecCMList.add(scentre);
                            }
                        }
                        for (Souscentre scentre : souscentresIntervenantsecretsList) {
                            if (!souscentreAvecCMList.contains(scentre)) {
                                souscentreAvecCMList.add(scentre);
                            }
                        }

                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            List<Region> regions = metier.findAllRegions();
                            for (Region region : regions) {
                                for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                    if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                        int num = 1;
                                        int totalMontant = 0;
                                        ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                        for (int i = 0; i < souscentresList.size(); i++) {
                                            Souscentre souscentre = souscentresList.get(i);
                                            if (souscentreEffectifMap.containsKey(souscentre)) {
                                                if (souscentreIntervenantMap.containsKey(souscentre) || souscentreIntervenantsecretMap.containsKey(souscentre)) {
                                                    String souscentreAafficher = "";
                                                    String cm = "";
                                                    String lieu = "";
                                                    int nbtours = 1;
                                                    if (souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                                        if (!souscentreIntervenantsecretMap.get(souscentre).isEmpty()) {
                                                            nbtours = souscentreIntervenantsecretMap.get(souscentre).size();
                                                        }
                                                    }
                                                    for (int j = 0; j < nbtours; j++) {
                                                        int montantArrondi = 0;
                                                        if (souscentreIntervenantMap.containsKey(souscentre)) {
                                                            determinerCoutCM(tousLesScentaplus, souscentrePhasesMap, souscentre);
                                                            souscentreAafficher = souscentre.getNomsouscent();
                                                            cm = souscentreIntervenantMap.get(souscentre).getPersonnel().getNompers() + " " + souscentreIntervenantMap.get(souscentre).getPersonnel().getPrenom();
                                                            lieu = souscentreIntervenantMap.get(souscentre).getPersonnel().getStructure();
                                                            montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                        } else {                                       
                                                            Secretariat secretariatCourant = souscentreIntervenantsecretMap.get(souscentre).get(j).getSecretariat();
                                                            determinerCoutCMsec(tousLesScentaplus, souscentre, activitesSecretariatMap, secretariatCourant);
                                                            if (secretariatCourant.getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                                                                souscentreAafficher = secretariatCourant.getSouscentre().getNomsouscent() + " (Sec. " + secretariatCourant.getNumsec() + ")";
                                                            } else {
                                                                souscentreAafficher = secretariatCourant.getSouscentre().getNomsouscent() + " (Sec. " + secretariatCourant.getNumsec() + " du sous-centre " + souscentre.getNomsouscent() + ")";
                                                            }
                                                            cm = souscentreIntervenantsecretMap.get(souscentre).get(j).getPersonnel().getNompers() + " " + souscentreIntervenantsecretMap.get(souscentre).get(j).getPersonnel().getPrenom();                                                            
                                                            lieu = souscentreIntervenantsecretMap.get(souscentre).get(j).getPersonnel().getStructure();
                                                            montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                        }
                                                        Map<String, Object> row = new HashMap<>();
                                                        row.put("examen", groupedexamensEnstring);
                                                        row.put("session", anneeSelected);
                                                        row.put("region", region.getNomreg());
                                                        row.put("reference", "");
                                                        row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                        row.put("num", num++);
                                                        row.put("souscentre", souscentreAafficher);
                                                        row.put("naturecentre", phasesPourAffichage);
                                                        row.put("cm", cm);
                                                        row.put("provenance", lieu);
                                                        row.put("montant", montantArrondi);
                                                        row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                        int avance = montantArrondi / 2;
                                                        row.put("avance", avance);
                                                        totalMontant += avance;//jasperreport prendra la dernière valeur de cout
                                                        row.put("totalAvanceEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                        datasource.add(row);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatCM1Report.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            List<Region> regions = metier.findAllRegions();
                            for (Region region : regions) {
                                for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                    if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                        int num = 1;
                                        int totalMontant = 0;
                                        ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                        for (int i = 0; i < souscentresList.size(); i++) {
                                            Souscentre souscentre = souscentresList.get(i);
                                            if (souscentreEffectifMap.containsKey(souscentre)) {
                                                if (souscentreIntervenantMap.containsKey(souscentre) || souscentreIntervenantsecretMap.containsKey(souscentre)) {
                                                    String souscentreAafficher = "";
                                                    String cm = "";
                                                    String lieu = "";
                                                    int nbtours = 1;
                                                    if (souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                                        if (!souscentreIntervenantsecretMap.get(souscentre).isEmpty()) {
                                                            nbtours = souscentreIntervenantsecretMap.get(souscentre).size();
                                                        }
                                                    }
                                                    for (int j = 0; j < nbtours; j++) {
                                                        int montantArrondi = 0;
                                                        if (souscentreIntervenantMap.containsKey(souscentre)) {
                                                            determinerCoutCM(tousLesScentaplus, souscentrePhasesMap, souscentre);
                                                            souscentreAafficher = souscentre.getNomsouscent();
                                                            cm = souscentreIntervenantMap.get(souscentre).getPersonnel().getNompers() + " " + souscentreIntervenantMap.get(souscentre).getPersonnel().getPrenom();
                                                            lieu = souscentreIntervenantMap.get(souscentre).getPersonnel().getStructure();
                                                            montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                        } else {
                                                            Secretariat secretariatCourant = souscentreIntervenantsecretMap.get(souscentre).get(j).getSecretariat();
                                                            determinerCoutCMsec(tousLesScentaplus, souscentre, activitesSecretariatMap, secretariatCourant);
                                                            if (secretariatCourant.getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                                                                souscentreAafficher = secretariatCourant.getSouscentre().getNomsouscent() + " (Sec. " + secretariatCourant.getNumsec() + ")";
                                                            } else {
                                                                souscentreAafficher = secretariatCourant.getSouscentre().getNomsouscent() + " (Sec. " + secretariatCourant.getNumsec() + " du sous-centre " + souscentre.getNomsouscent() + ")";
                                                            }
                                                            cm = souscentreIntervenantsecretMap.get(souscentre).get(j).getPersonnel().getNompers() + " " + souscentreIntervenantsecretMap.get(souscentre).get(j).getPersonnel().getPrenom();                                                            
                                                            lieu = souscentreIntervenantsecretMap.get(souscentre).get(j).getPersonnel().getStructure();
                                                            montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                        }
                                                        Map<String, Object> row = new HashMap<>();
                                                        row.put("examen", groupedexamensEnstring);
                                                        row.put("session", anneeSelected);
                                                        row.put("session", anneeSelected);
                                                        row.put("reference", "");
                                                        row.put("region", region.getNomreg());
                                                        row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                        row.put("num", num++);
                                                        row.put("souscentre", souscentreAafficher);
                                                        row.put("naturecentre", phasesPourAffichage);
                                                        row.put("cm", cm);
                                                        row.put("provenance", lieu);
                                                        row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                        row.put("montant", montantArrondi);
                                                        row.put("reliquat", montantArrondi / 2);//il s'agit ici du reliquat
                                                        totalMontant += montantArrondi / 2;//jasperreport prendra la dernière valeur de cout
                                                        row.put("totalReliquatEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                        datasource.add(row);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatCM2Report.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        souscentreEffectifMap.clear();//on vide le hashmap
                        souscentrePhasesMap.clear();//on vide le hashmap
                        examensSelected.clear();//on vide
                        tousLesScentaplus.clear();
                        souscentreList.clear();
                    }//fin else continuer
                } else {
                    JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
                }
            } else {//jCheckBoxAdditif de CM a été sélectionné
                /*
                Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
                List<Souscentre> tousLesScentaplus = new ArrayList<>();//liste de tous les sous-centres à plus organisant les examens sélectionnés
                Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
                List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session 
                List<Souscentre> souscentreAvecCMList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des CM
                Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
                ArrayList<String> typesBruts = new ArrayList<>();
                ArrayList<String> typesAconsiderer = new ArrayList<>();
                ArrayList<String> niveauxAconsiderer = new ArrayList<>();
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE CM");
                    caisses = metier.findAllCaissesAdditivesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    boolean continuer = false;
                    for (Caisse c : caisses) {
                        if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                            imputationSelected = c.getImputation();//aide à l'affichage sur l'état
                            continuer = true;
                            break;
                        }
                    }
                    if (!continuer) {
                        JOptionPane.showMessageDialog(this, "Erreur, les états additifs de prise en charge des CM n'ont pas encore été créés pour ce groupe d'examens !");
                    } else {
                        String separateur = ", ";
                        examensList = groupedexamensEnstring.split(separateur);
                        for (int i = 0; i < examensList.length; i++) {
                            for (Examen e : examens) {
                                if (e.getSigle().equals(examensList[i])) {
                                    examensSelected.add(e);
                                    break;
                                }
                            }
                        }
                        for (Session s : sessions) {
                            if (s.getAnnee() == anneeSelected) {
                                sessionSelected = s;
                                break;
                            }
                        }

                        for (Examen e : examensSelected) {
                            List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                            for (Statistique s : lesStats) {
                                if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                    int nbcand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                                    souscentreEffectifMap.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                } else {
                                    souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                                }
                            }
                            List<Scentaplus> scentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, e.getSigle());
                            for (Scentaplus s : scentaplus) {
                                if (!tousLesScentaplus.contains(s.getSouscentre())) {
                                    tousLesScentaplus.add(s.getSouscentre());
                                }
                            }
                            List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                            for (Nature n : lesNats) {
                                Souscentre unSouscentre = n.getSouscentre();
                                if (!souscentreList.contains(unSouscentre)) {
                                    souscentreList.add(unSouscentre);
                                }
                            }
                            for (int j = 0; j < souscentreList.size(); j++) {
                                ArrayList<Character> phasesList = new ArrayList<>();
                                Souscentre s = souscentreList.get(j);
                                for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                    if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                        if (!phasesList.contains(n.getActivite().getInitiale())) {
                                            phasesList.add(n.getActivite().getInitiale());
                                        }
                                        //pas de break ici car on doit parcourir tous lesNats
                                    }
                                }
                                if (!souscentrePhasesMap.containsKey(s)) {
                                    souscentrePhasesMap.put(s, phasesList);
                                } else {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                    ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                    for (int k = 0; k < phasesList.size(); k++) {
                                        if (!phasesList1.contains(phasesList.get(k))) {
                                            phasesList1.add(phasesList.get(k));
                                        }
                                    }
                                    Collections.sort(phasesList1);
                                    souscentrePhasesMap.put(s, phasesList1);
                                }
                            }
                        }

                        //recherche des types des examens à utiliser
                        for (Examen examen : examensSelected) {
                            System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                            if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                                typesBruts.add("ESG");
                            }
                            if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                                typesBruts.add("ESTP");
                            }
                        }
                        if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                            typesAconsiderer.add("ESG");
                            typesAconsiderer.add("TOUT");
                        }
                        if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                            typesAconsiderer.add("ESTP");
                            typesAconsiderer.add("TOUT");
                        }
                        if (typesBruts.size() == 2) {
                            typesAconsiderer.add("ESG");
                            typesAconsiderer.add("ESTP");
                            typesAconsiderer.add("TOUT");
                        }
                        //recherche des niveaux des examens à utiliser
                        if (!niveauSelected.equals("TOUT")) {
                            niveauxAconsiderer.add(niveauSelected);
                            niveauxAconsiderer.add("TOUT");
                        }
                        if (niveauSelected.equals("TOUT")) {
                            niveauxAconsiderer.add("PROB");
                            niveauxAconsiderer.add("BACC");
                            niveauxAconsiderer.add("TOUT");
                        }
                        //recherche des centres de billetage
                        for (String niveau : niveauxAconsiderer) {
                            for (String type : typesAconsiderer) {
                                List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                                for (Centrebilletage centrebilletage : desCentrebilletages) {
                                    ArrayList<Souscentre> souscentresList = new ArrayList<>();
                                    if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                        List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                        for (Secteurcouv sect : secteurs) {
                                            if (!souscentresList.contains(sect.getSouscentre())) {
                                                souscentresList.add(sect.getSouscentre());
                                            }
                                        }
                                        centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                                    }
                                }
                            }
                        }
                        //sous-centres ayant déjà des CM
                        intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION");
                        for (Intervenant intervenant : intervenants) {
                            if (!souscentreAvecCMList.contains(intervenant.getSouscentre())) {
                                souscentreAvecCMList.add(intervenant.getSouscentre());
                            }
                        }

                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            List<Region> regions = metier.findAllRegions();
                            for (Region region : regions) {
                                for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                    if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                        int num = 1;
                                        int totalMontant = 0;
                                        ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                        for (int i = 0; i < souscentresList.size(); i++) {
                                            Souscentre souscentre = souscentresList.get(i);
                                            if (souscentreEffectifMap.containsKey(souscentre) || souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                                intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SouscentreD1SessionD1ActiviteEt1Qualite(anneeSelected, souscentre.getNomsouscent(), niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION");
                                                for (Intervenant cm : intervenants) {
                                                    determinerCoutAdditifCM(tousLesScentaplus, souscentrePhasesMap, souscentre);

                                                    Map<String, Object> row = new HashMap<>();
                                                    row.put("examen", groupedexamensEnstring);
                                                    row.put("session", anneeSelected);
                                                    row.put("reference", "");
                                                    row.put("region", region.getNomreg());
                                                    row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                    row.put("num", num++);
                                                    row.put("souscentre", souscentre.getNomsouscent());
                                                    row.put("naturecentre", phasesPourAffichage);
                                                    row.put("cm", cm.getPersonnel().getNompers() + " " + cm.getPersonnel().getPrenom());
                                                    row.put("provenance", cm.getPersonnel().getStructure());
                                                    int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                    row.put("montant", montantArrondi);
                                                    totalMontant += montantArrondi;//jasperreport prendra la dernière valeur de cout
                                                    row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                    datasource.add(row);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatAdditifCMReport.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        souscentreEffectifMap.clear();//on vide le hashmap
                        souscentrePhasesMap.clear();//on vide le hashmap
                        examensSelected.clear();//on vide
                        tousLesScentaplus.clear();
                        souscentreList.clear();
                    }//fin else continuer                   
                } else {//if groupedexamen
                    JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
                }
                 */
            }//fin else !checkbox
        }//fin if radioCM
        if (jRadioButtonACM.isSelected()) {
            if (!jCheckBoxAdditif.isSelected()) {
                Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
                Map<Souscentre, Integer> souscentreNbMaxEpreuveMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre maximal d'épreuves professionnelles pratiques contraignantes
                List<Souscentre> tousLesScentaplus = new ArrayList<>();//liste de tous les sous-centres à plus organisant les examens sélectionnés
                Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
                List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session 
                List<Souscentre> souscentreAvecACMList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des ACM
                Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
                ArrayList<String> typesBruts = new ArrayList<>();
                ArrayList<String> typesAconsiderer = new ArrayList<>();
                ArrayList<String> niveauxAconsiderer = new ArrayList<>();

                List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats 
                Map<Secretariat, Integer> secretariatEffectifMap = new HashMap<>();//contient l'ensemble des secrétariats d'un groupe d'examens avec chacun avec son nombre de candidats
                Map<Secretariat, ArrayList<Character>> activitesSecretariatMap = new HashMap<>();//contient l'ensemble des secretariats chacun avec la liste des iniatiales de ses activités 
                Map<Souscentre, ArrayList<Secretariat>> souscentreSecretariatsMap = new HashMap<>();//contient les sous-centres chacun avec la liste de ses secretariats le cas échéant

                Map<Souscentre, ArrayList<Intervenantsecret>> souscentreIntervenantsecretMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses Intervenantsecret
                Map<Souscentre, Intervenant> souscentreIntervenantMap = new HashMap<>();//contient les sous-centres chacun avec son Intervenant
                ArrayList<Souscentre> souscentresIntervenantsList = new ArrayList<>();//liste de tous les sous-centres ayant des intervenants dans le groupedexamensEnstring dans la session considérée
                ArrayList<Souscentre> souscentresIntervenantsecretsList = new ArrayList<>();//liste de tous les sous-centres ayant des intervenantsecrets dans le groupedexamensEnstring dans la session considérée               
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE ACM");
                    caisses = metier.findAllCaissesOrdinairesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    boolean continuer = false;
                    for (Caisse c : caisses) {
                        if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                            continuer = true;
                            break;
                        }
                    }
                    if (!continuer) {
                        JOptionPane.showMessageDialog(this, "Erreur, les états ordinaires de prise en charge des ACM n'ont pas encore été créés pour ce groupe d'examens !");
                    } else {
                        String separateur = ", ";
                        examensList = groupedexamensEnstring.split(separateur);
                        for (int i = 0; i < examensList.length; i++) {
                            for (Examen e : examens) {
                                if (e.getSigle().equals(examensList[i])) {
                                    examensSelected.add(e);
                                    break;
                                }
                            }
                        }
                        for (Session s : sessions) {
                            if (s.getAnnee() == anneeSelected) {
                                sessionSelected = s;
                                break;
                            }
                        }

                        for (Examen e : examensSelected) {
                            List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                            for (Statistique s : lesStats) {
                                if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                    int nbcand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                                    souscentreEffectifMap.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                } else {
                                    souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                                }
                                /*
                                Nbepreuveprof nbepreuveprof = metier.findAllNbepreuveprofsD1ExamenEtD1Option(e.getSigle(), s.getOption().getSigle());//s'il existe, il est unique
                                if (souscentreNbMaxEpreuveMap.containsKey(s.getSouscentre())) {
                                    int nb = souscentreNbMaxEpreuveMap.get(s.getSouscentre());
                                    souscentreNbMaxEpreuveMap.put(s.getSouscentre(), max(nb, nbepreuveprof.getNbprofpratique1()));
                                } else {
                                    souscentreNbMaxEpreuveMap.put(s.getSouscentre(), nbepreuveprof.getNbprofpratique1());
                                }
                                 */
                            }
                            List<Scentaplus> scentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, e.getSigle());
                            for (Scentaplus s : scentaplus) {
                                if (!tousLesScentaplus.contains(s.getSouscentre())) {
                                    tousLesScentaplus.add(s.getSouscentre());
                                }
                            }
                            List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                            for (Nature n : lesNats) {
                                Souscentre unSouscentre = n.getSouscentre();
                                if (!souscentreList.contains(unSouscentre)) {
                                    souscentreList.add(unSouscentre);
                                }
                            }
                            for (int j = 0; j < souscentreList.size(); j++) {
                                ArrayList<Character> phasesList = new ArrayList<>();
                                Souscentre s = souscentreList.get(j);
                                for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                    if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                        if (!phasesList.contains(n.getActivite().getInitiale())) {
                                            phasesList.add(n.getActivite().getInitiale());
                                        }
                                        //pas de break ici car on doit parcourir tous lesNats
                                    }
                                }
                                if (!souscentrePhasesMap.containsKey(s)) {
                                    souscentrePhasesMap.put(s, phasesList);
                                } else {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                    ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                    for (int k = 0; k < phasesList.size(); k++) {
                                        if (!phasesList1.contains(phasesList.get(k))) {
                                            phasesList1.add(phasesList.get(k));
                                        }
                                    }
                                    Collections.sort(phasesList1);
                                    souscentrePhasesMap.put(s, phasesList1);
                                }
                            }
                        }

                        //recherche des types des examens à utiliser
                        for (Examen examen : examensSelected) {
                            System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                            if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                                typesBruts.add("ESG");
                            }
                            if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                                typesBruts.add("ESTP");
                            }
                        }
                        if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                            typesAconsiderer.add("ESG");
                            typesAconsiderer.add("TOUT");
                        }
                        if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                            typesAconsiderer.add("ESTP");
                            typesAconsiderer.add("TOUT");
                        }
                        if (typesBruts.size() == 2) {
                            typesAconsiderer.add("ESG");
                            typesAconsiderer.add("ESTP");
                            typesAconsiderer.add("TOUT");
                        }
                        //recherche des niveaux des examens à utiliser
                        if (!niveauSelected.equals("TOUT")) {
                            niveauxAconsiderer.add(niveauSelected);
                            niveauxAconsiderer.add("TOUT");
                        }
                        if (niveauSelected.equals("TOUT")) {
                            niveauxAconsiderer.add("PROB");
                            niveauxAconsiderer.add("BACC");
                            niveauxAconsiderer.add("TOUT");
                        }
                        //recherche des centres de billetage
                        for (String niveau : niveauxAconsiderer) {
                            for (String type : typesAconsiderer) {
                                List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                                for (Centrebilletage centrebilletage : desCentrebilletages) {
                                    ArrayList<Souscentre> souscentresList = new ArrayList<>();
                                    if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                        List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                        for (Secteurcouv sect : secteurs) {
                                            if (!souscentresList.contains(sect.getSouscentre())) {
                                                souscentresList.add(sect.getSouscentre());
                                            }
                                        }
                                        centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                                    }
                                }
                            }
                        }
                        //remplissage souscentreAsecretariatsDemultipliesList
                        secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                        if (!secretariats.isEmpty()) {
                            for (Secretariat sec : secretariats) {
                                if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                                    souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                                }
                            }
                        }

                        //remplissage secretariatEffectifMap     
                        for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                            List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreEtSession(souscentre.getNomsouscent(), anneeSelected);
                            if (!secretariatsList.isEmpty()) {
                                for (Secretariat sec : secretariatsList) {
                                    int stat = 0;
                                    List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                                    for (Statsecretariat statsec : statsecretariatsList) {
                                        if (statsec.getSecretariat().getNumsec() == sec.getNumsec() && statsec.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                            stat += statsec.getNombre();
                                        }
                                    }
                                    secretariatEffectifMap.put(sec, stat);
                                }
                            }
                        }

                        //remplissage activitesSecretariatMap
                        List<Naturesecretariat> lesNatsec = metier.findAllNaturesecretariatsD1Session(anneeSelected);
                        for (Secretariat sec : secretariatEffectifMap.keySet()) {
                            ArrayList<Character> phasesList2 = new ArrayList<>();
                            for (Naturesecretariat natsec : lesNatsec) {
                                if (sec.getNumsec() == natsec.getSecretariat().getNumsec() && sec.getSouscentre().getNomsouscent().equals(natsec.getSecretariat().getSouscentre().getNomsouscent()) && sec.getEtablissement().getAbreviation().equals(natsec.getSecretariat().getEtablissement().getAbreviation())) {
                                    if (!phasesList2.contains(natsec.getActivite().getInitiale())) {
                                        phasesList2.add(natsec.getActivite().getInitiale());
                                    }
                                }
                            }
                            Collections.sort(phasesList2);
                            activitesSecretariatMap.put(sec, phasesList2);
                        }

                        //remplissage de souscentreSecretariatsMap
                        for (Souscentre souscentre : souscentreEffectifMap.keySet()) {
                            ArrayList<Secretariat> secretariatsList = new ArrayList<>();
                            for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                if (sec.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                    if (!secretariatsList.contains(sec)) {
                                        secretariatsList.add(sec);
                                    }
                                }
                            }
                            if (!secretariatsList.isEmpty()) {
                                ordonnerSecretariatsD1souscentre(secretariatsList);
                                souscentreSecretariatsMap.put(souscentre, secretariatsList);
                            }
                        }

                        intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION AUXILIAIRE");
                        desIntervenantsecret = metier.findAllIntervenantsecretD1GroupedexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION AUXILIAIRE");

                        souscentres = metier.findAllSouscentres();
                        for (Souscentre scentre : souscentres) {
                            for (Intervenant interv : intervenants) {
                                if (!souscentresIntervenantsList.contains(scentre) && interv.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                    souscentresIntervenantsList.add(scentre);
                                }
                            }
                            for (Intervenantsecret intersec : desIntervenantsecret) {
                                if (!souscentresIntervenantsecretsList.contains(scentre) && intersec.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                    souscentresIntervenantsecretsList.add(scentre);
                                }
                            }
                        }

                        for (Souscentre scentre : souscentresIntervenantsecretsList) {
                            ArrayList<Intervenantsecret> intervenantsecretsList = new ArrayList<>();
                            for (Intervenantsecret intersec : desIntervenantsecret) {
                                if (intersec.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                    intervenantsecretsList.add(intersec);
                                }
                            }
                            //ordonnerIntervenantsecretD1souscentre(intervenantsecretsList);
                            souscentreIntervenantsecretMap.put(scentre, intervenantsecretsList);
                        }

                        for (Souscentre scentre : souscentresIntervenantsList) {
                            for (Intervenant inter : intervenants) {
                                if (inter.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                    souscentreIntervenantMap.put(scentre, inter);
                                    break;
                                }
                            }
                        }

                        //on met tous les sous-centres dans souscentreAvecACMList
                        for (Souscentre scentre : souscentresIntervenantsList) {
                            if (!souscentreAvecACMList.contains(scentre)) {
                                souscentreAvecACMList.add(scentre);
                            }
                        }
                        for (Souscentre scentre : souscentresIntervenantsecretsList) {
                            if (!souscentreAvecACMList.contains(scentre)) {
                                souscentreAvecACMList.add(scentre);
                            }
                        }

                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            List<Region> regions = metier.findAllRegions();
                            for (Region region : regions) {
                                for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                    if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                        int num = 1;
                                        int totalMontant = 0;
                                        ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                        for (int i = 0; i < souscentresList.size(); i++) {
                                            Souscentre souscentre = souscentresList.get(i);
                                            if (souscentreEffectifMap.containsKey(souscentre)) {
                                                if (souscentreIntervenantMap.containsKey(souscentre) || souscentreIntervenantsecretMap.containsKey(souscentre)) {
                                                    String souscentreAafficher = "";
                                                    String acm = "";
                                                    String lieu = "";
                                                    int nbtours = 1;
                                                    if (souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                                        if (!souscentreIntervenantsecretMap.get(souscentre).isEmpty()) {
                                                            nbtours = souscentreIntervenantsecretMap.get(souscentre).size();
                                                        }
                                                    }
                                                    for (int j = 0; j < nbtours; j++) {
                                                        int montantArrondi = 0;
                                                        if (souscentreIntervenantMap.containsKey(souscentre)) {
                                                            determinerCoutACM(tousLesScentaplus, souscentrePhasesMap, souscentre, souscentreIntervenantMap.get(souscentre));
                                                            souscentreAafficher = souscentre.getNomsouscent();
                                                            acm = souscentreIntervenantMap.get(souscentre).getPersonnel().getNompers() + " " + souscentreIntervenantMap.get(souscentre).getPersonnel().getPrenom();
                                                            lieu = souscentreIntervenantMap.get(souscentre).getPersonnel().getStructure();
                                                            montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                        } else {
                                                            Secretariat secretariatCourant = souscentreIntervenantsecretMap.get(souscentre).get(j).getSecretariat();//secrétariat courant                                                
                                                            determinerCoutACMsec(tousLesScentaplus, souscentre, activitesSecretariatMap, secretariatCourant, souscentreIntervenantsecretMap.get(souscentre).get(j));
                                                            if (secretariatCourant.getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                                                                souscentreAafficher = secretariatCourant.getSouscentre().getNomsouscent() + " (Sec. " + secretariatCourant.getNumsec() + ")";
                                                            } else {
                                                                souscentreAafficher = secretariatCourant.getSouscentre().getNomsouscent() + " (Sec. " + secretariatCourant.getNumsec() + " du sous-centre " + souscentre.getNomsouscent() + ")";
                                                            }
                                                            acm = souscentreIntervenantsecretMap.get(souscentre).get(j).getPersonnel().getNompers() + " " + souscentreIntervenantsecretMap.get(souscentre).get(j).getPersonnel().getPrenom();
                                                            lieu = souscentreIntervenantsecretMap.get(souscentre).get(j).getPersonnel().getStructure();
                                                            montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                        }
                                                        Map<String, Object> row = new HashMap<>();
                                                        row.put("examen", groupedexamensEnstring);
                                                        row.put("session", anneeSelected);
                                                        row.put("session", anneeSelected);
                                                        row.put("reference", "");
                                                        row.put("region", region.getNomreg());
                                                        row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                        row.put("num", num++);
                                                        row.put("souscentre", souscentreAafficher);
                                                        row.put("naturecentre", phasesPourAffichage);
                                                        row.put("acm", acm);
                                                        row.put("provenance", lieu);
                                                        row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                        row.put("montant", montantArrondi);
                                                        int avance = montantArrondi / 2;
                                                        row.put("avance", avance);
                                                        totalMontant += avance;//jasperreport prendra la dernière valeur de cout
                                                        row.put("totalAvanceEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                        datasource.add(row);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatACM1Report.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            List<Region> regions = metier.findAllRegions();
                            for (Region region : regions) {
                                for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                    if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                        int num = 1;
                                        int totalMontant = 0;
                                        ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                        for (int i = 0; i < souscentresList.size(); i++) {
                                            Souscentre souscentre = souscentresList.get(i);
                                            if (souscentreEffectifMap.containsKey(souscentre)) {
                                                if (souscentreIntervenantMap.containsKey(souscentre) || souscentreIntervenantsecretMap.containsKey(souscentre)) {
                                                    String souscentreAafficher = "";
                                                    String acm = "";
                                                    String lieu = "";
                                                    int nbtours = 1;
                                                    if (souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                                        if (!souscentreIntervenantsecretMap.get(souscentre).isEmpty()) {
                                                            nbtours = souscentreIntervenantsecretMap.get(souscentre).size();
                                                        }
                                                    }
                                                    for (int j = 0; j < nbtours; j++) {
                                                        int montantArrondi = 0;
                                                        if (souscentreIntervenantMap.containsKey(souscentre)) {
                                                            determinerCoutACM(tousLesScentaplus, souscentrePhasesMap, souscentre, souscentreIntervenantMap.get(souscentre));
                                                            souscentreAafficher = souscentre.getNomsouscent();
                                                            acm = souscentreIntervenantMap.get(souscentre).getPersonnel().getNompers() + " " + souscentreIntervenantMap.get(souscentre).getPersonnel().getPrenom();
                                                            lieu = souscentreIntervenantMap.get(souscentre).getPersonnel().getStructure();
                                                            montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                        } else {
                                                            Secretariat secretariatCourant = souscentreIntervenantsecretMap.get(souscentre).get(j).getSecretariat();//secrétariat courant                                                
                                                            determinerCoutACMsec(tousLesScentaplus, souscentre, activitesSecretariatMap, secretariatCourant, souscentreIntervenantsecretMap.get(souscentre).get(j));
                                                            if (secretariatCourant.getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                                                                souscentreAafficher = secretariatCourant.getSouscentre().getNomsouscent() + " (Sec. " + secretariatCourant.getNumsec() + ")";
                                                            } else {
                                                                souscentreAafficher = secretariatCourant.getSouscentre().getNomsouscent() + " (Sec. " + secretariatCourant.getNumsec() + " du sous-centre " + souscentre.getNomsouscent() + ")";
                                                            }
                                                            acm = souscentreIntervenantsecretMap.get(souscentre).get(j).getPersonnel().getNompers() + " " + souscentreIntervenantsecretMap.get(souscentre).get(j).getPersonnel().getPrenom();
                                                            lieu = souscentreIntervenantsecretMap.get(souscentre).get(j).getPersonnel().getStructure();
                                                            montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                        }
                                                        Map<String, Object> row = new HashMap<>();
                                                        row.put("examen", groupedexamensEnstring);
                                                        row.put("session", anneeSelected);
                                                        row.put("session", anneeSelected);
                                                        row.put("reference", "");
                                                        row.put("region", region.getNomreg());
                                                        row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                        row.put("num", num++);
                                                        row.put("souscentre", souscentreAafficher);
                                                        row.put("naturecentre", phasesPourAffichage);
                                                        row.put("acm", acm);
                                                        row.put("provenance", lieu);
                                                        row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                        row.put("montant", montantArrondi);
                                                        row.put("reliquat", montantArrondi / 2);//il s'agit ici du reliquat
                                                        totalMontant += montantArrondi / 2;//jasperreport prendra la dernière valeur de cout
                                                        row.put("totalReliquatEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                        datasource.add(row);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatACM2Report.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        souscentreEffectifMap.clear();//on vide le hashmap
                        souscentrePhasesMap.clear();//on vide le hashmap
                        examensSelected.clear();//on vide
                        tousLesScentaplus.clear();
                        souscentreList.clear();
                        souscentreNbMaxEpreuveMap.clear();
                    }// fin else continuer                    
                } else {//de if groupedexamen
                    JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
                }
            } else {
                /*
                //de if !checkbox
                Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
                Map<Souscentre, Integer> souscentreNbMaxEpreuveMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre maximal d'épreuves professionnelles pratiques contraignantes
                List<Souscentre> tousLesScentaplus = new ArrayList<>();//liste de tous les sous-centres à plus organisant les examens sélectionnés
                Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
                List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session 
                List<Souscentre> souscentreAvecACMList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des ACM
                Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
                ArrayList<String> typesBruts = new ArrayList<>();
                ArrayList<String> typesAconsiderer = new ArrayList<>();
                ArrayList<String> niveauxAconsiderer = new ArrayList<>();
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE ACM");
                    caisses = metier.findAllCaissesAdditivesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    boolean continuer = false;
                    for (Caisse c : caisses) {
                        if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                            imputationSelected = c.getImputation();//aide à l'affichage sur l'état
                            continuer = true;
                            break;
                        }
                    }
                    if (!continuer) {
                        JOptionPane.showMessageDialog(this, "Erreur, les états additifs de prise en charge des ACM n'ont pas encore été créés pour ce groupe d'examens !");
                    } else {
                        String separateur = ", ";
                        examensList = groupedexamensEnstring.split(separateur);
                        for (int i = 0; i < examensList.length; i++) {
                            for (Examen e : examens) {
                                if (e.getSigle().equals(examensList[i])) {
                                    examensSelected.add(e);
                                    break;
                                }
                            }
                        }
                        for (Session s : sessions) {
                            if (s.getAnnee() == anneeSelected) {
                                sessionSelected = s;
                                break;
                            }
                        }

                        for (Examen e : examensSelected) {
                            List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1SessionEt1phase(e.getSigle(), anneeSelected, phase);
                            for (Statistique s : lesStats) {
                                if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                    int nbcand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                                    souscentreEffectifMap.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                } else {
                                    souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                                }
                            }
                            List<Scentaplus> scentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, e.getSigle());
                            for (Scentaplus s : scentaplus) {
                                if (!tousLesScentaplus.contains(s.getSouscentre())) {
                                    tousLesScentaplus.add(s.getSouscentre());
                                }
                            }
                            List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                            for (Nature n : lesNats) {
                                Souscentre unSouscentre = n.getSouscentre();
                                if (!souscentreList.contains(unSouscentre)) {
                                    souscentreList.add(unSouscentre);
                                }
                            }
                            for (int j = 0; j < souscentreList.size(); j++) {
                                ArrayList<Character> phasesList = new ArrayList<>();
                                Souscentre s = souscentreList.get(j);
                                for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                    if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                        if (!phasesList.contains(n.getActivite().getInitiale())) {
                                            phasesList.add(n.getActivite().getInitiale());
                                        }
                                        //pas de break ici car on doit parcourir tous lesNats
                                    }
                                }
                                if (!souscentrePhasesMap.containsKey(s)) {
                                    souscentrePhasesMap.put(s, phasesList);
                                } else {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                    ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                    for (int k = 0; k < phasesList.size(); k++) {
                                        if (!phasesList1.contains(phasesList.get(k))) {
                                            phasesList1.add(phasesList.get(k));
                                        }
                                    }
                                    Collections.sort(phasesList1);
                                    souscentrePhasesMap.put(s, phasesList1);
                                }
                            }
                        }

                        //recherche des types des examens à utiliser
                        for (Examen examen : examensSelected) {
                            System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                            if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                                typesBruts.add("ESG");
                            }
                            if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                                typesBruts.add("ESTP");
                            }
                        }
                        if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                            typesAconsiderer.add("ESG");
                            typesAconsiderer.add("TOUT");
                        }
                        if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                            typesAconsiderer.add("ESTP");
                            typesAconsiderer.add("TOUT");
                        }
                        if (typesBruts.size() == 2) {
                            typesAconsiderer.add("ESG");
                            typesAconsiderer.add("ESTP");
                            typesAconsiderer.add("TOUT");
                        }
                        //recherche des niveaux des examens à utiliser
                        if (!niveauSelected.equals("TOUT")) {
                            niveauxAconsiderer.add(niveauSelected);
                            niveauxAconsiderer.add("TOUT");
                        }
                        if (niveauSelected.equals("TOUT")) {
                            niveauxAconsiderer.add("PROB");
                            niveauxAconsiderer.add("BACC");
                            niveauxAconsiderer.add("TOUT");
                        }
                        //recherche des centres de billetage
                        for (String niveau : niveauxAconsiderer) {
                            for (String type : typesAconsiderer) {
                                List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                                for (Centrebilletage centrebilletage : desCentrebilletages) {
                                    ArrayList<Souscentre> souscentresList = new ArrayList<>();
                                    if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                        List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                        for (Secteurcouv sect : secteurs) {
                                            if (!souscentresList.contains(sect.getSouscentre())) {
                                                souscentresList.add(sect.getSouscentre());
                                            }
                                        }
                                        centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                                    }
                                }
                            }
                        }
                        //sous-centres ayant déjà des ACM
                        intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION AUXILIAIRE");
                        for (Intervenant intervenant : intervenants) {
                            if (!souscentreAvecACMList.contains(intervenant.getSouscentre())) {
                                souscentreAvecACMList.add(intervenant.getSouscentre());
                            }
                        }

                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            List<Region> regions = metier.findAllRegions();
                            for (Region region : regions) {
                                for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                    if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                        int num = 1;
                                        int totalMontant = 0;
                                        ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                        for (int i = 0; i < souscentresList.size(); i++) {
                                            Souscentre souscentre = souscentresList.get(i);
                                            if (souscentreEffectifMap.containsKey(souscentre) || souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                                intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SouscentreD1SessionD1ActiviteEt1Qualite(anneeSelected, souscentre.getNomsouscent(), niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION AUXILIAIRE");
                                                for (Intervenant acm : intervenants) {
                                                    determinerCoutAdditifACM(tousLesScentaplus, souscentrePhasesMap, souscentre, acm);

                                                    Map<String, Object> row = new HashMap<>();
                                                    row.put("examen", groupedexamensEnstring);
                                                    row.put("session", anneeSelected);
                                                    row.put("reference", "");
                                                    row.put("region", region.getNomreg());
                                                    row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                    row.put("num", num++);
                                                    row.put("souscentre", souscentre.getNomsouscent());
                                                    row.put("naturecentre", phasesPourAffichage);
                                                    row.put("acm", acm.getPersonnel().getNompers() + " " + acm.getPersonnel().getPrenom());
                                                    row.put("provenance", acm.getPersonnel().getStructure());
                                                    int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                    row.put("montant", montantArrondi);
                                                    totalMontant += montantArrondi;//jasperreport prendra la dernière valeur de cout
                                                    row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                    datasource.add(row);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatAdditifACMReport.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        souscentreEffectifMap.clear();//on vide le hashmap
                        souscentrePhasesMap.clear();//on vide le hashmap
                        examensSelected.clear();//on vide
                        tousLesScentaplus.clear();
                        souscentreList.clear();
                        souscentreNbMaxEpreuveMap.clear();
                    }//fin else continuer                   
                }//if groupedexamen                   
                else {
                    JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
                }
                 */
            }//fin else !checkbox
        }// fin if radioCM
        if (!jRadioButtonACM.isSelected() && !jRadioButtonCM.isSelected()) {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Vous devez choisir ACM ou CM !");
        }
    }//GEN-LAST:event_jButtonVisualiserEtatsActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //

    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonCreerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEtatsActionPerformed
        infoSaisies();
        if (jRadioButtonCM.isSelected()) {
            if (!jCheckBoxAdditif.isSelected()) {
                Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
                Map<Souscentre, Integer> souscentreNbMaxEpreuveMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre maximal d'épreuves professionnelles pratiques contraignantes
                List<Souscentre> tousLesScentaplus = new ArrayList<>();//liste de tous les sous-centres à plus organisant les examens sélectionnés
                Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
                List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session 
                List<Souscentre> souscentreAvecCMList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des CM

                List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats 
                Map<Secretariat, Integer> secretariatEffectifMap = new HashMap<>();//contient l'ensemble des secrétariats d'un groupe d'examens avec chacun avec son nombre de candidats
                Map<Secretariat, ArrayList<Character>> activitesSecretariatMap = new HashMap<>();//contient l'ensemble des secretariats chacun avec la liste des iniatiales de ses activités 
                Map<Souscentre, ArrayList<Secretariat>> souscentreSecretariatsMap = new HashMap<>();//contient les sous-centres chacun avec la liste de ses secretariats le cas échéant

                Map<Souscentre, ArrayList<Intervenantsecret>> souscentreIntervenantsecretMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses Intervenantsecret
                Map<Souscentre, Intervenant> souscentreIntervenantMap = new HashMap<>();//contient les sous-centres chacun avec son Intervenant
                ArrayList<Souscentre> souscentresIntervenantsList = new ArrayList<>();//liste de tous les sous-centres ayant des intervenants dans le groupedexamensEnstring dans la session considérée
                ArrayList<Souscentre> souscentresIntervenantsecretsList = new ArrayList<>();//liste de tous les sous-centres ayant des intervenantsecrets dans le groupedexamensEnstring dans la session considérée                

                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE CM");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (!caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, les états de prise en charge des CM existent déjà pour ce groupe d'examens !");
                    } else {
                        String separateur = ", ";
                        examensList = groupedexamensEnstring.split(separateur);
                        for (int i = 0; i < examensList.length; i++) {
                            for (Examen e : examens) {
                                if (e.getSigle().equals(examensList[i])) {
                                    examensSelected.add(e);
                                    break;
                                }
                            }
                        }
                        for (Session s : sessions) {
                            if (s.getAnnee() == anneeSelected) {
                                sessionSelected = s;
                                break;
                            }
                        }
                        for (Examen e : examensSelected) {
                            List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                            for (Statistique s : lesStats) {
                                if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                    int nbcand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                                    souscentreEffectifMap.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                } else {
                                    souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                                }
                            }
                            List<Scentaplus> scentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, e.getSigle());
                            for (Scentaplus s : scentaplus) {
                                if (!tousLesScentaplus.contains(s.getSouscentre())) {
                                    tousLesScentaplus.add(s.getSouscentre());
                                }
                            }
                            List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                            for (Nature n : lesNats) {
                                Souscentre unSouscentre = n.getSouscentre();
                                if (!souscentreList.contains(unSouscentre)) {
                                    souscentreList.add(unSouscentre);
                                }
                            }
                            for (int j = 0; j < souscentreList.size(); j++) {
                                ArrayList<Character> phasesList = new ArrayList<>();
                                Souscentre s = souscentreList.get(j);
                                for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                    if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                        if (!phasesList.contains(n.getActivite().getInitiale())) {
                                            phasesList.add(n.getActivite().getInitiale());
                                        }
                                        //pas de break ici car on doit parcourir tous lesNats
                                    }
                                }
                                if (!souscentrePhasesMap.containsKey(s)) {
                                    souscentrePhasesMap.put(s, phasesList);
                                } else {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                    ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                    for (int k = 0; k < phasesList.size(); k++) {
                                        if (!phasesList1.contains(phasesList.get(k))) {
                                            phasesList1.add(phasesList.get(k));
                                        }
                                    }
                                    Collections.sort(phasesList1);
                                    souscentrePhasesMap.put(s, phasesList1);
                                }
                            }
                        }
                        //remplissage souscentreAsecretariatsDemultipliesList
                        secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                        if (!secretariats.isEmpty()) {
                            for (Secretariat sec : secretariats) {
                                if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                                    souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                                }
                            }
                        }

                        //remplissage secretariatEffectifMap     
                        for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                            List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreEtSession(souscentre.getNomsouscent(), anneeSelected);
                            if (!secretariatsList.isEmpty()) {
                                for (Secretariat sec : secretariatsList) {
                                    int stat = 0;
                                    List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                                    for (Statsecretariat statsec : statsecretariatsList) {
                                        if (statsec.getSecretariat().getNumsec() == sec.getNumsec() && statsec.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                            stat += statsec.getNombre();
                                        }
                                    }
                                    secretariatEffectifMap.put(sec, stat);
                                }
                            }
                        }

                        //remplissage activitesSecretariatMap
                        List<Naturesecretariat> lesNatsec = metier.findAllNaturesecretariatsD1Session(anneeSelected);
                        for (Secretariat sec : secretariatEffectifMap.keySet()) {
                            ArrayList<Character> phasesList2 = new ArrayList<>();
                            for (Naturesecretariat natsec : lesNatsec) {
                                if (sec.getNumsec() == natsec.getSecretariat().getNumsec() && sec.getSouscentre().getNomsouscent().equals(natsec.getSecretariat().getSouscentre().getNomsouscent()) && sec.getEtablissement().getAbreviation().equals(natsec.getSecretariat().getEtablissement().getAbreviation())) {
                                    if (!phasesList2.contains(natsec.getActivite().getInitiale())) {
                                        phasesList2.add(natsec.getActivite().getInitiale());
                                    }
                                }
                            }
                            Collections.sort(phasesList2);
                            activitesSecretariatMap.put(sec, phasesList2);
                        }

                        //remplissage de souscentreSecretariatsMap
                        for (Souscentre souscentre : souscentreEffectifMap.keySet()) {
                            ArrayList<Secretariat> secretariatsList = new ArrayList<>();
                            for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                if (sec.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                    if (!secretariatsList.contains(sec)) {
                                        secretariatsList.add(sec);
                                    }
                                }
                            }
                            if (!secretariatsList.isEmpty()) {
                                ordonnerSecretariatsD1souscentre(secretariatsList);
                                souscentreSecretariatsMap.put(souscentre, secretariatsList);
                            }
                        }

                        intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION");
                        desIntervenantsecret = metier.findAllIntervenantsecretD1GroupedexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION");

                        souscentres = metier.findAllSouscentres();
                        for (Souscentre scentre : souscentres) {
                            for (Intervenant interv : intervenants) {
                                if (!souscentresIntervenantsList.contains(scentre) && interv.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                    souscentresIntervenantsList.add(scentre);
                                }
                            }
                            for (Intervenantsecret intersec : desIntervenantsecret) {
                                if (!souscentresIntervenantsecretsList.contains(scentre) && intersec.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                    souscentresIntervenantsecretsList.add(scentre);
                                }
                            }
                        }

                        for (Souscentre scentre : souscentresIntervenantsecretsList) {
                            ArrayList<Intervenantsecret> intervenantsecretsList = new ArrayList<>();
                            for (Intervenantsecret intersec : desIntervenantsecret) {
                                if (intersec.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                    intervenantsecretsList.add(intersec);
                                }
                            }
                            //ordonnerIntervenantsecretD1souscentre(intervenantsecretsList);
                            souscentreIntervenantsecretMap.put(scentre, intervenantsecretsList);
                        }

                        for (Souscentre scentre : souscentresIntervenantsList) {
                            for (Intervenant inter : intervenants) {
                                if (inter.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                    souscentreIntervenantMap.put(scentre, inter);
                                    break;
                                }
                            }
                        }

                        //on met tous les sous-centres dans souscentreAvecCMList
                        for (Souscentre scentre : souscentresIntervenantsList) {
                            if (!souscentreAvecCMList.contains(scentre)) {
                                souscentreAvecCMList.add(scentre);
                            }
                        }
                        for (Souscentre scentre : souscentresIntervenantsecretsList) {
                            if (!souscentreAvecCMList.contains(scentre)) {
                                souscentreAvecCMList.add(scentre);
                            }
                        }

                        boolean testSicreer = false;
                        try {
                            for (Souscentre souscentre : souscentreAvecCMList) {
                                if (souscentreEffectifMap.containsKey(souscentre)) {
                                    if (souscentreIntervenantMap.containsKey(souscentre) || souscentreIntervenantsecretMap.containsKey(souscentre)) {
                                        int nbtours = 1;
                                        int net = 0;
                                        if (souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                            if (!souscentreIntervenantsecretMap.get(souscentre).isEmpty()) {
                                                nbtours = souscentreIntervenantsecretMap.get(souscentre).size();
                                            }
                                        }

                                        for (int j = 0; j < nbtours; j++) {
                                            if (souscentreIntervenantMap.containsKey(souscentre)) {
                                                determinerCoutCM(tousLesScentaplus, souscentrePhasesMap, souscentre);
                                                int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                net += montantArrondi;
                                            } else {
                                                Secretariat secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(j);//secrétariat courant                 
                                                determinerCoutCMsec(tousLesScentaplus, souscentre, activitesSecretariatMap, secretariatCourant);
                                                int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                net += montantArrondi;
                                            }
                                        }

                                        metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                        testSicreer = true;
                                    }
                                }
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testSicreer) {
                            JOptionPane.showMessageDialog(this, "Etats de prise en charge des CM créés avec succès pour ce groupe d'examens !");
                        }
                    }//fin else caisses
                }//fin if groupedexamen
                else {
                    JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
                }
                souscentreEffectifMap.clear();//on vide le hashmap
                souscentrePhasesMap.clear();//on vide le hashmap
                examensSelected.clear();//on vide
                tousLesScentaplus.clear();
                souscentreList.clear();
                souscentreNbMaxEpreuveMap.clear();

            } else {//de if !checkbox: la jCheckbox a été sélectionnée
                /*
                Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
                Map<Souscentre, Integer> souscentreNbMaxEpreuveMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre maximal d'épreuves professionnelles pratiques contraignantes
                List<Souscentre> tousLesScentaplus = new ArrayList<>();//liste de tous les sous-centres à plus organisant les examens sélectionnés
                Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
                List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session 
                List<Souscentre> souscentreAvecCMList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des CM
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---") && !referenceImputationSelected.equals("---")) {
                    Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE CM");
                    caisses = metier.findAllCaissesAdditivesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (!caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, les états additifs de prise en charge des CM existent déjà pour ce groupe d'examens !");
                    } else {
                        String separateur = ", ";
                        examensList = groupedexamensEnstring.split(separateur);
                        for (int i = 0; i < examensList.length; i++) {
                            for (Examen e : examens) {
                                if (e.getSigle().equals(examensList[i])) {
                                    examensSelected.add(e);
                                    break;
                                }
                            }
                        }
                        for (Session s : sessions) {
                            if (s.getAnnee() == anneeSelected) {
                                sessionSelected = s;
                                break;
                            }
                        }
                        for (Imputation i : imputations) {
                            if (i.getReference().equals(referenceImputationSelected)) {
                                imputationSelected = i;
                                break;
                            }
                        }
                        for (Examen e : examensSelected) {
                            List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1SessionEt1phase(e.getSigle(), anneeSelected, phase);
                            for (Statistique s : lesStats) {
                                if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                    int nbcand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                                    souscentreEffectifMap.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                } else {
                                    souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                                }
                            }
                            List<Scentaplus> scentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, e.getSigle());
                            for (Scentaplus s : scentaplus) {
                                if (!tousLesScentaplus.contains(s.getSouscentre())) {
                                    tousLesScentaplus.add(s.getSouscentre());
                                }
                            }
                            List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                            for (Nature n : lesNats) {
                                Souscentre unSouscentre = n.getSouscentre();
                                if (!souscentreList.contains(unSouscentre)) {
                                    souscentreList.add(unSouscentre);
                                }
                            }
                            for (int j = 0; j < souscentreList.size(); j++) {
                                ArrayList<Character> phasesList = new ArrayList<>();
                                Souscentre s = souscentreList.get(j);
                                for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                    if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                        if (!phasesList.contains(n.getActivite().getInitiale())) {
                                            phasesList.add(n.getActivite().getInitiale());
                                        }
                                        //pas de break ici car on doit parcourir tous lesNats
                                    }
                                }
                                if (!souscentrePhasesMap.containsKey(s)) {
                                    souscentrePhasesMap.put(s, phasesList);
                                } else {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                    ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                    for (int k = 0; k < phasesList.size(); k++) {
                                        if (!phasesList1.contains(phasesList.get(k))) {
                                            phasesList1.add(phasesList.get(k));
                                        }
                                    }
                                    Collections.sort(phasesList1);
                                    souscentrePhasesMap.put(s, phasesList1);
                                }
                            }
                        }

                        //sous-centres ayant déjà des CM
                        intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION");
                        for (Intervenant intervenant : intervenants) {
                            if (!souscentreAvecCMList.contains(intervenant.getSouscentre())) {
                                souscentreAvecCMList.add(intervenant.getSouscentre());
                            }
                        }
                        boolean testSicreer = false;
                        try {
                            for (Souscentre souscentre : souscentreAvecCMList) {
                                if (souscentreEffectifMap.containsKey(souscentre) || souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                    int net = 0;
                                    intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SouscentreD1SessionD1ActiviteEt1Qualite(anneeSelected, souscentre.getNomsouscent(), niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION");
                                    for (Intervenant cm : intervenants) {
                                        determinerCoutAdditifCM(tousLesScentaplus, souscentrePhasesMap, souscentre);
                                        int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                        net += montantArrondi;
                                    }
                                    metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, imputationSelected, souscentre, true));
                                    testSicreer = true;
                                }
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testSicreer) {
                            JOptionPane.showMessageDialog(this, "Etats additifs de prise en charge des CM créés avec succès pour ce groupe d'examens !");
                        }
                    }//fin else caisses
                }//fin if groupedexamen
                else {
                    JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
                }
                souscentreEffectifMap.clear();//on vide le hashmap
                souscentrePhasesMap.clear();//on vide le hashmap
                examensSelected.clear();//on vide
                tousLesScentaplus.clear();
                souscentreList.clear();
                souscentreNbMaxEpreuveMap.clear();
                 */
            }// fin else checkbox
        }//fin radioCM
        if (jRadioButtonACM.isSelected()) {
            if (!jCheckBoxAdditif.isSelected()) {
                Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
                Map<Souscentre, Integer> souscentreNbMaxEpreuveMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre maximal d'épreuves professionnelles pratiques contraignantes
                List<Souscentre> tousLesScentaplus = new ArrayList<>();//liste de tous les sous-centres à plus organisant les examens sélectionnés
                Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
                List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session 
                List<Souscentre> souscentreAvecACMList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des ACM

                List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats 
                Map<Secretariat, Integer> secretariatEffectifMap = new HashMap<>();//contient l'ensemble des secrétariats d'un groupe d'examens avec chacun avec son nombre de candidats
                Map<Secretariat, ArrayList<Character>> activitesSecretariatMap = new HashMap<>();//contient l'ensemble des secretariats chacun avec la liste des iniatiales de ses activités 
                Map<Souscentre, ArrayList<Secretariat>> souscentreSecretariatsMap = new HashMap<>();//contient les sous-centres chacun avec la liste de ses secretariats le cas échéant

                Map<Souscentre, ArrayList<Intervenantsecret>> souscentreIntervenantsecretMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses Intervenantsecret
                Map<Souscentre, Intervenant> souscentreIntervenantMap = new HashMap<>();//contient les sous-centres chacun avec son Intervenant
                ArrayList<Souscentre> souscentresIntervenantsList = new ArrayList<>();//liste de tous les sous-centres ayant des intervenants dans le groupedexamensEnstring dans la session considérée
                ArrayList<Souscentre> souscentresIntervenantsecretsList = new ArrayList<>();//liste de tous les sous-centres ayant des intervenantsecrets dans le groupedexamensEnstring dans la session considérée                
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE ACM");
                    caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (!caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, les états de prise en charge des ACM existent déjà pour ce groupe d'examens !");
                    } else {
                        String separateur = ", ";
                        examensList = groupedexamensEnstring.split(separateur);
                        for (int i = 0; i < examensList.length; i++) {
                            for (Examen e : examens) {
                                if (e.getSigle().equals(examensList[i])) {
                                    examensSelected.add(e);
                                    break;
                                }
                            }
                        }
                        for (Session s : sessions) {
                            if (s.getAnnee() == anneeSelected) {
                                sessionSelected = s;
                                break;
                            }
                        }

                        for (Examen e : examensSelected) {
                            List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                            for (Statistique s : lesStats) {
                                if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                    int nbcand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                                    souscentreEffectifMap.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                } else {
                                    souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                                }
                                /*
                                Nbepreuveprof nbepreuveprof = metier.findAllNbepreuveprofsD1ExamenEtD1Option(e.getSigle(), s.getOption().getSigle());//s'il existe, il est unique
                                if (souscentreNbMaxEpreuveMap.containsKey(s.getSouscentre())) {
                                    int nb = souscentreNbMaxEpreuveMap.get(s.getSouscentre());
                                    souscentreNbMaxEpreuveMap.put(s.getSouscentre(), max(nb, nbepreuveprof.getNbprofpratique1()));
                                } else {
                                    souscentreNbMaxEpreuveMap.put(s.getSouscentre(), nbepreuveprof.getNbprofpratique1());
                                }
                                 */
                            }
                            List<Scentaplus> scentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, e.getSigle());
                            for (Scentaplus s : scentaplus) {
                                if (!tousLesScentaplus.contains(s.getSouscentre())) {
                                    tousLesScentaplus.add(s.getSouscentre());
                                }
                            }
                            List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                            for (Nature n : lesNats) {
                                Souscentre unSouscentre = n.getSouscentre();
                                if (!souscentreList.contains(unSouscentre)) {
                                    souscentreList.add(unSouscentre);
                                }
                            }
                            for (int j = 0; j < souscentreList.size(); j++) {
                                ArrayList<Character> phasesList = new ArrayList<>();
                                Souscentre s = souscentreList.get(j);
                                for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                    if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                        if (!phasesList.contains(n.getActivite().getInitiale())) {
                                            phasesList.add(n.getActivite().getInitiale());
                                        }
                                        //pas de break ici car on doit parcourir tous lesNats
                                    }
                                }
                                if (!souscentrePhasesMap.containsKey(s)) {
                                    souscentrePhasesMap.put(s, phasesList);
                                } else {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                    ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                    for (int k = 0; k < phasesList.size(); k++) {
                                        if (!phasesList1.contains(phasesList.get(k))) {
                                            phasesList1.add(phasesList.get(k));
                                        }
                                    }
                                    Collections.sort(phasesList1);
                                    souscentrePhasesMap.put(s, phasesList1);
                                }
                            }
                        }

                        //remplissage souscentreAsecretariatsDemultipliesList
                        secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                        if (!secretariats.isEmpty()) {
                            for (Secretariat sec : secretariats) {
                                if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                                    souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                                }
                            }
                        }

                        //remplissage secretariatEffectifMap     
                        for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                            List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreEtSession(souscentre.getNomsouscent(), anneeSelected);
                            if (!secretariatsList.isEmpty()) {
                                for (Secretariat sec : secretariatsList) {
                                    int stat = 0;
                                    List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                                    for (Statsecretariat statsec : statsecretariatsList) {
                                        if (statsec.getSecretariat().getNumsec() == sec.getNumsec() && statsec.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                            stat += statsec.getNombre();
                                        }
                                    }
                                    secretariatEffectifMap.put(sec, stat);
                                }
                            }
                        }

                        //remplissage activitesSecretariatMap
                        List<Naturesecretariat> lesNatsec = metier.findAllNaturesecretariatsD1Session(anneeSelected);
                        for (Secretariat sec : secretariatEffectifMap.keySet()) {
                            ArrayList<Character> phasesList2 = new ArrayList<>();
                            for (Naturesecretariat natsec : lesNatsec) {
                                if (sec.getNumsec() == natsec.getSecretariat().getNumsec() && sec.getSouscentre().getNomsouscent().equals(natsec.getSecretariat().getSouscentre().getNomsouscent()) && sec.getEtablissement().getAbreviation().equals(natsec.getSecretariat().getEtablissement().getAbreviation())) {
                                    if (!phasesList2.contains(natsec.getActivite().getInitiale())) {
                                        phasesList2.add(natsec.getActivite().getInitiale());
                                    }
                                }
                            }
                            Collections.sort(phasesList2);
                            activitesSecretariatMap.put(sec, phasesList2);
                        }

                        //remplissage de souscentreSecretariatsMap
                        for (Souscentre souscentre : souscentreEffectifMap.keySet()) {
                            ArrayList<Secretariat> secretariatsList = new ArrayList<>();
                            for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                if (sec.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                    if (!secretariatsList.contains(sec)) {
                                        secretariatsList.add(sec);
                                    }
                                }
                            }
                            if (!secretariatsList.isEmpty()) {
                                ordonnerSecretariatsD1souscentre(secretariatsList);
                                souscentreSecretariatsMap.put(souscentre, secretariatsList);
                            }
                        }

                        intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION AUXILIAIRE");
                        desIntervenantsecret = metier.findAllIntervenantsecretD1GroupedexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION AUXILIAIRE");

                        souscentres = metier.findAllSouscentres();
                        for (Souscentre scentre : souscentres) {
                            for (Intervenant interv : intervenants) {
                                if (!souscentresIntervenantsList.contains(scentre) && interv.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                    souscentresIntervenantsList.add(scentre);
                                }
                            }
                            for (Intervenantsecret intersec : desIntervenantsecret) {
                                if (!souscentresIntervenantsecretsList.contains(scentre) && intersec.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                    souscentresIntervenantsecretsList.add(scentre);
                                }
                            }
                        }

                        for (Souscentre scentre : souscentresIntervenantsecretsList) {
                            ArrayList<Intervenantsecret> intervenantsecretsList = new ArrayList<>();
                            for (Intervenantsecret intersec : desIntervenantsecret) {
                                if (intersec.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                    intervenantsecretsList.add(intersec);
                                }
                            }
                            //ordonnerIntervenantsecretD1souscentre(intervenantsecretsList);
                            souscentreIntervenantsecretMap.put(scentre, intervenantsecretsList);
                        }

                        for (Souscentre scentre : souscentresIntervenantsList) {
                            for (Intervenant inter : intervenants) {
                                if (inter.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                    souscentreIntervenantMap.put(scentre, inter);
                                    break;
                                }
                            }
                        }

                        //on met tous les sous-centres dans souscentreAvecACMList
                        for (Souscentre scentre : souscentresIntervenantsList) {
                            if (!souscentreAvecACMList.contains(scentre)) {
                                souscentreAvecACMList.add(scentre);
                            }
                        }
                        for (Souscentre scentre : souscentresIntervenantsecretsList) {
                            if (!souscentreAvecACMList.contains(scentre)) {
                                souscentreAvecACMList.add(scentre);
                            }
                        }

                        boolean testSicreer = false;
                        try {
                            for (Souscentre souscentre : souscentreAvecACMList) {
                                if (souscentreEffectifMap.containsKey(souscentre)) {
                                    if (souscentreIntervenantMap.containsKey(souscentre) || souscentreIntervenantsecretMap.containsKey(souscentre)) {
                                        int nbtours = 1;
                                        int net = 0;

                                        if (souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                            if (!souscentreIntervenantsecretMap.get(souscentre).isEmpty()) {
                                                nbtours = souscentreIntervenantsecretMap.get(souscentre).size();
                                            }
                                        }

                                        for (int j = 0; j < nbtours; j++) {
                                            if (souscentreIntervenantMap.containsKey(souscentre)) {
                                                determinerCoutACM(tousLesScentaplus, souscentrePhasesMap, souscentre, souscentreIntervenantMap.get(souscentre));
                                                int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                net += montantArrondi;
                                            } else {
                                                Secretariat secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(j);//secrétariat courant                 
                                                determinerCoutACMsec(tousLesScentaplus, souscentre, activitesSecretariatMap, secretariatCourant, souscentreIntervenantsecretMap.get(souscentre).get(j));
                                                int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                net += montantArrondi;
                                            }
                                        }

                                        metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                        testSicreer = true;
                                    }
                                }
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testSicreer) {
                            JOptionPane.showMessageDialog(this, "Etats de prise en charge des ACM créés avec succès pour ce groupe d'examens !");
                        }
                    }//fin else caisses
                }//fin if groupedexamen
                else {
                    JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
                }
                souscentreEffectifMap.clear();//on vide le hashmap
                souscentrePhasesMap.clear();//on vide le hashmap
                examensSelected.clear();//on vide
                tousLesScentaplus.clear();
                souscentreList.clear();
                souscentreNbMaxEpreuveMap.clear();
            } else {//de if !checkbox
                /*
                Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
                Map<Souscentre, Integer> souscentreNbMaxEpreuveMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre maximal d'épreuves professionnelles pratiques contraignantes
                List<Souscentre> tousLesScentaplus = new ArrayList<>();//liste de tous les sous-centres à plus organisant les examens sélectionnés
                Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
                List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session 
                List<Souscentre> souscentreAvecACMList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des ACM
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---") && !referenceImputationSelected.equals("---")) {
                    Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE ACM");
                    caisses = metier.findAllCaissesAdditivesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (!caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, les états additifs de prise en charge des ACM existent déjà pour ce groupe d'examens !");
                    } else {
                        String separateur = ", ";
                        examensList = groupedexamensEnstring.split(separateur);
                        for (int i = 0; i < examensList.length; i++) {
                            for (Examen e : examens) {
                                if (e.getSigle().equals(examensList[i])) {
                                    examensSelected.add(e);
                                    break;
                                }
                            }
                        }
                        for (Session s : sessions) {
                            if (s.getAnnee() == anneeSelected) {
                                sessionSelected = s;
                                break;
                            }
                        }
                        for (Imputation i : imputations) {
                            if (i.getReference().equals(referenceImputationSelected)) {
                                imputationSelected = i;
                                break;
                            }
                        }
                        for (Examen e : examensSelected) {
                            List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1SessionEt1phase(e.getSigle(), anneeSelected, phase);
                            for (Statistique s : lesStats) {
                                if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                    int nbcand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                                    souscentreEffectifMap.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                } else {
                                    souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                                }
                            }
                            List<Scentaplus> scentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, e.getSigle());
                            for (Scentaplus s : scentaplus) {
                                if (!tousLesScentaplus.contains(s.getSouscentre())) {
                                    tousLesScentaplus.add(s.getSouscentre());
                                }
                            }
                            List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                            for (Nature n : lesNats) {
                                Souscentre unSouscentre = n.getSouscentre();
                                if (!souscentreList.contains(unSouscentre)) {
                                    souscentreList.add(unSouscentre);
                                }
                            }
                            for (int j = 0; j < souscentreList.size(); j++) {
                                ArrayList<Character> phasesList = new ArrayList<>();
                                Souscentre s = souscentreList.get(j);
                                for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                    if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                        if (!phasesList.contains(n.getActivite().getInitiale())) {
                                            phasesList.add(n.getActivite().getInitiale());
                                        }
                                        //pas de break ici car on doit parcourir tous lesNats
                                    }
                                }
                                if (!souscentrePhasesMap.containsKey(s)) {
                                    souscentrePhasesMap.put(s, phasesList);
                                } else {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                    ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                    for (int k = 0; k < phasesList.size(); k++) {
                                        if (!phasesList1.contains(phasesList.get(k))) {
                                            phasesList1.add(phasesList.get(k));
                                        }
                                    }
                                    Collections.sort(phasesList1);
                                    souscentrePhasesMap.put(s, phasesList1);
                                }
                            }
                        }

                        //sous-centres ayant déjà des CM
                        intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION AUXILIAIRE");
                        for (Intervenant intervenant : intervenants) {
                            if (!souscentreAvecACMList.contains(intervenant.getSouscentre())) {
                                souscentreAvecACMList.add(intervenant.getSouscentre());
                            }
                        }
                        boolean testSicreer = false;
                        try {
                            for (Souscentre souscentre : souscentreAvecACMList) {
                                if (souscentreEffectifMap.containsKey(souscentre) || souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                    int net = 0;
                                    intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SouscentreD1SessionD1ActiviteEt1Qualite(anneeSelected, souscentre.getNomsouscent(), niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION AUXILIAIRE");
                                    for (Intervenant acm : intervenants) {
                                        determinerCoutAdditifACM(tousLesScentaplus, souscentrePhasesMap, souscentre, acm);
                                        int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                        net += montantArrondi;
                                    }
                                    metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, imputationSelected, souscentre, true));
                                    testSicreer = true;
                                }
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testSicreer) {
                            JOptionPane.showMessageDialog(this, "Etats additifs de prise en charge des ACM créés avec succès pour ce groupe d'examens !");
                        }
                    }//fin else caisses
                }//fin if groupedexamen
                else {
                    JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
                }
                souscentreEffectifMap.clear();//on vide le hashmap
                souscentrePhasesMap.clear();//on vide le hashmap
                examensSelected.clear();//on vide
                tousLesScentaplus.clear();
                souscentreList.clear();
                souscentreNbMaxEpreuveMap.clear();
                 */
            }//fin else checkbox
        }//fin radioACM
        if (!jRadioButtonACM.isSelected() && !jRadioButtonCM.isSelected()) {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Vous devez choisir ACM ou CM !");
        }
    }//GEN-LAST:event_jButtonCreerEtatsActionPerformed

    private void jButtonMettreAjourEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourEtatsActionPerformed
        infoSaisies();
        if (jRadioButtonCM.isSelected()) {
            if (!jCheckBoxAdditif.isSelected()) {
                Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
                Map<Souscentre, Integer> souscentreNbMaxEpreuveMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre maximal d'épreuves professionnelles pratiques contraignantes
                List<Souscentre> tousLesScentaplus = new ArrayList<>();//liste de tous les sous-centres à plus organisant les examens sélectionnés
                Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
                List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session 
                List<Souscentre> souscentreAvecCMList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des CM

                List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats 
                Map<Secretariat, Integer> secretariatEffectifMap = new HashMap<>();//contient l'ensemble des secrétariats d'un groupe d'examens avec chacun avec son nombre de candidats
                Map<Secretariat, ArrayList<Character>> activitesSecretariatMap = new HashMap<>();//contient l'ensemble des secretariats chacun avec la liste des iniatiales de ses activités 
                Map<Souscentre, ArrayList<Secretariat>> souscentreSecretariatsMap = new HashMap<>();//contient les sous-centres chacun avec la liste de ses secretariats le cas échéant

                Map<Souscentre, ArrayList<Intervenantsecret>> souscentreIntervenantsecretMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses Intervenantsecret
                Map<Souscentre, Intervenant> souscentreIntervenantMap = new HashMap<>();//contient les sous-centres chacun avec son Intervenant
                ArrayList<Souscentre> souscentresIntervenantsList = new ArrayList<>();//liste de tous les sous-centres ayant des intervenants dans le groupedexamensEnstring dans la session considérée
                ArrayList<Souscentre> souscentresIntervenantsecretsList = new ArrayList<>();//liste de tous les sous-centres ayant des intervenantsecrets dans le groupedexamensEnstring dans la session considérée                

                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de prise en charge des CM pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                        anneeSelected = Integer.parseInt(anneeString);
                        Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE CM");
                        caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                        //intervsecs = metier.findAllIntervsecsD1GroupedexamensD1SessionD1ActiviteD1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION");
                        if (caisses.isEmpty()) {
                            JOptionPane.showMessageDialog(this, "Erreur, aucun état de prise en charge des CM n'existe pour ce groupe d'examens !");
                        } else {
                            //on conserve quelques info de ces anciennes caisses
                            Groupe groupe = caisses.get(0).getGroupe();
                            sessionSelected = caisses.get(0).getSession();
                            //on supprime toutes les anciennes caisses du groupe d'examens ainsi que les intervsec
                            for (Caisse c : caisses) {
                                metier.supprimerCaisse(c);
                            }
                            //on va les recréer
                            String separateur = ", ";
                            examensList = groupedexamensEnstring.split(separateur);
                            for (int i = 0; i < examensList.length; i++) {
                                for (Examen e : examens) {
                                    if (e.getSigle().equals(examensList[i])) {
                                        examensSelected.add(e);
                                        break;
                                    }
                                }
                            }

                            for (Examen e : examensSelected) {
                                List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                                for (Statistique s : lesStats) {
                                    if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                        int nbcand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                                        souscentreEffectifMap.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                    } else {
                                        souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                                    }
                                    /*
                                    Nbepreuveprof nbepreuveprof = metier.findAllNbepreuveprofsD1ExamenEtD1Option(e.getSigle(), s.getOption().getSigle());//s'il existe, il est unique
                                    if (souscentreNbMaxEpreuveMap.containsKey(s.getSouscentre())) {
                                        int nb = souscentreNbMaxEpreuveMap.get(s.getSouscentre());
                                        souscentreNbMaxEpreuveMap.put(s.getSouscentre(), max(nb, nbepreuveprof.getNbprofpratique1()));
                                    } else {
                                        souscentreNbMaxEpreuveMap.put(s.getSouscentre(), nbepreuveprof.getNbprofpratique1());
                                    }
                                     */
                                }
                                List<Scentaplus> scentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, e.getSigle());
                                for (Scentaplus s : scentaplus) {
                                    if (!tousLesScentaplus.contains(s.getSouscentre())) {
                                        tousLesScentaplus.add(s.getSouscentre());
                                    }
                                }
                                List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                                for (Nature n : lesNats) {
                                    Souscentre unSouscentre = n.getSouscentre();
                                    if (!souscentreList.contains(unSouscentre)) {
                                        souscentreList.add(unSouscentre);
                                    }
                                }
                                for (int j = 0; j < souscentreList.size(); j++) {
                                    ArrayList<Character> phasesList = new ArrayList<>();
                                    Souscentre s = souscentreList.get(j);
                                    for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                        if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                            if (!phasesList.contains(n.getActivite().getInitiale())) {
                                                phasesList.add(n.getActivite().getInitiale());
                                            }
                                            //pas de break ici car on doit parcourir tous lesNats
                                        }
                                    }
                                    if (!souscentrePhasesMap.containsKey(s)) {
                                        souscentrePhasesMap.put(s, phasesList);
                                    } else {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                        ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                        for (int k = 0; k < phasesList.size(); k++) {
                                            if (!phasesList1.contains(phasesList.get(k))) {
                                                phasesList1.add(phasesList.get(k));
                                            }
                                        }
                                        Collections.sort(phasesList1);
                                        souscentrePhasesMap.put(s, phasesList1);
                                    }
                                }
                            }

                            //remplissage souscentreAsecretariatsDemultipliesList
                            secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                            if (!secretariats.isEmpty()) {
                                for (Secretariat sec : secretariats) {
                                    if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                                        souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                                    }
                                }
                            }

                            //remplissage secretariatEffectifMap     
                            for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                                List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreEtSession(souscentre.getNomsouscent(), anneeSelected);
                                if (!secretariatsList.isEmpty()) {
                                    for (Secretariat sec : secretariatsList) {
                                        int stat = 0;
                                        List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                                        for (Statsecretariat statsec : statsecretariatsList) {
                                            if (statsec.getSecretariat().getNumsec() == sec.getNumsec() && statsec.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                                stat += statsec.getNombre();
                                            }
                                        }
                                        secretariatEffectifMap.put(sec, stat);
                                    }
                                }
                            }

                            //remplissage activitesSecretariatMap
                            List<Naturesecretariat> lesNatsec = metier.findAllNaturesecretariatsD1Session(anneeSelected);
                            for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                ArrayList<Character> phasesList2 = new ArrayList<>();
                                for (Naturesecretariat natsec : lesNatsec) {
                                    if (sec.getNumsec() == natsec.getSecretariat().getNumsec() && sec.getSouscentre().getNomsouscent().equals(natsec.getSecretariat().getSouscentre().getNomsouscent()) && sec.getEtablissement().getAbreviation().equals(natsec.getSecretariat().getEtablissement().getAbreviation())) {
                                        if (!phasesList2.contains(natsec.getActivite().getInitiale())) {
                                            phasesList2.add(natsec.getActivite().getInitiale());
                                        }
                                    }
                                }
                                Collections.sort(phasesList2);
                                activitesSecretariatMap.put(sec, phasesList2);
                            }

                            //remplissage de souscentreSecretariatsMap
                            for (Souscentre souscentre : souscentreEffectifMap.keySet()) {
                                ArrayList<Secretariat> secretariatsList = new ArrayList<>();
                                for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                    if (sec.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                        if (!secretariatsList.contains(sec)) {
                                            secretariatsList.add(sec);
                                        }
                                    }
                                }
                                if (!secretariatsList.isEmpty()) {
                                    ordonnerSecretariatsD1souscentre(secretariatsList);
                                    souscentreSecretariatsMap.put(souscentre, secretariatsList);
                                }
                            }

                            intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION");
                            desIntervenantsecret = metier.findAllIntervenantsecretD1GroupedexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION");

                            souscentres = metier.findAllSouscentres();
                            for (Souscentre scentre : souscentres) {
                                for (Intervenant interv : intervenants) {
                                    if (!souscentresIntervenantsList.contains(scentre) && interv.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                        souscentresIntervenantsList.add(scentre);
                                    }
                                }
                                for (Intervenantsecret intersec : desIntervenantsecret) {
                                    if (!souscentresIntervenantsecretsList.contains(scentre) && intersec.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                        souscentresIntervenantsecretsList.add(scentre);
                                    }
                                }
                            }

                            for (Souscentre scentre : souscentresIntervenantsecretsList) {
                                ArrayList<Intervenantsecret> intervenantsecretsList = new ArrayList<>();
                                for (Intervenantsecret intersec : desIntervenantsecret) {
                                    if (intersec.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                        intervenantsecretsList.add(intersec);
                                    }
                                }
                                //ordonnerIntervenantsecretD1souscentre(intervenantsecretsList);
                                souscentreIntervenantsecretMap.put(scentre, intervenantsecretsList);
                            }

                            for (Souscentre scentre : souscentresIntervenantsList) {
                                for (Intervenant inter : intervenants) {
                                    if (inter.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                        souscentreIntervenantMap.put(scentre, inter);
                                        break;
                                    }
                                }
                            }

                            //on met tous les sous-centres dans souscentreAvecCMList
                            for (Souscentre scentre : souscentresIntervenantsList) {
                                if (!souscentreAvecCMList.contains(scentre)) {
                                    souscentreAvecCMList.add(scentre);
                                }
                            }
                            for (Souscentre scentre : souscentresIntervenantsecretsList) {
                                if (!souscentreAvecCMList.contains(scentre)) {
                                    souscentreAvecCMList.add(scentre);
                                }
                            }
                            boolean testSimodifier = false;
                            try {
                                for (Souscentre souscentre : souscentreAvecCMList) {
                                    if (souscentreEffectifMap.containsKey(souscentre)) {
                                        if (souscentreIntervenantMap.containsKey(souscentre) || souscentreIntervenantsecretMap.containsKey(souscentre)) {
                                            int nbtours = 1;
                                            int net = 0;
                                            if (souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                                if (!souscentreIntervenantsecretMap.get(souscentre).isEmpty()) {
                                                    nbtours = souscentreIntervenantsecretMap.get(souscentre).size();
                                                }
                                            }

                                            for (int j = 0; j < nbtours; j++) {
                                                if (souscentreIntervenantMap.containsKey(souscentre)) {
                                                    determinerCoutCM(tousLesScentaplus, souscentrePhasesMap, souscentre);
                                                    int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                    net += montantArrondi;
                                                } else {
                                                    Secretariat secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(j);//secrétariat courant                 
                                                    determinerCoutCMsec(tousLesScentaplus, souscentre, activitesSecretariatMap, secretariatCourant);
                                                    int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                    net += montantArrondi;
                                                }
                                            }
                                            metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                            testSimodifier = true;
                                        }
                                    }
                                }
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                            if (testSimodifier) {
                                JOptionPane.showMessageDialog(this, "Etats de prise en charge des CM mis à jour avec succès pour ce groupe d'examens !");
                            }
                        }//fin else caisses
                    }//fin if groupedexamen
                    else {
                        JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
                    }
                    souscentreEffectifMap.clear();//on vide le hashmap
                    souscentrePhasesMap.clear();//on vide le hashmap
                    examensSelected.clear();//on vide
                    tousLesScentaplus.clear();
                    souscentreList.clear();
                    souscentreNbMaxEpreuveMap.clear();
                }//fin if result
            }//fin if !checkbox
            else {//de if !checkbox: la jCheckbox a été sélectionnée
                /*
                Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
                Map<Souscentre, Integer> souscentreNbMaxEpreuveMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre maximal d'épreuves professionnelles pratiques contraignantes
                List<Souscentre> tousLesScentaplus = new ArrayList<>();//liste de tous les sous-centres à plus organisant les examens sélectionnés
                Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
                List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session 
                List<Souscentre> souscentreAvecCMList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des CM
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états additifs de prise en charge des CM pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                        anneeSelected = Integer.parseInt(anneeString);
                        Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE CM");
                        caisses = metier.findAllCaissesAdditivesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                        if (caisses.isEmpty()) {
                            JOptionPane.showMessageDialog(this, "Erreur, aucun état additif de prise en charge des CM n'existe pour ce groupe d'examens !");
                        } else {
                            //on conserve quelques info de ces anciennes caisses
                            imputationSelected = caisses.get(0).getImputation();
                            Groupe groupe = caisses.get(0).getGroupe();
                            sessionSelected = caisses.get(0).getSession();
                            //on supprime toutes les anciennes caisses du groupe d'examens ainsi que les intervsec
                            for (Caisse c : caisses) {
                                metier.supprimerCaisse(c);
                            }
                            //on va les recréer
                            String separateur = ", ";
                            examensList = groupedexamensEnstring.split(separateur);
                            for (int i = 0; i < examensList.length; i++) {
                                for (Examen e : examens) {
                                    if (e.getSigle().equals(examensList[i])) {
                                        examensSelected.add(e);
                                        break;
                                    }
                                }
                            }

                            for (Examen e : examensSelected) {
                                List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1SessionEt1phase(e.getSigle(), anneeSelected, phase);
                                for (Statistique s : lesStats) {
                                    if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                        int nbcand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                                        souscentreEffectifMap.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                    } else {
                                        souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                                    }
                                }
                                List<Scentaplus> scentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, e.getSigle());
                                for (Scentaplus s : scentaplus) {
                                    if (!tousLesScentaplus.contains(s.getSouscentre())) {
                                        tousLesScentaplus.add(s.getSouscentre());
                                    }
                                }
                                List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                                for (Nature n : lesNats) {
                                    Souscentre unSouscentre = n.getSouscentre();
                                    if (!souscentreList.contains(unSouscentre)) {
                                        souscentreList.add(unSouscentre);
                                    }
                                }
                                for (int j = 0; j < souscentreList.size(); j++) {
                                    ArrayList<Character> phasesList = new ArrayList<>();
                                    Souscentre s = souscentreList.get(j);
                                    for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                        if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                            if (!phasesList.contains(n.getActivite().getInitiale())) {
                                                phasesList.add(n.getActivite().getInitiale());
                                            }
                                            //pas de break ici car on doit parcourir tous lesNats
                                        }
                                    }
                                    if (!souscentrePhasesMap.containsKey(s)) {
                                        souscentrePhasesMap.put(s, phasesList);
                                    } else {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                        ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                        for (int k = 0; k < phasesList.size(); k++) {
                                            if (!phasesList1.contains(phasesList.get(k))) {
                                                phasesList1.add(phasesList.get(k));
                                            }
                                        }
                                        Collections.sort(phasesList1);
                                        souscentrePhasesMap.put(s, phasesList1);
                                    }
                                }
                            }

                            //sous-centres ayant déjà des CM
                            intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION");
                            for (Intervenant intervenant : intervenants) {
                                if (!souscentreAvecCMList.contains(intervenant.getSouscentre())) {
                                    souscentreAvecCMList.add(intervenant.getSouscentre());
                                }
                            }
                            boolean testSimodifier = false;
                            try {
                                for (Souscentre souscentre : souscentreAvecCMList) {
                                    if (souscentreEffectifMap.containsKey(souscentre) || souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                        int net = 0;
                                        intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SouscentreD1SessionD1ActiviteEt1Qualite(anneeSelected, souscentre.getNomsouscent(), niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION");
                                        for (Intervenant cm : intervenants) {
                                            determinerCoutAdditifCM(tousLesScentaplus, souscentrePhasesMap, souscentre);
                                            int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                            net += montantArrondi;
                                        }
                                        metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, imputationSelected, souscentre, true));
                                        testSimodifier = true;
                                    }
                                }
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                            if (testSimodifier) {
                                JOptionPane.showMessageDialog(this, "Etats additifs de prise en charge des CM mis à jour avec succès pour ce groupe d'examens !");
                            }
                        }//fin else caisses
                    }//fin if groupedexamen       
                    else {
                        JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
                    }
                    souscentreEffectifMap.clear();//on vide le hashmap
                    souscentrePhasesMap.clear();//on vide le hashmap
                    examensSelected.clear();//on vide
                    tousLesScentaplus.clear();
                    souscentreList.clear();
                    souscentreNbMaxEpreuveMap.clear();
                }//fin if result
                 */
            }//fin else checkbox
        }//fin radioCM

        if (jRadioButtonACM.isSelected()) {
            if (!jCheckBoxAdditif.isSelected()) {
                Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
                Map<Souscentre, Integer> souscentreNbMaxEpreuveMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre maximal d'épreuves professionnelles pratiques contraignantes
                List<Souscentre> tousLesScentaplus = new ArrayList<>();//liste de tous les sous-centres à plus organisant les examens sélectionnés
                Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
                List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session 
                List<Souscentre> souscentreAvecACMList = new ArrayList<>();//contient l'ensemble des sous-centres contenant les ACM

                List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats 
                Map<Secretariat, Integer> secretariatEffectifMap = new HashMap<>();//contient l'ensemble des secrétariats d'un groupe d'examens avec chacun avec son nombre de candidats
                Map<Secretariat, ArrayList<Character>> activitesSecretariatMap = new HashMap<>();//contient l'ensemble des secretariats chacun avec la liste des iniatiales de ses activités 
                Map<Souscentre, ArrayList<Secretariat>> souscentreSecretariatsMap = new HashMap<>();//contient les sous-centres chacun avec la liste de ses secretariats le cas échéant

                Map<Souscentre, ArrayList<Intervenantsecret>> souscentreIntervenantsecretMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses Intervenantsecret
                Map<Souscentre, Intervenant> souscentreIntervenantMap = new HashMap<>();//contient les sous-centres chacun avec son Intervenant
                ArrayList<Souscentre> souscentresIntervenantsList = new ArrayList<>();//liste de tous les sous-centres ayant des intervenants dans le groupedexamensEnstring dans la session considérée
                ArrayList<Souscentre> souscentresIntervenantsecretsList = new ArrayList<>();//liste de tous les sous-centres ayant des intervenantsecrets dans le groupedexamensEnstring dans la session considérée                

                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de prise en charge des ACM pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                        anneeSelected = Integer.parseInt(anneeString);
                        Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE ACM");
                        caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                        //intervsecs = metier.findAllIntervsecsD1GroupedexamensD1SessionD1ActiviteD1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION AUXILIAIRE");
                        if (caisses.isEmpty()) {
                            JOptionPane.showMessageDialog(this, "Erreur, aucun état de prise en charge des ACM n'existe pour ce groupe d'examens !");
                        } else {
                            //on conserve quelques info de ces anciennes caisses
                            Groupe groupe = caisses.get(0).getGroupe();
                            sessionSelected = caisses.get(0).getSession();
                            //on supprime toutes les anciennes caisses du groupe d'examens ainsi que les intervsec
                            for (Caisse c : caisses) {
                                metier.supprimerCaisse(c);
                            }
                            //on va les recréer
                            String separateur = ", ";
                            examensList = groupedexamensEnstring.split(separateur);
                            for (int i = 0; i < examensList.length; i++) {
                                for (Examen e : examens) {
                                    if (e.getSigle().equals(examensList[i])) {
                                        examensSelected.add(e);
                                        break;
                                    }
                                }
                            }

                            for (Examen e : examensSelected) {
                                List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                                for (Statistique s : lesStats) {
                                    if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                        int nbcand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                                        souscentreEffectifMap.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                    } else {
                                        souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                                    }
                                    /*
                                    Nbepreuveprof nbepreuveprof = metier.findAllNbepreuveprofsD1ExamenEtD1Option(e.getSigle(), s.getOption().getSigle());//s'il existe, il est unique
                                    if (souscentreNbMaxEpreuveMap.containsKey(s.getSouscentre())) {
                                        int nb = souscentreNbMaxEpreuveMap.get(s.getSouscentre());
                                        souscentreNbMaxEpreuveMap.put(s.getSouscentre(), max(nb, nbepreuveprof.getNbprofpratique1()));
                                    } else {
                                        souscentreNbMaxEpreuveMap.put(s.getSouscentre(), nbepreuveprof.getNbprofpratique1());
                                    }
                                     */
                                }
                                List<Scentaplus> scentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, e.getSigle());
                                for (Scentaplus s : scentaplus) {
                                    if (!tousLesScentaplus.contains(s.getSouscentre())) {
                                        tousLesScentaplus.add(s.getSouscentre());
                                    }
                                }
                                List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                                for (Nature n : lesNats) {
                                    Souscentre unSouscentre = n.getSouscentre();
                                    if (!souscentreList.contains(unSouscentre)) {
                                        souscentreList.add(unSouscentre);
                                    }
                                }
                                for (int j = 0; j < souscentreList.size(); j++) {
                                    ArrayList<Character> phasesList = new ArrayList<>();
                                    Souscentre s = souscentreList.get(j);
                                    for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                        if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                            if (!phasesList.contains(n.getActivite().getInitiale())) {
                                                phasesList.add(n.getActivite().getInitiale());
                                            }
                                            //pas de break ici car on doit parcourir tous lesNats
                                        }
                                    }
                                    if (!souscentrePhasesMap.containsKey(s)) {
                                        souscentrePhasesMap.put(s, phasesList);
                                    } else {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                        ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                        for (int k = 0; k < phasesList.size(); k++) {
                                            if (!phasesList1.contains(phasesList.get(k))) {
                                                phasesList1.add(phasesList.get(k));
                                            }
                                        }
                                        Collections.sort(phasesList1);
                                        souscentrePhasesMap.put(s, phasesList1);
                                    }
                                }
                            }

                            //remplissage souscentreAsecretariatsDemultipliesList
                            secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                            if (!secretariats.isEmpty()) {
                                for (Secretariat sec : secretariats) {
                                    if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                                        souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                                    }
                                }
                            }

                            //remplissage secretariatEffectifMap     
                            for (Souscentre souscentre : souscentreAsecretariatsDemultipliesList) {
                                List<Secretariat> secretariatsList = metier.findAllSecretariatsD1SouscentreEtSession(souscentre.getNomsouscent(), anneeSelected);
                                if (!secretariatsList.isEmpty()) {
                                    for (Secretariat sec : secretariatsList) {
                                        int stat = 0;
                                        List<Statsecretariat> statsecretariatsList = metier.findAllStatsecretariatsD1SouscentreA1SessionEt1Groupedexamens(souscentre.getNomsouscent(), anneeSelected, niveauSelected, typeSelected);
                                        for (Statsecretariat statsec : statsecretariatsList) {
                                            if (statsec.getSecretariat().getNumsec() == sec.getNumsec() && statsec.getSecretariat().getEtablissement().getAbreviation().equals(sec.getEtablissement().getAbreviation())) {
                                                stat += statsec.getNombre();
                                            }
                                        }
                                        secretariatEffectifMap.put(sec, stat);
                                    }
                                }
                            }

                            //remplissage activitesSecretariatMap
                            List<Naturesecretariat> lesNatsec = metier.findAllNaturesecretariatsD1Session(anneeSelected);
                            for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                ArrayList<Character> phasesList2 = new ArrayList<>();
                                for (Naturesecretariat natsec : lesNatsec) {
                                    if (sec.getNumsec() == natsec.getSecretariat().getNumsec() && sec.getSouscentre().getNomsouscent().equals(natsec.getSecretariat().getSouscentre().getNomsouscent()) && sec.getEtablissement().getAbreviation().equals(natsec.getSecretariat().getEtablissement().getAbreviation())) {
                                        if (!phasesList2.contains(natsec.getActivite().getInitiale())) {
                                            phasesList2.add(natsec.getActivite().getInitiale());
                                        }
                                    }
                                }
                                Collections.sort(phasesList2);
                                activitesSecretariatMap.put(sec, phasesList2);
                            }

                            //remplissage de souscentreSecretariatsMap
                            for (Souscentre souscentre : souscentreEffectifMap.keySet()) {
                                ArrayList<Secretariat> secretariatsList = new ArrayList<>();
                                for (Secretariat sec : secretariatEffectifMap.keySet()) {
                                    if (sec.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                        if (!secretariatsList.contains(sec)) {
                                            secretariatsList.add(sec);
                                        }
                                    }
                                }
                                if (!secretariatsList.isEmpty()) {
                                    ordonnerSecretariatsD1souscentre(secretariatsList);
                                    souscentreSecretariatsMap.put(souscentre, secretariatsList);
                                }
                            }

                            intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION AUXILIAIRE");
                            desIntervenantsecret = metier.findAllIntervenantsecretD1GroupedexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION AUXILIAIRE");

                            souscentres = metier.findAllSouscentres();
                            for (Souscentre scentre : souscentres) {
                                for (Intervenant interv : intervenants) {
                                    if (!souscentresIntervenantsList.contains(scentre) && interv.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                        souscentresIntervenantsList.add(scentre);
                                    }
                                }
                                for (Intervenantsecret intersec : desIntervenantsecret) {
                                    if (!souscentresIntervenantsecretsList.contains(scentre) && intersec.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                        souscentresIntervenantsecretsList.add(scentre);
                                    }
                                }
                            }

                            for (Souscentre scentre : souscentresIntervenantsecretsList) {
                                ArrayList<Intervenantsecret> intervenantsecretsList = new ArrayList<>();
                                for (Intervenantsecret intersec : desIntervenantsecret) {
                                    if (intersec.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                        intervenantsecretsList.add(intersec);
                                    }
                                }
                               //ordonnerIntervenantsecretD1souscentre(intervenantsecretsList);
                                souscentreIntervenantsecretMap.put(scentre, intervenantsecretsList);
                            }

                            for (Souscentre scentre : souscentresIntervenantsList) {
                                for (Intervenant inter : intervenants) {
                                    if (inter.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                        souscentreIntervenantMap.put(scentre, inter);
                                        break;
                                    }
                                }
                            }

                            //on met tous les sous-centres dans souscentreAvecACMList
                            for (Souscentre scentre : souscentresIntervenantsList) {
                                if (!souscentreAvecACMList.contains(scentre)) {
                                    souscentreAvecACMList.add(scentre);
                                }
                            }
                            for (Souscentre scentre : souscentresIntervenantsecretsList) {
                                if (!souscentreAvecACMList.contains(scentre)) {
                                    souscentreAvecACMList.add(scentre);
                                }
                            }
                            boolean testSimodifier = false;
                            try {
                                for (Souscentre souscentre : souscentreAvecACMList) {
                                    if (souscentreEffectifMap.containsKey(souscentre)) {
                                        if (souscentreIntervenantMap.containsKey(souscentre) || souscentreIntervenantsecretMap.containsKey(souscentre)) {
                                            int nbtours = 1;
                                            int net = 0;

                                            if (souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                                if (!souscentreIntervenantsecretMap.get(souscentre).isEmpty()) {
                                                    nbtours = souscentreIntervenantsecretMap.get(souscentre).size();
                                                }
                                            }

                                            for (int j = 0; j < nbtours; j++) {
                                                if (souscentreIntervenantMap.containsKey(souscentre)) {
                                                    determinerCoutACM(tousLesScentaplus, souscentrePhasesMap, souscentre, souscentreIntervenantMap.get(souscentre));
                                                    int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                    net += montantArrondi;
                                                } else {
                                                    Secretariat secretariatCourant = souscentreSecretariatsMap.get(souscentre).get(j);//secrétariat courant                 
                                                    determinerCoutACMsec(tousLesScentaplus, souscentre, activitesSecretariatMap, secretariatCourant, souscentreIntervenantsecretMap.get(souscentre).get(j));
                                                    int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                    net += montantArrondi;
                                                }
                                            }
                                            metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                            testSimodifier = true;
                                        }
                                    }
                                }
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                            if (testSimodifier) {
                                JOptionPane.showMessageDialog(this, "Etats de prise en charge des ACM mis à jour avec succès pour ce groupe d'examens !");
                            }
                        }//fin else caisses
                    }//fin if groupedexamen
                    else {
                        JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
                    }
                    souscentreEffectifMap.clear();//on vide le hashmap
                    souscentrePhasesMap.clear();//on vide le hashmap
                    examensSelected.clear();//on vide
                    tousLesScentaplus.clear();
                    souscentreList.clear();
                    souscentreNbMaxEpreuveMap.clear();
                }//fin if rsult
            } else {//de if !checkbox: la jChecbox a été sélectionnée
                /*
                Map<Souscentre, Integer> souscentreEffectifMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre de candidats
                Map<Souscentre, Integer> souscentreNbMaxEpreuveMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre maximal d'épreuves professionnelles pratiques contraignantes
                List<Souscentre> tousLesScentaplus = new ArrayList<>();//liste de tous les sous-centres à plus organisant les examens sélectionnés
                Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses activités
                List<Souscentre> souscentreList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session 
                List<Souscentre> souscentreAvecACMList = new ArrayList<>();//contient l'ensemble des sous-centres contenant les ACM
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états additifs de prise en charge des ACM pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                        anneeSelected = Integer.parseInt(anneeString);
                        Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE ACM");
                        caisses = metier.findAllCaissesAdditivesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                        //intervsecs = metier.findAllIntervsecsD1GroupedexamensD1SessionD1ActiviteD1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION AUXILIAIRE");
                        if (caisses.isEmpty()) {
                            JOptionPane.showMessageDialog(this, "Erreur, aucun état additif de prise en charge des ACM n'existe pour ce groupe d'examens !");
                        } else {
                            //on conserve quelques info de ces anciennes caisses
                            imputationSelected = caisses.get(0).getImputation();
                            Groupe groupe = caisses.get(0).getGroupe();
                            sessionSelected = caisses.get(0).getSession();
                            //on supprime toutes les anciennes caisses du groupe d'examens ainsi que les intervsec
                            for (Caisse c : caisses) {
                                metier.supprimerCaisse(c);
                            }
                            //on va les recréer
                            String separateur = ", ";
                            examensList = groupedexamensEnstring.split(separateur);
                            for (int i = 0; i < examensList.length; i++) {
                                for (Examen e : examens) {
                                    if (e.getSigle().equals(examensList[i])) {
                                        examensSelected.add(e);
                                        break;
                                    }
                                }
                            }

                            for (Examen e : examensSelected) {
                                List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1SessionEt1phase(e.getSigle(), anneeSelected, phase);
                                for (Statistique s : lesStats) {
                                    if (souscentreEffectifMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap
                                        int nbcand = souscentreEffectifMap.get(s.getSouscentre());//on récupère son nombre de candidats
                                        souscentreEffectifMap.put(s.getSouscentre(), nbcand + s.getNombre());//on lui ajoute le nombre de candidats de s
                                    } else {
                                        souscentreEffectifMap.put(s.getSouscentre(), s.getNombre());
                                    }
                                }
                                List<Scentaplus> scentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, e.getSigle());
                                for (Scentaplus s : scentaplus) {
                                    if (!tousLesScentaplus.contains(s.getSouscentre())) {
                                        tousLesScentaplus.add(s.getSouscentre());
                                    }
                                }
                                List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                                for (Nature n : lesNats) {
                                    Souscentre unSouscentre = n.getSouscentre();
                                    if (!souscentreList.contains(unSouscentre)) {
                                        souscentreList.add(unSouscentre);
                                    }
                                }
                                for (int j = 0; j < souscentreList.size(); j++) {
                                    ArrayList<Character> phasesList = new ArrayList<>();
                                    Souscentre s = souscentreList.get(j);
                                    for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                        if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                            if (!phasesList.contains(n.getActivite().getInitiale())) {
                                                phasesList.add(n.getActivite().getInitiale());
                                            }
                                            //pas de break ici car on doit parcourir tous lesNats
                                        }
                                    }
                                    if (!souscentrePhasesMap.containsKey(s)) {
                                        souscentrePhasesMap.put(s, phasesList);
                                    } else {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante
                                        ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                        for (int k = 0; k < phasesList.size(); k++) {
                                            if (!phasesList1.contains(phasesList.get(k))) {
                                                phasesList1.add(phasesList.get(k));
                                            }
                                        }
                                        Collections.sort(phasesList1);
                                        souscentrePhasesMap.put(s, phasesList1);
                                    }
                                }
                            }

                            //sous-centres ayant déjà des CM
                            intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION");
                            for (Intervenant intervenant : intervenants) {
                                if (!souscentreAvecACMList.contains(intervenant.getSouscentre())) {
                                    souscentreAvecACMList.add(intervenant.getSouscentre());
                                }
                            }
                            boolean testSimodifier = false;
                            try {
                                for (Souscentre souscentre : souscentreAvecACMList) {
                                    if (souscentreEffectifMap.containsKey(souscentre) || souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                        int net = 0;
                                        intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SouscentreD1SessionD1ActiviteEt1Qualite(anneeSelected, souscentre.getNomsouscent(), niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION AUXILIAIRE");
                                        for (Intervenant acm : intervenants) {
                                            determinerCoutAdditifACM(tousLesScentaplus, souscentrePhasesMap, souscentre, acm);
                                            int montantArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                            net += montantArrondi;
                                        }
                                        metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, imputationSelected, souscentre, true));
                                        testSimodifier = true;
                                    }
                                }
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                            if (testSimodifier) {
                                JOptionPane.showMessageDialog(this, "Etats additifs de prise en charge des ACM mis à jour avec succès pour ce groupe d'examens !");
                            }
                        }//fin else caisses
                    }//fin if groupedexamen
                    else {
                        JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
                    }
                    souscentreEffectifMap.clear();//on vide le hashmap
                    souscentrePhasesMap.clear();//on vide le hashmap
                    examensSelected.clear();//on vide
                    tousLesScentaplus.clear();
                    souscentreList.clear();
                    souscentreNbMaxEpreuveMap.clear();
                }//fin if result
                 */
            }//fin else checkbox
        }//fin radioACM
        if (!jRadioButtonACM.isSelected() && !jRadioButtonCM.isSelected()) {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Vous devez choisir ACM ou CM !");
        }
    }//GEN-LAST:event_jButtonMettreAjourEtatsActionPerformed

    private void jButtonSupprimerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEtatsActionPerformed
        infoSaisies();
        if (jRadioButtonCM.isSelected()) {
            if (!jCheckBoxAdditif.isSelected()) {
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de prise en charge de CM pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                        anneeSelected = Integer.parseInt(anneeString);
                        Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE CM");
                        caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                        if (caisses.isEmpty()) {
                            JOptionPane.showMessageDialog(this, "Erreur, aucun état de prise en charge de CM n'existe pour ce groupe d'examens !");
                        } else {
                            try {
                                for (Caisse caisse : caisses) {
                                    metier.supprimerCaisse(caisse);
                                }
                                JOptionPane.showMessageDialog(this, "Etats de prise en charge de CM supprimés avec succès pour ce groupe d'examens !");
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                        }//fin else caisses
                    }//fin if groupedexamen
                }//fin if result
            }//fin if checkbox
            else {
                /*
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états additifs de prise en charge de CM pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                        anneeSelected = Integer.parseInt(anneeString);
                        Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE CM");
                        caisses = metier.findAllCaissesAdditivesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                        if (caisses.isEmpty()) {
                            JOptionPane.showMessageDialog(this, "Erreur, aucun état additif de prise en charge de CM n'existe pour ce groupe d'examens !");
                        } else {
                            try {
                                for (Caisse caisse : caisses) {
                                    metier.supprimerCaisse(caisse);
                                }
                                JOptionPane.showMessageDialog(this, "Etats additifs de prise en charge de CM supprimés avec succès pour ce groupe d'examens !");
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                        }//fin else caisses
                    }//fin if groupexamen
                }//fin if result
                 */
            }//fin else checkbox
        }//fin if radioCM
        if (jRadioButtonACM.isSelected()) {
            if (!jCheckBoxAdditif.isSelected()) {
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de prise en charge des ACM pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                        anneeSelected = Integer.parseInt(anneeString);
                        Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE ACM");
                        caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                        if (caisses.isEmpty()) {
                            JOptionPane.showMessageDialog(this, "Erreur, aucun état de prise en charge des ACM n'existe pour ce groupe d'examens !");
                        } else {//de if caisses
                            try {
                                for (Caisse caisse : caisses) {
                                    metier.supprimerCaisse(caisse);
                                }
                                JOptionPane.showMessageDialog(this, "Etats de prise en charge des ACM supprimés avec succès pour ce groupe d'examens !");
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                        }//fin else caisses
                    }//fin if groupedexamen
                }//fin if result
            } else {//de if checkbox: la checkbox a été sélectionnée
                /*
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états additifs de prise en charge des ACM pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                        anneeSelected = Integer.parseInt(anneeString);
                        Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE ACM");
                        caisses = metier.findAllCaissesAdditivesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                        if (caisses.isEmpty()) {
                            JOptionPane.showMessageDialog(this, "Erreur, aucun état additif de prise en charge des ACM n'existe pour ce groupe d'examens !");
                        } else {
                            try {
                                for (Caisse caisse : caisses) {
                                    metier.supprimerCaisse(caisse);
                                }
                                JOptionPane.showMessageDialog(this, "Etats additifs de prise en charge des ACM supprimés avec succès pour ce groupe d'examens !");
                            } catch (ObcbudgetException e) {
                                JOptionPane.showMessageDialog(this, e.getMessage());
                            }
                        }//fin else caisses
                    }//fin grpexamen
                }//fin if result
                 */
            }//fin else checkbox
        }//fin if radioACM
        if (!jRadioButtonACM.isSelected() && !jRadioButtonCM.isSelected()) {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Vous devez choisir ACM ou CM !");
        }
    }//GEN-LAST:event_jButtonSupprimerEtatsActionPerformed

    private void jComboBoxDepartementListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementListeActionPerformed
        remplirArrondissementListeCombobox();
        remplirPersonnelsDuDepartementCombobox();
    }//GEN-LAST:event_jComboBoxDepartementListeActionPerformed

    private void jComboBoxArrondissementListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementListeActionPerformed
        remplirPersonnelsDelArrondissementCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementListeActionPerformed

    private void jComboBoxNomsEtPrenomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNomsEtPrenomsActionPerformed
        nomsEtPrenomsSelected = (String) jComboBoxNomsEtPrenoms.getSelectedItem();
        if (!nomsEtPrenomsSelected.equals("---")) {
            for (Personnel p : personnels) {
                if ((p.getNompers() + " " + p.getPrenom()).equals(nomsEtPrenomsSelected)) {
                    personnelSelected = p;
                    break;
                }
            }
        }
    }//GEN-LAST:event_jComboBoxNomsEtPrenomsActionPerformed

    private void jComboBoxRegionListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionListeActionPerformed
        remplirDepartementListeCombobox();
    }//GEN-LAST:event_jComboBoxRegionListeActionPerformed

    private void jButtonSupprimerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerPersonnelActionPerformed
        infoSaisies();
        if (jRadioButtonCM.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nomsEtPrenomsSelected.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre et un personnel !");
            } else {
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer ce chargé de mission du sous-centre [" + nomSouscentreSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats 
                    anneeSelected = Integer.parseInt(anneeString);
                    souscentres = metier.findAllSouscentres();
                    for (Souscentre souscentre : souscentres) {
                        if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                            souscentreSelected = souscentre;
                            break;
                        }
                    }
                    //remplissage souscentreAsecretariatsDemultipliesList
                    secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                    if (!secretariats.isEmpty()) {
                        for (Secretariat sec : secretariats) {
                            if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                                souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                            }
                        }
                    }

                    if (souscentreAsecretariatsDemultipliesList.contains(souscentreSelected)) {//sous-centre à plusieurs secrétariats
                        if (numsecString.equals("---")) {
                            JOptionPane.showMessageDialog(this, "Veuillez sélectionner un numéro de secrétariat svp.");
                        } else {//la suppression se fait dans un secretariat déterminé lors du clic sur numsecCombobox
                            try {
                                Intervenantsecret cm = metier.findIntervenantsecretByNomEtPrenomD1GroupeDexamensD1SessionD1SecretariatD1ActiviteEt1Qualite(personnelSelected.getNompers(), personnelSelected.getPrenom(), anneeSelected, nomSouscentreSelected, numsecSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION");
                                metier.supprimerIntervenantsecret(cm);
                                JOptionPane.showMessageDialog(this, "Chargé de mission supprimé avec succès !");
                            } catch (ObcbudgetException ex) {
                                JOptionPane.showMessageDialog(this, "Impossible de supprimer le chargé de mission au secretariat " + secretariatSelected.getNumsec() + " du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                            }
                        }
                    } else {//sous-centre sans secretariats démultipliés

                        try {
                            Intervenant cm = metier.findIntervenantByNomEtPrenomD1GroupeDexamensD1SessionD1SouscentreD1ActiviteEt1Qualite(personnelSelected.getNompers(), personnelSelected.getPrenom(), anneeSelected, nomSouscentreSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION");
                            metier.supprimerIntervenant(cm);
                            JOptionPane.showMessageDialog(this, "Chargé de mission supprimé avec succès !");
                        } catch (ObcbudgetException ex) {
                            JOptionPane.showMessageDialog(this, "Impossible de supprimer ce chargé de mission du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                        }
                    }
                }
            }
        }
        if (jRadioButtonACM.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nomsEtPrenomsSelected.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre et un personnel !");
            } else {
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer ce chargé de mission auxiliaire du sous-centre [" + nomSouscentreSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats
                    anneeSelected = Integer.parseInt(anneeString);
                    for (Souscentre souscentre : souscentres) {
                        if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                            souscentreSelected = souscentre;
                            break;
                        }
                    }
                    //remplissage souscentreAsecretariatsDemultipliesList
                    secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                    if (!secretariats.isEmpty()) {
                        for (Secretariat sec : secretariats) {
                            if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                                souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                            }
                        }
                    }

                    if (souscentreAsecretariatsDemultipliesList.contains(souscentreSelected)) {//sous-centre à plusieurs secrétariats
                        if (numsecString.equals("---")) {
                            JOptionPane.showMessageDialog(this, "Veuillez sélectionner un numéro de secrétariat svp.");
                        } else {//la suppression se fait dans un secretariat déterminé lors du clic sur numsecCombobox
                            try {
                                Intervenantsecret acm = metier.findIntervenantsecretByNomEtPrenomD1GroupeDexamensD1SessionD1SecretariatD1ActiviteEt1Qualite(personnelSelected.getNompers(), personnelSelected.getPrenom(), anneeSelected, nomSouscentreSelected, numsecSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION AUXILIAIRE");
                                metier.supprimerIntervenantsecret(acm);
                                JOptionPane.showMessageDialog(this, "Chargé de mission auxiliaire supprimé avec succès !");
                            } catch (ObcbudgetException ex) {
                                JOptionPane.showMessageDialog(this, "Impossible de supprimer le chargé de mission auxiliaire du secretariat " + secretariatSelected.getNumsec() + " du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                            }
                        }
                    } else {//sous-centre sans secretariats démultipliés
                        try {
                            Intervenant acm = metier.findIntervenantByNomEtPrenomD1GroupeDexamensD1SessionD1SouscentreD1ActiviteEt1Qualite(personnelSelected.getNompers(), personnelSelected.getPrenom(), anneeSelected, nomSouscentreSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION AUXILIAIRE");
                            metier.supprimerIntervenant(acm);
                            JOptionPane.showMessageDialog(this, "Chargé de mission auxiliaire supprimé avec succès !");
                        } catch (ObcbudgetException ex) {
                            JOptionPane.showMessageDialog(this, "Impossible de supprimer ce chargé de mission auxiliairedu sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                        }
                    }
                }
            }
        }
        if (!jRadioButtonACM.isSelected() && !jRadioButtonCM.isSelected()) {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Vous devez choisir ACM ou CM !");
        }
    }//GEN-LAST:event_jButtonSupprimerPersonnelActionPerformed

    private void jButtonAnnulerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerPersonnelActionPerformed
        jComboBoxRegionListe.setSelectedIndex(0);
        jComboBoxDepartementListe.setSelectedIndex(0);
        jComboBoxArrondissementListe.setSelectedIndex(0);
        jComboBoxNomsEtPrenoms.setSelectedIndex(0);
        jComboBoxTypeResidence.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerPersonnelActionPerformed

    private void jButtonCreerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerPersonnelActionPerformed
        infoSaisies();
        if (jRadioButtonCM.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nomsEtPrenomsSelected.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre et un personnel !");
            } else {
                List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats 
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                //remplissage souscentreAsecretariatsDemultipliesList
                secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                if (!secretariats.isEmpty()) {
                    for (Secretariat sec : secretariats) {
                        if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                            souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                        }
                    }
                }
                souscentres = metier.findAllSouscentres();
                for (Souscentre souscentre : souscentres) {
                    if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                        souscentreSelected = souscentre;
                        break;
                    }
                }

                if (souscentreAsecretariatsDemultipliesList.contains(souscentreSelected)) {//sous-centre à plusieurs secrétariats
                    if (numsecString.equals("---")) {
                        JOptionPane.showMessageDialog(this, "Veuillez sélectionner un numéro de secrétariat svp.");
                    } else {//l'affectation se fait dans secretariatSelected déterminé lors du clic sur numsecCombobox
                        try {
                            //personnelSelected est déterminé au moment du clic sur la jcombox
                            Activite activite = metier.findActiviteByNom("ECRIT");
                            Qualite qualite = metier.findQualiteByTitre("CHARGÉ DE MISSION");
                            boolean resident = false;
                            metier.creerIntervenantsecret(new Intervenantsecret(groupe, sessionSelected, personnelSelected, secretariatSelected, activite, qualite, resident));
                            JOptionPane.showMessageDialog(this, "Chargé de mission créé avec succès !");
                        } catch (ObcbudgetException ex) {
                            JOptionPane.showMessageDialog(this, "Impossible de créer le chargé de mission au secretariat " + secretariatSelected.getNumsec() + " du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                        }
                    }
                } else {//sous-centre sans secretariats démultipliés
                    try {
                        //personnelSelected est déterminé au moment du clic sur la jcombox
                        Activite activite = metier.findActiviteByNom("ECRIT");
                        Qualite qualite = metier.findQualiteByTitre("CHARGÉ DE MISSION");
                        boolean resident = false;
                        metier.creerIntervenant(new Intervenant(groupe, sessionSelected, personnelSelected, souscentreSelected, activite, qualite, resident));
                        JOptionPane.showMessageDialog(this, "Chargé de mission créé avec succès !");
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de créer le chargé de mission pour le sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                    }
                }
            }
        }
        if (jRadioButtonACM.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nomsEtPrenomsSelected.equals("---") || typeResidenceSelected.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre, un personnel et un type de résidence !");
            } else {
                List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats 
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                //remplissage souscentreAsecretariatsDemultipliesList
                secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                if (!secretariats.isEmpty()) {
                    for (Secretariat sec : secretariats) {
                        if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                            souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                        }
                    }
                }

                for (Souscentre souscentre : souscentres) {
                    if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                        souscentreSelected = souscentre;
                        break;
                    }
                }

                if (souscentreAsecretariatsDemultipliesList.contains(souscentreSelected)) {//sous-centre à plusieurs secrétariats
                    if (numsecString.equals("---")) {
                        JOptionPane.showMessageDialog(this, "Veuillez sélectionner un numéro de secrétariat svp.");
                    } else {//l'affectation se fait dans secretariatSelected déterminé lors du clic sur numsecCombobox
                        boolean resident = false;
                        try {
                            //personnelSelected est déterminé au moment du clic sur la jcombox
                            Activite activite = metier.findActiviteByNom("ECRIT");
                            Qualite qualite = metier.findQualiteByTitre("CHARGÉ DE MISSION AUXILIAIRE");
                            if (typeResidenceSelected.equals("RESIDENT")) {
                                resident = true;
                            }
                            metier.creerIntervenantsecret(new Intervenantsecret(groupe, sessionSelected, personnelSelected, secretariatSelected, activite, qualite, resident));
                            JOptionPane.showMessageDialog(this, "Chargé de mission auxiliaire créé avec succès !");
                        } catch (ObcbudgetException ex) {
                            JOptionPane.showMessageDialog(this, "Impossible de créer le chargé de mission auxiliaire au secretariat " + secretariatSelected.getNumsec() + " du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                        }
                    }
                } else {//sous-centre sans secretariats démultipliés
                    boolean resident = false;
                    try {
                        //personnelSelected est déterminé au moment du clic sur la jcombox
                        Activite activite = metier.findActiviteByNom("ECRIT");
                        Qualite qualite = metier.findQualiteByTitre("CHARGÉ DE MISSION AUXILIAIRE");
                        if (typeResidenceSelected.equals("RESIDENT")) {
                            resident = true;
                        }
                        metier.creerIntervenant(new Intervenant(groupe, sessionSelected, personnelSelected, souscentreSelected, activite, qualite, resident));
                        JOptionPane.showMessageDialog(this, "Chargé de mission auxiliaire créé avec succès !");
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de créer le chargé de mission auxiliaire pour le sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                    }
                }
            }
        }
        if (!jRadioButtonACM.isSelected() && !jRadioButtonCM.isSelected()) {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Vous devez choisir ACM ou CM !");
        }
    }//GEN-LAST:event_jButtonCreerPersonnelActionPerformed

    private void jButtonListerPersonnelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerPersonnelsActionPerformed
        infoSaisies();
        if (jRadioButtonCM.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens et une session !");
            } else {
                Map<Souscentre, ArrayList<Intervenantsecret>> souscentreIntervenantsecretMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses Intervenantsecret
                Map<Souscentre, Intervenant> souscentreIntervenantMap = new HashMap<>();//contient les sous-centres chacun avec son Intervenant
                ArrayList<Souscentre> souscentresIntervenantsList = new ArrayList<>();//liste de tous les sous-centres ayant des intervenants dans le groupedexamensEnstring dans la session considérée
                ArrayList<Souscentre> souscentresIntervenantsecretsList = new ArrayList<>();//liste de tous les sous-centres ayant des intervenantsecrets dans le groupedexamensEnstring dans la session considérée
                ArrayList<Souscentre> souscentresList = new ArrayList<>();//liste de tous les sous-centres ayant des intervenants et intervenantsecrets dans le groupedexamensEnstring dans la session considérée
                List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats

                anneeSelected = Integer.parseInt(anneeString);

                intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION");
                desIntervenantsecret = metier.findAllIntervenantsecretD1GroupedexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION");

                souscentres = metier.findAllSouscentres();
                for (Souscentre scentre : souscentres) {
                    for (Intervenant interv : intervenants) {
                        if (!souscentresIntervenantsList.contains(scentre) && interv.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                            souscentresIntervenantsList.add(scentre);
                        }
                    }
                    for (Intervenantsecret intersec : desIntervenantsecret) {
                        if (!souscentresIntervenantsecretsList.contains(scentre) && intersec.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                            souscentresIntervenantsecretsList.add(scentre);
                        }
                    }
                }

                for (Souscentre scentre : souscentresIntervenantsecretsList) {
                    ArrayList<Intervenantsecret> intervenantsecretsList = new ArrayList<>();
                    for (Intervenantsecret intersec : desIntervenantsecret) {
                        if (intersec.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                            intervenantsecretsList.add(intersec);
                        }
                    }
                    souscentreIntervenantsecretMap.put(scentre, intervenantsecretsList);
                }

                for (Souscentre scentre : souscentresIntervenantsList) {
                    for (Intervenant inter : intervenants) {
                        if (inter.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                            souscentreIntervenantMap.put(scentre, inter);
                            break;
                        }
                    }
                }

                //on met tous les sous-centres dans souscentresList
                for (Souscentre scentre : souscentresIntervenantsList) {
                    if (!souscentresList.contains(scentre)) {
                        souscentresList.add(scentre);
                    }
                }

                for (Souscentre scentre : souscentresIntervenantsecretsList) {
                    if (!souscentresList.contains(scentre)) {
                        souscentresList.add(scentre);
                    }
                }
                secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                if (!secretariats.isEmpty()) {
                    for (Secretariat sec : secretariats) {
                        if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                            souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                        }
                    }
                }

                if (!intervenants.isEmpty()) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                        for (Region region : regions) {
                            int num = 1;
                            for (Souscentre souscentre : souscentresList) {
                                if (region.getNomreg().equals(souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    /*
                                    ArrayList<Secretariat> secretariatsDuSouscentre = new ArrayList<>();
                                    for (Secretariat secret : secretariats) {
                                        if (secret.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                            secretariatsDuSouscentre.add(secret);
                                        }
                                    }
                                     */
                                    int nbtours = 1;
                                    if (souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                        if (!souscentreIntervenantsecretMap.get(souscentre).isEmpty()) {
                                            nbtours = souscentreIntervenantsecretMap.get(souscentre).size();
                                        }
                                    }

                                    String scentreAffiche = "";
                                    String pers = "";

                                    for (int j = 0; j < nbtours; j++) {
                                        if (souscentreIntervenantMap.containsKey(souscentre)) {
                                            scentreAffiche = souscentre.getNomsouscent();
                                            pers = souscentreIntervenantMap.get(souscentre).getPersonnel().getNompers() + " " + souscentreIntervenantMap.get(souscentre).getPersonnel().getPrenom();
                                        } else {
                                            if (souscentreIntervenantsecretMap.containsKey(souscentre)) {
                                                if (souscentreIntervenantsecretMap.get(souscentre).get(j).getSecretariat().getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                                                    scentreAffiche = souscentreIntervenantsecretMap.get(souscentre).get(j).getSecretariat().getEtablissement().getAbreviation() + " (Sec. " + souscentreIntervenantsecretMap.get(souscentre).get(j).getSecretariat().getNumsec() + ")";
                                                } else {
                                                    scentreAffiche = souscentreIntervenantsecretMap.get(souscentre).get(j).getSecretariat().getEtablissement().getAbreviation() + " (Sec. " + souscentreIntervenantsecretMap.get(souscentre).get(j).getSecretariat().getNumsec() + " du sous-centre " + souscentre.getEtablissement().getAbreviation() + ")";
                                                }
                                                pers = souscentreIntervenantsecretMap.get(souscentre).get(j).getPersonnel().getNompers() + " " + souscentreIntervenantsecretMap.get(souscentre).get(j).getPersonnel().getPrenom();
                                            }
                                        }
                                        Map<String, Object> row = new HashMap<>();
                                        row.put("examen", groupedexamensEnstring);
                                        row.put("session", anneeSelected);
                                        row.put("region", region.getNomreg());
                                        row.put("num", num++);
                                        row.put("souscentre", scentreAffiche);
                                        row.put("cm", pers);
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeChargesMissionReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
                intervenants.clear();
            }
        }
        if (jRadioButtonACM.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens et une session !");
            } else {
                Map<Souscentre, ArrayList<Intervenantsecret>> souscentreIntervenantsecretMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses Intervenantsecret
                Map<Souscentre, Intervenant> souscentreIntervenantMap = new HashMap<>();//contient les sous-centres chacun avec son Intervenant
                ArrayList<Souscentre> souscentresIntervenantsList = new ArrayList<>();//liste de tous les sous-centres ayant des intervenants dans le groupedexamensEnstring dans la session considérée
                ArrayList<Souscentre> souscentresIntervenantsecretsList = new ArrayList<>();//liste de tous les sous-centres ayant des intervenantsecrets dans le groupedexamensEnstring dans la session considérée
                ArrayList<Souscentre> souscentresList = new ArrayList<>();//liste de tous les sous-centres ayant des intervenants et intervenantsecrets dans le groupedexamensEnstring dans la session considérée
                List<Souscentre> souscentreAsecretariatsDemultipliesList = new ArrayList<>();//contient l'ensemble des sous-centres avec plusieurs secretariats

                anneeSelected = Integer.parseInt(anneeString);
                intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION AUXILIAIRE");
                desIntervenantsecret = metier.findAllIntervenantsecretD1GroupedexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "CHARGÉ DE MISSION AUXILIAIRE");

                souscentres = metier.findAllSouscentres();
                for (Souscentre scentre : souscentres) {
                    for (Intervenant interv : intervenants) {
                        if (!souscentresIntervenantsList.contains(scentre) && interv.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                            souscentresIntervenantsList.add(scentre);
                        }
                    }
                    for (Intervenantsecret intersec : desIntervenantsecret) {
                        if (!souscentresIntervenantsecretsList.contains(scentre) && intersec.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                            souscentresIntervenantsecretsList.add(scentre);
                        }
                    }
                }

                for (Souscentre scentre : souscentresIntervenantsecretsList) {
                    ArrayList<Intervenantsecret> intervenantsecretsList = new ArrayList<>();
                    for (Intervenantsecret intersec : desIntervenantsecret) {
                        if (intersec.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                            intervenantsecretsList.add(intersec);
                        }
                    }
                    souscentreIntervenantsecretMap.put(scentre, intervenantsecretsList);
                }

                for (Souscentre scentre : souscentres) {
                    for (Intervenant interv : intervenants) {
                        if (!souscentresIntervenantsList.contains(scentre) && interv.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                            souscentresIntervenantsList.add(scentre);
                        }
                    }
                    for (Intervenantsecret intersec : desIntervenantsecret) {
                        if (!souscentresIntervenantsecretsList.contains(scentre) && intersec.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                            souscentresIntervenantsecretsList.add(scentre);
                        }
                    }
                }

                for (Souscentre scentre : souscentresIntervenantsecretsList) {
                    ArrayList<Intervenantsecret> intervenantsecretsList = new ArrayList<>();
                    for (Intervenantsecret intersec : desIntervenantsecret) {
                        if (intersec.getSecretariat().getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                            intervenantsecretsList.add(intersec);
                        }
                    }
                    souscentreIntervenantsecretMap.put(scentre, intervenantsecretsList);
                }

                for (Souscentre scentre : souscentresIntervenantsList) {
                    for (Intervenant inter : intervenants) {
                        if (inter.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                            souscentreIntervenantMap.put(scentre, inter);
                            break;
                        }
                    }
                }

                //on met tous les sous-centres dans souscentresList
                for (Souscentre scentre : souscentresIntervenantsList) {
                    if (!souscentresList.contains(scentre)) {
                        souscentresList.add(scentre);
                    }
                }
                for (Souscentre scentre : souscentresIntervenantsecretsList) {
                    if (!souscentresList.contains(scentre)) {
                        souscentresList.add(scentre);
                    }
                }
                secretariats = metier.findAllSecretariatsD1Session(anneeSelected);
                if (!secretariats.isEmpty()) {
                    for (Secretariat sec : secretariats) {
                        if (!souscentreAsecretariatsDemultipliesList.contains(sec.getSouscentre())) {
                            souscentreAsecretariatsDemultipliesList.add(sec.getSouscentre());
                        }
                    }
                }

                if (!intervenants.isEmpty()) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                        for (Region region : regions) {
                            int num = 1;
                            for (Souscentre souscentre : souscentresList) {
                                if (region.getNomreg().equals(souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    /*
                                    ArrayList<Secretariat> secretariatsDuSouscentre = new ArrayList<>();
                                    for (Secretariat secret : secretariats) {
                                        if (secret.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                            secretariatsDuSouscentre.add(secret);
                                        }
                                    }
                                     */
                                    int nbsec = 0;
                                    if (souscentreAsecretariatsDemultipliesList.contains(souscentre)) {
                                        if (!souscentreIntervenantsecretMap.get(souscentre).isEmpty()) {
                                            nbsec = souscentreIntervenantsecretMap.get(souscentre).size();
                                        }
                                    }
                                    int nbtours = nbsec;
                                    if (nbsec == 0) {
                                        nbtours = 1;
                                    }
                                    String scentreAffiche = "";
                                    String pers = "";
                                    String residentOuPeripherique = "";

                                    for (int j = 0; j < nbtours; j++) {
                                        if (souscentreIntervenantMap.containsKey(souscentre)) {
                                            scentreAffiche = souscentre.getNomsouscent();
                                            pers = souscentreIntervenantMap.get(souscentre).getPersonnel().getNompers() + " " + souscentreIntervenantMap.get(souscentre).getPersonnel().getPrenom();
                                            if (souscentreIntervenantMap.get(souscentre).getResident()) {
                                                residentOuPeripherique = "Résident";
                                            } else {
                                                residentOuPeripherique = "Périphérique";
                                            }
                                        } else {
                                            if (souscentreIntervenantsecretMap.containsKey(souscentre)) {
                                                if (souscentreIntervenantsecretMap.get(souscentre).get(j).getSecretariat().getEtablissement().getAbreviation().equals(souscentre.getEtablissement().getAbreviation())) {
                                                    scentreAffiche = souscentreIntervenantsecretMap.get(souscentre).get(j).getSecretariat().getEtablissement().getAbreviation() + " (Sec. " + souscentreIntervenantsecretMap.get(souscentre).get(j).getSecretariat().getNumsec() + ")";
                                                } else {
                                                    scentreAffiche = souscentreIntervenantsecretMap.get(souscentre).get(j).getSecretariat().getEtablissement().getAbreviation() + " (Sec. " + souscentreIntervenantsecretMap.get(souscentre).get(j).getSecretariat().getNumsec() + " du sous-centre " + souscentre.getEtablissement().getAbreviation() + ")";
                                                }
                                                pers = souscentreIntervenantsecretMap.get(souscentre).get(j).getPersonnel().getNompers() + " " + souscentreIntervenantsecretMap.get(souscentre).get(j).getPersonnel().getPrenom();
                                                if (souscentreIntervenantsecretMap.get(souscentre).get(j).getResident()) {
                                                    residentOuPeripherique = "Résident";
                                                } else {
                                                    residentOuPeripherique = "Périphérique";
                                                }
                                            }
                                        }

                                        Map<String, Object> row = new HashMap<>();
                                        row.put("examen", groupedexamensEnstring);
                                        row.put("session", anneeSelected);
                                        row.put("region", region.getNomreg());
                                        row.put("num", num++);
                                        row.put("souscentre", scentreAffiche);
                                        row.put("acm", pers);
                                        row.put("resident", residentOuPeripherique);
                                        datasource.add(row);
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeAuxiliairesReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
            }
            intervenants.clear();
        }
        if (!jRadioButtonACM.isSelected() && !jRadioButtonCM.isSelected()) {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Vous devez choisir ACM ou CM !");
        }
    }//GEN-LAST:event_jButtonListerPersonnelsActionPerformed

    private void jButtonAnnulerChoixExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixExamenActionPerformed
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        jComboBoxSession.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixExamenActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jButtonAnnulerChoixACMouCM1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixACMouCM1ActionPerformed
        buttonGroup1.clearSelection();
    }//GEN-LAST:event_jButtonAnnulerChoixACMouCM1ActionPerformed

    private void jRadioButtonCMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonCMActionPerformed
        jComboBoxTypeResidence.setEnabled(false);
        jPanelRésident.setEnabled(false);
    }//GEN-LAST:event_jRadioButtonCMActionPerformed

    private void jRadioButtonACMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonACMActionPerformed
        jPanelRésident.setEnabled(true);
        jComboBoxTypeResidence.setEnabled(true);
    }//GEN-LAST:event_jRadioButtonACMActionPerformed

    private void jButtonImporterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImporterActionPerformed
        anneeString = (String) jComboBoxSession.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        if (!anneeString.equals("---") && !groupedexamensEnstring.equals("")) {
            class personnelNonSave {//classe interne devant contenir un personnel non sauvegardé dans la BD

                String nom;
                String prenom;
                String fonction;
                String structure;
                String arrondissement;
                String nomScentre;
                int numsec;
                String testResident;

                public personnelNonSave(String nom, String prenom, String fonction, String structure, String arrondissement, String nomScentre, int numsec, String testResident) {
                    this.nom = nom;
                    this.prenom = prenom;
                    this.fonction = fonction;
                    this.structure = structure;
                    this.arrondissement = arrondissement;
                    this.nomScentre = nomScentre;
                    this.numsec = numsec;
                    this.testResident = testResident;
                }

            }
            ArrayList<personnelNonSave> personnelNonSaveList = new ArrayList<>();//liste de tous les personnels non sauvegardés dans la BD
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            anneeSelected = Integer.parseInt(anneeString);
            Qualite qualite = new Qualite();
            if (jRadioButtonACM.isSelected()) {
                qualite = metier.findQualiteByTitre("CHARGÉ DE MISSION AUXILIAIRE");
            }
            if (jRadioButtonCM.isSelected()) {
                qualite = metier.findQualiteByTitre("CHARGÉ DE MISSION");
            }

            for (Session s : sessions) {
                if (s.getAnnee() == anneeSelected) {
                    sessionSelected = s;
                    break;
                }
            }

            JFileChooser choix = new JFileChooser();
            int retour = choix.showOpenDialog(this);
            if (retour == JFileChooser.APPROVE_OPTION) {
                // un fichier a été choisi (sortie par OK)
                // nom du fichier  choisi 
                //String nomFichier = choix.getSelectedFile().getName();
                // chemin absolu du fichier choisi
                String cheminFichier = choix.getSelectedFile().getAbsolutePath();
                //JOptionPane.showMessageDialog(this, "Nom du fichier choisi:" + nomFichier+" \n Chemin du fichier:"+cheminFichier);

                try {
                    //long start = System.currentTimeMillis();

                    FileInputStream inputStream = new FileInputStream(cheminFichier);

                    XSSFWorkbook workbook = new XSSFWorkbook(inputStream);//XSSFWorkbook pour windows 2007 d'extension xlsx; HSSFWorkbook pour excel 97 et 2003 d'extension xls

                    Sheet firstSheet = workbook.getSheetAt(0);
                    Iterator<Row> rowIterator = firstSheet.iterator();

                    rowIterator.next(); // skip the header row

                    while (rowIterator.hasNext()) {
                        boolean continuerFonction = true;
                        boolean continuerScentre = true;
                        boolean continuerArrond = true;
                        Row nextRow = rowIterator.next();
                        Iterator<Cell> cellIterator = nextRow.cellIterator();
                        Fonction fonct = new Fonction();
                        Souscentre souscentre = new Souscentre();
                        Arrondissement arrond = new Arrondissement();
                        Personnel pers = new Personnel();
                        String nompers = "";
                        String prenompers = "";
                        String nomstruct = "";
                        String nomfonct = "";
                        String nomarrond = "";
                        String valresident = "";
                        String scentre = "";
                        int numsec = 0;
                        while (cellIterator.hasNext()) {
                            Cell nextCell = cellIterator.next();
                            int columnIndex = nextCell.getColumnIndex();

                            switch (columnIndex) {
                                case 0:
                                    nompers = nextCell.getStringCellValue();
                                    break;
                                case 1:
                                    prenompers = nextCell.getStringCellValue();
                                    break;
                                case 2:
                                    nomfonct = nextCell.getStringCellValue();
                                    try {
                                        fonct = metier.findFonctionByTitre(nomfonct);
                                    } catch (Exception e) {
                                        continuerFonction = false;
                                    }
                                    break;
                                case 3:
                                    nomstruct = nextCell.getStringCellValue();
                                    break;
                                case 4:
                                    scentre = nextCell.getStringCellValue();
                                    try {
                                        souscentre = metier.findSouscentreByName(scentre);
                                    } catch (Exception e) {
                                        continuerScentre = false;
                                    }
                                    break;
                                case 5:
                                    numsec = (int) nextCell.getNumericCellValue();
                                    break;
                                case 6:
                                    nomarrond = nextCell.getStringCellValue();
                                    try {
                                        arrond = metier.findArrondissementByName(nomarrond);
                                    } catch (Exception e) {
                                        continuerArrond = false;
                                    }
                                    break;
                                case 7:
                                    valresident = nextCell.getStringCellValue();
                                    break;
                            }
                        }

                        Activite activite = metier.findActiviteByNom("ECRIT");

                        if (continuerScentre && continuerFonction && continuerArrond) {
                            pers = metier.creerPersonnel(new Personnel(nompers.toUpperCase(), prenompers.toUpperCase(), nomstruct.toUpperCase(), fonct, arrond));
                            boolean resident = true;
                            if (valresident.equals("NON")) {
                                resident = false;
                            }
                            if (numsec == 0) {
                                metier.creerIntervenant(new Intervenant(groupe, sessionSelected, pers, souscentre, activite, qualite, resident));
                            } else {
                                Secretariat secretariat = metier.findSecretariatD1SouscentreDeNumeroEtSessionDonnes(scentre, numsec, anneeSelected);
                                metier.creerIntervenantsecret(new Intervenantsecret(groupe, sessionSelected, pers, secretariat, activite, qualite, resident));
                            }
                        } else {
                            personnelNonSaveList.add(new personnelNonSave(nompers, prenompers, nomfonct, nomstruct, nomarrond, scentre, numsec, valresident));//impossible de sauvegarder personnel et intervenant
                        }
                    }

                    workbook.close();

                } catch (IOException ex1) {
                    System.out.println("Error reading file");
                    ex1.printStackTrace();
                }

                if (personnelNonSaveList.size() > 0) {
                    JOptionPane.showMessageDialog(this, "Attention ! Attention ! Plusieurs données n'ont pas été importées dans la base des données !");
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        int i = 1;
                        for (personnelNonSave pers : personnelNonSaveList) {
                            Map<String, Object> row = new HashMap<>();
                            row.put("examen", groupedexamensEnstring);
                            row.put("session", sessionSelected.getAnnee());
                            row.put("qualite", qualite.getTitre());
                            row.put("num", i++);
                            row.put("nompers", pers.nom + " " + pers.prenom);
                            row.put("nomfonct", pers.fonction);
                            row.put("nomstruct", pers.structure);
                            row.put("nomarrond", pers.arrondissement);
                            row.put("souscentre", pers.nomScentre);
                            row.put("numsec", pers.numsec);
                            row.put("resident", pers.testResident);
                            datasource.add(row);

                        }

                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\cm_acmNonSauvegardesReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Importation effectuée avec succès !");
                }
            } else {
                //... ;// pas de fichier choisi
                JOptionPane.showMessageDialog(this, "Aucun choix effectué !");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencer svp. Vous devez choisir un groupe d'examens et une session !");
        }
    }//GEN-LAST:event_jButtonImporterActionPerformed

    private void jComboBoxDepartementSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementSouscentreActionPerformed
        remplirArrondissementSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxDepartementSouscentreActionPerformed

    private void jComboBoxArrondissementSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementSouscentreActionPerformed
        remplirSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementSouscentreActionPerformed

    private void jComboBoxSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSouscentreActionPerformed
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        trouverSouscentre = false;
        if (!nomSouscentreSelected.equals("---") && !anneeString.equals("---") && !niveauSelected.equals("---") && !typeSelected.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            jTextFieldEtablissement.setText("");
            ArrayList<Secretariat> secretariatsDuSouscentre = new ArrayList<>();
            for (Secretariat sec : secretariats) {
                if (sec.getSouscentre().getNomsouscent().equals(nomSouscentreSelected) && sec.getSession().getAnnee() == anneeSelected) {
                    trouverSouscentre = true;
                    secretariatsDuSouscentre.add(sec);
                }
            }
            if (trouverSouscentre && testExistenceD1StatsecA1souscentrePour1GroupedexamenEtsession(nomSouscentreSelected, niveauSelected, typeSelected, anneeSelected)) {
                ordonnerSecretariatsD1souscentre(secretariatsDuSouscentre);
                remplirNumeroSecretariatCombobox(secretariatsDuSouscentre);
            } else {
                numsecCombo = new String[0];
                jComboBoxNumsec.setModel(new DefaultComboBoxModel(numsecCombo));
            }
        }
    }//GEN-LAST:event_jComboBoxSouscentreActionPerformed

    private void jComboBoxRegionSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionSouscentreActionPerformed
        remplirDepartementSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxRegionSouscentreActionPerformed

    private void jButtonAnnulerChoixSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixSouscentreActionPerformed
        jComboBoxRegionSouscentre.setSelectedIndex(0);
        jComboBoxDepartementSouscentre.setSelectedIndex(0);
        jComboBoxArrondissementSouscentre.setSelectedIndex(0);
        jComboBoxSouscentre.setSelectedIndex(0);
        jTextFieldEtablissement.setText("");
        jComboBoxNumsec.setSelectedIndex(0);
        numsecCombo = new String[0];
        jComboBoxNumsec.setModel(new DefaultComboBoxModel(numsecCombo));
    }//GEN-LAST:event_jButtonAnnulerChoixSouscentreActionPerformed

    private void jComboBoxNumsecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNumsecActionPerformed
        numsecString = (String) jComboBoxNumsec.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        if (!numsecString.equals("---") && !nomSouscentreSelected.equals("---") && !anneeString.equals("---")) {
            numsecSelected = Integer.parseInt(numsecString);
            anneeSelected = Integer.parseInt(anneeString);
            boolean trouversecret = false;
            for (Secretariat secret : secretariats) {
                if (secret.getSouscentre().getNomsouscent().equals(nomSouscentreSelected)) {
                    trouversecret = true;
                    break;
                }
            }
            if (trouversecret) {
                secretariatSelected = metier.findSecretariatD1SouscentreDeNumeroEtSessionDonnes(nomSouscentreSelected, numsecSelected, anneeSelected);
                jTextFieldEtablissement.setText(secretariatSelected.getEtablissement().getAbreviation());
            }
        }
    }//GEN-LAST:event_jComboBoxNumsecActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatACMetCMecrit.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatACMetCMecrit.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatACMetCMecrit.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatACMetCMecrit.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatACMetCMecrit().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonAnnulerChoixACMouCM1;
    private javax.swing.JButton jButtonAnnulerChoixExamen;
    private javax.swing.JButton jButtonAnnulerChoixSouscentre;
    private javax.swing.JButton jButtonAnnulerPersonnel;
    private javax.swing.JButton jButtonCreerEtats;
    private javax.swing.JButton jButtonCreerPersonnel;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonImporter;
    private javax.swing.JButton jButtonListerPersonnels;
    private javax.swing.JButton jButtonMettreAjourEtats;
    private javax.swing.JButton jButtonSupprimerEtats;
    private javax.swing.JButton jButtonSupprimerPersonnel;
    private javax.swing.JButton jButtonVisualiserEtats;
    private javax.swing.JCheckBox jCheckBoxAdditif;
    private javax.swing.JComboBox<String> jComboBoxArrondissementListe;
    private javax.swing.JComboBox<String> jComboBoxArrondissementSouscentre;
    private javax.swing.JComboBox<String> jComboBoxDepartementListe;
    private javax.swing.JComboBox<String> jComboBoxDepartementSouscentre;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxNomsEtPrenoms;
    private javax.swing.JComboBox<String> jComboBoxNumsec;
    private javax.swing.JComboBox<String> jComboBoxRegionListe;
    private javax.swing.JComboBox<String> jComboBoxRegionSouscentre;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxSouscentre;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JComboBox<String> jComboBoxTypeResidence;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelArrondissementListe;
    private javax.swing.JLabel jLabelArrondissementSouscentre;
    private javax.swing.JLabel jLabelDepartementListe;
    private javax.swing.JLabel jLabelDepartementSouscentre;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelExamen1;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelRegionListe;
    private javax.swing.JLabel jLabelRegionSouscentre;
    private javax.swing.JLabel jLabelResponsable;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelSouscentre;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JLabel jLabelTypeResidence;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelChoixExamen;
    private javax.swing.JPanel jPanelChoixSouscentre;
    private javax.swing.JPanel jPanelExaminateurs;
    private javax.swing.JPanel jPanelGestionEtat;
    private javax.swing.JPanel jPanelRésident;
    private javax.swing.JRadioButton jRadioButtonACM;
    private javax.swing.JRadioButton jRadioButtonCM;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldEtablissement;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Region> regions = null;
    private List<Examen> examens = null;
    private Examen examenSelected = null;
    private String[] examensList = null;
    private List<Examen> examensSelected = new ArrayList<>();
    private List<Departement> departementsSouscentre = null;
    private List<Arrondissement> arrondissementsSouscentre = null;
    private List<Departement> departementsListe = null;
    private List<Arrondissement> arrondissementsListe = null;
    private List<Souscentre> souscentres = null;
    private Souscentre souscentreSelected = null;
    private String[] sessionsCombo = null;
    private String[] imputationsCombo = null;
    private String[] regionsSouscentreCombo = null;
    private String[] departementsSouscentreCombo = null;
    private String[] arrondissementsSouscentreCombo = null;
    private String[] souscentresCombo = null;
    private String[] regionsListeCombo = null;
    private String[] departementsListeCombo = null;
    private String[] arrondissementsListeCombo = null;
    private String[] typeResidencesCombo = null;
    private String referenceImputationSelected = "";
    private String nomRegionSouscentreSelected = "";
    private String nomDepartementSouscentreSelected = "";
    private String nomArrondissementSouscentreSelected = "";
    private String nomRegionListeSelected = "";
    private String nomDepartementListeSelected = "";
    private String nomArrondissementListeSelected = "";
    private String nomSouscentreSelected = "";
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private String phase = "ECRIT";
    private List<Caisse> caisses = null;
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private int total = 0, indemnites = 0, vacations = 0, entretien = 0, fraiscom = 0, transport = 0;
    private String nomsEtPrenomsSelected = "";
    private Personnel personnelSelected = null;
    private List<Personnel> personnels = null;
    private String[] personnelsCombo = null;
    private List<Intervenant> intervenants = null;
    private String phasesPourAffichage = "";
    private List<Intervsec> intervsecs = null;
    private boolean annule = false;
    private String typeResidenceSelected = "";
    private int numsecSelected = 0;
    private String numsecString = "";
    private int numsec = 0;
    private boolean trouverSouscentre = false;
    private List<Secretariat> secretariats = null;
    private String[] numsecCombo = null;
    private Secretariat secretariatSelected = null;
    private boolean trouverExamen = false;
    private List<Secretariat> desSecretariats = null;
    private List<Fonction> fonctions = null;
    private List<Qualite> qualites = null;
    private List<Intervenantsecret> desIntervenantsecret = null;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        regions = metier.findAllRegions();
        souscentres = metier.findAllSouscentres();
        examens = metier.findAllExamens();
        fonctions = metier.findAllFonctions();
        qualites = metier.findAllQualites();
        secretariats = metier.findAllSecretariats();

        //on remplit la combobox des régions du sous-centre
        regionsSouscentreCombo = new String[regions.size() + 1];
        regionsSouscentreCombo[0] = "---";
        int i = 1;
        for (Region region : regions) {
            regionsSouscentreCombo[i++] = region.getNomreg();
        }
        jComboBoxRegionSouscentre.setModel(new DefaultComboBoxModel(regionsSouscentreCombo));

        //on remplit la combobox des régions des examinateurs
        regionsListeCombo = new String[regions.size() + 1];
        regionsListeCombo[0] = "---";
        int j = 1;
        for (Region region : regions) {
            regionsListeCombo[j++] = region.getNomreg();
        }
        jComboBoxRegionListe.setModel(new DefaultComboBoxModel(regionsListeCombo));

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int k = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[k++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "GEN", "IND", "IND PROF", "STT", "STT PROF", "TOUT", "TOUT ESTI", "TOUT STT", "TOUT ESTP"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC", "TOUT"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        //on remplit la combobox des types de déplacement
        typeResidencesCombo = new String[]{"---", "RESIDENT", "PERIPHERIQUE"};
        jComboBoxTypeResidence.setModel(new DefaultComboBoxModel(typeResidencesCombo));

        remplirDepartementSouscentreCombobox();
        remplirArrondissementSouscentreCombobox();
        remplirSouscentreCombobox();
        buttonGroup1.add(jRadioButtonACM);
        buttonGroup1.add(jRadioButtonCM);
        jComboBoxTypeResidence.setEnabled(false);
        jPanelRésident.setEnabled(false);
        remplirDepartementListeCombobox();
        remplirArrondissementListeCombobox();
        remplirPersonnelsDelArrondissementCombobox();
        remplirPersonnelsDuDepartementCombobox();
    }

    private void infoSaisies() {
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        nomsEtPrenomsSelected = (String) jComboBoxNomsEtPrenoms.getSelectedItem();
        typeResidenceSelected = (String) jComboBoxTypeResidence.getSelectedItem();
    }

    private void remplirDepartementSouscentreCombobox() {
        nomRegionSouscentreSelected = (String) jComboBoxRegionSouscentre.getSelectedItem();
        departementsSouscentre = metier.findAllDepartementsD1Region(nomRegionSouscentreSelected);
        //on remplit la combobox des départements du sous-centre
        departementsSouscentreCombo = new String[departementsSouscentre.size() + 1];
        departementsSouscentreCombo[0] = "---";
        int i = 1;
        for (Departement departement : departementsSouscentre) {
            departementsSouscentreCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartementSouscentre.setModel(new DefaultComboBoxModel(departementsSouscentreCombo));
    }

    private void remplirArrondissementSouscentreCombobox() {
        nomDepartementSouscentreSelected = (String) jComboBoxDepartementSouscentre.getSelectedItem();
        arrondissementsSouscentre = metier.findAllArrondissementsD1Departement(nomDepartementSouscentreSelected);
        //on remplit la combobox des arrondissements
        arrondissementsSouscentreCombo = new String[arrondissementsSouscentre.size() + 1];
        arrondissementsSouscentreCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissementsSouscentre) {
            arrondissementsSouscentreCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissementSouscentre.setModel(new DefaultComboBoxModel(arrondissementsSouscentreCombo));
    }

    private void remplirSouscentreCombobox() {
        nomArrondissementSouscentreSelected = (String) jComboBoxArrondissementSouscentre.getSelectedItem();
        souscentres = metier.findAllSouscentresD1Arrondissement(nomArrondissementSouscentreSelected);
        //on remplit la combobox des sous-centres
        souscentresCombo = new String[souscentres.size() + 1];
        souscentresCombo[0] = "---";
        int i = 1;
        for (Souscentre souscentre : souscentres) {
            souscentresCombo[i++] = souscentre.getNomsouscent();
        }
        jComboBoxSouscentre.setModel(new DefaultComboBoxModel(souscentresCombo));
    }

    private void remplirDepartementListeCombobox() {
        nomRegionListeSelected = (String) jComboBoxRegionListe.getSelectedItem();
        departementsListe = metier.findAllDepartementsD1Region(nomRegionListeSelected);
        //on remplit la combobox des départements des examinateurs
        departementsListeCombo = new String[departementsListe.size() + 1];
        departementsListeCombo[0] = "---";
        int i = 1;
        for (Departement departement : departementsListe) {
            departementsListeCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartementListe.setModel(new DefaultComboBoxModel(departementsListeCombo));
    }

    private void remplirArrondissementListeCombobox() {
        nomDepartementListeSelected = (String) jComboBoxDepartementListe.getSelectedItem();
        arrondissementsListe = metier.findAllArrondissementsD1Departement(nomDepartementListeSelected);
        //on remplit la combobox des arrondissements des examinateurs
        arrondissementsListeCombo = new String[arrondissementsListe.size() + 1];
        arrondissementsListeCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissementsListe) {
            arrondissementsListeCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissementListe.setModel(new DefaultComboBoxModel(arrondissementsListeCombo));
    }

    private void remplirPersonnelsDelArrondissementCombobox() {
        nomArrondissementListeSelected = (String) jComboBoxArrondissementListe.getSelectedItem();
        personnels = metier.findAllPersonnelsD1Arrondissement(nomArrondissementListeSelected);
        //on remplit les combobox des responsables et des membres
        personnelsCombo = new String[personnels.size() + 1];
        personnelsCombo[0] = "---";
        int i = 1;
        for (Personnel personnel : personnels) {
            personnelsCombo[i] = personnel.getNompers() + " " + personnel.getPrenom();
            i++;
        }
        jComboBoxNomsEtPrenoms.setModel(new DefaultComboBoxModel(personnelsCombo));
    }

    private void remplirPersonnelsDuDepartementCombobox() {
        nomDepartementListeSelected = (String) jComboBoxDepartementListe.getSelectedItem();
        personnels = metier.findAllPersonnelsD1Departement(nomDepartementListeSelected);
        //on remplit les combobox des personnels       
        personnelsCombo = new String[personnels.size() + 1];
        personnelsCombo[0] = "---";
        int i = 1;
        for (Personnel personnel : personnels) {
            personnelsCombo[i] = personnel.getNompers() + " " + personnel.getPrenom();
            i++;
        }
        jComboBoxNomsEtPrenoms.setModel(new DefaultComboBoxModel(personnelsCombo));
    }

    private void determinerCoutACM(List<Souscentre> tousLesScentaplus, Map<Souscentre, ArrayList<Character>> souscentrePhasesMap, Souscentre souscentre, Intervenant auxiliaire) {
        ArrayList<Character> phasesList = souscentrePhasesMap.get(souscentre);
        String phasesEnchaine = "";
        if (!phasesList.isEmpty()) {
            for (char c : phasesList) {
                if (c != 'T' && c != 'S') {
                    phasesEnchaine += c;
                }
            }
        }
        phasesPourAffichage = phasesEnchaine;
        if (tousLesScentaplus.contains(souscentre)) {
            phasesPourAffichage = phasesEnchaine + "+";
        }

        if (typeSelected.equals("GEN") && (niveauSelected.equals("BACC") || niveauSelected.equals("PROB"))) {
            if (phasesPourAffichage.equals("E") || phasesPourAffichage.equals("E+") || phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("EP+")) {
                if (auxiliaire.getResident()) {
                    indemnites = 60000;
                    vacations = 9000;
                    transport = 6000;
                    entretien = 3000;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                } else {
                    indemnites = 60000;
                    vacations = 9000;
                    transport = 12000;
                    entretien = 3000;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                }
            }
            if (phasesPourAffichage.equals("CE") || phasesPourAffichage.equals("CE+") || phasesPourAffichage.equals("CEP") || phasesPourAffichage.equals("CEP+")) {
                if (auxiliaire.getResident()) {
                    indemnites = 90000;
                    vacations = 9000;
                    transport = 12000;
                    entretien = 3000;
                    fraiscom = 5000;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                } else {
                    indemnites = 90000;
                    vacations = 9000;
                    transport = 24000;
                    entretien = 3000;
                    fraiscom = 5000;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                }
            }
            if (phasesPourAffichage.equals("CDE") || phasesPourAffichage.equals("CDE+") || phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                //les ACM ne délibèrent pas. Dans les sous-centres CDE ils ont même montant que ceux de CE
                if (auxiliaire.getResident()) {
                    indemnites = 90000;
                    vacations = 9000;
                    transport = 12000;
                    entretien = 3000;
                    fraiscom = 5000;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                } else {
                    indemnites = 90000;
                    vacations = 9000;
                    transport = 24000;
                    entretien = 3000;
                    fraiscom = 5000;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                }
            }
        }

        if ((typeSelected.equals("STT") || typeSelected.equals("STT PROF")) && niveauSelected.equals("BACC")) {
            if (phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("EP+")) {
                if (auxiliaire.getResident()) {
                    indemnites = 60000;
                    vacations = 9000;
                    transport = 6000;
                    entretien = 3000;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                } else {
                    indemnites = 60000;
                    vacations = 9000;
                    transport = 12000;
                    entretien = 3000;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                }
            }
            if (phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                if (auxiliaire.getResident()) {
                    indemnites = 90000;
                    vacations = 9000;
                    transport = 6000;
                    entretien = 3000;
                    fraiscom = 5000;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                } else {
                    indemnites = 90000;
                    vacations = 9000;
                    transport = 10000;
                    entretien = 3000;
                    fraiscom = 5000;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                }
            }
        }
        if ((typeSelected.equals("STT") || typeSelected.equals("STT PROF")) && niveauSelected.equals("PROB")) {
            if (phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("EP+")) {
                if (auxiliaire.getResident()) {
                    indemnites = 60000;
                    vacations = 7500;
                    transport = 5000;
                    entretien = 2500;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                } else {
                    indemnites = 60000;
                    vacations = 7500;
                    transport = 10000;
                    entretien = 2500;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                }
            }
            if (phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                if (auxiliaire.getResident()) {
                    indemnites = 90000;
                    vacations = 7500;
                    transport = 5000;
                    entretien = 2500;
                    fraiscom = 5000;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                } else {
                    indemnites = 90000;
                    vacations = 7500;
                    transport = 10000;
                    entretien = 2500;
                    fraiscom = 5000;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                }
            }
        }

        if ((typeSelected.equals("IND") || typeSelected.equals("IND PROF")) && niveauSelected.equals("BACC")) {
            if (phasesPourAffichage.equals("E") || phasesPourAffichage.equals("E+") || phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("EP+") || phasesPourAffichage.equals("P") || phasesPourAffichage.equals("P+")) {
                if (auxiliaire.getResident()) {
                    indemnites = 78000;
                    vacations = 0;
                    transport = 0;
                    entretien = 0;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                } else {
                    indemnites = 78000;
                    vacations = 0;
                    transport = 0;
                    entretien = 0;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                }
            }
            if (phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                if (auxiliaire.getResident()) {
                    indemnites = 113000;
                    vacations = 0;
                    transport = 0;
                    entretien = 0;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                } else {
                    indemnites = 113000;
                    vacations = 0;
                    transport = 0;
                    entretien = 0;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                }
            }
        }
        if ((typeSelected.equals("IND") || typeSelected.equals("IND PROF")) && niveauSelected.equals("PROB")) {
            if (phasesPourAffichage.equals("E") || phasesPourAffichage.equals("E+") || phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("EP+") || phasesPourAffichage.equals("P") || phasesPourAffichage.equals("P+")) {
                if (auxiliaire.getResident()) {
                    indemnites = 75000;
                    vacations = 0;
                    transport = 0;
                    entretien = 0;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                } else {
                    indemnites = 75000;
                    vacations = 0;
                    transport = 0;
                    entretien = 0;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                }
            }
            if (phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                if (auxiliaire.getResident()) {
                    indemnites = 110000;
                    vacations = 0;
                    transport = 0;
                    entretien = 0;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                } else {
                    indemnites = 110000;
                    vacations = 0;
                    transport = 0;
                    entretien = 0;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                }
            }
        }
    }

    private void determinerCoutACMsec(List<Souscentre> tousLesScentaplus, Souscentre souscentre, Map<Secretariat, ArrayList<Character>> activitesSecretariatMap, Secretariat secretariatCourant, Intervenantsecret auxiliaire) {
        ArrayList<Character> phasesList = activitesSecretariatMap.get(secretariatCourant);
        String phasesEnchaine = "";
        if (!phasesList.isEmpty()) {
            for (char c : phasesList) {
                if (c != 'T' && c != 'S') {
                    phasesEnchaine += c;
                }
            }
        }
        phasesPourAffichage = phasesEnchaine;
        if (tousLesScentaplus.contains(souscentre)) {
            phasesPourAffichage = phasesEnchaine + "+";
        }

        if (typeSelected.equals("GEN") && (niveauSelected.equals("BACC") || niveauSelected.equals("PROB"))) {
            if (phasesPourAffichage.equals("E") || phasesPourAffichage.equals("E+") || phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("EP+")) {
                if (auxiliaire.getResident()) {
                    indemnites = 60000;
                    vacations = 9000;
                    transport = 6000;
                    entretien = 3000;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                } else {
                    indemnites = 60000;
                    vacations = 9000;
                    transport = 12000;
                    entretien = 3000;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                }
            }
            if (phasesPourAffichage.equals("CE") || phasesPourAffichage.equals("CE+") || phasesPourAffichage.equals("CEP") || phasesPourAffichage.equals("CEP+")) {
                if (auxiliaire.getResident()) {
                    indemnites = 90000;
                    vacations = 9000;
                    transport = 12000;
                    entretien = 3000;
                    fraiscom = 5000;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                } else {
                    indemnites = 90000;
                    vacations = 9000;
                    transport = 24000;
                    entretien = 3000;
                    fraiscom = 5000;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                }
            }
            if (phasesPourAffichage.equals("CDE") || phasesPourAffichage.equals("CDE+") || phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                //les ACM ne délibèrent pas. Dans les sous-centres CDE ils ont même montant que ceux de CE
                if (auxiliaire.getResident()) {
                    indemnites = 90000;
                    vacations = 9000;
                    transport = 12000;
                    entretien = 3000;
                    fraiscom = 5000;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                } else {
                    indemnites = 90000;
                    vacations = 9000;
                    transport = 24000;
                    entretien = 3000;
                    fraiscom = 5000;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                }
            }
        }

        if ((typeSelected.equals("STT") || typeSelected.equals("STT PROF")) && niveauSelected.equals("BACC")) {
            if (phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("EP+")) {
                if (auxiliaire.getResident()) {
                    indemnites = 60000;
                    vacations = 9000;
                    transport = 6000;
                    entretien = 3000;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                } else {
                    indemnites = 60000;
                    vacations = 9000;
                    transport = 12000;
                    entretien = 3000;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                }
            }
            if (phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                if (auxiliaire.getResident()) {
                    indemnites = 90000;
                    vacations = 9000;
                    transport = 6000;
                    entretien = 3000;
                    fraiscom = 5000;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                } else {
                    indemnites = 90000;
                    vacations = 9000;
                    transport = 10000;
                    entretien = 3000;
                    fraiscom = 5000;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                }
            }
        }
        if ((typeSelected.equals("STT") || typeSelected.equals("STT PROF")) && niveauSelected.equals("PROB")) {
            if (phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("EP+")) {
                if (auxiliaire.getResident()) {
                    indemnites = 60000;
                    vacations = 7500;
                    transport = 5000;
                    entretien = 2500;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                } else {
                    indemnites = 60000;
                    vacations = 7500;
                    transport = 10000;
                    entretien = 2500;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                }
            }
            if (phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                if (auxiliaire.getResident()) {
                    indemnites = 90000;
                    vacations = 7500;
                    transport = 5000;
                    entretien = 2500;
                    fraiscom = 5000;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                } else {
                    indemnites = 90000;
                    vacations = 7500;
                    transport = 10000;
                    entretien = 2500;
                    fraiscom = 5000;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                }
            }
        }

        if ((typeSelected.equals("IND") || typeSelected.equals("IND PROF")) && niveauSelected.equals("BACC")) {
            if (phasesPourAffichage.equals("E") || phasesPourAffichage.equals("E+") || phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("EP+") || phasesPourAffichage.equals("P") || phasesPourAffichage.equals("P+")) {
                if (auxiliaire.getResident()) {
                    indemnites = 78000;
                    vacations = 0;
                    transport = 0;
                    entretien = 0;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                } else {
                    indemnites = 78000;
                    vacations = 0;
                    transport = 0;
                    entretien = 0;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                }
            }
            if (phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                if (auxiliaire.getResident()) {
                    indemnites = 113000;
                    vacations = 0;
                    transport = 0;
                    entretien = 0;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                } else {
                    indemnites = 113000;
                    vacations = 0;
                    transport = 0;
                    entretien = 0;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                }
            }
        }
        if ((typeSelected.equals("IND") || typeSelected.equals("IND PROF")) && niveauSelected.equals("PROB")) {
            if (phasesPourAffichage.equals("E") || phasesPourAffichage.equals("E+") || phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("EP+") || phasesPourAffichage.equals("P") || phasesPourAffichage.equals("P+")) {
                if (auxiliaire.getResident()) {
                    indemnites = 75000;
                    vacations = 0;
                    transport = 0;
                    entretien = 0;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                } else {
                    indemnites = 75000;
                    vacations = 0;
                    transport = 0;
                    entretien = 0;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                }
            }
            if (phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                if (auxiliaire.getResident()) {
                    indemnites = 110000;
                    vacations = 0;
                    transport = 0;
                    entretien = 0;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                } else {
                    indemnites = 110000;
                    vacations = 0;
                    transport = 0;
                    entretien = 0;
                    fraiscom = 0;
                    total = indemnites + vacations + transport + entretien + fraiscom;
                }
            }
        }
    }

    private void determinerCoutAdditifACM(List<Souscentre> tousLesScentaplus, Map<Souscentre, ArrayList<Character>> souscentrePhasesMap, Souscentre souscentre, Intervenant auxiliaire) {
        ArrayList<Character> phasesList = souscentrePhasesMap.get(souscentre);
        String phasesEnchaine = "";
        if (!phasesList.isEmpty()) {
            for (char c : phasesList) {
                if (c != 'T' && c != 'S') {
                    phasesEnchaine += c;
                }
            }
        }
        phasesPourAffichage = phasesEnchaine;
        if (tousLesScentaplus.contains(souscentre)) {
            phasesPourAffichage = phasesEnchaine + "+";
        }
        if (auxiliaire.getResident()) {
            indemnites = 60000;
            vacations = 9000;
            transport = 6000;
            entretien = 3000;
            fraiscom = 0;
            total = (indemnites + vacations + transport + entretien + fraiscom) * 2 / 5;
            if (souscentre.getNomsouscent().equals("LYCÉE DE BANYO")) {
                total = (indemnites + vacations + transport + entretien + fraiscom) * 1 / 5;
            }
        } else {
            indemnites = 60000;
            vacations = 9000;
            transport = 12000;
            entretien = 3000;
            fraiscom = 0;
            total = (indemnites + vacations + transport + entretien + fraiscom) * 2 / 5;
        }
    }

    private void determinerCoutCM(List<Souscentre> tousLesScentaplus, Map<Souscentre, ArrayList<Character>> souscentrePhasesMap, Souscentre souscentre) {
        ArrayList<Character> phasesList = souscentrePhasesMap.get(souscentre);
        String phasesEnchaine = "";
        if (!phasesList.isEmpty()) {
            for (char c : phasesList) {
                if (c != 'T' && c != 'S') {
                    phasesEnchaine += c;
                }
            }
        }
        phasesPourAffichage = phasesEnchaine;
        if (tousLesScentaplus.contains(souscentre)) {
            phasesPourAffichage = phasesEnchaine + "+";
        }

        if (typeSelected.equals("GEN") && (niveauSelected.equals("BACC") || niveauSelected.equals("PROB"))) {
            if (phasesPourAffichage.equals("E") || phasesPourAffichage.equals("E+") || phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("EP+") || phasesPourAffichage.equals("P")) {
                indemnites = 150000;
                vacations = 9000;
                entretien = 3000;
                fraiscom = 5000;
                total = indemnites + vacations + entretien + fraiscom;
            }
            if (phasesPourAffichage.equals("CE") || phasesPourAffichage.equals("CE+") || phasesPourAffichage.equals("CEP") || phasesPourAffichage.equals("CEP+")) {
                indemnites = 150000;
                vacations = 9000;
                entretien = 3000;
                fraiscom = 5000;
                total = indemnites + vacations + entretien + fraiscom;
            }
            if (phasesPourAffichage.equals("CDE") || phasesPourAffichage.equals("CDE+") || phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                indemnites = 270000;
                vacations = 9000;
                entretien = 3000;
                fraiscom = 10000;
                total = indemnites + vacations + entretien + fraiscom;
            }
        }

        if ((typeSelected.equals("STT") || typeSelected.equals("STT PROF")) && niveauSelected.equals("BACC")) {
            if (phasesPourAffichage.equals("P") || phasesPourAffichage.equals("CP")) {
                indemnites = 100000;
                vacations = 7500;
                entretien = 2500;
                fraiscom = 5000;
                total = indemnites + vacations + entretien + fraiscom;
            }
            if (phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("EP+")) {
                indemnites = 210000;
                vacations = 16500;
                entretien = 5500;
                fraiscom = 10000;
                total = indemnites + vacations + entretien + fraiscom;
            }
            if (phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                indemnites = 330000;
                vacations = 16500;
                entretien = 5500;
                fraiscom = 15000;
                total = indemnites + vacations + entretien + fraiscom;
            }
        }

        if ((typeSelected.equals("STT") || typeSelected.equals("STT PROF")) && niveauSelected.equals("PROB")) {
            if (phasesPourAffichage.equals("P") || phasesPourAffichage.equals("CP")) {
                indemnites = 100000;
                vacations = 7500;
                entretien = 2500;
                fraiscom = 5000;
                total = indemnites + vacations + entretien + fraiscom;
            }
            if (phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("EP+")) {
                indemnites = 210000;
                vacations = 15000;
                entretien = 5000;
                fraiscom = 10000;
                total = indemnites + vacations + entretien + fraiscom;
            }
            if (phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                indemnites = 330000;
                vacations = 15000;
                entretien = 5000;
                fraiscom = 15000;
                total = indemnites + vacations + entretien + fraiscom;
            }
        }

        if ((typeSelected.equals("IND") || typeSelected.equals("IND PROF")) && (niveauSelected.equals("BACC") || niveauSelected.equals("PROB"))) {
            if (phasesPourAffichage.equals("E") || phasesPourAffichage.equals("E+") || phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("P")) {
                indemnites = 150000;
                vacations = 9000;
                entretien = 3000;
                fraiscom = 5000;
                total = indemnites + vacations + entretien + fraiscom;
            }
            if (phasesPourAffichage.equals("EP+") || phasesPourAffichage.equals("P+")) {
                indemnites = 235000;
                vacations = 9000;
                entretien = 3000;
                fraiscom = 5000;
                total = indemnites + vacations + entretien + fraiscom;
            }
            if (phasesPourAffichage.equals("CDEP")) {
                indemnites = 270000;
                vacations = 9000;
                entretien = 3000;
                fraiscom = 10000;
                total = indemnites + vacations + entretien + fraiscom;
            }
            if (phasesPourAffichage.equals("CDEP+")) {
                indemnites = 346000;
                vacations = 18000;
                entretien = 3000;
                fraiscom = 10000;
                total = indemnites + vacations + entretien + fraiscom;
            }
        }
    }

    private void determinerCoutCMsec(List<Souscentre> tousLesScentaplus, Souscentre souscentre, Map<Secretariat, ArrayList<Character>> activitesSecretariatMap, Secretariat secretariat) {
        ArrayList<Character> phasesList = activitesSecretariatMap.get(secretariat);
        String phasesEnchaine = "";
        if (!phasesList.isEmpty()) {
            for (char c : phasesList) {
                if (c != 'T' && c != 'S') {
                    phasesEnchaine += c;
                }
            }
        }
        phasesPourAffichage = phasesEnchaine;
        if (tousLesScentaplus.contains(souscentre)) {
            phasesPourAffichage = phasesEnchaine + "+";
        }

        if (typeSelected.equals("GEN") && (niveauSelected.equals("BACC") || niveauSelected.equals("PROB"))) {
            if (phasesPourAffichage.equals("E") || phasesPourAffichage.equals("E+") || phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("EP+") || phasesPourAffichage.equals("P")) {
                indemnites = 150000;
                vacations = 9000;
                entretien = 3000;
                fraiscom = 5000;
                total = indemnites + vacations + entretien + fraiscom;
            }
            if (phasesPourAffichage.equals("CE") || phasesPourAffichage.equals("CE+") || phasesPourAffichage.equals("CEP") || phasesPourAffichage.equals("CEP+")) {
                indemnites = 150000;
                vacations = 9000;
                entretien = 3000;
                fraiscom = 5000;
                total = indemnites + vacations + entretien + fraiscom;
            }
            if (phasesPourAffichage.equals("CDE") || phasesPourAffichage.equals("CDE+") || phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                indemnites = 270000;
                vacations = 9000;
                entretien = 3000;
                fraiscom = 10000;
                total = indemnites + vacations + entretien + fraiscom;
            }
        }

        if ((typeSelected.equals("STT") || typeSelected.equals("STT PROF")) && niveauSelected.equals("BACC")) {
            if (phasesPourAffichage.equals("P") || phasesPourAffichage.equals("CP")) {
                indemnites = 100000;
                vacations = 7500;
                entretien = 2500;
                fraiscom = 5000;
                total = indemnites + vacations + entretien + fraiscom;
            }
            if (phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("EP+")) {
                indemnites = 210000;
                vacations = 16500;
                entretien = 5500;
                fraiscom = 10000;
                total = indemnites + vacations + entretien + fraiscom;
            }
            if (phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                indemnites = 330000;
                vacations = 16500;
                entretien = 5500;
                fraiscom = 15000;
                total = indemnites + vacations + entretien + fraiscom;
            }
        }

        if ((typeSelected.equals("STT") || typeSelected.equals("STT PROF")) && niveauSelected.equals("PROB")) {
            if (phasesPourAffichage.equals("P") || phasesPourAffichage.equals("CP")) {
                indemnites = 100000;
                vacations = 7500;
                entretien = 2500;
                fraiscom = 5000;
                total = indemnites + vacations + entretien + fraiscom;
            }
            if (phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("EP+")) {
                indemnites = 210000;
                vacations = 15000;
                entretien = 5000;
                fraiscom = 10000;
                total = indemnites + vacations + entretien + fraiscom;
            }
            if (phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                indemnites = 330000;
                vacations = 15000;
                entretien = 5000;
                fraiscom = 15000;
                total = indemnites + vacations + entretien + fraiscom;
            }
        }

        if ((typeSelected.equals("IND") || typeSelected.equals("IND PROF")) && (niveauSelected.equals("BACC") || niveauSelected.equals("PROB"))) {
            if (phasesPourAffichage.equals("E") || phasesPourAffichage.equals("E+") || phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("P")) {
                indemnites = 150000;
                vacations = 9000;
                entretien = 3000;
                fraiscom = 5000;
                total = indemnites + vacations + entretien + fraiscom;
            }
            if (phasesPourAffichage.equals("EP+") || phasesPourAffichage.equals("P+")) {
                indemnites = 235000;
                vacations = 9000;
                entretien = 3000;
                fraiscom = 5000;
                total = indemnites + vacations + entretien + fraiscom;
            }
            if (phasesPourAffichage.equals("CDEP")) {
                indemnites = 270000;
                vacations = 9000;
                entretien = 3000;
                fraiscom = 10000;
                total = indemnites + vacations + entretien + fraiscom;
            }
            if (phasesPourAffichage.equals("CDEP+")) {
                indemnites = 346000;
                vacations = 18000;
                entretien = 3000;
                fraiscom = 10000;
                total = indemnites + vacations + entretien + fraiscom;
            }
        }
    }

    private void determinerCoutAdditifCM(List<Souscentre> tousLesScentaplus, Map<Souscentre, ArrayList<Character>> souscentrePhasesMap, Souscentre souscentre) {
        ArrayList<Character> phasesList = souscentrePhasesMap.get(souscentre);
        String phasesEnchaine = "";
        if (!phasesList.isEmpty()) {
            for (char c : phasesList) {
                if (c != 'T' && c != 'S') {
                    phasesEnchaine += c;
                }
            }
        }
        phasesPourAffichage = phasesEnchaine;
        if (tousLesScentaplus.contains(souscentre)) {
            phasesPourAffichage = phasesEnchaine + "+";
        }
        indemnites = 150000;
        vacations = 9000;
        entretien = 3000;
        fraiscom = 5000;
        total = (indemnites + vacations + entretien + fraiscom) * 3 / 7;
        if (souscentre.getNomsouscent().equals("COLLÈGE BILINGUE PAUL MESSI") || souscentre.getNomsouscent().equals("COLLÈGE FRANÇOIS XAVIER VOGT") || souscentre.getNomsouscent().equals("INSTITUT VICTOR HUGO") || souscentre.getNomsouscent().equals("INSTITUT MATAMFEN") || souscentre.getNomsouscent().equals("COLLÈGE FRANTZ FANON")) {
            total = (indemnites + vacations + entretien + fraiscom) * 2 / 7;
        }
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    private void remplirNumeroSecretariatCombobox(ArrayList<Secretariat> sesSecrets) {
        //on remplit la combobox des numéros de secretariat
        numsecCombo = new String[sesSecrets.size() + 1];
        numsecCombo[0] = "---";
        int i = 1;
        for (Secretariat s : sesSecrets) {
            numsecCombo[i++] = "" + s.getNumsec();
        }
        jComboBoxNumsec.setModel(new DefaultComboBoxModel(numsecCombo));
    }

    private boolean testExistenceD1StatsecA1souscentrePour1GroupedexamenEtsession(String scentre, String niveau, String type, int annee) {//sert à vérifier si un souscentre a des secretaraiats dans un groupe d'examens donné
        List<Statsecretariat> lesStatsecs = metier.findAllStatsecretariat();
        boolean result = false;
        for (Statsecretariat stat : lesStatsecs) {
            if (stat.getSecretariat().getSouscentre().getNomsouscent().equals(scentre) && stat.getExamen().getNiveau().equals(niveau) && stat.getExamen().getType().equals(type) && stat.getSecretariat().getSession().getAnnee() == annee) {
                result = true;
                break;
            }
        }
        return result;
    }

    private void ordonnerSecretariatsD1souscentre(ArrayList<Secretariat> lesSecrets) {
        for (int i = 0; i < lesSecrets.size() - 1; i++) {
            for (int j = i + 1; j < lesSecrets.size(); j++) {
                if (lesSecrets.get(j).getNumsec() < lesSecrets.get(i).getNumsec()) {
                    //on échange les deux
                    Secretariat tampon = lesSecrets.get(i);
                    lesSecrets.set(i, lesSecrets.get(j));
                    lesSecrets.set(j, tampon);
                }
            }
        }
    }
}
