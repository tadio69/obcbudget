package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Arrondissement;
import couche_jpa.Caisse;
import couche_jpa.Centrebilletage;
import couche_jpa.Departement;
import couche_jpa.Examen;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Mopratiquesti;
import couche_jpa.Nbadmissibles;
import couche_jpa.Option;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_jpa.Specialisation;
import couche_jpa.Statistique;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 *
 * @author famille chijou
 */
public class VueEtatUniqueMatiereDoeuvrePratique2 extends javax.swing.JFrame {

    /**
     * Creates new form VueEtatMatiereDoeuvre
     */
    public VueEtatUniqueMatiereDoeuvrePratique2() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jPanelChoixExamen = new javax.swing.JPanel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixExamen = new javax.swing.JButton();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelExamen = new javax.swing.JLabel();
        jPanelChoixCentre = new javax.swing.JPanel();
        jLabelRegion = new javax.swing.JLabel();
        jComboBoxRegion = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixSouscentre = new javax.swing.JButton();
        jLabelDepartement = new javax.swing.JLabel();
        jComboBoxDepartement = new javax.swing.JComboBox<>();
        jLabelNomCentre = new javax.swing.JLabel();
        jComboBoxSouscentre = new javax.swing.JComboBox<>();
        jLabelArrondissement = new javax.swing.JLabel();
        jComboBoxArrondissement = new javax.swing.JComboBox<>();
        jPanelCout = new javax.swing.JPanel();
        jLabelCoutamortissement = new javax.swing.JLabel();
        jTextFieldCoutamortissement = new javax.swing.JTextField();
        jButtonCreerCout = new javax.swing.JButton();
        jButtonListerCout = new javax.swing.JButton();
        jLabelForfaitcentre = new javax.swing.JLabel();
        jLabelCoutposte = new javax.swing.JLabel();
        jTextFieldCoutposte = new javax.swing.JTextField();
        jButtonAnnulerCout = new javax.swing.JButton();
        jTextFieldForfaitcentre = new javax.swing.JTextField();
        jLabelSpecialiteCout = new javax.swing.JLabel();
        jComboBoxSpecialiteCout = new javax.swing.JComboBox<>();
        jLabelCoutcandidat = new javax.swing.JLabel();
        jTextFieldCoutcandidat = new javax.swing.JTextField();
        jButtonSupprimerCout = new javax.swing.JButton();
        jTextFieldNbpostes = new javax.swing.JTextField();
        jLabelNbpostes = new javax.swing.JLabel();
        jPanelGestionEtat = new javax.swing.JPanel();
        jButtonCreerEtats = new javax.swing.JButton();
        jButtonMettreAjourEtats = new javax.swing.JButton();
        jButtonVisualiserEtats = new javax.swing.JButton();
        jButtonSupprimerEtats = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT DE DOTATION DE LA MATIERE D'OEUVRE DE PRATIQUE 2");

        jPanelChoixExamen.setBackground(new java.awt.Color(102, 255, 153));
        jPanelChoixExamen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un groupe d'examens et une session", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixExamen.setText("Annuler");
        jButtonAnnulerChoixExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixExamenActionPerformed(evt);
            }
        });

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        javax.swing.GroupLayout jPanelChoixExamenLayout = new javax.swing.GroupLayout(jPanelChoixExamen);
        jPanelChoixExamen.setLayout(jPanelChoixExamenLayout);
        jPanelChoixExamenLayout.setHorizontalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(0, 48, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabelSession)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jButtonAnnulerChoixExamen)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixExamenLayout.setVerticalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanelChoixCentre.setBackground(new java.awt.Color(153, 255, 255));
        jPanelChoixCentre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un sous-centre de pratique", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jLabelRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegion.setText("Région :");

        jComboBoxRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixSouscentre.setText("Annuler");
        jButtonAnnulerChoixSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixSouscentreActionPerformed(evt);
            }
        });

        jLabelDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartement.setText("Département :");

        jComboBoxDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementActionPerformed(evt);
            }
        });

        jLabelNomCentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNomCentre.setText("Sous-centre de pratique :");

        jComboBoxSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSouscentreActionPerformed(evt);
            }
        });

        jLabelArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissement.setText("Arrondissement :");

        jComboBoxArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixCentreLayout = new javax.swing.GroupLayout(jPanelChoixCentre);
        jPanelChoixCentre.setLayout(jPanelChoixCentreLayout);
        jPanelChoixCentreLayout.setHorizontalGroup(
            jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelRegion)
                    .addComponent(jLabelDepartement)
                    .addComponent(jLabelNomCentre)
                    .addComponent(jLabelArrondissement))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                        .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonAnnulerChoixSouscentre)
                        .addGap(53, 53, 53))
                    .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                        .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(20, Short.MAX_VALUE))))
        );
        jPanelChoixCentreLayout.setVerticalGroup(
            jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNomCentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelCout.setBackground(new java.awt.Color(255, 204, 204));
        jPanelCout.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Paramètres de calcul par spécialité et par candidat", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabelCoutamortissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelCoutamortissement.setText("Coût amortissement :");

        jTextFieldCoutamortissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonCreerCout.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerCout.setText("Créer");
        jButtonCreerCout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerCoutActionPerformed(evt);
            }
        });

        jButtonListerCout.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonListerCout.setText("Lister");
        jButtonListerCout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerCoutActionPerformed(evt);
            }
        });

        jLabelForfaitcentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelForfaitcentre.setText("Forfait centre :");

        jLabelCoutposte.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelCoutposte.setText("Coût par poste :");

        jTextFieldCoutposte.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonAnnulerCout.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerCout.setText("Annuler");
        jButtonAnnulerCout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerCoutActionPerformed(evt);
            }
        });

        jTextFieldForfaitcentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelSpecialiteCout.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSpecialiteCout.setText("Spécialité :");

        jComboBoxSpecialiteCout.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelCoutcandidat.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelCoutcandidat.setText("Coût par candidat :");

        jTextFieldCoutcandidat.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonSupprimerCout.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerCout.setText("Supprimer");
        jButtonSupprimerCout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerCoutActionPerformed(evt);
            }
        });

        jTextFieldNbpostes.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelNbpostes.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbpostes.setText("Nbre de postes :");

        javax.swing.GroupLayout jPanelCoutLayout = new javax.swing.GroupLayout(jPanelCout);
        jPanelCout.setLayout(jPanelCoutLayout);
        jPanelCoutLayout.setHorizontalGroup(
            jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCoutLayout.createSequentialGroup()
                .addContainerGap(444, Short.MAX_VALUE)
                .addComponent(jButtonCreerCout)
                .addGap(18, 18, 18)
                .addComponent(jButtonListerCout)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerCout)
                .addGap(18, 18, 18)
                .addComponent(jButtonAnnulerCout)
                .addGap(0, 419, Short.MAX_VALUE))
            .addGroup(jPanelCoutLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabelSpecialiteCout)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSpecialiteCout, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabelCoutcandidat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCoutcandidat, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(jLabelCoutposte)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCoutposte, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(jLabelNbpostes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldNbpostes, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jLabelForfaitcentre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldForfaitcentre, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(jLabelCoutamortissement)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCoutamortissement, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanelCoutLayout.setVerticalGroup(
            jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCoutLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldCoutcandidat, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldForfaitcentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelForfaitcentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelCoutamortissement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldCoutamortissement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelSpecialiteCout, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxSpecialiteCout, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelCoutcandidat, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelCoutposte, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldCoutposte, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelNbpostes, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldNbpostes, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanelCoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonListerCout, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSupprimerCout, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCreerCout, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerCout, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanelGestionEtat.setBackground(new java.awt.Color(153, 204, 255));
        jPanelGestionEtat.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer l'état", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jButtonCreerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEtats.setText("Créer");
        jButtonCreerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEtatsActionPerformed(evt);
            }
        });

        jButtonMettreAjourEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjourEtats.setText("Mettre à jour");
        jButtonMettreAjourEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourEtatsActionPerformed(evt);
            }
        });

        jButtonVisualiserEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserEtats.setText("Visualiser");
        jButtonVisualiserEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserEtatsActionPerformed(evt);
            }
        });

        jButtonSupprimerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEtats.setText("Supprimer");
        jButtonSupprimerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEtatsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelGestionEtatLayout = new javax.swing.GroupLayout(jPanelGestionEtat);
        jPanelGestionEtat.setLayout(jPanelGestionEtatLayout);
        jPanelGestionEtatLayout.setHorizontalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jButtonCreerEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonMettreAjourEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiserEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerEtats)
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanelGestionEtatLayout.setVerticalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonMettreAjourEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCreerEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonSupprimerEtats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVisualiserEtats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(362, 362, 362)
                        .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64)
                        .addComponent(jButtonFermer))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanelCout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(jPanelChoixCentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelChoixCentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelCout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonAnnulerChoixExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixExamenActionPerformed
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        jComboBoxSession.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixExamenActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jComboBoxRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionActionPerformed
        remplirDepartementCombobox();
    }//GEN-LAST:event_jComboBoxRegionActionPerformed

    private void jButtonAnnulerChoixSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixSouscentreActionPerformed
        jComboBoxRegion.setSelectedIndex(0);
        jComboBoxDepartement.setSelectedIndex(0);
        jComboBoxArrondissement.setSelectedIndex(0);
        jComboBoxSouscentre.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixSouscentreActionPerformed

    private void jComboBoxDepartementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementActionPerformed
        remplirArrondissementCombobox();
    }//GEN-LAST:event_jComboBoxDepartementActionPerformed

    private void jComboBoxSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSouscentreActionPerformed
        remplirSpecialiteCombobox();
    }//GEN-LAST:event_jComboBoxSouscentreActionPerformed

    private void jComboBoxArrondissementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementActionPerformed
        remplirSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementActionPerformed

    private void jButtonCreerCoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerCoutActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || sigleOptionCoutsSelected.equals("---") || coutcandidatString.equals("") || coutposteString.equals("") || forfaitString.equals("") || coutamortString.equals("")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre, donner le coût par candidat, le coût par poste, le forfait par sous-centre et le coût d'amortissement !");
        } else {
            validerCoutcandidat(coutcandidatString);
            validerCoutposte(coutposteString);
            validerNbpostes(nbpostesString);
            validerForfait(forfaitString);
            validerCoutamort(coutamortString);
            if (!continuerCoutcandidat || !continuerCoutposte || !continuerNbpostes || !continuerForfait || !continuerCoutamort) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Au moins un des nombres saisis est incorrect !");
            } else {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                for (Souscentre souscentre : souscentres) {
                    if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                        souscentreSelected = souscentre;
                        break;
                    }
                }

                for (Option option : options) {
                    if (option.getSigle().equals(sigleOptionCoutsSelected)) {
                        optionSelected = option;
                        break;
                    }
                }
                try {
                    metier.creerMopratiquesti(new Mopratiquesti(souscentreSelected, optionSelected, groupe, sessionSelected, coutcandidatSaisi, coutposteSaisi, nbpostesSaisi, forfaitSaisi, coutamortSaisi, 2));
                    JOptionPane.showMessageDialog(this, "Coûts par candidat, par poste, forfait sous-centre et coût d'amortissement enregistrés avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de d'enregistrer les coûts par candidat, par poste, coût d'amortissement et le forfait du sous-centre le sous-centre [" + nomSouscentreSelected + "]" + "\n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonCreerCoutActionPerformed

    private void jButtonListerCoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerCoutActionPerformed
        infoSaisies();
        Map<Souscentre, ArrayList<Mopratiquesti>> souscentreMopratiquestiMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses Mopratiquesti
        ArrayList<Souscentre> souscentresAvecMopratiquestiList = new ArrayList<>();//liste de tous les sous-centres ayant des Mopratiquesti dans le groupedexamensEnstring dans la session considérée
        if (groupedexamensEnstring.equals("") || anneeString.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens et une session !");
        } else {
            anneeSelected = Integer.parseInt(anneeString);
            mopratiquestis = metier.findAllMopratiquestisD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected, 2);

            //remplissage de souscentresAvecMopratiquestiList
            souscentres = metier.findAllSouscentres();
            for (Souscentre scentre : souscentres) {
                for (Mopratiquesti mopratiquesti : mopratiquestis) {
                    if (!souscentresAvecMopratiquestiList.contains(scentre) && mopratiquesti.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                        souscentresAvecMopratiquestiList.add(scentre);
                    }
                }
            }
            //remplissage de souscentreMopratiquestiMap
            for (Souscentre scentre : souscentresAvecMopratiquestiList) {
                ArrayList<Mopratiquesti> mopratiquestisList = new ArrayList<>();
                for (Mopratiquesti mopratiquesti : mopratiquestis) {
                    if (mopratiquesti.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                        mopratiquestisList.add(mopratiquesti);
                    }
                }
                souscentreMopratiquestiMap.put(scentre, mopratiquestisList);
            }

            if (!mopratiquestis.isEmpty()) {
                try {
                    List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                    for (Region region : regions) {
                        int i = 1;
                        for (Souscentre scentre : souscentresAvecMopratiquestiList) {
                            if (scentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                                for (Mopratiquesti mopratiquesti : souscentreMopratiquestiMap.get(scentre)) {
                                    Map<String, Object> row = new HashMap<>();
                                    row.put("session", anneeSelected);
                                    row.put("examen", groupedexamensEnstring);
                                    row.put("region", region.getNomreg());
                                    row.put("num", i++);
                                    row.put("souscentre", mopratiquesti.getSouscentre().getNomsouscent());
                                    row.put("option", mopratiquesti.getOption().getSigle());
                                    row.put("coutcandidat", mopratiquesti.getCoutcand());
                                    row.put("coutposte", mopratiquesti.getCoutposte());
                                    row.put("nbpostes", mopratiquesti.getNbpostes());
                                    row.put("forfait", mopratiquesti.getForfait());
                                    row.put("coutamort", mopratiquesti.getCoutamort());
                                    datasource.add(row);
                                }
                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeCoutsmopratiquestiReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Aucun coût par candidat, par poste, forfait sous-centre et coût d'amortissement trouvé dans la base de données !");
            }
        }
    }//GEN-LAST:event_jButtonListerCoutActionPerformed

    private void jButtonAnnulerCoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerCoutActionPerformed
        jTextFieldCoutamortissement.setText("");
        jTextFieldCoutposte.setText("");
        jTextFieldForfaitcentre.setText("");
        jComboBoxSpecialiteCout.setSelectedIndex(0);
        jTextFieldCoutcandidat.setText("");
        jTextFieldNbpostes.setText("");
    }//GEN-LAST:event_jButtonAnnulerCoutActionPerformed

    private void jButtonSupprimerCoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerCoutActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || sigleOptionCoutsSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre et une spécialité !");
        } else {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les coûts par candidat, par poste, forfait sous-centre et coût d'amortissement pour la spécialité " + sigleOptionCoutsSelected + " du sous-centre [" + nomSouscentreSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                anneeSelected = Integer.parseInt(anneeString);
                try {
                    Mopratiquesti mopratiquesti = metier.findMopratiquestiD1OptionD1SouscentreD1GroupedexamensD1Session(nomSouscentreSelected, anneeSelected, niveauSelected, typeSelected, sigleOptionCoutsSelected, 2);
                    metier.supprimerMopratiquesti(mopratiquesti);
                    JOptionPane.showMessageDialog(this, "Coûts par candidat, par poste, forfait sous-centre et coût d'amortissement supprimés avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer les Coûts par candidat, par poste, forfait sous-centre et coût d'amortissement pour la spécialité " + sigleOptionCoutsSelected + " du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerCoutActionPerformed

    private void jButtonCreerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEtatsActionPerformed
        infoSaisies();
        Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueMap = new HashMap<>();//contient chaque sous-centre et le tableau de ses statistiques
        Map<Souscentre, ArrayList<Mopratiquesti>> souscentreMopratiquestiMap = new HashMap<>();//contient chaque sous-centre et le tableau de ses Mopratiquesti concernant pratique 2
        ArrayList<Souscentre> souscentresList = new ArrayList<>();//liste des sous-centres ayant des candidats admissibles
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION POUR PREPARATION DE LA MATIÈRE D'OEUVRE DE PRATIQUE 2");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
            if (!caisses.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de matière d'oeuvre pratique 2 existent déjà pour ce groupe d'examens !");
            } else {
                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }

                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                for (Examen e : examensSelected) {
                    List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                    for (Statistique s : lesStats) {
                        ArrayList<Statistique> statList = new ArrayList<>();
                        if (souscentreStatistiqueMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueMap
                            statList = souscentreStatistiqueMap.get(s.getSouscentre());
                            statList.add(s);//on lui ajoute s
                            souscentreStatistiqueMap.put(s.getSouscentre(), statList);
                        } else {
                            statList.add(s);
                            souscentreStatistiqueMap.put(s.getSouscentre(), statList);
                        }
                    }
                }

                mopratiquestis = metier.findAllMopratiquestisD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected, 2);

                if (mopratiquestis.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Aucun coût par candidat, par poste, forfait sous-centre et coût d'amortissement trouvé dans la base de données !");
                } else {
                    for (Mopratiquesti mopratiquesti : mopratiquestis) {
                        if (!souscentresList.contains(mopratiquesti.getSouscentre())) {
                            souscentresList.add(mopratiquesti.getSouscentre());
                        }
                    }
                    //remplissage de souscentre souscentreMopratiquestiMap
                    for (Souscentre souscentre : souscentresList) {
                        ArrayList<Mopratiquesti> mopratiquestiD1souscentreList = new ArrayList<>();//liste des Mopratiquesti du souscentre courant
                        for (Mopratiquesti mopratiquesti : mopratiquestis) {
                            if (mopratiquesti.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent()) && !mopratiquestiD1souscentreList.contains(mopratiquesti)) {
                                if (mopratiquesti.getOption().getSigle().equals("F1") || mopratiquesti.getOption().getSigle().equals("F2") || mopratiquesti.getOption().getSigle().equals("F3") || mopratiquesti.getOption().getSigle().equals("F5") || mopratiquesti.getOption().getSigle().equals("F4-BA")) {
                                    //ne considère que mopratiquesti concernant pratique 2 d'après les spécialités
                                    mopratiquestiD1souscentreList.add(mopratiquesti);
                                }
                            }
                        }
                        if (!mopratiquestiD1souscentreList.isEmpty()) {
                            souscentreMopratiquestiMap.put(souscentre, mopratiquestiD1souscentreList);
                        }
                    }
                    boolean testsicreer = false;
                    try {
                        for (Souscentre souscentre : souscentresList) {
                            int dotation = 0;
                            for (Mopratiquesti mopratiquesti : souscentreMopratiquestiMap.get(souscentre)) {
                                determinerCoutD1Mopratiquesti(mopratiquesti, souscentreStatistiqueMap, souscentre);
                                dotation += (int) Math.ceil((double) totalMopratiquesti / (double) 1000) * 1000;
                            }
                            metier.creerCaisse(new Caisse(dotation, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                            testsicreer = true;
                        }
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testsicreer) {
                        JOptionPane.showMessageDialog(this, "Etats de matière d'oeuvre pratique 2 créés avec succès pour ce groupe d'examens !");
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
        }
        souscentreMopratiquestiMap.clear();
        examensSelected.clear();//on vide
        souscentreStatistiqueMap.clear();
        souscentresList.clear();
    }//GEN-LAST:event_jButtonCreerEtatsActionPerformed

    private void jButtonMettreAjourEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourEtatsActionPerformed
        infoSaisies();
        Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueMap = new HashMap<>();//contient chaque sous-centre et le tableau de ses statistiques
        Map<Souscentre, ArrayList<Mopratiquesti>> souscentreMopratiquestiMap = new HashMap<>();//contient chaque sous-centre et le tableau de ses Mopratiquesti concernant pratique 2
        Map<Souscentre, ArrayList<Nbadmissibles>> souscentreNbadmissiblesMap = new HashMap<>();//contient chaque sous-centre et le tableau de ses Nbadmissibles
        ArrayList<Souscentre> souscentresList = new ArrayList<>();//liste des sous-centres ayant des candidats admissibles
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de matière d'oeuvre pratique 2 pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION POUR PREPARATION DE LA MATIÈRE D'OEUVRE DE PRATIQUE 2");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de matière d'oeuvre pratique 2 n'existe pour ce groupe d'examens !");
                } else {
                    //on conserve quelques info de ces anciennes caisses
                    Groupe groupe = caisses.get(0).getGroupe();
                    sessionSelected = caisses.get(0).getSession();
                    //on supprime toutes les anciennes caisses du groupe d'examens
                    for (Caisse c : caisses) {
                        metier.supprimerCaisse(c);
                    }
                    //on va les recréer
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }

                    for (Examen e : examensSelected) {
                        List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                        for (Statistique s : lesStats) {
                            ArrayList<Statistique> statList = new ArrayList<>();
                            if (souscentreStatistiqueMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueMap
                                statList = souscentreStatistiqueMap.get(s.getSouscentre());
                                statList.add(s);//on lui ajoute s
                                souscentreStatistiqueMap.put(s.getSouscentre(), statList);
                            } else {
                                statList.add(s);
                                souscentreStatistiqueMap.put(s.getSouscentre(), statList);
                            }
                        }
                    }

                    mopratiquestis = metier.findAllMopratiquestisD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected, 2);

                    if (mopratiquestis.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Aucun coût par candidat, par poste, forfait sous-centre et coût d'amortissement trouvé dans la base de données !");
                    } else {
                        for (Mopratiquesti mopratiquesti : mopratiquestis) {
                            if (!souscentresList.contains(mopratiquesti.getSouscentre())) {
                                souscentresList.add(mopratiquesti.getSouscentre());
                            }
                        }
                        //remplissage de souscentre souscentreMopratiquestiMap
                        for (Souscentre souscentre : souscentresList) {
                            ArrayList<Mopratiquesti> mopratiquestiD1souscentreList = new ArrayList<>();//liste des Mopratiquesti du souscentre courant
                            for (Mopratiquesti mopratiquesti : mopratiquestis) {
                                if (mopratiquesti.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent()) && !mopratiquestiD1souscentreList.contains(mopratiquesti)) {
                                    if (mopratiquesti.getOption().getSigle().equals("F1") || mopratiquesti.getOption().getSigle().equals("F2") || mopratiquesti.getOption().getSigle().equals("F3") || mopratiquesti.getOption().getSigle().equals("F5") || mopratiquesti.getOption().getSigle().equals("F4-BA")) {
                                        //ne considère que mopratiquesti concernant pratique 2 d'après les spécialités
                                        mopratiquestiD1souscentreList.add(mopratiquesti);
                                    }
                                }
                            }
                            if (!mopratiquestiD1souscentreList.isEmpty()) {
                                souscentreMopratiquestiMap.put(souscentre, mopratiquestiD1souscentreList);
                            }
                        }

                        boolean testsimodifier = false;
                        try {
                            for (Souscentre souscentre : souscentresList) {
                                int dotation = 0;
                                for (Mopratiquesti mopratiquesti : souscentreMopratiquestiMap.get(souscentre)) {
                                    determinerCoutD1Mopratiquesti(mopratiquesti, souscentreStatistiqueMap, souscentre);
                                    dotation += (int) Math.ceil((double) totalMopratiquesti / (double) 1000) * 1000;
                                }
                                metier.creerCaisse(new Caisse(dotation, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                testsimodifier = true;
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testsimodifier) {
                            JOptionPane.showMessageDialog(this, "Etats de matière d'oeuvre pratique 2 mis à jour avec succès pour ce groupe d'examens !");
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
            }
            examensSelected.clear();//on vide
            souscentreMopratiquestiMap.clear();
            souscentreStatistiqueMap.clear();
            souscentresList.clear();
        }
    }//GEN-LAST:event_jButtonMettreAjourEtatsActionPerformed

    private void jButtonVisualiserEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserEtatsActionPerformed
        infoSaisies();
        Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueMap = new HashMap<>();//contient chaque sous-centre et le tableau de ses statistiques
        Map<Souscentre, ArrayList<Mopratiquesti>> souscentreMopratiquestiMap = new HashMap<>();//contient chaque sous-centre et le tableau de ses Mopratiquesti concernant pratique 2
        ArrayList<Souscentre> souscentresAvecMopratiquestiList = new ArrayList<>();//liste des sous-centres ayant des Mopratiquesti
        Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
        ArrayList<String> typesBruts = new ArrayList<>();
        ArrayList<String> typesAconsiderer = new ArrayList<>();
        ArrayList<String> niveauxAconsiderer = new ArrayList<>();
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION POUR PREPARATION DE LA MATIÈRE D'OEUVRE DE PRATIQUE 2");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);

            boolean poursuivre = false;
            for (Caisse c : caisses) {
                if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                    poursuivre = true;
                    break;
                }
            }
            if (!poursuivre) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de matière d'oeuvre pratique 2 n'ont pas encore été créés pour ce groupe d'examens !");
            } else {
                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                for (Examen e : examensSelected) {
                    List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                    for (Statistique s : lesStats) {
                        ArrayList<Statistique> statList = new ArrayList<>();
                        if (souscentreStatistiqueMap.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreStatistiqueMap
                            statList = souscentreStatistiqueMap.get(s.getSouscentre());
                            statList.add(s);//on lui ajoute s
                            souscentreStatistiqueMap.put(s.getSouscentre(), statList);
                        } else {
                            statList.add(s);
                            souscentreStatistiqueMap.put(s.getSouscentre(), statList);
                        }
                    }
                }

                //recherche des types des examens à utiliser
                for (Examen examen : examensSelected) {
                    System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                    if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                        typesBruts.add("ESG");
                    }
                    if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                        typesBruts.add("ESTP");
                    }
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 2) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                //recherche des niveaux des examens à utiliser
                if (!niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add(niveauSelected);
                    niveauxAconsiderer.add("TOUT");
                }
                if (niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add("PROB");
                    niveauxAconsiderer.add("BACC");
                    niveauxAconsiderer.add("TOUT");
                }

                //recherche des centres de billetage
                for (String niveau : niveauxAconsiderer) {
                    for (String type : typesAconsiderer) {
                        List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                        for (Centrebilletage centrebilletage : desCentrebilletages) {
                            ArrayList<Souscentre> souscentresList = new ArrayList<>();
                            if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                for (Secteurcouv sect : secteurs) {
                                    if (!souscentresList.contains(sect.getSouscentre())) {
                                        souscentresList.add(sect.getSouscentre());
                                    }
                                }
                                centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                            }
                        }
                    }
                }

                mopratiquestis = metier.findAllMopratiquestisD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected, 2);

                if (mopratiquestis.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Aucun coût par candidat, par poste, forfait sous-centre et coût d'amortissement trouvé dans la base de données !");
                } else {
                    for (Mopratiquesti mopratiquesti : mopratiquestis) {
                        if (!souscentresAvecMopratiquestiList.contains(mopratiquesti.getSouscentre())) {
                            souscentresAvecMopratiquestiList.add(mopratiquesti.getSouscentre());
                        }
                    }
                    //remplissage de souscentre souscentreMopratiquestiMap
                    for (Souscentre souscentre : souscentresAvecMopratiquestiList) {
                        ArrayList<Mopratiquesti> mopratiquestiD1souscentreList = new ArrayList<>();//liste des Mopratiquesti du souscentre courant
                        for (Mopratiquesti mopratiquesti : mopratiquestis) {
                            if (mopratiquesti.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent()) && !mopratiquestiD1souscentreList.contains(mopratiquesti)) {
                                if (mopratiquesti.getOption().getSigle().equals("F1") || mopratiquesti.getOption().getSigle().equals("F2") || mopratiquesti.getOption().getSigle().equals("F3") || mopratiquesti.getOption().getSigle().equals("F5") || mopratiquesti.getOption().getSigle().equals("F4-BA")) {
                                    //ne considère que mopratiquesti concernant pratique 2 d'après les spécialités
                                    mopratiquestiD1souscentreList.add(mopratiquesti);
                                }
                            }
                        }
                        if (!mopratiquestiD1souscentreList.isEmpty()) {
                            souscentreMopratiquestiMap.put(souscentre, mopratiquestiD1souscentreList);
                        }
                    }

                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                int totalMontant = 0;
                                if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                    int num = 1;
                                    for (int i = 0; i < souscentresList.size(); i++) {
                                        Souscentre souscentre = souscentresList.get(i);
                                        if (souscentresAvecMopratiquestiList.contains(souscentre)) {
                                            for (Mopratiquesti mopratiquesti : souscentreMopratiquestiMap.get(souscentre)) {
                                                determinerCoutD1Mopratiquesti(mopratiquesti, souscentreStatistiqueMap, souscentre);
                                                Map<String, Object> row = new HashMap<>();
                                                row.put("examen", groupedexamensEnstring);
                                                row.put("session", anneeSelected);
                                                row.put("region", region.getNomreg());
                                                row.put("reference", "obcbudget-v.3");
                                                row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                row.put("num", num++);
                                                row.put("souscentre", souscentre.getNomsouscent());
                                                row.put("option", specialitePourAffichage);
                                                row.put("effectif", statOption);
                                                int totalArrondi = (int) Math.ceil((double) totalMopratiquesti / (double) 1000) * 1000;
                                                row.put("dotation", totalArrondi);
                                                row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                totalMontant += totalArrondi;//jasperreport prendra la dernière valeur de totalMontant
                                                row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                datasource.add(row);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatUniqueMatiereDoeuvrePratique2Report.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    examensSelected.clear();//on vide
                    centrebilletageSouscentresMap.clear();
                    souscentreStatistiqueMap.clear();
                    mopratiquestis.clear();
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonVisualiserEtatsActionPerformed

    private void jButtonSupprimerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEtatsActionPerformed
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de matière d'oeuvre pratique 2 pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION POUR PREPARATION DE LA MATIÈRE D'OEUVRE DE PRATIQUE 2");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de matière d'oeuvre pratique 2 n'existe pour ce groupe d'examens !");
                } else {
                    boolean testsisupprimer = false;
                    try {
                        for (Caisse caisse : caisses) {
                            metier.supprimerCaisse(caisse);
                        }
                        testsisupprimer = true;
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testsisupprimer) {
                        JOptionPane.showMessageDialog(this, "Etats de matière d'oeuvre pratique 2 supprimés avec succès pour ce groupe d'examens !");
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerEtatsActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatUniqueMatiereDoeuvrePratique2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatUniqueMatiereDoeuvrePratique2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatUniqueMatiereDoeuvrePratique2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatUniqueMatiereDoeuvrePratique2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatUniqueMatiereDoeuvrePratique2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonAnnulerChoixExamen;
    private javax.swing.JButton jButtonAnnulerChoixSouscentre;
    private javax.swing.JButton jButtonAnnulerCout;
    private javax.swing.JButton jButtonCreerCout;
    private javax.swing.JButton jButtonCreerEtats;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonListerCout;
    private javax.swing.JButton jButtonMettreAjourEtats;
    private javax.swing.JButton jButtonSupprimerCout;
    private javax.swing.JButton jButtonSupprimerEtats;
    private javax.swing.JButton jButtonVisualiserEtats;
    private javax.swing.JComboBox<String> jComboBoxArrondissement;
    private javax.swing.JComboBox<String> jComboBoxDepartement;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxRegion;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxSouscentre;
    private javax.swing.JComboBox<String> jComboBoxSpecialiteCout;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelArrondissement;
    private javax.swing.JLabel jLabelCoutamortissement;
    private javax.swing.JLabel jLabelCoutcandidat;
    private javax.swing.JLabel jLabelCoutposte;
    private javax.swing.JLabel jLabelDepartement;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelForfaitcentre;
    private javax.swing.JLabel jLabelNbpostes;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelNomCentre;
    private javax.swing.JLabel jLabelRegion;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelSpecialiteCout;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanelChoixCentre;
    private javax.swing.JPanel jPanelChoixExamen;
    private javax.swing.JPanel jPanelCout;
    private javax.swing.JPanel jPanelGestionEtat;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldCoutamortissement;
    private javax.swing.JTextField jTextFieldCoutcandidat;
    private javax.swing.JTextField jTextFieldCoutposte;
    private javax.swing.JTextField jTextFieldForfaitcentre;
    private javax.swing.JTextField jTextFieldNbpostes;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Examen> examens = null;
    private List<Region> regions = null;
    private List<Examen> examensSelected = new ArrayList<Examen>();
    private List<Departement> departements = null;
    private List<Arrondissement> arrondissements = null;
    private String[] sessionsCombo = null;
    private String[] regionsCombo = null;
    private String[] departementsCombo = null;
    private String[] arrondissementsCombo = null;
    private String[] souscentresCombo = null;
    private String[] examensList = null;
    private String nomRegionSelected = "";
    private String nomSouscentreSelected = "";
    private List<Souscentre> souscentres = null;
    private Souscentre souscentreSelected = null;
    private String nomDepartementSelected = "";
    private String nomArrondissementSelected = "";
    private List<Option> options = null;
    private List<Specialisation> specialites = null;
    private String sigleOptionCoutsSelected = "";
    private String sigleOptionNbadmissibSelected = "";
    private Option optionSelected = null;
    private String[] specialitesCombo = null;
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private String phase = "ECRIT";
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private List<Caisse> caisses = null;
    private int txMO = 0, totalMopratiquesti = 0, statOption = 0;
    private double pourcentage = 0;
    private String specialitePourAffichage = "";
    private boolean continuerCoutcandidat = false;
    private boolean continuerCoutposte = false;
    private boolean continuerNbpostes = false;
    private boolean continuerForfait = false;
    private boolean continuerCoutamort = false;
    private int coutcandidatSaisi = 0;
    private String coutcandidatString = "";
    private int coutposteSaisi = 0;
    private String coutposteString = "";
    private int nbpostesSaisi = 0;
    private String nbpostesString = "";
    private int forfaitSaisi = 0;
    private String forfaitString = "";
    private int coutamortSaisi = 0;
    private String coutamortString = "";
    private List<Mopratiquesti> mopratiquestis = null;
    private Mopratiquesti mopratiquesti = null;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        examens = metier.findAllExamens();
        souscentres = metier.findAllSouscentres();
        options = metier.findAllOptions();
        regions = metier.findAllRegions();

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int i = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[i++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "IND"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        //on remplit la combobox des régions du sous-centre
        regionsCombo = new String[regions.size() + 1];
        regionsCombo[0] = "---";
        int j = 1;
        for (Region region : regions) {
            regionsCombo[j++] = region.getNomreg();
        }
        jComboBoxRegion.setModel(new DefaultComboBoxModel(regionsCombo));

        remplirDepartementCombobox();
        remplirArrondissementCombobox();
        remplirSouscentreCombobox();
        remplirSpecialiteCombobox();
    }

    private void infoSaisies() {
        anneeString = (String) jComboBoxSession.getSelectedItem();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        sigleOptionCoutsSelected = (String) jComboBoxSpecialiteCout.getSelectedItem();
        coutcandidatString = jTextFieldCoutcandidat.getText();
        coutposteString = jTextFieldCoutposte.getText();
        nbpostesString = jTextFieldNbpostes.getText();
        forfaitString = jTextFieldForfaitcentre.getText();
        coutamortString = jTextFieldCoutamortissement.getText();
    }

    private void remplirDepartementCombobox() {
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        departements = metier.findAllDepartementsD1Region(nomRegionSelected);
        //on remplit la combobox des départements
        departementsCombo = new String[departements.size() + 1];
        departementsCombo[0] = "---";
        int i = 1;
        for (Departement departement : departements) {
            departementsCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartement.setModel(new DefaultComboBoxModel(departementsCombo));
    }

    private void remplirArrondissementCombobox() {
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        arrondissements = metier.findAllArrondissementsD1Departement(nomDepartementSelected);
        //on remplit la combobox des départements
        arrondissementsCombo = new String[arrondissements.size() + 1];
        arrondissementsCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissements) {
            arrondissementsCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissement.setModel(new DefaultComboBoxModel(arrondissementsCombo));
    }

    private void remplirSouscentreCombobox() {
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        souscentres = metier.findAllSouscentresD1Arrondissement(nomArrondissementSelected);
        //on remplit la combobox des sous-centres
        souscentresCombo = new String[souscentres.size() + 1];
        souscentresCombo[0] = "---";
        int i = 1;
        for (Souscentre souscentre : souscentres) {
            souscentresCombo[i++] = souscentre.getNomsouscent();
        }
        jComboBoxSouscentre.setModel(new DefaultComboBoxModel(souscentresCombo));
    }

    private void remplirSpecialiteCombobox() {
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!nomSouscentreSelected.equals("---") && !anneeString.equals("---") && !niveauSelected.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            specialites = metier.findAllSpecialisationsD1SouscentrePour1SessionEtniveau(anneeSelected, nomSouscentreSelected, niveauSelected);
            if (specialites.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. ce sous-centre de pratique n'a aucune spécialité pour la session et niveau d'examen choisis !");
            } else {
                specialitesCombo = new String[specialites.size() + 1];
                specialitesCombo[0] = "---";
                int i = 1;
                for (Specialisation spec : specialites) {
                    specialitesCombo[i++] = spec.getOption().getSigle();
                }
                jComboBoxSpecialiteCout.setModel(new DefaultComboBoxModel(specialitesCombo));
            }
        }
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    private void validerCoutcandidat(String nbreString) {
        try {
            coutcandidatSaisi = Integer.parseInt(nbreString);
            continuerCoutcandidat = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le coût par candidat doit être fourni et contenir uniquement des chiffres entiers!");
            continuerCoutcandidat = false;
        }
    }

    private void validerCoutposte(String nbreString) {
        try {
            coutposteSaisi = Integer.parseInt(nbreString);
            continuerCoutposte = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le coût par poste doit être fourni et contenir uniquement des chiffres entiers!");
            continuerCoutposte = false;
        }
    }

    private void validerNbpostes(String nbreString) {
        try {
            nbpostesSaisi = Integer.parseInt(nbreString);
            continuerNbpostes = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de postes doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbpostes = false;
        }
    }

    private void validerForfait(String nbreString) {
        try {
            forfaitSaisi = Integer.parseInt(nbreString);
            continuerForfait = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le forfait par sous-centre doit être fourni et contenir uniquement des chiffres entiers!");
            continuerForfait = false;
        }
    }

    private void validerCoutamort(String nbreString) {
        try {
            coutamortSaisi = Integer.parseInt(nbreString);
            continuerCoutamort = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le coût d'amortissement doit être fourni et contenir uniquement des chiffres entiers!");
            continuerCoutamort = false;
        }
    }

    private void determinerCoutD1Mopratiquesti(Mopratiquesti mopratiquesti, Map<Souscentre, ArrayList<Statistique>> souscentreStatistiqueMap, Souscentre souscentre) {
        statOption = 0;
        totalMopratiquesti = 0;
        specialitePourAffichage = mopratiquesti.getOption().getSigle();
        for (Statistique stat : souscentreStatistiqueMap.get(souscentre)) {
            if (stat.getOption().getSigle().equals(specialitePourAffichage)) {
                statOption = stat.getNombre();
                break;
            }
        }

        if (niveauSelected.equals("PROB")) {
            txMO = 7000;
            if (specialitePourAffichage.equals("F1")) {
                pourcentage = 0.32;
            }
            if (specialitePourAffichage.equals("F2")) {
                pourcentage = 0.25;
            }
            if (specialitePourAffichage.equals("F3")) {
                pourcentage = 0.31;
            }
            if (specialitePourAffichage.equals("F5")) {
                pourcentage = 0.27;
            }
            if (specialitePourAffichage.equals("F4-BA")) {
                pourcentage = 0.23;
            }
        }
        if (niveauSelected.equals("BACC")) {
            txMO = 8000;
            if (specialitePourAffichage.equals("F1")) {
                pourcentage = 0.47;
            }
            if (specialitePourAffichage.equals("F2")) {
                pourcentage = 0.68;
            }
            if (specialitePourAffichage.equals("F3")) {
                pourcentage = 0.67;
            }
            if (specialitePourAffichage.equals("F5")) {
                pourcentage = 0.48;
            }
            if (specialitePourAffichage.equals("F4-BA")) {
                pourcentage = 0.57;
            }
        }

        if (statOption > 0) {
            totalMopratiquesti = (int) ((statOption * mopratiquesti.getCoutcand() + mopratiquesti.getForfait() + statOption * mopratiquesti.getCoutamort() + mopratiquesti.getNbpostes() * mopratiquesti.getCoutposte()) * pourcentage);
        }
    }
}
