package couche_ui;

import couche_jpa.Arrondissement;
import couche_jpa.Bureau;
import couche_jpa.Centrebilletage;
import couche_jpa.Departement;
import couche_jpa.Personnel;
import couche_jpa.Region;
import couche_jpa.Session;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueBureau extends javax.swing.JFrame {

    DefaultTableModel model;

    public VueBureau() {
        initComponents();
        model = (DefaultTableModel) jTable1.getModel();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonCreer = new javax.swing.JButton();
        jButtonRechercher = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jButtonVisualiser = new javax.swing.JButton();
        jPanelBureau = new javax.swing.JPanel();
        jComboBoxResponsable = new javax.swing.JComboBox<>();
        jComboBoxAssistant = new javax.swing.JComboBox<>();
        jLabelResponsable = new javax.swing.JLabel();
        jLabelAssistant = new javax.swing.JLabel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonModifier = new javax.swing.JButton();
        jPanelCentrebilletage = new javax.swing.JPanel();
        jLabelNiveau = new javax.swing.JLabel();
        jLabelType = new javax.swing.JLabel();
        jLabelNomCentrebilletage = new javax.swing.JLabel();
        jComboBoxCentrebilletage = new javax.swing.JComboBox<>();
        jTextFieldNiveau = new javax.swing.JTextField();
        jTextFieldType = new javax.swing.JTextField();
        jLabelDepartementBilletage = new javax.swing.JLabel();
        jComboBoxDepartement = new javax.swing.JComboBox<>();
        jLabelArrondissementBilletage = new javax.swing.JLabel();
        jComboBoxArrondissement = new javax.swing.JComboBox<>();
        jLabelRégion = new javax.swing.JLabel();
        jComboBoxRegion = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("BUREAU DU CENTRE DE BILLETAGE");

        jTable1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "N° Ordre", "Session", "Région", "Département", "Arrondissement", "Centre de billetage", "Responsable", "Assistant", "Version"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(true);
        jTable1.setShowVerticalLines(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButtonCreer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreer.setText("Créer");
        jButtonCreer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerActionPerformed(evt);
            }
        });

        jButtonRechercher.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonRechercher.setText("Rechercher");
        jButtonRechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRechercherActionPerformed(evt);
            }
        });

        jButtonSupprimer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jButtonAnnuler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jButtonVisualiser.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiser.setText("Visualiser");
        jButtonVisualiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserActionPerformed(evt);
            }
        });

        jPanelBureau.setBackground(new java.awt.Color(0, 255, 204));
        jPanelBureau.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Personnels du bureau", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(102, 0, 255))); // NOI18N

        jComboBoxResponsable.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxResponsable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxResponsableActionPerformed(evt);
            }
        });

        jComboBoxAssistant.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxAssistant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxAssistantActionPerformed(evt);
            }
        });

        jLabelResponsable.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelResponsable.setText("Responsable :");

        jLabelAssistant.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelAssistant.setText("Assistant :");

        javax.swing.GroupLayout jPanelBureauLayout = new javax.swing.GroupLayout(jPanelBureau);
        jPanelBureau.setLayout(jPanelBureauLayout);
        jPanelBureauLayout.setHorizontalGroup(
            jPanelBureauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBureauLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelBureauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelResponsable)
                    .addComponent(jLabelAssistant))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelBureauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxAssistant, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxResponsable, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanelBureauLayout.setVerticalGroup(
            jPanelBureauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBureauLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanelBureauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelResponsable, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxResponsable, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanelBureauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxAssistant, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelAssistant, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonModifier.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonModifier.setText("Modifier");
        jButtonModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierActionPerformed(evt);
            }
        });

        jPanelCentrebilletage.setBackground(new java.awt.Color(153, 255, 153));
        jPanelCentrebilletage.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Centre de billetage", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(51, 0, 204))); // NOI18N

        jLabelNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveau.setText("Niveau :");

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jLabelNomCentrebilletage.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNomCentrebilletage.setText("Nom du centre :");

        jComboBoxCentrebilletage.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxCentrebilletage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCentrebilletageActionPerformed(evt);
            }
        });

        jTextFieldNiveau.setEditable(false);
        jTextFieldNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldNiveau.setEnabled(false);

        jTextFieldType.setEditable(false);
        jTextFieldType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldType.setEnabled(false);
        jTextFieldType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldTypeActionPerformed(evt);
            }
        });

        jLabelDepartementBilletage.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartementBilletage.setText("Département :");

        jComboBoxDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementActionPerformed(evt);
            }
        });

        jLabelArrondissementBilletage.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissementBilletage.setText("Arrondissement :");

        jComboBoxArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementActionPerformed(evt);
            }
        });

        jLabelRégion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRégion.setText("Région :");

        jComboBoxRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelCentrebilletageLayout = new javax.swing.GroupLayout(jPanelCentrebilletage);
        jPanelCentrebilletage.setLayout(jPanelCentrebilletageLayout);
        jPanelCentrebilletageLayout.setHorizontalGroup(
            jPanelCentrebilletageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCentrebilletageLayout.createSequentialGroup()
                .addGroup(jPanelCentrebilletageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCentrebilletageLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabelNiveau)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldType, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelCentrebilletageLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPanelCentrebilletageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelDepartementBilletage)
                            .addComponent(jLabelArrondissementBilletage)
                            .addComponent(jLabelNomCentrebilletage)
                            .addComponent(jLabelRégion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelCentrebilletageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxCentrebilletage, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxArrondissement, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxDepartement, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanelCentrebilletageLayout.setVerticalGroup(
            jPanelCentrebilletageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCentrebilletageLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanelCentrebilletageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelRégion, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelCentrebilletageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDepartementBilletage, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelCentrebilletageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelArrondissementBilletage, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelCentrebilletageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxCentrebilletage, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNomCentrebilletage, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanelCentrebilletageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldType, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1)
                .addGap(22, 22, 22))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(301, 301, 301)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(304, 304, 304)
                                .addComponent(jButtonCreer)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonRechercher)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonModifier)
                                .addGap(20, 20, 20)
                                .addComponent(jButtonSupprimer)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonAnnuler)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonFermer)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonVisualiser)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jPanelCentrebilletage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelBureau, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelSession)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(43, 43, 43))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelSession, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42)
                        .addComponent(jPanelBureau, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanelCentrebilletage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonModifier, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButtonVisualiser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonCreer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonRechercher, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonSupprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonAnnuler, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        videFrame();
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jComboBoxRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionActionPerformed
        remplirDepartementCombobox();
    }//GEN-LAST:event_jComboBoxRegionActionPerformed

    private void jButtonCreerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        if (!anneeString.equals("---") && !nomCentrebilletageSelected.equals("---") && !nomResponsableSelected.equals("---") && !nomAssistantSelected.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            for (Centrebilletage centrebill : centrebilletages) {
                if (centrebill.getEtablissement().getAbreviation().equals(nomCentrebilletageSelected)) {
                    centrebilletageSelected = centrebill;
                    break;
                }
            }
            
            for (Session s : sessions) {
                if (s.getAnnee() == anneeSelected) {
                    sessionSelected = s;
                    break;
                }
            }
            if(!nomResponsableSelected.equals(nomAssistantSelected)){          
                try {
                    //responsbleSelected et assistantSelected sont déterminer au moment du clic sur leur jcombox
                    metier.creerBureau(new Bureau(centrebilletageSelected, responsableSelected, assistantSelected, sessionSelected));
                    JOptionPane.showMessageDialog(this, "Bureau du centre de billetage créé avec succès !");
                    //videFrame();
                    int i = 1;
                    bureau = metier.findBureauD1CentrebilletageDans1Session(nomCentrebilletageSelected, anneeSelected);
                    model.insertRow(model.getRowCount(), new Object[]{bureau.getIdburo(),i++,bureau.getSession().getAnnee(),bureau.getCentrebilletage().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(),bureau.getCentrebilletage().getEtablissement().getArrondissement().getDepartement().getNomdepart(),bureau.getCentrebilletage().getEtablissement().getArrondissement().getNomarr(),bureau.getCentrebilletage().getEtablissement().getAbreviation(),bureau.getResponsable().getNompers()+" "+bureau.getResponsable().getPrenom(),bureau.getAssistant().getNompers()+" "+bureau.getAssistant().getPrenom(),bureau.getVersion()});
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible d'extraire le bureau du centre de billetage [" + nomCentrebilletageSelected + "] \n raison:" + ex.getMessage());
                }
            }
            else JOptionPane.showMessageDialog(this, "Veuillez recommencer svp. Le responsble et l'assistant doivent être des personnes différentes !");
        } else {
            JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
        }       
    }//GEN-LAST:event_jButtonCreerActionPerformed

    private void jButtonRechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRechercherActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();       
        if (!nomRegionSelected.equals("---") && !anneeString.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            if (!nomDepartementSelected.equals("---")) {
                if (!nomArrondissementSelected.equals("---")) {
                    if (!nomCentrebilletageSelected.equals("---")) {
                        try {
                            int i = 1;
                            bureau = metier.findBureauD1CentrebilletageDans1Session(nomCentrebilletageSelected, anneeSelected);
                            model.insertRow(model.getRowCount(), new Object[]{bureau.getIdburo(),i++,bureau.getSession().getAnnee(),bureau.getCentrebilletage().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(),bureau.getCentrebilletage().getEtablissement().getArrondissement().getDepartement().getNomdepart(),bureau.getCentrebilletage().getEtablissement().getArrondissement().getNomarr(),bureau.getCentrebilletage().getEtablissement().getAbreviation(),bureau.getResponsable().getNompers()+" "+bureau.getResponsable().getPrenom(),bureau.getAssistant().getNompers()+" "+bureau.getAssistant().getPrenom(),bureau.getVersion()});
                        } catch (ObcbudgetException ex) {
                            JOptionPane.showMessageDialog(this, "Impossible d'extraire le bureau centre de billetage [" + nomCentrebilletageSelected + "] \n raison:" + ex.getMessage());
                        }
                    } else {
                        try {
                            int i = 1;
                            bureaux = metier.findAllBureauxD1ArrondissementDans1Session(nomArrondissementSelected,anneeSelected);
                            for (Bureau bureau : bureaux) {
                                model.insertRow(model.getRowCount(), new Object[]{bureau.getIdburo(),i++,bureau.getSession().getAnnee(),bureau.getCentrebilletage().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(),bureau.getCentrebilletage().getEtablissement().getArrondissement().getDepartement().getNomdepart(),bureau.getCentrebilletage().getEtablissement().getArrondissement().getNomarr(),bureau.getCentrebilletage().getEtablissement().getAbreviation(),bureau.getResponsable().getNompers()+" "+bureau.getResponsable().getPrenom(),bureau.getAssistant().getNompers()+" "+bureau.getAssistant().getPrenom(),bureau.getVersion()});
                            }
                        } catch (ObcbudgetException ex) {
                            JOptionPane.showMessageDialog(this, "Impossible d'extraire les bureau des centres de billetage de l'arrondissement [" + nomArrondissementSelected + "] \n raison:" + ex.getMessage());
                        }
                    }
                } else {
                    try {
                        int i = 1;
                        bureaux = metier.findAllBureauxD1DepartementDans1Session(nomDepartementSelected,anneeSelected);
                        for (Bureau bureau : bureaux) {
                            model.insertRow(model.getRowCount(), new Object[]{bureau.getIdburo(),i++,bureau.getSession().getAnnee(),bureau.getCentrebilletage().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(),bureau.getCentrebilletage().getEtablissement().getArrondissement().getDepartement().getNomdepart(),bureau.getCentrebilletage().getEtablissement().getArrondissement().getNomarr(),bureau.getCentrebilletage().getEtablissement().getAbreviation(),bureau.getResponsable().getNompers()+" "+bureau.getResponsable().getPrenom(),bureau.getAssistant().getNompers()+" "+bureau.getAssistant().getPrenom(),bureau.getVersion()});
                        }
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible d'extraire les bureaux des centres de billetage du département [" + nomDepartementSelected + "] \n raison:" + ex.getMessage());
                    }
                }
            } else {
                try {
                    int i = 1;
                    bureaux = metier.findAllBureauxD1RegionDans1Session(nomRegionSelected,anneeSelected);
                    for (Bureau bureau : bureaux) {
                        model.insertRow(model.getRowCount(), new Object[]{bureau.getIdburo(),i++,bureau.getSession().getAnnee(),bureau.getCentrebilletage().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(),bureau.getCentrebilletage().getEtablissement().getArrondissement().getDepartement().getNomdepart(),bureau.getCentrebilletage().getEtablissement().getArrondissement().getNomarr(),bureau.getCentrebilletage().getEtablissement().getAbreviation(),bureau.getResponsable().getNompers()+" "+bureau.getResponsable().getPrenom(),bureau.getAssistant().getNompers()+" "+bureau.getAssistant().getPrenom(),bureau.getVersion()});
                    }
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible d'extraire les bureaux des centres de billetage de la région [" + nomRegionSelected + "] \n raison:" + ex.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "La session et au moins la région sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonRechercherActionPerformed

    private void jComboBoxResponsableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxResponsableActionPerformed
        nomResponsableSelected = (String) jComboBoxResponsable.getSelectedItem();
        if (!nomResponsableSelected.equals("---")) {
            for (Personnel p : personnels) {
                if ((p.getNompers() + " " + p.getPrenom()).equals(nomResponsableSelected)) {
                    responsableSelected = p;
                    break;
                }
            }
        }
    }//GEN-LAST:event_jComboBoxResponsableActionPerformed

    private void jComboBoxAssistantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxAssistantActionPerformed
        nomAssistantSelected = (String) jComboBoxAssistant.getSelectedItem();
        if (!nomAssistantSelected.equals("---")) {
            for (Personnel p : personnels) {
                if ((p.getNompers() + " " + p.getPrenom()).equals(nomAssistantSelected)) {
                    assistantSelected = p;
                    break;
                }
            }
        }
    }//GEN-LAST:event_jComboBoxAssistantActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        //remplit les champs
        int ligne = jTable1.getSelectedRow();
        idBureauCliked=(int) model.getValueAt(ligne, 0);
        jComboBoxSession.setSelectedItem("" + model.getValueAt(ligne, 2));
        jComboBoxRegion.setSelectedItem((String) model.getValueAt(ligne, 3));
        jComboBoxDepartement.setSelectedItem((String) model.getValueAt(ligne, 4));
        jComboBoxArrondissement.setSelectedItem((String) model.getValueAt(ligne, 5));
        jComboBoxCentrebilletage.setSelectedItem((String) model.getValueAt(ligne, 6));
        jComboBoxResponsable.setSelectedItem((String) model.getValueAt(ligne, 7));
        jComboBoxAssistant.setSelectedItem((String) model.getValueAt(ligne, 8));
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer le bureau du centre de billetage [" + nomCentrebilletageSelected+"] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if(!anneeString.equals("---") && !nomCentrebilletageSelected.equals("---")){                
                try{
                    metier.supprimerBureau(metier.findBureauD1CentrebilletageDans1Session(nomCentrebilletageSelected, anneeSelected));
                    JOptionPane.showMessageDialog(this, "Bureau du centre de billetage [" + nomCentrebilletageSelected+" supprimé avec succès !"); 
                    int i = 1;
                    bureau = metier.findBureauD1CentrebilletageDans1Session(nomCentrebilletageSelected, anneeSelected);
                    model.insertRow(model.getRowCount(), new Object[]{bureau.getIdburo(),i++,bureau.getSession().getAnnee(),bureau.getCentrebilletage().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(),bureau.getCentrebilletage().getEtablissement().getArrondissement().getDepartement().getNomdepart(),bureau.getCentrebilletage().getEtablissement().getArrondissement().getNomarr(),bureau.getCentrebilletage().getEtablissement().getAbreviation(),bureau.getResponsable().getNompers()+" "+bureau.getResponsable().getPrenom(),bureau.getAssistant().getNompers()+" "+bureau.getAssistant().getPrenom(),bureau.getVersion()});
                }catch(ObcbudgetException ex){
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer le bureau du centre de billetage [" + nomCentrebilletageSelected+"] \n raison:"+ex.getMessage()); 
                }                        
            }
            else JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !"); 
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jButtonVisualiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserActionPerformed
        anneeString=(String)jComboBoxSession.getSelectedItem();
        if (!anneeString.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            bureaux = metier.findAllBureauxD1Session(anneeSelected);
            try {
                List<Map<String, Object>> datasource = new ArrayList<>();
                int i = 1;
                for (Bureau bureau : bureaux) {
                    Map<String, Object> row = new HashMap<>();
                    String examensconcernes="";
                    row.put("session",bureau.getSession().getAnnee());
                    row.put("numero", i++);
                    row.put("etablissement",bureau.getCentrebilletage().getEtablissement().getAbreviation());
                    row.put("responsable",bureau.getResponsable().getNompers()+" "+bureau.getResponsable().getPrenom()+" (R)");
                    row.put("assistant",bureau.getAssistant().getNompers()+" "+bureau.getAssistant().getPrenom()+" (A)");
   
                    if(!bureau.getCentrebilletage().getNiveau().equals("TOUT") && !bureau.getCentrebilletage().getType().equals("TOUT")){
                        examensconcernes=bureau.getCentrebilletage().getNiveau()+"/"+bureau.getCentrebilletage().getType();
                    }
                    if(bureau.getCentrebilletage().getNiveau().equals("TOUT") && !bureau.getCentrebilletage().getType().equals("TOUT")){
                        examensconcernes="PROB/"+bureau.getCentrebilletage().getType()+"\n BACC/"+bureau.getCentrebilletage().getType();
                    }
                    if(!bureau.getCentrebilletage().getNiveau().equals("TOUT") && bureau.getCentrebilletage().getType().equals("TOUT")){
                        examensconcernes=bureau.getCentrebilletage().getNiveau()+"/ESG\n"+bureau.getCentrebilletage().getNiveau()+"/ESTP";
                    }
                    if(bureau.getCentrebilletage().getNiveau().equals("TOUT") && bureau.getCentrebilletage().getType().equals("TOUT")){
                        examensconcernes="ESG/ESTP";
                    }
                    row.put("examensconcernes",examensconcernes);
                    row.put("region",bureau.getCentrebilletage().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                    datasource.add(row);
                }
                JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\centrebilletageReport.jrxml");
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                jasperViewer.setVisible(true);
            } catch (JRException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez sélectionner une session svp !");
        }
        bureaux.clear();
    }//GEN-LAST:event_jButtonVisualiserActionPerformed

    private void jComboBoxCentrebilletageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCentrebilletageActionPerformed
        nomCentrebilletageSelected = (String) jComboBoxCentrebilletage.getSelectedItem();
        if(!nomCentrebilletageSelected.equals("---")){
            centrebilletage = metier.findCentrebilletageD1Etablissement(nomCentrebilletageSelected);
            jTextFieldNiveau.setText(centrebilletage.getNiveau());
            jTextFieldType.setText(centrebilletage.getType());
        }
    }//GEN-LAST:event_jComboBoxCentrebilletageActionPerformed

    private void jTextFieldTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldTypeActionPerformed

    private void jComboBoxDepartementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementActionPerformed
        remplirArrondissementCombobox();
        remplirPersonnelsDuDepartementCombobox();
    }//GEN-LAST:event_jComboBoxDepartementActionPerformed

    private void jComboBoxArrondissementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementActionPerformed
        remplirCentrebilletageCombobox();
        remplirPersonnelsDelArrondissementCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementActionPerformed

    private void jButtonModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this,"Voulez-vous vraiment modifier le bureau du centre de billetage [" + nomCentrebilletageSelected+"] ?", "confirmation de modification",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if(result == JOptionPane.YES_OPTION){
            if (!anneeString.equals("---") && !nomCentrebilletageSelected.equals("---") && !nomResponsableSelected.equals("---") && !nomAssistantSelected.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                for (Centrebilletage centrebill : centrebilletages) {
                    if (centrebill.getEtablissement().getAbreviation().equals(nomCentrebilletageSelected)) {
                        centrebilletageSelected = centrebill;
                        break;
                    }
                }
                
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                //responsbleSelected et assistantSelected sont déterminer au moment du clic sur leur jcombox
                if(!nomResponsableSelected.equals(nomAssistantSelected)){  
                    bureauCliked=metier.findBureauById(idBureauCliked);
                    bureauCliked.setCentrebilletage(centrebilletageSelected);
                    bureauCliked.setResponsable(responsableSelected);
                    bureauCliked.setAssistant(assistantSelected);
                    bureauCliked.setSession(sessionSelected);
                    try {
                        metier.modifierBureau(bureauCliked);
                        JOptionPane.showMessageDialog(this, "Bureau du centre de billetage [" + nomCentrebilletageSelected+"] modifié avec succès !");
                        //videFrame();
                        int i = 1;
                        bureau = metier.findBureauD1CentrebilletageDans1Session(nomCentrebilletageSelected, anneeSelected);
                        model.insertRow(model.getRowCount(), new Object[]{bureau.getIdburo(),i++,bureau.getSession().getAnnee(),bureau.getCentrebilletage().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(),bureau.getCentrebilletage().getEtablissement().getArrondissement().getDepartement().getNomdepart(),bureau.getCentrebilletage().getEtablissement().getArrondissement().getNomarr(),bureau.getCentrebilletage().getEtablissement().getAbreviation(),bureau.getResponsable().getNompers()+" "+bureau.getResponsable().getPrenom(),bureau.getAssistant().getNompers()+" "+bureau.getAssistant().getPrenom(),bureau.getVersion()});
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de modifier le bureau du centre de billetage [" + nomCentrebilletageSelected + "] \n raison:" + ex.getMessage());
                    }
                }
                else JOptionPane.showMessageDialog(this, "Veuillez recommencer svp. Le responsble et l'assistant doivent être des personnes différentes !");
            } else {
                JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
            }
        } 
    }//GEN-LAST:event_jButtonModifierActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                

}
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueBureau.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        

} catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueBureau.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        

} catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueBureau.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        

} catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueBureau.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueBureau().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonCreer;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonRechercher;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JButton jButtonVisualiser;
    private javax.swing.JComboBox<String> jComboBoxArrondissement;
    private javax.swing.JComboBox<String> jComboBoxAssistant;
    private javax.swing.JComboBox<String> jComboBoxCentrebilletage;
    private javax.swing.JComboBox<String> jComboBoxDepartement;
    private javax.swing.JComboBox<String> jComboBoxRegion;
    private javax.swing.JComboBox<String> jComboBoxResponsable;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelArrondissementBilletage;
    private javax.swing.JLabel jLabelAssistant;
    private javax.swing.JLabel jLabelDepartementBilletage;
    private javax.swing.JLabel jLabelNiveau;
    private javax.swing.JLabel jLabelNomCentrebilletage;
    private javax.swing.JLabel jLabelResponsable;
    private javax.swing.JLabel jLabelRégion;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanelBureau;
    private javax.swing.JPanel jPanelCentrebilletage;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldNiveau;
    private javax.swing.JTextField jTextFieldType;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Region> regions = null;
    private List<Session> sessions = null;
    private String[] regionsCombo = null;
    private String[] sessionsCombo = null;
    private List<Departement> departements = null;
    private List<Arrondissement> arrondissements = null;
    private List<Personnel> personnels = null;
    private String[] departementsCombo = null;
    private String[] arrondissementsCombo = null;
    private String[] responsablesCombo = null;
    private String[] assistantsCombo = null;
    private String[] centrebilletagesCombo = null;
    private List<Centrebilletage> centrebilletages = null;
    private Departement departementSelected = null;
    private Arrondissement arrondissementSelected = null;
    private Centrebilletage centrebilletageSelected = null;
    private Centrebilletage centrebilletage = null;
    private String nomCentrebilletageSelected = "";
    private String nomRegionSelected = "";
    private int anneeSelected = 0;
    private int idBureauCliked=0;
    private String anneeString = "";
    private String type = "";
    private String niveau = "";
    private Session sessionSelected = null;
    private String nomDepartementSelected = "";
    private String nomArrondissementSelected = "";
    private String nomResponsableSelected = "";
    private String matriculeResponsableSelected = "";
    private String nomAssistantSelected = "";
    private String matriculeAssistantSelected = "";
    private Personnel responsableSelected = null;
    private Personnel assistantSelected = null;
    private List<Bureau> bureaux = null;
    private Bureau bureau = null;
    private Bureau bureauCliked = null;
    
   

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        regions = metier.findAllRegions();
        sessions = metier.findAllSessions();

        //on remplit la combobox des régions
        regionsCombo = new String[regions.size() + 1];
        regionsCombo[0] = "---";
        int i = 1;
        for (Region region : regions) {
            regionsCombo[i++] = region.getNomreg();
        }
        jComboBoxRegion.setModel(new DefaultComboBoxModel(regionsCombo));

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int j = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[j++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        remplirDepartementCombobox();
        remplirArrondissementCombobox();
        remplirPersonnelsDuDepartementCombobox();//une seule méthode pour remplir les combobox des responsables et des assistants
        remplirPersonnelsDelArrondissementCombobox();
        remplirCentrebilletageCombobox();
    }

    private void infoSaisies() {
        anneeString = (String) jComboBoxSession.getSelectedItem();
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        nomCentrebilletageSelected = (String) jComboBoxCentrebilletage.getSelectedItem();   
    }

    private void videFrame() {
        jComboBoxSession.setSelectedIndex(0);
        jComboBoxRegion.setSelectedIndex(0);
        jComboBoxDepartement.setSelectedIndex(0);
        jComboBoxArrondissement.setSelectedIndex(0);
        jComboBoxCentrebilletage.setSelectedIndex(0);
        jComboBoxResponsable.setSelectedIndex(0);
        jComboBoxAssistant.setSelectedIndex(0);
        jTextFieldNiveau.setText("");
        jTextFieldType.setText("");
        model.setRowCount(0);//vide la jTable       

    }

    private void remplirDepartementCombobox() {
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        departements = metier.findAllDepartementsD1Region(nomRegionSelected);
        //on remplit la combobox des départements
        departementsCombo = new String[departements.size() + 1];
        departementsCombo[0] = "---";
        int i = 1;
        for (Departement departement : departements) {
            departementsCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartement.setModel(new DefaultComboBoxModel(departementsCombo));
    }

    private void remplirArrondissementCombobox() {
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        arrondissements = metier.findAllArrondissementsD1Departement(nomDepartementSelected);
        //on remplit la combobox des arrondissements
        arrondissementsCombo = new String[arrondissements.size() + 1];
        arrondissementsCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissements) {
            arrondissementsCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissement.setModel(new DefaultComboBoxModel(arrondissementsCombo));
    }

    private void remplirCentrebilletageCombobox() {
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        centrebilletages = metier.findAllCentrebilletagesD1Arrondissement(nomArrondissementSelected);
        //on remplit la combobox des centrebilletages
        centrebilletagesCombo = new String[centrebilletages.size() + 1];
        centrebilletagesCombo[0] = "---";
        int i = 1;
        for (Centrebilletage centrebill : centrebilletages) {
            centrebilletagesCombo[i++] = centrebill.getEtablissement().getAbreviation();
        }
        jComboBoxCentrebilletage.setModel(new DefaultComboBoxModel(centrebilletagesCombo));
    }

    private void remplirPersonnelsDuDepartementCombobox() {
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        personnels = metier.findAllPersonnelsD1Departement(nomDepartementSelected);
        //on remplit les combobox des responsables et des assistants
        responsablesCombo = new String[personnels.size() + 1];
        assistantsCombo = new String[personnels.size() + 1];
        responsablesCombo[0] = "---";
        assistantsCombo[0] = "---";
        int i = 1;
        for (Personnel personnel : personnels) {
            responsablesCombo[i] = personnel.getNompers() + " " + personnel.getPrenom();
            assistantsCombo[i] = personnel.getNompers() + " " + personnel.getPrenom();
            i++;
        }
        jComboBoxResponsable.setModel(new DefaultComboBoxModel(responsablesCombo));
        jComboBoxAssistant.setModel(new DefaultComboBoxModel(assistantsCombo));
    }
    
    private void remplirPersonnelsDelArrondissementCombobox() {
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        personnels = metier.findAllPersonnelsD1Arrondissement(nomArrondissementSelected);
        //on remplit les combobox des responsables et des assistants
        responsablesCombo = new String[personnels.size() + 1];
        assistantsCombo = new String[personnels.size() + 1];
        responsablesCombo[0] = "---";
        assistantsCombo[0] = "---";
        int i = 1;
        for (Personnel personnel : personnels) {
            responsablesCombo[i] = personnel.getNompers() + " " + personnel.getPrenom();
            assistantsCombo[i] = personnel.getNompers() + " " + personnel.getPrenom();
            i++;
        }
        jComboBoxResponsable.setModel(new DefaultComboBoxModel(responsablesCombo));
        jComboBoxAssistant.setModel(new DefaultComboBoxModel(assistantsCombo));
    }
}
