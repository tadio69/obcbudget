package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Arrondissement;
import couche_jpa.Caisse;
import couche_jpa.Centrebilletage;
import couche_jpa.Departement;
import couche_jpa.Examen;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Jurycorrige;
import couche_jpa.Nbchefsalle;
import couche_jpa.Option;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_jpa.Sousfamille;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueEtatCorrectionsESG extends javax.swing.JFrame {

    public VueEtatCorrectionsESG() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButtonFermer = new javax.swing.JButton();
        jPanelChoixExamen = new javax.swing.JPanel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixExamen = new javax.swing.JButton();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelExamen = new javax.swing.JLabel();
        jPanelChoixCentre = new javax.swing.JPanel();
        jLabelRegion = new javax.swing.JLabel();
        jComboBoxRegion = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixCentre = new javax.swing.JButton();
        jLabelDepartement = new javax.swing.JLabel();
        jComboBoxDepartement = new javax.swing.JComboBox<>();
        jLabelNomCentre = new javax.swing.JLabel();
        jComboBoxSouscentre = new javax.swing.JComboBox<>();
        jLabelArrondissement = new javax.swing.JLabel();
        jComboBoxArrondissement = new javax.swing.JComboBox<>();
        jPanelNbcandidats = new javax.swing.JPanel();
        jLabelNbcandidats = new javax.swing.JLabel();
        jTextFieldNbcandidats = new javax.swing.JTextField();
        jButtonCreerNombreCandidats = new javax.swing.JButton();
        jButtonSupprimerNombreCandidats = new javax.swing.JButton();
        jButtonListerNombreCandidats = new javax.swing.JButton();
        jLabelSousfamille = new javax.swing.JLabel();
        jComboBoxSousfamille = new javax.swing.JComboBox<>();
        jLabelNbjurys = new javax.swing.JLabel();
        jTextFieldNbjurys = new javax.swing.JTextField();
        jButtonAnnulerNombreCandidats = new javax.swing.JButton();
        jPanelGestionEtat = new javax.swing.JPanel();
        jButtonCreerEtats = new javax.swing.JButton();
        jButtonMettreAjourEtats = new javax.swing.JButton();
        jButtonVisualiserEtats = new javax.swing.JButton();
        jButtonSupprimerEtats = new javax.swing.JButton();
        jCheckBoxAdditif = new javax.swing.JCheckBox();
        jPanelNbreChefsalle = new javax.swing.JPanel();
        jLabelNombreChefsalle = new javax.swing.JLabel();
        jTextFieldNbchefsalle = new javax.swing.JTextField();
        jButtonCreerNombreChefsalle = new javax.swing.JButton();
        jButtonSupprimerNombreChefsalle = new javax.swing.JButton();
        jButtonListerNombreChefsalle = new javax.swing.JButton();
        jPanelChoixTypeNombreAenregistrer = new javax.swing.JPanel();
        jRadioButtonNbcandidats = new javax.swing.JRadioButton();
        jRadioButtonNbchefsalle = new javax.swing.JRadioButton();
        jButtonAnnulerChoixTypeNbreAenregistrer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT DE CORRECTION (ESG)");

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jPanelChoixExamen.setBackground(new java.awt.Color(102, 255, 153));
        jPanelChoixExamen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un groupe d'examens et une session", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixExamen.setText("Annuler");
        jButtonAnnulerChoixExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixExamenActionPerformed(evt);
            }
        });

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        javax.swing.GroupLayout jPanelChoixExamenLayout = new javax.swing.GroupLayout(jPanelChoixExamen);
        jPanelChoixExamen.setLayout(jPanelChoixExamenLayout);
        jPanelChoixExamenLayout.setHorizontalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(0, 32, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addGap(26, 26, 26))
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabelSession)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jButtonAnnulerChoixExamen)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixExamenLayout.setVerticalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanelChoixCentre.setBackground(new java.awt.Color(153, 255, 255));
        jPanelChoixCentre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un centre de correction", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jLabelRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegion.setText("Région :");

        jComboBoxRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixCentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixCentre.setText("Annuler");
        jButtonAnnulerChoixCentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixCentreActionPerformed(evt);
            }
        });

        jLabelDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartement.setText("Département :");

        jComboBoxDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementActionPerformed(evt);
            }
        });

        jLabelNomCentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNomCentre.setText("Sous-centre de correction :");

        jComboBoxSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSouscentreActionPerformed(evt);
            }
        });

        jLabelArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissement.setText("Arrondissement :");

        jComboBoxArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixCentreLayout = new javax.swing.GroupLayout(jPanelChoixCentre);
        jPanelChoixCentre.setLayout(jPanelChoixCentreLayout);
        jPanelChoixCentreLayout.setHorizontalGroup(
            jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelRegion)
                    .addComponent(jLabelDepartement)
                    .addComponent(jLabelNomCentre)
                    .addComponent(jLabelArrondissement))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                        .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonAnnulerChoixCentre)
                        .addGap(53, 53, 53))
                    .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                        .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(20, Short.MAX_VALUE))))
        );
        jPanelChoixCentreLayout.setVerticalGroup(
            jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixCentreLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixCentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNomCentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelNbcandidats.setBackground(new java.awt.Color(255, 204, 204));
        jPanelNbcandidats.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Candidats par sous-famille de séries/spécialités", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabelNbcandidats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbcandidats.setText("Nombre :");

        jTextFieldNbcandidats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonCreerNombreCandidats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerNombreCandidats.setText("Créer");
        jButtonCreerNombreCandidats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerNombreCandidatsActionPerformed(evt);
            }
        });

        jButtonSupprimerNombreCandidats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerNombreCandidats.setText("Supprimer");
        jButtonSupprimerNombreCandidats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerNombreCandidatsActionPerformed(evt);
            }
        });

        jButtonListerNombreCandidats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonListerNombreCandidats.setText("Lister");
        jButtonListerNombreCandidats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerNombreCandidatsActionPerformed(evt);
            }
        });

        jLabelSousfamille.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSousfamille.setText("Sous-famille :");

        jComboBoxSousfamille.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSousfamille.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSousfamilleActionPerformed(evt);
            }
        });

        jLabelNbjurys.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbjurys.setText("Nombre jurys:");

        jTextFieldNbjurys.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonAnnulerNombreCandidats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerNombreCandidats.setText("Annuler");
        jButtonAnnulerNombreCandidats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerNombreCandidatsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelNbcandidatsLayout = new javax.swing.GroupLayout(jPanelNbcandidats);
        jPanelNbcandidats.setLayout(jPanelNbcandidatsLayout);
        jPanelNbcandidatsLayout.setHorizontalGroup(
            jPanelNbcandidatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNbcandidatsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelSousfamille)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSousfamille, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jLabelNbcandidats)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldNbcandidats, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabelNbjurys, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldNbjurys, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
            .addGroup(jPanelNbcandidatsLayout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(jButtonCreerNombreCandidats)
                .addGap(21, 21, 21)
                .addComponent(jButtonSupprimerNombreCandidats)
                .addGap(21, 21, 21)
                .addComponent(jButtonListerNombreCandidats)
                .addGap(24, 24, 24)
                .addComponent(jButtonAnnulerNombreCandidats)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelNbcandidatsLayout.setVerticalGroup(
            jPanelNbcandidatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNbcandidatsLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanelNbcandidatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelNbcandidatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelNbjurys, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldNbjurys, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelNbcandidatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelNbcandidats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldNbcandidats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxSousfamille, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelSousfamille, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanelNbcandidatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelNbcandidatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonSupprimerNombreCandidats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonListerNombreCandidats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonAnnulerNombreCandidats, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonCreerNombreCandidats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanelGestionEtat.setBackground(new java.awt.Color(153, 204, 255));
        jPanelGestionEtat.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer l'état", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jButtonCreerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEtats.setText("Créer");
        jButtonCreerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEtatsActionPerformed(evt);
            }
        });

        jButtonMettreAjourEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjourEtats.setText("Mettre à jour");
        jButtonMettreAjourEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourEtatsActionPerformed(evt);
            }
        });

        jButtonVisualiserEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserEtats.setText("Visualiser");
        jButtonVisualiserEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserEtatsActionPerformed(evt);
            }
        });

        jButtonSupprimerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEtats.setText("Supprimer");
        jButtonSupprimerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEtatsActionPerformed(evt);
            }
        });

        jCheckBoxAdditif.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jCheckBoxAdditif.setText("Additif");

        javax.swing.GroupLayout jPanelGestionEtatLayout = new javax.swing.GroupLayout(jPanelGestionEtat);
        jPanelGestionEtat.setLayout(jPanelGestionEtatLayout);
        jPanelGestionEtatLayout.setHorizontalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jCheckBoxAdditif)
                .addGap(18, 18, 18)
                .addComponent(jButtonCreerEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonMettreAjourEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiserEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerEtats)
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanelGestionEtatLayout.setVerticalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonMettreAjourEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCreerEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxAdditif))
                    .addComponent(jButtonSupprimerEtats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVisualiserEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanelNbreChefsalle.setBackground(new java.awt.Color(255, 204, 255));
        jPanelNbreChefsalle.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Chefs de salle de correction", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabelNombreChefsalle.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNombreChefsalle.setText("Nombre :");

        jTextFieldNbchefsalle.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButtonCreerNombreChefsalle.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerNombreChefsalle.setText("Créer");
        jButtonCreerNombreChefsalle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerNombreChefsalleActionPerformed(evt);
            }
        });

        jButtonSupprimerNombreChefsalle.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerNombreChefsalle.setText("Supprimer");
        jButtonSupprimerNombreChefsalle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerNombreChefsalleActionPerformed(evt);
            }
        });

        jButtonListerNombreChefsalle.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonListerNombreChefsalle.setText("Lister");
        jButtonListerNombreChefsalle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerNombreChefsalleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelNbreChefsalleLayout = new javax.swing.GroupLayout(jPanelNbreChefsalle);
        jPanelNbreChefsalle.setLayout(jPanelNbreChefsalleLayout);
        jPanelNbreChefsalleLayout.setHorizontalGroup(
            jPanelNbreChefsalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNbreChefsalleLayout.createSequentialGroup()
                .addGroup(jPanelNbreChefsalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelNbreChefsalleLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jButtonCreerNombreChefsalle)
                        .addGap(21, 21, 21)
                        .addComponent(jButtonSupprimerNombreChefsalle)
                        .addGap(21, 21, 21)
                        .addComponent(jButtonListerNombreChefsalle))
                    .addGroup(jPanelNbreChefsalleLayout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(jLabelNombreChefsalle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldNbchefsalle, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanelNbreChefsalleLayout.setVerticalGroup(
            jPanelNbreChefsalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNbreChefsalleLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanelNbreChefsalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNombreChefsalle, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNbchefsalle, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelNbreChefsalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelNbreChefsalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonSupprimerNombreChefsalle, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonListerNombreChefsalle, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonCreerNombreChefsalle, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelChoixTypeNombreAenregistrer.setBackground(new java.awt.Color(0, 255, 204));
        jPanelChoixTypeNombreAenregistrer.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Que voulez-vous enregistrer ?", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 102, 255))); // NOI18N

        jRadioButtonNbcandidats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jRadioButtonNbcandidats.setText("Le nombre de candidats");
        jRadioButtonNbcandidats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonNbcandidatsActionPerformed(evt);
            }
        });

        jRadioButtonNbchefsalle.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jRadioButtonNbchefsalle.setText("Le nombre de chefs de salle");
        jRadioButtonNbchefsalle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonNbchefsalleActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixTypeNbreAenregistrer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixTypeNbreAenregistrer.setText("Annuler");
        jButtonAnnulerChoixTypeNbreAenregistrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixTypeNbreAenregistrerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixTypeNombreAenregistrerLayout = new javax.swing.GroupLayout(jPanelChoixTypeNombreAenregistrer);
        jPanelChoixTypeNombreAenregistrer.setLayout(jPanelChoixTypeNombreAenregistrerLayout);
        jPanelChoixTypeNombreAenregistrerLayout.setHorizontalGroup(
            jPanelChoixTypeNombreAenregistrerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixTypeNombreAenregistrerLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanelChoixTypeNombreAenregistrerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonNbchefsalle)
                    .addGroup(jPanelChoixTypeNombreAenregistrerLayout.createSequentialGroup()
                        .addComponent(jRadioButtonNbcandidats)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnulerChoixTypeNbreAenregistrer)))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanelChoixTypeNombreAenregistrerLayout.setVerticalGroup(
            jPanelChoixTypeNombreAenregistrerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixTypeNombreAenregistrerLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jRadioButtonNbchefsalle)
                .addGap(24, 24, 24)
                .addGroup(jPanelChoixTypeNombreAenregistrerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonNbcandidats)
                    .addComponent(jButtonAnnulerChoixTypeNbreAenregistrer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(94, 94, 94)
                .addComponent(jButtonFermer)
                .addGap(202, 202, 202))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(451, 451, 451)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanelChoixTypeNombreAenregistrer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanelNbreChefsalle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanelNbcandidats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jPanelChoixCentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)))))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanelChoixCentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jPanelNbreChefsalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanelNbcandidats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jPanelChoixTypeNombreAenregistrer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(40, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(89, 89, 89))))
        );

        jLabel1.getAccessibleContext().setAccessibleName("ETAT CM (PRATIQUE SERIE E)  ET JURYS PRESENTATION DES RAPPORTS DE STAGE (BACC SERIE TI)");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVisualiserEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserEtatsActionPerformed
        infoSaisies();
        if (!jCheckBoxAdditif.isSelected()) {
            Map<Souscentre, ArrayList<Jurycorrige>> souscentreJurycorrigeMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses statistiques à la correction
            Map<Souscentre, Integer> souscentreNbchefsalleMap = new HashMap<>();//contient les sous-centres chacun avec son nombre de chefs de salle
            Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
            ArrayList<String> typesBruts = new ArrayList<>();
            ArrayList<String> typesAconsiderer = new ArrayList<>();
            ArrayList<String> niveauxAconsiderer = new ArrayList<>();
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("CORRECTION");
                caisses = metier.findAllCaissesOrdinairesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);

                boolean poursuivre = false;
                for (Caisse c : caisses) {
                    if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                        
                        poursuivre = true;
                        break;
                    }
                }
                if (!poursuivre) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états ordinaires de correction n'ont pas encore été créés pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    //remplissage de souscentreNbchefsalleMap
                    nbchefsalles = metier.findAllNbchefsallesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!nbchefsalles.isEmpty()) {
                        for (Nbchefsalle nbchefsalle : nbchefsalles) {
                            souscentreNbchefsalleMap.put(nbchefsalle.getSouscentre(), nbchefsalle.getNombre());
                        }
                    }

                    //remplissage souscentreJurycorrigeMap
                    jurycorriges = metier.findAllJurycorrigesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!jurycorriges.isEmpty()) {
                        for (Souscentre souscentre : souscentreNbchefsalleMap.keySet()) {//on gère uniquement les sous-centre qui ont des chefs de salle de correction
                            ArrayList<Jurycorrige> jurycorrigesList = new ArrayList<>();
                            for (Jurycorrige jurycor : jurycorriges) {
                                if (jurycor.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                    jurycorrigesList.add(jurycor);
                                }
                            }
                            souscentreJurycorrigeMap.put(souscentre, jurycorrigesList);
                        }
                    }

                    //recherche des types des examens à utiliser
                    for (Examen examen : examensSelected) {
                        System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                        if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                            typesBruts.add("ESG");
                        }
                        if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                            typesBruts.add("ESTP");
                        }
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 2) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    //recherche des niveaux des examens à utiliser
                    if (!niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add(niveauSelected);
                        niveauxAconsiderer.add("TOUT");
                    }
                    if (niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add("PROB");
                        niveauxAconsiderer.add("BACC");
                        niveauxAconsiderer.add("TOUT");
                    }

                    //recherche des centres de billetage
                    for (String niveau : niveauxAconsiderer) {
                        for (String type : typesAconsiderer) {
                            List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                            for (Centrebilletage centrebilletage : desCentrebilletages) {
                                ArrayList<Souscentre> souscentresList = new ArrayList<>();
                                if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                    List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                    for (Secteurcouv sect : secteurs) {
                                        if (!souscentresList.contains(sect.getSouscentre())) {
                                            souscentresList.add(sect.getSouscentre());
                                        }
                                    }
                                    centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                                }
                            }
                        }
                    }

                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                int totalMontant = 0;
                                if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                    for (int i = 0; i < souscentresList.size(); i++) {
                                        Souscentre souscentre = souscentresList.get(i);
                                        int num = 1;
                                        if (souscentreJurycorrigeMap.containsKey(souscentre)) {
                                            int nbJurys = souscentreJurycorrigeMap.get(souscentre).size();
                                            int nbTours = 0;
                                            int nbchefsalle = 0;
                                            int indemChefsalle = 0;
                                            for (Jurycorrige jurycorrige : souscentreJurycorrigeMap.get(souscentre)) {
                                                if (niveauSelected.equals("BACC")) {
                                                    determinerCoutD1jurycorrigeBAC(jurycorrige);
                                                }
                                                if (niveauSelected.equals("PROB")) {
                                                    determinerCoutD1jurycorrigePROB(jurycorrige);
                                                }
                                                if (nbTours++ == nbJurys - 1) {
                                                    nbchefsalle = souscentreNbchefsalleMap.get(souscentre);
                                                    indemChefsalle = 30000 * nbchefsalle;//indemnité des chefs de salle
                                                }

                                                Map<String, Object> row = new HashMap<>();
                                                row.put("examen", groupedexamensEnstring);
                                                row.put("session", anneeSelected);
                                                row.put("reference", "");
                                                row.put("region", region.getNomreg());
                                                row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                row.put("num", num++);
                                                row.put("souscentre", souscentre.getNomsouscent());
                                                row.put("option", optionAffichee);
                                                row.put("effectif", effectif);
                                                row.put("nbmat", nbmat);
                                                row.put("nbcopies", nbcopies);
                                                row.put("coutcopies", coutcopies);
                                                row.put("supplement", supplement);
                                                int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                                row.put("total", totalArrondi);
                                                row.put("nbchefsalle", nbchefsalle);
                                                row.put("indemChefsalle", indemChefsalle);
                                                row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                totalMontant += totalArrondi + indemChefsalle;//jasperreport prendra la dernière valeur de totalMontant
                                                row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                datasource.add(row);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatCorrectionESGReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    examensSelected.clear();//on vide
                    souscentreNbchefsalleMap.clear();
                    souscentreJurycorrigeMap.clear();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
            }
        }//fin if !jCheckbox: cas ordinaire, jCheckbox non cliqué
        else {//jCheckbox cliquée
            Map<Souscentre, ArrayList<Jurycorrige>> souscentreJurycorrigeMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses statistiques à la correction
            Map<Souscentre, Integer> souscentreNbchefsalleMap = new HashMap<>();//contient les sous-centres chacun avec son nombre de chefs de salle
            Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
            ArrayList<String> typesBruts = new ArrayList<>();
            ArrayList<String> typesAconsiderer = new ArrayList<>();
            ArrayList<String> niveauxAconsiderer = new ArrayList<>();
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("CORRECTION");
                caisses = metier.findAllCaissesAdditivesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);

                boolean poursuivre = false;
                for (Caisse c : caisses) {
                    if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                        poursuivre = true;
                        break;
                    }
                }
                if (!poursuivre) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états additifs de correction n'ont pas encore été créés pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }

                    //remplissage de souscentreNbchefsalleMap
                    nbchefsalles = metier.findAllNbchefsallesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!nbchefsalles.isEmpty()) {
                        for (Nbchefsalle nbchefsalle : nbchefsalles) {
                            souscentreNbchefsalleMap.put(nbchefsalle.getSouscentre(), nbchefsalle.getNombre());
                        }
                    }
                    //remplissage souscentreJurycorrigeMap
                    jurycorriges = metier.findAllJurycorrigesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!jurycorriges.isEmpty()) {
                        for (Souscentre souscentre : souscentreNbchefsalleMap.keySet()) {//on gère uniquement les sous-centre qui ont des chefs de salle de correction
                            ArrayList<Jurycorrige> jurycorrigesList = new ArrayList<>();
                            for (Jurycorrige jurycor : jurycorriges) {
                                if (jurycor.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                    jurycorrigesList.add(jurycor);
                                }
                            }
                            souscentreJurycorrigeMap.put(souscentre, jurycorrigesList);
                        }
                    }

                    //recherche des types des examens à utiliser
                    for (Examen examen : examensSelected) {
                        System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                        if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                            typesBruts.add("ESG");
                        }
                        if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                            typesBruts.add("ESTP");
                        }
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    if (typesBruts.size() == 2) {
                        typesAconsiderer.add("ESG");
                        typesAconsiderer.add("ESTP");
                        typesAconsiderer.add("TOUT");
                    }
                    //recherche des niveaux des examens à utiliser
                    if (!niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add(niveauSelected);
                        niveauxAconsiderer.add("TOUT");
                    }
                    if (niveauSelected.equals("TOUT")) {
                        niveauxAconsiderer.add("PROB");
                        niveauxAconsiderer.add("BACC");
                        niveauxAconsiderer.add("TOUT");
                    }

                    //recherche des centres de billetage
                    for (String niveau : niveauxAconsiderer) {
                        for (String type : typesAconsiderer) {
                            List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                            for (Centrebilletage centrebilletage : desCentrebilletages) {
                                ArrayList<Souscentre> souscentresList = new ArrayList<>();
                                if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                    List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                    for (Secteurcouv sect : secteurs) {
                                        if (!souscentresList.contains(sect.getSouscentre())) {
                                            souscentresList.add(sect.getSouscentre());
                                        }
                                    }
                                    centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                                }
                            }
                        }
                    }

                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        for (Region region : regions) {
                            for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                int totalMontant = 0;
                                int num = 1;
                                if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                    ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                    for (int i = 0; i < souscentresList.size(); i++) {
                                        Souscentre souscentre = souscentresList.get(i);
                                        if (souscentreJurycorrigeMap.containsKey(souscentre)) {
                                            determinerCoutAdditif(souscentreJurycorrigeMap, souscentre);

                                            Map<String, Object> row = new HashMap<>();
                                            row.put("examen", groupedexamensEnstring);
                                            row.put("session", anneeSelected);
                                            row.put("reference", "");
                                            row.put("region", region.getNomreg());
                                            row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                            row.put("num", num++);
                                            row.put("souscentre", souscentre.getNomsouscent());
                                            row.put("effectif", effectif);
                                            row.put("nbchefsalle", nbchefsalEPS);
                                            row.put("indemChefsalle", indemChefsalEPS);
                                            row.put("vacpredel", vacpredelEPS);
                                            row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                            int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                            row.put("total", totalArrondi);
                                            totalMontant += totalArrondi;//jasperreport prendra la dernière valeur de totalMontant
                                            row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                            datasource.add(row);

                                        }
                                    }
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatAdditifCorrectionReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    examensSelected.clear();//on vide
                    souscentreNbchefsalleMap.clear();
                    souscentreJurycorrigeMap.clear();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
            }
        }
    }//GEN-LAST:event_jButtonVisualiserEtatsActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonCreerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEtatsActionPerformed
        infoSaisies();
        if (!jCheckBoxAdditif.isSelected()) {
            Map<Souscentre, ArrayList<Jurycorrige>> souscentreJurycorrigeMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses statistiques à la correction
            Map<Souscentre, Integer> souscentreNbchefsalleMap = new HashMap<>();//contient les sous-centres chacun avec son nombre de chefs de salle
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---") && !referenceImputationSelected.equals("---")) {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("CORRECTION");
                caisses = metier.findAllCaissesOrdinairesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (!caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états ordinaires de correction existent déjà pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }                   

                    //remplissage de souscentreNbchefsalleMap
                    nbchefsalles = metier.findAllNbchefsallesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!nbchefsalles.isEmpty()) {
                        for (Nbchefsalle nbchefsalle : nbchefsalles) {
                            souscentreNbchefsalleMap.put(nbchefsalle.getSouscentre(), nbchefsalle.getNombre());
                        }
                    }

                    //remplissage souscentreJurycorrigeMap
                    jurycorriges = metier.findAllJurycorrigesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!jurycorriges.isEmpty()) {
                        for (Souscentre souscentre : souscentreNbchefsalleMap.keySet()) {//on gère uniquement les sous-centre qui ont des chefs de salle de correction
                            ArrayList<Jurycorrige> jurycorrigesList = new ArrayList<>();
                            for (Jurycorrige jurycor : jurycorriges) {
                                if (jurycor.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                    jurycorrigesList.add(jurycor);
                                }
                            }
                            souscentreJurycorrigeMap.put(souscentre, jurycorrigesList);
                        }
                    }
                    boolean testsicreer = false;
                    try {
                        for (Souscentre souscentre : souscentreNbchefsalleMap.keySet()) {
                            int net = 0;
                            for (Jurycorrige jurycorrige : souscentreJurycorrigeMap.get(souscentre)) {
                                if (niveauSelected.equals("BACC")) {
                                    determinerCoutD1jurycorrigeBAC(jurycorrige);
                                }
                                if (niveauSelected.equals("PROB")) {
                                    determinerCoutD1jurycorrigePROB(jurycorrige);
                                }
                                int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                net += totalArrondi;
                            }
                            net += 30000 * souscentreNbchefsalleMap.get(souscentre);//indemnité des chefs de salle
                            metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                            testsicreer = true;
                        }
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testsicreer) {
                        JOptionPane.showMessageDialog(this, "Etats ordinaires de correction créés avec succès pour ce groupe d'examens !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
            }
            examensSelected.clear();//on vide
            souscentreNbchefsalleMap.clear();
            souscentreJurycorrigeMap.clear();
        }//fin if !jCheckbox: cas ordinaire, jCheckbox non cliqué
        else {
            Map<Souscentre, ArrayList<Jurycorrige>> souscentreJurycorrigeMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses statistiques à la correction
            Map<Souscentre, Integer> souscentreNbchefsalleMap = new HashMap<>();//contient les sous-centres chacun avec son nombre de chefs de salle
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---") && !referenceImputationSelected.equals("---")) {
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("CORRECTION");
                caisses = metier.findAllCaissesAdditivesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (!caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, les états additifs de correction existent déjà pour ce groupe d'examens !");
                } else {
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }                   

                    //remplissage de souscentreNbchefsalleMap
                    nbchefsalles = metier.findAllNbchefsallesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!nbchefsalles.isEmpty()) {
                        for (Nbchefsalle nbchefsalle : nbchefsalles) {
                            souscentreNbchefsalleMap.put(nbchefsalle.getSouscentre(), nbchefsalle.getNombre());
                        }
                    }
                    //remplissage souscentreJurycorrigeMap
                    jurycorriges = metier.findAllJurycorrigesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!jurycorriges.isEmpty()) {
                        for (Souscentre souscentre : souscentreNbchefsalleMap.keySet()) {//on gère uniquement les sous-centre qui ont des chefs de salle de correction
                            ArrayList<Jurycorrige> jurycorrigesList = new ArrayList<>();
                            for (Jurycorrige jurycor : jurycorriges) {
                                if (jurycor.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                    jurycorrigesList.add(jurycor);
                                }
                            }
                            souscentreJurycorrigeMap.put(souscentre, jurycorrigesList);
                        }
                    }
                    boolean testsicreer = false;
                    try {
                        for (Souscentre souscentre : souscentreJurycorrigeMap.keySet()) {
                            determinerCoutAdditif(souscentreJurycorrigeMap, souscentre);
                            int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                            metier.creerCaisse(new Caisse(totalArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, true));
                            testsicreer = true;
                        }
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testsicreer) {
                        JOptionPane.showMessageDialog(this, "Etats additifs de correction créés avec succès pour ce groupe d'examens !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
            }
            examensSelected.clear();//on vide
            souscentreNbchefsalleMap.clear();
            souscentreJurycorrigeMap.clear();
        }
    }//GEN-LAST:event_jButtonCreerEtatsActionPerformed

    private void jButtonMettreAjourEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourEtatsActionPerformed
        infoSaisies();
        if (!jCheckBoxAdditif.isSelected()) {
            Map<Souscentre, ArrayList<Jurycorrige>> souscentreJurycorrigeMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses statistiques à la correction
            Map<Souscentre, Integer> souscentreNbchefsalleMap = new HashMap<>();//contient les sous-centres chacun avec son nombre de chefs de salle
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états ordinaires de correction pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("CORRECTION");
                    caisses = metier.findAllCaissesOrdinairesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état ordinaire de correction n'existe pour ce groupe d'examens !");
                    } else {
                        //on conserve quelques info de ces anciennes caisses
                        Groupe groupe = caisses.get(0).getGroupe();
                        sessionSelected = caisses.get(0).getSession();
                        //on supprime toutes les anciennes caisses du groupe d'examens
                        for (Caisse c : caisses) {
                            metier.supprimerCaisse(c);
                        }
                        //on va les recréer
                        String separateur = ", ";
                        examensList = groupedexamensEnstring.split(separateur);
                        for (int i = 0; i < examensList.length; i++) {
                            for (Examen e : examens) {
                                if (e.getSigle().equals(examensList[i])) {
                                    examensSelected.add(e);
                                    break;
                                }
                            }
                        }

                        //remplissage de souscentreNbchefsalleMap
                        nbchefsalles = metier.findAllNbchefsallesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                        if (!nbchefsalles.isEmpty()) {
                            for (Nbchefsalle nbchefsalle : nbchefsalles) {
                                souscentreNbchefsalleMap.put(nbchefsalle.getSouscentre(), nbchefsalle.getNombre());
                            }
                        }

                        //remplissage souscentreJurycorrigeMap
                        jurycorriges = metier.findAllJurycorrigesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                        if (!jurycorriges.isEmpty()) {
                            for (Souscentre souscentre : souscentreNbchefsalleMap.keySet()) {//on gère uniquement les sous-centre qui ont des chefs de salle de correction
                                ArrayList<Jurycorrige> jurycorrigesList = new ArrayList<>();
                                for (Jurycorrige jurycor : jurycorriges) {
                                    if (jurycor.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                        jurycorrigesList.add(jurycor);
                                    }
                                }
                                souscentreJurycorrigeMap.put(souscentre, jurycorrigesList);
                            }
                        }

                        boolean testsicreer = false;

                        try {
                            for (Souscentre souscentre : souscentreNbchefsalleMap.keySet()) {
                                int net = 0;
                                for (Jurycorrige jurycorrige : souscentreJurycorrigeMap.get(souscentre)) {
                                    if (niveauSelected.equals("BACC")) {
                                        determinerCoutD1jurycorrigeBAC(jurycorrige);
                                    }
                                    if (niveauSelected.equals("PROB")) {
                                        determinerCoutD1jurycorrigePROB(jurycorrige);
                                    }
                                    int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                    net += totalArrondi;
                                }
                                net += 30000 * souscentreNbchefsalleMap.get(souscentre);//indemnité des chefs de salle
                                metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                testsicreer = true;
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testsicreer) {
                            JOptionPane.showMessageDialog(this, "Etats ordinaires de correction mis à jour avec succès pour ce groupe d'examens !");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
                }
                examensSelected.clear();//on vide
                souscentreNbchefsalleMap.clear();
                souscentreJurycorrigeMap.clear();
            }
        }//fin if !jCheckbox:cas ordinaire, jCheckbox non cliqué
        else {//jCheckbox cliqué
            Map<Souscentre, ArrayList<Jurycorrige>> souscentreJurycorrigeMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses statistiques à la correction
            Map<Souscentre, Integer> souscentreNbchefsalleMap = new HashMap<>();//contient les sous-centres chacun avec son nombre de chefs de salle
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états additifs de correction pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("CORRECTION");
                    caisses = metier.findAllCaissesAdditivesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état additif de correction n'existe pour ce groupe d'examens !");
                    } else {
                        //on conserve quelques info de ces anciennes caisses
                        Groupe groupe = caisses.get(0).getGroupe();
                        sessionSelected = caisses.get(0).getSession();
                        //on supprime toutes les anciennes caisses du groupe d'examens
                        for (Caisse c : caisses) {
                            metier.supprimerCaisse(c);
                        }
                        //on va les recréer
                        String separateur = ", ";
                        examensList = groupedexamensEnstring.split(separateur);
                        for (int i = 0; i < examensList.length; i++) {
                            for (Examen e : examens) {
                                if (e.getSigle().equals(examensList[i])) {
                                    examensSelected.add(e);
                                    break;
                                }
                            }
                        }

                        //remplissage de souscentreNbchefsalleMap
                        nbchefsalles = metier.findAllNbchefsallesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                        if (!nbchefsalles.isEmpty()) {
                            for (Nbchefsalle nbchefsalle : nbchefsalles) {
                                souscentreNbchefsalleMap.put(nbchefsalle.getSouscentre(), nbchefsalle.getNombre());
                            }
                        }

                        //remplissage souscentreJurycorrigeMap
                        jurycorriges = metier.findAllJurycorrigesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                        if (!jurycorriges.isEmpty()) {
                            for (Souscentre souscentre : souscentreNbchefsalleMap.keySet()) {//on gère uniquement les sous-centre qui ont des chefs de salle de correction
                                ArrayList<Jurycorrige> jurycorrigesList = new ArrayList<>();
                                for (Jurycorrige jurycor : jurycorriges) {
                                    if (jurycor.getSouscentre().getNomsouscent().equals(souscentre.getNomsouscent())) {
                                        jurycorrigesList.add(jurycor);
                                    }
                                }
                                souscentreJurycorrigeMap.put(souscentre, jurycorrigesList);
                            }
                        }

                        boolean testsicreer = false;

                        try {
                            for (Souscentre souscentre : souscentreJurycorrigeMap.keySet()) {
                                determinerCoutAdditif(souscentreJurycorrigeMap, souscentre);
                                int totalArrondi = (int) Math.ceil((double) total / (double) 1000) * 1000;
                                metier.creerCaisse(new Caisse(totalArrondi, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, true));
                                testsicreer = true;
                            }
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testsicreer) {
                            JOptionPane.showMessageDialog(this, "Etats additifs de correction mis à jour avec succès pour ce groupe d'examens !");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
                }
                examensSelected.clear();//on vide
                souscentreNbchefsalleMap.clear();
                souscentreJurycorrigeMap.clear();
            }
        }
    }//GEN-LAST:event_jButtonMettreAjourEtatsActionPerformed

    private void jButtonSupprimerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEtatsActionPerformed
        infoSaisies();
        if (!jCheckBoxAdditif.isSelected()) {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états ordinaires de correction pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("CORRECTION");
                    caisses = metier.findAllCaissesOrdinairesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état ordinaire de correction n'existe pour ce groupe d'examens !");
                    } else {
                        boolean testsisupprimer = false;
                        try {
                            for (Caisse caisse : caisses) {
                                metier.supprimerCaisse(caisse);
                            }
                            testsisupprimer = true;
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testsisupprimer) {
                            JOptionPane.showMessageDialog(this, "Etats ordinaires de correction supprimés avec succès pour ce groupe d'examens !");
                        }
                    }
                }
            }
        }//fin if !jCheckbox:cas ordinaire, jCheckbox non cliqué
        else {// jCheckbox cliqué
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états additifs de correction pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                    anneeSelected = Integer.parseInt(anneeString);
                    Rubriquetat rubetat = metier.findRubriquetatByDesignation("CORRECTION");
                    caisses = metier.findAllCaissesAdditivesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                    if (caisses.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Erreur, aucun état additif de correction n'existe pour ce groupe d'examens !");
                    } else {
                        boolean testsisupprimer = false;
                        try {
                            for (Caisse caisse : caisses) {
                                metier.supprimerCaisse(caisse);
                            }
                            testsisupprimer = true;
                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testsisupprimer) {
                            JOptionPane.showMessageDialog(this, "Etats additifs de correction supprimés avec succès pour ce groupe d'examens !");
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerEtatsActionPerformed

    private void jButtonAnnulerChoixExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixExamenActionPerformed
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        jComboBoxSession.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixExamenActionPerformed

    private void jButtonAnnulerChoixCentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixCentreActionPerformed
        jComboBoxRegion.setSelectedIndex(0);
        jComboBoxDepartement.setSelectedIndex(0);
        jComboBoxArrondissement.setSelectedIndex(0);
        jComboBoxSouscentre.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixCentreActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jComboBoxRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionActionPerformed
        remplirDepartementCombobox();
    }//GEN-LAST:event_jComboBoxRegionActionPerformed

    private void jButtonCreerNombreCandidatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerNombreCandidatsActionPerformed
        infoSaisies();
        if (jRadioButtonNbcandidats.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nbcandidatsString.equals("") || titreSousfamilleSelected.equals("---") || nbjurysString.equals("")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre, une sous-famille, donner le nombre de candidats et de jurys !");
            } else {
                validerNbcandidats(nbcandidatsString);
                validerNbjurys(nbjurysString);
                if (!continuerNbcandidats || nbcandidatsSaisi == 0 || !continuerNbjurys || nbjurysSaisi == 0) {
                    JOptionPane.showMessageDialog(this, "Recommencez svp. Le nombre de candidats et/ou celui de jurys fourni(s) est incorrect !");
                } else {
                    Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                    anneeSelected = Integer.parseInt(anneeString);
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }
                    for (Souscentre souscentre : souscentres) {
                        if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                            souscentreSelected = souscentre;
                            break;
                        }
                    }

                    for (Sousfamille sousfam : sousfamilles) {
                        if (sousfam.getTitre().equals(titreSousfamilleSelected)) {
                            sousfamilleSelected = sousfam;
                            break;
                        }
                    }
                    try {
                        metier.creerJurycorrige(new Jurycorrige(souscentreSelected, nbcandidatsSaisi, groupe, sousfamilleSelected, sessionSelected, nbjurysSaisi));
                        JOptionPane.showMessageDialog(this, "Nombres de candidats et de jurys enregistrés avec succès !");
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de d'enregistrer les nombres de candidats et de jurys dans le sous-centre [" + nomSouscentreSelected + "]" + "\n raison:" + ex.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonCreerNombreCandidatsActionPerformed

    private void jButtonSupprimerNombreCandidatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerNombreCandidatsActionPerformed
        infoSaisies();
        if (jRadioButtonNbcandidats.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || titreSousfamilleSelected.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre et une sous-famille !");
            } else {
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les nombres de candidats et de jurys de la sous-famille de séries/spécialités " + titreSousfamilleSelected + " du sous-centre [" + nomSouscentreSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    anneeSelected = Integer.parseInt(anneeString);
                    try {
                        Jurycorrige jurycor = metier.findJurycorrigeD1SousfamilleD1SouscentreD1GroupedexamensD1Session(nomSouscentreSelected, anneeSelected, niveauSelected, typeSelected, titreSousfamilleSelected);
                        metier.supprimerJurycorrige(jurycor);
                        JOptionPane.showMessageDialog(this, "Nombres de candidats et de jurys  supprimés avec succès !");
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de supprimer les nombres de candidats et de jurys de la sous-famille " + titreSousfamilleSelected + " du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerNombreCandidatsActionPerformed

    private void jButtonListerNombreCandidatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerNombreCandidatsActionPerformed
        infoSaisies();
        if (jRadioButtonNbcandidats.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens et une session !");
            } else {
                anneeSelected = Integer.parseInt(anneeString);
                jurycorriges = metier.findAllJurycorrigesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);

                if (!jurycorriges.isEmpty()) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                        for (Region region : regions) {
                            int i = 1;
                            for (Jurycorrige jurycor : jurycorriges) {
                                if (jurycor.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                                    Map<String, Object> row = new HashMap<>();
                                    row.put("session", anneeSelected);
                                    row.put("examen", groupedexamensEnstring);
                                    row.put("region", region.getNomreg());
                                    row.put("num", i++);
                                    row.put("souscentre", jurycor.getSouscentre().getNomsouscent());
                                    row.put("sousfamille", jurycor.getSousfamille().getTitre());
                                    row.put("effectif", jurycor.getEffectif());
                                    row.put("nbjury", jurycor.getNbjury());
                                    datasource.add(row);
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeJurycorrigeReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Aucun nombre de chefs de salle trouvé dans la base de données !");
                }
            }
        }
    }//GEN-LAST:event_jButtonListerNombreCandidatsActionPerformed

    private void jComboBoxDepartementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementActionPerformed
        remplirArrondissementCombobox();

    }//GEN-LAST:event_jComboBoxDepartementActionPerformed

    private void jComboBoxSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSouscentreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxSouscentreActionPerformed

    private void jComboBoxArrondissementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementActionPerformed
        remplirSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementActionPerformed

    private void jButtonCreerNombreChefsalleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerNombreChefsalleActionPerformed
        infoSaisies();
        if (jRadioButtonNbchefsalle.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nbchefsalleString.equals("")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre donner le nombre de chefs de salle !");
            } else {
                validerNbchefsalle(nbchefsalleString);
                if (!continuerNbchefsalle || nbchefsalleSaisi == 0) {
                    JOptionPane.showMessageDialog(this, "Recommencez svp. Le nombre de chefs de salle fourni est incorrect !");
                } else {
                    Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                    anneeSelected = Integer.parseInt(anneeString);
                    for (Session s : sessions) {
                        if (s.getAnnee() == anneeSelected) {
                            sessionSelected = s;
                            break;
                        }
                    }
                    for (Souscentre souscentre : souscentres) {
                        if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                            souscentreSelected = souscentre;
                            break;
                        }
                    }

                    try {
                        metier.creerNbchefsalle(new Nbchefsalle(souscentreSelected, nbchefsalleSaisi, groupe, sessionSelected));
                        JOptionPane.showMessageDialog(this, "nombre de chefs de salle enregistré avec succès !");
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de d'enregistrer le nombre de chefs de salle dans le sous-centre [" + nomSouscentreSelected + "]" + "\n raison:" + ex.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonCreerNombreChefsalleActionPerformed

    private void jButtonSupprimerNombreChefsalleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerNombreChefsalleActionPerformed
        infoSaisies();
        if (jRadioButtonNbchefsalle.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session et un sous-centre !");
            } else {
                int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer le nombre de chefs de salle du sous-centre [" + nomSouscentreSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    anneeSelected = Integer.parseInt(anneeString);
                    try {
                        Nbchefsalle nbcs = metier.findNbchefsalleD1SouscentreD1GroupedexamensD1Session(nomSouscentreSelected, anneeSelected, niveauSelected, typeSelected);
                        metier.supprimerNbchefsalle(nbcs);
                        JOptionPane.showMessageDialog(this, "Nombre de chefs de salle supprimé avec succès !");
                    } catch (ObcbudgetException ex) {
                        JOptionPane.showMessageDialog(this, "Impossible de supprimer le nombre de chefs de salle du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerNombreChefsalleActionPerformed

    private void jButtonListerNombreChefsalleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerNombreChefsalleActionPerformed
        infoSaisies();
        if (jRadioButtonNbchefsalle.isSelected()) {
            if (groupedexamensEnstring.equals("") || anneeString.equals("---")) {
                JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens et une session !");
            } else {
                anneeSelected = Integer.parseInt(anneeString);
                nbchefsalles = metier.findAllNbchefsallesD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);

                if (!nbchefsalles.isEmpty()) {
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                        for (Region region : regions) {
                            int i = 1;
                            for (Nbchefsalle nbchefsalle : nbchefsalles) {
                                if (nbchefsalle.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                                    Map<String, Object> row = new HashMap<>();
                                    row.put("session", anneeSelected);
                                    row.put("examen", groupedexamensEnstring);
                                    row.put("region", region.getNomreg());
                                    row.put("num", i++);
                                    row.put("souscentre", nbchefsalle.getSouscentre().getNomsouscent());
                                    row.put("nbchefsalle", nbchefsalle.getNombre());
                                    datasource.add(row);
                                }
                            }
                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeNbchefsalleReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Aucun nombre de chefs de salle trouvé dans la base de données !");
                }
            }
        }
    }//GEN-LAST:event_jButtonListerNombreChefsalleActionPerformed

    private void jComboBoxSousfamilleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSousfamilleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxSousfamilleActionPerformed

    private void jRadioButtonNbcandidatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonNbcandidatsActionPerformed
        jPanelNbcandidats.setEnabled(true);
        jTextFieldNbcandidats.setEnabled(true);
        jTextFieldNbjurys.setEnabled(true);
        jComboBoxSousfamille.setEnabled(true);
        jPanelNbreChefsalle.setEnabled(false);
        jTextFieldNbchefsalle.setEnabled(false);
        jTextFieldNbchefsalle.setText("");
        jButtonCreerNombreChefsalle.setEnabled(false);
        jButtonCreerNombreCandidats.setEnabled(true);
        jButtonSupprimerNombreChefsalle.setEnabled(false);
        jButtonSupprimerNombreCandidats.setEnabled(true);
        jComboBoxSousfamille.setEnabled(true);
        jButtonListerNombreChefsalle.setEnabled(false);
        jButtonListerNombreCandidats.setEnabled(true);

    }//GEN-LAST:event_jRadioButtonNbcandidatsActionPerformed

    private void jRadioButtonNbchefsalleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonNbchefsalleActionPerformed
        jPanelNbcandidats.setEnabled(false);
        jTextFieldNbcandidats.setEnabled(false);
        jTextFieldNbcandidats.setText("");
        jTextFieldNbjurys.setEnabled(false);
        jTextFieldNbjurys.setText("");
        jComboBoxSousfamille.setEnabled(false);
        jComboBoxSousfamille.setSelectedIndex(0);
        jPanelNbreChefsalle.setEnabled(true);
        jTextFieldNbchefsalle.setEnabled(true);
        jButtonCreerNombreChefsalle.setEnabled(true);
        jButtonCreerNombreCandidats.setEnabled(false);
        jButtonSupprimerNombreChefsalle.setEnabled(true);
        jButtonSupprimerNombreCandidats.setEnabled(false);
        jComboBoxSousfamille.setEnabled(false);
        jButtonListerNombreChefsalle.setEnabled(true);
        jButtonListerNombreCandidats.setEnabled(false);
    }//GEN-LAST:event_jRadioButtonNbchefsalleActionPerformed

    private void jButtonAnnulerChoixTypeNbreAenregistrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixTypeNbreAenregistrerActionPerformed
        buttonGroup1.clearSelection();
    }//GEN-LAST:event_jButtonAnnulerChoixTypeNbreAenregistrerActionPerformed

    private void jButtonAnnulerNombreCandidatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerNombreCandidatsActionPerformed
        jComboBoxSousfamille.setSelectedIndex(0);
        jTextFieldNbcandidats.setText("");
        jTextFieldNbjurys.setText("");
    }//GEN-LAST:event_jButtonAnnulerNombreCandidatsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatCorrectionsESG.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatCorrectionsESG.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatCorrectionsESG.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatCorrectionsESG.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatCorrectionsESG().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonAnnulerChoixCentre;
    private javax.swing.JButton jButtonAnnulerChoixExamen;
    private javax.swing.JButton jButtonAnnulerChoixTypeNbreAenregistrer;
    private javax.swing.JButton jButtonAnnulerNombreCandidats;
    private javax.swing.JButton jButtonCreerEtats;
    private javax.swing.JButton jButtonCreerNombreCandidats;
    private javax.swing.JButton jButtonCreerNombreChefsalle;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonListerNombreCandidats;
    private javax.swing.JButton jButtonListerNombreChefsalle;
    private javax.swing.JButton jButtonMettreAjourEtats;
    private javax.swing.JButton jButtonSupprimerEtats;
    private javax.swing.JButton jButtonSupprimerNombreCandidats;
    private javax.swing.JButton jButtonSupprimerNombreChefsalle;
    private javax.swing.JButton jButtonVisualiserEtats;
    private javax.swing.JCheckBox jCheckBoxAdditif;
    private javax.swing.JComboBox<String> jComboBoxArrondissement;
    private javax.swing.JComboBox<String> jComboBoxDepartement;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxRegion;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxSouscentre;
    private javax.swing.JComboBox<String> jComboBoxSousfamille;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelArrondissement;
    private javax.swing.JLabel jLabelDepartement;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelNbcandidats;
    private javax.swing.JLabel jLabelNbjurys;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelNomCentre;
    private javax.swing.JLabel jLabelNombreChefsalle;
    private javax.swing.JLabel jLabelRegion;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelSousfamille;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanelChoixCentre;
    private javax.swing.JPanel jPanelChoixExamen;
    private javax.swing.JPanel jPanelChoixTypeNombreAenregistrer;
    private javax.swing.JPanel jPanelGestionEtat;
    private javax.swing.JPanel jPanelNbcandidats;
    private javax.swing.JPanel jPanelNbreChefsalle;
    private javax.swing.JRadioButton jRadioButtonNbcandidats;
    private javax.swing.JRadioButton jRadioButtonNbchefsalle;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldNbcandidats;
    private javax.swing.JTextField jTextFieldNbchefsalle;
    private javax.swing.JTextField jTextFieldNbjurys;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Region> regions = null;
    private List<Examen> examens = null;
    private Examen examenSelected = null;
    private String[] examensList = null;
    private List<Examen> examensSelected = new ArrayList<>();
    private List<Departement> departements = null;
    private List<Arrondissement> arrondissements = null;
    private String[] sessionsCombo = null;
    private String[] regionsCombo = null;
    private String[] departementsCombo = null;
    private String[] arrondissementsCombo = null;
    private String[] imputationsCombo = null;
    private String[] souscentresCombo = null;
    private String[] sousfamillesCombo = null;
    private String referenceImputationSelected = "";
    private String nomRegionSelected = "";
    private String nomSouscentreSelected = "";
    private String nomDepartementSelected = "";
    private String nomArrondissementSelected = "";
    private String titreSousfamilleSelected = "";
    private List<Souscentre> souscentres = null;
    private Souscentre souscentreSelected = null;
    private List<Sousfamille> sousfamilles = null;
    private Sousfamille sousfamilleSelected = null;
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private String phase = "CORRECTION";
    private List<Caisse> caisses = null;
    private List<Option> options = null;
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private int vacpredelEPS = 0, indemChefsalEPS = 0, nbchefsalEPS = 0, nbjurys = 0, effectif = 0, nbmat = 0, nbcopies = 0, tauxcop = 200, coutcopies = 0, supplement = 0, total = 0;
    private String optionAffichee = "";
    //private int[] tabColis1 = new int[3];
    //private int[] tabColis2 = new int[3];
    private boolean continuerNbchefsalle = false;
    private boolean continuerNbcandidats = false;
    private boolean continuerNbjurys = false;
    private int nbchefsalleSaisi = 0;
    private String nbchefsalleString = "";
    private int nbcandidatsSaisi = 0;
    private String nbcandidatsString = "";
    private int nbjurysSaisi = 0;
    private String nbjurysString = "";
    private List<Nbchefsalle> nbchefsalles = null;
    private List<Jurycorrige> jurycorriges = null;

    //private boolean valBoutonRadioNbchefsalle = false;
    //private boolean valBoutonRadioNbcopies = false;
    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        regions = metier.findAllRegions();
        examens = metier.findAllExamens();
        souscentres = metier.findAllSouscentres();
        options = metier.findAllOptions();
        sousfamilles = metier.findAllSousfamillesESG();

        //on remplit la combobox des régions du sous-centre
        regionsCombo = new String[regions.size() + 1];
        regionsCombo[0] = "---";
        int i = 1;
        for (Region region : regions) {
            regionsCombo[i++] = region.getNomreg();
        }
        jComboBoxRegion.setModel(new DefaultComboBoxModel(regionsCombo));

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int k = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[k++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des sousfamilles
        sousfamillesCombo = new String[sousfamilles.size() + 1];
        sousfamillesCombo[0] = "---";
        int l = 1;
        for (Sousfamille sousfamille : sousfamilles) {
            sousfamillesCombo[l++] = sousfamille.getTitre();
        }
        jComboBoxSousfamille.setModel(new DefaultComboBoxModel(sousfamillesCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "GEN"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        remplirDepartementCombobox();
        remplirArrondissementCombobox();
        remplirSouscentreCombobox();

        buttonGroup1.add(jRadioButtonNbchefsalle);
        buttonGroup1.add(jRadioButtonNbcandidats);

        jPanelNbcandidats.setEnabled(false);
        jTextFieldNbcandidats.setEnabled(false);
        jTextFieldNbjurys.setEnabled(false);
        jComboBoxSousfamille.setEnabled(false);
        jPanelNbreChefsalle.setEnabled(false);
        jTextFieldNbchefsalle.setEnabled(false);
        jButtonCreerNombreChefsalle.setEnabled(false);
        jButtonCreerNombreCandidats.setEnabled(false);
        jButtonSupprimerNombreChefsalle.setEnabled(false);
        jButtonSupprimerNombreCandidats.setEnabled(false);
        jComboBoxSousfamille.setEnabled(false);
        jButtonListerNombreChefsalle.setEnabled(false);
        jButtonListerNombreCandidats.setEnabled(false);
    }

    private void infoSaisies() {
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        titreSousfamilleSelected = (String) jComboBoxSousfamille.getSelectedItem();
        nbcandidatsString = jTextFieldNbcandidats.getText();
        nbjurysString = jTextFieldNbjurys.getText();
        nbchefsalleString = jTextFieldNbchefsalle.getText();
    }

    private void remplirDepartementCombobox() {
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        departements = metier.findAllDepartementsD1Region(nomRegionSelected);
        //on remplit la combobox des départements
        departementsCombo = new String[departements.size() + 1];
        departementsCombo[0] = "---";
        int i = 1;
        for (Departement departement : departements) {
            departementsCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartement.setModel(new DefaultComboBoxModel(departementsCombo));
    }

    private void remplirArrondissementCombobox() {
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        arrondissements = metier.findAllArrondissementsD1Departement(nomDepartementSelected);
        //on remplit la combobox des départements
        arrondissementsCombo = new String[arrondissements.size() + 1];
        arrondissementsCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissements) {
            arrondissementsCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissement.setModel(new DefaultComboBoxModel(arrondissementsCombo));
    }

    private void remplirSouscentreCombobox() {
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        souscentres = metier.findAllSouscentresD1Arrondissement(nomArrondissementSelected);
        //on remplit la combobox des sous-centres
        souscentresCombo = new String[souscentres.size() + 1];
        souscentresCombo[0] = "---";
        int i = 1;
        for (Souscentre souscentre : souscentres) {
            souscentresCombo[i++] = souscentre.getNomsouscent();
        }
        jComboBoxSouscentre.setModel(new DefaultComboBoxModel(souscentresCombo));

    }

    private void validerNbchefsalle(String nbreString) {
        try {
            nbchefsalleSaisi = Integer.parseInt(nbreString);
            continuerNbchefsalle = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de chefs de salle doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbchefsalle = false;
        }
    }

    private void validerNbcandidats(String nbreString) {
        try {
            nbcandidatsSaisi = Integer.parseInt(nbreString);
            continuerNbcandidats = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de candidats doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbcandidats = false;
        }
    }

    private void validerNbjurys(String nbreString) {
        try {
            nbjurysSaisi = Integer.parseInt(nbreString);
            continuerNbjurys = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre de jurys doit être fourni et contenir uniquement des chiffres entiers!");
            continuerNbjurys = false;
        }
    }

    private void determinerCoutD1jurycorrigeBAC(Jurycorrige jurycor) {
        //toutes les séries ont 11 comme nombre de matières
        //sauf ABI, D et TI(12), E(8), A3(9)
        nbmat = 11;

        if (testSiTitreSousfamilleContient1Sigle(jurycor.getSousfamille(), "D") || testSiTitreSousfamilleContient1Sigle(jurycor.getSousfamille(), "TI") || testSiTitreSousfamilleContient1Sigle(jurycor.getSousfamille(), "ABI")) {
            nbmat = 12;
        }
        
        if (testSiTitreSousfamilleContient1Sigle(jurycor.getSousfamille(), "E") && !testSiTitreSousfamilleContient1Sigle(jurycor.getSousfamille(), "ESP")) {
            nbmat = 8;
        }
        
        if (testSiTitreSousfamilleContient1Sigle(jurycor.getSousfamille(), "A3")) {
            nbmat = 9;
        }

        optionAffichee = jurycor.getSousfamille().getTitre();
        effectif = jurycor.getEffectif();
        nbcopies = effectif * nbmat;
        coutcopies = nbcopies * tauxcop;
        supplement = nbcopies * 25;
        total = coutcopies + supplement;
    }

    private void determinerCoutD1jurycorrigePROB(Jurycorrige jurycor) {
        //toutes les séries ont 11 comme nombre de matières
        //sauf E (10), A3 (9) et TI (13) et ABI (12);
        nbmat = 11;

        if (testSiTitreSousfamilleContient1Sigle(jurycor.getSousfamille(), "A3")) {
            nbmat = 9;
        }
        if (testSiTitreSousfamilleContient1Sigle(jurycor.getSousfamille(), "E") && !testSiTitreSousfamilleContient1Sigle(jurycor.getSousfamille(), "ESP")) {
            nbmat = 10;
        }
        if (testSiTitreSousfamilleContient1Sigle(jurycor.getSousfamille(), "ABI")) {
            nbmat = 12;
        }
        if (testSiTitreSousfamilleContient1Sigle(jurycor.getSousfamille(), "TI")) {
            nbmat = 13;
        }
        tauxcop=150;

        optionAffichee = jurycor.getSousfamille().getTitre();
        effectif = jurycor.getEffectif();
        nbcopies = effectif * nbmat;
        coutcopies = nbcopies * tauxcop;
        supplement = nbcopies * 25;
        total = coutcopies + supplement;
    }

    private void determinerCoutAdditif(Map<Souscentre, ArrayList<Jurycorrige>> souscentreJurycorrigeMap, Souscentre souscentre) {
        effectif = 0;
        nbjurys = 0;
        nbchefsalEPS = 0;
        for (Jurycorrige jurycor : souscentreJurycorrigeMap.get(souscentre)) {
            nbjurys += jurycor.getNbjury();
            effectif += jurycor.getEffectif();
        }
        if (nbjurys >= 7 && nbjurys <= 12) {
            nbchefsalEPS = 1;//nbchefsalEPS: cas exceptionnel lié au covid19
        }
        if (nbjurys >= 13 && nbjurys <= 18) {
            nbchefsalEPS = 2;
        }
        indemChefsalEPS = nbchefsalEPS * 30000;
        vacpredelEPS = nbchefsalEPS * 4 * 1500;
        total = indemChefsalEPS + vacpredelEPS;
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    private boolean testSiTitreSousfamilleContient1Sigle(Sousfamille sousfamille, String sigle) {
        boolean testeur = false;
        List<Sousfamille> lesSousfamilles = metier.findAllSousfamillesLikeTitre(sigle);//si un sous-centre possède un jury dont la sous-famille contient un sigle, cette sous-famille y est unique
        for (Sousfamille sf : lesSousfamilles) {
            if (sf.getTitre().equals(sousfamille.getTitre())) {
                testeur = true;
                break;
            }
        }
        return testeur;
    }
}
