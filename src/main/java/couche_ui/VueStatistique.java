package couche_ui;

import couche_jpa.Activite;
import couche_jpa.Arrondissement;
import couche_jpa.Centre;
import couche_jpa.Departement;
import couche_jpa.Examen;
import couche_jpa.Option;
import couche_jpa.Region;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_jpa.Specialisation;
import couche_jpa.Statistique;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class VueStatistique extends javax.swing.JFrame {

    DefaultTableModel model;

    public VueStatistique() {
        initComponents();
        model = (DefaultTableModel) jTable1.getModel();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabelSession = new javax.swing.JLabel();
        jLabelExamen = new javax.swing.JLabel();
        jLabelSouscentre = new javax.swing.JLabel();
        jLabelRegion = new javax.swing.JLabel();
        jLabelDepartement = new javax.swing.JLabel();
        jLabelArrondissement = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jComboBoxExamen = new javax.swing.JComboBox<>();
        jComboBoxRegion = new javax.swing.JComboBox<>();
        jComboBoxDepartement = new javax.swing.JComboBox<>();
        jComboBoxArrondissement = new javax.swing.JComboBox<>();
        jComboBoxSouscentre = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonCreer = new javax.swing.JButton();
        jButtonRechercher = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jButtonVisualiser = new javax.swing.JButton();
        jLabelOption = new javax.swing.JLabel();
        jComboBoxOption = new javax.swing.JComboBox<>();
        jLabelEffectif = new javax.swing.JLabel();
        jTextFieldEffectif = new javax.swing.JTextField();
        jButtonImporter = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("STATISTIQUE");

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen :");

        jLabelSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSouscentre.setText("Sous-centre :");

        jLabelRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegion.setText("Région :");

        jLabelDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartement.setText("Département :");

        jLabelArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissement.setText("Arrondissement :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jComboBoxExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxExamenActionPerformed(evt);
            }
        });

        jComboBoxRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionActionPerformed(evt);
            }
        });

        jComboBoxDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementActionPerformed(evt);
            }
        });

        jComboBoxArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementActionPerformed(evt);
            }
        });

        jComboBoxSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSouscentreActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Région", "Département", "Arrondissement", "Sous-centre", "Session", "Examen", "Série/Spécialité", "Effectif", "Version"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(true);
        jTable1.setShowVerticalLines(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButtonCreer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreer.setText("Créer");
        jButtonCreer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerActionPerformed(evt);
            }
        });

        jButtonRechercher.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonRechercher.setText("Rechercher");
        jButtonRechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRechercherActionPerformed(evt);
            }
        });

        jButtonModifier.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonModifier.setText("Modifier");
        jButtonModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierActionPerformed(evt);
            }
        });

        jButtonSupprimer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jButtonAnnuler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jButtonVisualiser.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiser.setText("Visualiser");
        jButtonVisualiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserActionPerformed(evt);
            }
        });

        jLabelOption.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelOption.setText("Série/Spécialité :");

        jComboBoxOption.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxOption.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));

        jLabelEffectif.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelEffectif.setText("Effectif :");

        jTextFieldEffectif.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldEffectif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldEffectifActionPerformed(evt);
            }
        });

        jButtonImporter.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonImporter.setText("Importer");
        jButtonImporter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImporterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelDepartement)
                            .addComponent(jLabelRegion)
                            .addComponent(jLabelArrondissement)
                            .addComponent(jLabelSouscentre))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.Alignment.LEADING, 0, 324, Short.MAX_VALUE)
                                .addComponent(jComboBoxRegion, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelSession, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelExamen, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelOption, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBoxExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxOption, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelEffectif)
                                .addGap(2, 2, 2)
                                .addComponent(jTextFieldEffectif, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonImporter))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(246, 246, 246)
                        .addComponent(jButtonCreer)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonRechercher)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonModifier)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSupprimer)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnuler)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonVisualiser))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(567, 567, 567)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1329, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(128, 128, 128)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelOption, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxOption, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelEffectif, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldEffectif, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonImporter, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButtonFermer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                            .addComponent(jButtonCreer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonRechercher, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonModifier, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonSupprimer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonAnnuler, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonVisualiser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jComboBoxSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSouscentreActionPerformed
        //inutile
    }//GEN-LAST:event_jComboBoxSouscentreActionPerformed

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        videFrame();
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jComboBoxRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionActionPerformed
        remplirDepartementCombobox();
    }//GEN-LAST:event_jComboBoxRegionActionPerformed

    private void jComboBoxDepartementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementActionPerformed
        remplirArrondissementCombobox();
    }//GEN-LAST:event_jComboBoxDepartementActionPerformed

    private void jComboBoxArrondissementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementActionPerformed
        remplirSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementActionPerformed

    private void jButtonCreerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerActionPerformed
        model.setRowCount(0);//vide la jTable
        validerNombre();
        if (continuer && nombre > 0) {
            infoSaisies();
            for (Souscentre s : souscentres) {
                if (s.getNomsouscent().equals(nomSouscentreSelected)) {
                    souscentreSelected = s;
                    break;
                }
            }
            for (Examen e : examens) {
                if (e.getSigle().equals(sigleExamenSelected)) {
                    examenSelected = e;
                    break;
                }
            }
            for (Option o : options) {
                if (o.getSigle().equals(sigleOptionSelected)) {
                    optionSelected = o;
                    break;
                }
            }
            for (Session s : sessions) {
                if (s.getAnnee() == anneeSelected) {
                    sessionSelected = s;
                    break;
                }
            }
            for (Activite a : activites) {
                if (a.getNomact().equals(nomActiviteSelected)) {
                    activiteSelected = a;
                    break;
                }
            }
            try {
                metier.creerStatistique(new Statistique(nombre, examenSelected, optionSelected, sessionSelected, souscentreSelected));
                JOptionPane.showMessageDialog(this, "Statistique créée avec succès !");
                jTextFieldEffectif.setText("0");
                statistiques = metier.findAllStatistiquesD1SouscentreA1ExamenDans1Session(anneeSelected, nomSouscentreSelected, sigleExamenSelected);//l'option et la phase varient
                for (Statistique s : statistiques) {
                    model.insertRow(model.getRowCount(), new Object[]{s.getIdstat(), s.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), s.getSouscentre().getEtablissement().getArrondissement().getDepartement().getNomdepart(), s.getSouscentre().getEtablissement().getArrondissement().getNomarr(), s.getSouscentre().getNomsouscent(), s.getSession().getAnnee(), s.getExamen().getSigle(), s.getOption().getSigle(), s.getNombre(), s.getVersion()});
                }
            } catch (ObcbudgetException ex) {
                JOptionPane.showMessageDialog(this, "Impossible de créer la statistique souhaitée \n raison:" + ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "L'effectif doit être un entier positif !");
        }
    }//GEN-LAST:event_jButtonCreerActionPerformed

    private void jButtonRechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRechercherActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        try {
            statistiques = metier.findAllStatistiquesD1SouscentreA1ExamenDans1Session(anneeSelected, nomSouscentreSelected, sigleExamenSelected);//c'est l'option qui varie
            for (Statistique s : statistiques) {
                model.insertRow(model.getRowCount(), new Object[]{s.getIdstat(), s.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), s.getSouscentre().getEtablissement().getArrondissement().getDepartement().getNomdepart(), s.getSouscentre().getEtablissement().getArrondissement().getNomarr(), s.getSouscentre().getNomsouscent(), s.getSession().getAnnee(), s.getExamen().getSigle(), s.getOption().getSigle(), s.getNombre(), s.getVersion()});
            }
        } catch (ObcbudgetException ex) {
            JOptionPane.showMessageDialog(this, "Les statistiques recherchées n'existent sans doute pas ! ");
        }
    }//GEN-LAST:event_jButtonRechercherActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        //remplit les champs
        int ligne = jTable1.getSelectedRow();
        idStatistiqueCliked = (int) model.getValueAt(ligne, 0);
        jComboBoxRegion.setSelectedItem((String) model.getValueAt(ligne, 1));
        jComboBoxDepartement.setSelectedItem((String) model.getValueAt(ligne, 2));
        jComboBoxArrondissement.setSelectedItem((String) model.getValueAt(ligne, 3));
        jComboBoxSouscentre.setSelectedItem((String) model.getValueAt(ligne, 4));
        jComboBoxSession.setSelectedItem("" + model.getValueAt(ligne, 5));
        jComboBoxExamen.setSelectedItem((String) model.getValueAt(ligne, 6));
        jComboBoxOption.setSelectedItem((String) model.getValueAt(ligne, 7));
        jTextFieldEffectif.setText("" + model.getValueAt(ligne, 8));
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButtonModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierActionPerformed
        model.setRowCount(0);//vide la jTable
        validerNombre();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier cette statistique?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (continuer && nombre > 0) {
                infoSaisies();
                statistiqueCliked = metier.findStatistiqueById(idStatistiqueCliked);
                for (Souscentre s : souscentres) {
                    if (s.getNomsouscent().equals(nomSouscentreSelected)) {
                        souscentreSelected = s;
                        break;
                    }
                }
                statistiqueCliked.setSouscentre(souscentreSelected);
                for (Examen e : examens) {
                    if (e.getSigle().equals(sigleExamenSelected)) {
                        examenSelected = e;
                        break;
                    }
                }
                statistiqueCliked.setExamen(examenSelected);
                for (Option o : options) {
                    if (o.getSigle().equals(sigleOptionSelected)) {
                        optionSelected = o;
                        break;
                    }
                }
                statistiqueCliked.setOption(optionSelected);
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }
                statistiqueCliked.setSession(sessionSelected);
                for (Activite a : activites) {
                    if (a.getNomact().equals(nomActiviteSelected)) {
                        activiteSelected = a;
                        break;
                    }
                }
                
                statistiqueCliked.setNombre(nombre);

                try {
                    metier.modifierStatistique(statistiqueCliked);
                    JOptionPane.showMessageDialog(this, "Statistique modifiée avec succès !");
                    jTextFieldEffectif.setText("0");
                    statistiques = metier.findAllStatistiquesD1SouscentreA1ExamenDans1Session(anneeSelected, nomSouscentreSelected, sigleExamenSelected);//c'est l'option qui varie
                    for (Statistique s : statistiques) {
                        model.insertRow(model.getRowCount(), new Object[]{s.getIdstat(), s.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), s.getSouscentre().getEtablissement().getArrondissement().getDepartement().getNomdepart(), s.getSouscentre().getEtablissement().getArrondissement().getNomarr(), s.getSouscentre().getNomsouscent(), s.getSession().getAnnee(), s.getExamen().getSigle(), s.getOption().getSigle(), s.getNombre(), s.getVersion()});
                    }
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de modifier la statistique souhaitée \n raison:" + ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "L'effectif doit être un entier positif !");
            }
        }
    }//GEN-LAST:event_jButtonModifierActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        model.setRowCount(0);//vide la jTable
        validerNombre();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer cette statistique?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (continuer && nombre > 0) {
                infoSaisies();
                try {
                    metier.supprimerStatistique(metier.findStatistiqueById(idStatistiqueCliked));
                    JOptionPane.showMessageDialog(this, "Statistique supprimée avec succès !");
                    jTextFieldEffectif.setText("0");
                    statistiques = metier.findAllStatistiquesD1SouscentreA1ExamenDans1Session(anneeSelected, nomSouscentreSelected, sigleExamenSelected);//c'est l'option qui varie
                    for (Statistique s : statistiques) {
                        model.insertRow(model.getRowCount(), new Object[]{s.getIdstat(), s.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), s.getSouscentre().getEtablissement().getArrondissement().getDepartement().getNomdepart(), s.getSouscentre().getEtablissement().getArrondissement().getNomarr(), s.getSouscentre().getNomsouscent(), s.getSession().getAnnee(), s.getExamen().getSigle(), s.getOption().getSigle(), s.getNombre(), s.getVersion()});
                    }
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer la statistique souhaitée \n raison:" + ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "L'effectif doit être un entier positif !");
            }
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jButtonVisualiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserActionPerformed
        anneeString = (String) jComboBoxSession.getSelectedItem();
        sigleExamenSelected = (String) jComboBoxExamen.getSelectedItem();
        if (!anneeString.equals("---") && !sigleExamenSelected.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            statistiques = metier.findAllStatistiquesD1ExamenDans1Session(anneeSelected, sigleExamenSelected);
            try {
                List<Map<String, Object>> datasource = new ArrayList<>();
                for (Statistique stat : statistiques) {
                    Map<String, Object> row = new HashMap<>();
                    row.put("examen", stat.getExamen().getSigle());
                    String s = "" + stat.getSession().getAnnee();
                    row.put("session", s);
                    row.put("region", stat.getSouscentre().getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                    row.put("departement", stat.getSouscentre().getEtablissement().getArrondissement().getDepartement().getNomdepart());
                    row.put("arrondissement", stat.getSouscentre().getEtablissement().getArrondissement().getNomarr());
                    row.put("souscentre", stat.getSouscentre().getNomsouscent());                    
                    row.put("option", stat.getOption().getSigle());
                    row.put("nombre", stat.getNombre());

                    datasource.add(row);
                }
                JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\statistiqueReport.jrxml");
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                jasperViewer.setVisible(true);
            } catch (JRException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs session et examen sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonVisualiserActionPerformed

    private void jComboBoxExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxExamenActionPerformed
        //rien ici
    }//GEN-LAST:event_jComboBoxExamenActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        remplirOptionCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jTextFieldEffectifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldEffectifActionPerformed
        //
    }//GEN-LAST:event_jTextFieldEffectifActionPerformed

    private void jButtonImporterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImporterActionPerformed
        anneeString = (String) jComboBoxSession.getSelectedItem();
        sigleExamenSelected = (String) jComboBoxExamen.getSelectedItem();
        if (!anneeString.equals("---") && !sigleExamenSelected.equals("---")) {
            class statNonSave {//classe interne devant contenir une statistique non sauvegardée dans la BD

                String nomScentre;
                String nomOpt;
                int nbcand;

                public statNonSave(String nomScentre, String nomOpt, int nbcand) {
                    this.nomScentre = nomScentre;
                    this.nomOpt = nomOpt;
                    this.nbcand = nbcand;
                }

                public String getNomScentre() {
                    return nomScentre;
                }

                public void setNomScentre(String nomScentre) {
                    this.nomScentre = nomScentre;
                }

                public String getNomOpt() {
                    return nomOpt;
                }

                public void setNomOpt(String nomOpt) {
                    this.nomOpt = nomOpt;
                }

                public int getNbcand() {
                    return nbcand;
                }

                public void setNbcand(int nbcand) {
                    this.nbcand = nbcand;
                }

            }
            ArrayList<statNonSave> statNonSaveList = new ArrayList<>();//liste de toutes les statistiques non sauvegardées dans la BD
            anneeSelected = Integer.parseInt(anneeString);
            for (Examen e : examens) {
                if (e.getSigle().equals(sigleExamenSelected)) {
                    examenSelected = e;
                    break;
                }
            }

            for (Session s : sessions) {
                if (s.getAnnee() == anneeSelected) {
                    sessionSelected = s;
                    break;
                }
            }
            JFileChooser choix = new JFileChooser();
            int retour = choix.showOpenDialog(this);
            if (retour == JFileChooser.APPROVE_OPTION) {
                // un fichier a été choisi (sortie par OK)
                // nom du fichier  choisi 
                //String nomFichier = choix.getSelectedFile().getName();
                // chemin absolu du fichier choisi
                String cheminFichier = choix.getSelectedFile().getAbsolutePath();
                //JOptionPane.showMessageDialog(this, "Nom du fichier choisi:" + nomFichier+" \n Chemin du fichier:"+cheminFichier);

                try {
                    //long start = System.currentTimeMillis();

                    FileInputStream inputStream = new FileInputStream(cheminFichier);

                    XSSFWorkbook workbook = new XSSFWorkbook(inputStream);//XSSFWorkbook pour windows 2007 d'extension xlsx; HSSFWorkbook pour excel 97 et 2003 d'extension xls

                    Sheet firstSheet = workbook.getSheetAt(0);
                    Iterator<Row> rowIterator = firstSheet.iterator();

                    rowIterator.next(); // skip the header row

                    while (rowIterator.hasNext()) {
                        boolean continuerScentre = true;
                        boolean continuerOpt = true;
                        Row nextRow = rowIterator.next();
                        Iterator<Cell> cellIterator = nextRow.cellIterator();
                        Souscentre souscentre = new Souscentre();
                        Option option = new Option();
                        int effectif = 0;
                        String scentre = "";
                        String opt = "";
                        while (cellIterator.hasNext()) {
                            Cell nextCell = cellIterator.next();
                            int columnIndex = nextCell.getColumnIndex();

                            switch (columnIndex) {
                                case 0:
                                    scentre = nextCell.getStringCellValue();
                                    try {
                                        souscentre = metier.findSouscentreByName(scentre);
                                    } catch (Exception e) {
                                        continuerScentre = false;
                                    }
                                    break;
                                case 1:
                                    opt = nextCell.getStringCellValue();
                                    try {
                                        option = metier.findOptionBySigle(opt);
                                    } catch (Exception e) {
                                        continuerOpt = false;
                                    }
                                    break;
                                case 2:
                                    effectif = (int) nextCell.getNumericCellValue();
                                    break;
                            }
                        }
                        Activite activite = metier.findActiviteByNom("ECRIT");
                        Statistique uneStat = new Statistique(effectif, examenSelected, option, sessionSelected, souscentre);

                        if (continuerScentre && continuerOpt) {
                            metier.creerStatistique(uneStat);//uneStat est sauvegardé
                        } else {
                            statNonSaveList.add(new statNonSave(scentre, opt, effectif));//impossible de sauvegarder uneStat
                        }
                    }

                    workbook.close();

                } catch (IOException ex1) {
                    System.out.println("Error reading file");
                    ex1.printStackTrace();
                }
                if (statNonSaveList.size() > 0) {
                    JOptionPane.showMessageDialog(this, "Attention ! Attention ! Plusieurs données n'ont pas été importées dans la base des données !");
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        int i = 1;
                        for (statNonSave stat : statNonSaveList) {
                            Map<String, Object> row = new HashMap<>();
                            row.put("examen", examenSelected.getSigle());
                            row.put("session", sessionSelected.getAnnee());
                            row.put("num", i++);
                            row.put("souscentre", stat.nomScentre);
                            row.put("option", stat.nomOpt);
                            row.put("nombre", stat.nbcand);
                            datasource.add(row);
                        }

                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\statistiquesNonSauvegardeesReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Importation effectuée avec succès !");
                }
            } else {
                //... ;// pas de fichier choisi
                JOptionPane.showMessageDialog(this, "Aucun choix effectué !");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencer svp. Vous devez choisir un examen et une session !");
        }
    }//GEN-LAST:event_jButtonImporterActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueStatistique.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueStatistique.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueStatistique.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueStatistique.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueStatistique().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonCreer;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonImporter;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonRechercher;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JButton jButtonVisualiser;
    private javax.swing.JComboBox<String> jComboBoxArrondissement;
    private javax.swing.JComboBox<String> jComboBoxDepartement;
    private javax.swing.JComboBox<String> jComboBoxExamen;
    private javax.swing.JComboBox<String> jComboBoxOption;
    private javax.swing.JComboBox<String> jComboBoxRegion;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxSouscentre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelArrondissement;
    private javax.swing.JLabel jLabelDepartement;
    private javax.swing.JLabel jLabelEffectif;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelOption;
    private javax.swing.JLabel jLabelRegion;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelSouscentre;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldEffectif;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Region> regions = null;
    private String[] regionsCombo = null;
    private List<Departement> departements = null;
    private List<Arrondissement> arrondissements = null;
    private List<Souscentre> souscentres = null;
    private List<Centre> centres = null;
    private List<Session> sessions = null;
    private List<Examen> examens = null;
    private List<Option> options = new ArrayList<Option>();
    private String[] departementsCombo = null;
    private String[] arrondissementsCombo = null;
    private String[] sessionsCombo = null;
    private String[] examensCombo = null;
    private String[] optionsCombo = null;
    private String[] phasesCombo = null;
    private String[] souscentresCombo = null;
    private String[] centresCombo = null;
    private Departement departementSelected = null;
    private Arrondissement arrondissementSelected = null;
    private String sigleExamenSelected = "";
    private String sigleOptionSelected = "";
    private String nomRegionSelected = "";
    private String nomDepartementSelected = "";
    private String nomArrondissementSelected = "";
    private String nomSouscentreSelected = "";
    private String nomCentreSelected = "";
    private String nomActiviteSelected = "";
    private Souscentre souscentreSelected = null;
    private int anneeSelected = 0;
    private Session sessionSelected = null;
    private Examen examenSelected = null;
    private Option optionSelected = null;
    private Activite activiteSelected = null;
    private int nombre = 0;
    private int idStatistiqueCliked = 0;
    private Statistique statistiqueCliked = null;
    private List<Statistique> statistiques = null;
    boolean continuer = false;
    private List<String> natures = null;
    private List<Specialisation> specialisations = null;
    private List<Activite> activites = null;
    private String anneeString = "";

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        examens = metier.findAllExamens();
        regions = metier.findAllRegions();
        activites = metier.findAllActivites();

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int i = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[i++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des examens
        examensCombo = new String[examens.size() + 1];
        examensCombo[0] = "---";
        int k = 1;
        for (Examen examen : examens) {
            examensCombo[k++] = examen.getSigle();
        }
        jComboBoxExamen.setModel(new DefaultComboBoxModel(examensCombo));

        //on remplit la combobox des régions
        regionsCombo = new String[regions.size() + 1];
        regionsCombo[0] = "---";
        int j = 1;
        for (Region region : regions) {
            regionsCombo[j++] = region.getNomreg();
        }
        jComboBoxRegion.setModel(new DefaultComboBoxModel(regionsCombo));

        jTextFieldEffectif.setText("0");

        remplirDepartementCombobox();

        remplirArrondissementCombobox();

        remplirSouscentreCombobox();
    }

    private void infoSaisies() {
        anneeSelected = Integer.parseInt((String) jComboBoxSession.getSelectedItem());
        sigleExamenSelected = (String) jComboBoxExamen.getSelectedItem();
        sigleOptionSelected = (String) jComboBoxOption.getSelectedItem();
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();        
    }

    private void videFrame() {
        jComboBoxSession.setSelectedIndex(0);
        jComboBoxExamen.setSelectedIndex(0);
        jComboBoxOption.setSelectedIndex(0);
        jComboBoxRegion.setSelectedIndex(0);
        jComboBoxDepartement.setSelectedIndex(0);
        jComboBoxArrondissement.setSelectedIndex(0);
        jComboBoxSouscentre.setSelectedIndex(0);       
        jTextFieldEffectif.setText("0");
        model.setRowCount(0);//vide la jTable
    }

    private void remplirDepartementCombobox() {
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        departements = metier.findAllDepartementsD1Region(nomRegionSelected);
        //on remplit la combobox des départements
        departementsCombo = new String[departements.size() + 1];
        departementsCombo[0] = "---";
        int i = 1;
        for (Departement departement : departements) {
            departementsCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartement.setModel(new DefaultComboBoxModel(departementsCombo));
    }

    private void remplirArrondissementCombobox() {
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        arrondissements = metier.findAllArrondissementsD1Departement(nomDepartementSelected);
        //on remplit la combobox des arrondissements
        arrondissementsCombo = new String[arrondissements.size() + 1];
        arrondissementsCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissements) {
            arrondissementsCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissement.setModel(new DefaultComboBoxModel(arrondissementsCombo));
    }

    private void remplirSouscentreCombobox() {
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        souscentres = metier.findAllSouscentresD1Arrondissement(nomArrondissementSelected);
        //on remplit la combobox des sous-centres
        souscentresCombo = new String[souscentres.size() + 1];
        souscentresCombo[0] = "---";
        int i = 1;
        for (Souscentre souscentre : souscentres) {
            souscentresCombo[i++] = souscentre.getNomsouscent();
        }
        jComboBoxSouscentre.setModel(new DefaultComboBoxModel(souscentresCombo));
    }

    private void validerNombre() {
        String chaine = jTextFieldEffectif.getText();
        try {
            int nb = Integer.parseInt(chaine);
            nombre = nb;
            continuer = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, " L'effectif de candidats doit être fourni et contenir uniquement des chiffres !");
            continuer = false;
        }
    }

    private void remplirOptionCombobox() {
        if (!(((String) jComboBoxSession.getSelectedItem()).equals("---"))) {
            anneeSelected = Integer.parseInt((String) jComboBoxSession.getSelectedItem());
            sigleExamenSelected = (String) jComboBoxExamen.getSelectedItem();
            nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
            if (!sigleExamenSelected.equals("---") && !nomSouscentreSelected.equals("---")) {
                specialisations = metier.findAllSpecialisationsD1SouscentrePour1ExamenEtSession(anneeSelected, sigleExamenSelected, nomSouscentreSelected);
                //on remplit la combobox des options
                optionsCombo = new String[specialisations.size() + 1];
                optionsCombo[0] = "---";
                int i = 1;
                for (Specialisation s : specialisations) {
                    optionsCombo[i++] = s.getOption().getSigle();
                    options.add(s.getOption());
                }
                jComboBoxOption.setModel(new DefaultComboBoxModel(optionsCombo));
            }
        }
    }    
}
