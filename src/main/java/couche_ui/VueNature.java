package couche_ui;

import couche_jpa.Activite;
import couche_jpa.Arrondissement;
import couche_jpa.Departement;
import couche_jpa.Examen;
import couche_jpa.Nature;
import couche_jpa.Nbepreuveprof;
import couche_jpa.Option;
import couche_jpa.Region;
import couche_jpa.Scentaplus;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_jpa.Specialisation;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueNature extends javax.swing.JFrame {

    DefaultTableModel model;

    public VueNature() {
        initComponents();
        model = (DefaultTableModel) jTable1.getModel();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabelSession = new javax.swing.JLabel();
        jLabelExamen = new javax.swing.JLabel();
        jLabelSouscentre = new javax.swing.JLabel();
        jLabelRegion = new javax.swing.JLabel();
        jLabelDepartement = new javax.swing.JLabel();
        jLabelOption = new javax.swing.JLabel();
        jLabelActivite = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jComboBoxExamen = new javax.swing.JComboBox<>();
        jComboBoxRegion = new javax.swing.JComboBox<>();
        jComboBoxDepartement = new javax.swing.JComboBox<>();
        jComboBoxSouscentre = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonCreer = new javax.swing.JButton();
        jButtonRechercher = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jButtonVisualiser = new javax.swing.JButton();
        jLabelArrondissement = new javax.swing.JLabel();
        jComboBoxArrondissement = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListOption = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListActivite = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxScentaplus = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ACTIVITES DES SOUS-CENTRES");

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen :");

        jLabelSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSouscentre.setText("Sous-centre :");

        jLabelRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegion.setText("Région :");

        jLabelDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartement.setText("Département :");

        jLabelOption.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelOption.setText("Série/Spécialité :");

        jLabelActivite.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelActivite.setText("Activités :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jComboBoxExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxExamen.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxExamenActionPerformed(evt);
            }
        });

        jComboBoxRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionActionPerformed(evt);
            }
        });

        jComboBoxDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartement.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxDepartement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementActionPerformed(evt);
            }
        });

        jComboBoxSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSouscentre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSouscentreActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Région", "Département", "Arrondissement", "Sous-centre", "Examen", "Session", "Activités", "Pratique consécutive à l'écrit", "Séries/Spécialités/Options"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(true);
        jTable1.setShowVerticalLines(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButtonCreer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreer.setText("Créer");
        jButtonCreer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerActionPerformed(evt);
            }
        });

        jButtonRechercher.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonRechercher.setText("Rechercher");
        jButtonRechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRechercherActionPerformed(evt);
            }
        });

        jButtonSupprimer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jButtonAnnuler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jButtonVisualiser.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiser.setText("Visualiser");
        jButtonVisualiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserActionPerformed(evt);
            }
        });

        jLabelArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissement.setText("Arrondissement :");

        jComboBoxArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissement.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxArrondissement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementActionPerformed(evt);
            }
        });

        jListOption.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jScrollPane2.setViewportView(jListOption);

        jListActivite.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jScrollPane3.setViewportView(jListActivite);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Y a-t-il des candidats aux épreuves pratiques consécutives à l'écrit ? : ");

        jComboBoxScentaplus.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(375, 375, 375)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelSouscentre)
                    .addComponent(jLabelDepartement)
                    .addComponent(jLabelRegion)
                    .addComponent(jLabelArrondissement)
                    .addComponent(jLabelSession))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBoxRegion, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.Alignment.LEADING, 0, 299, Short.MAX_VALUE))
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 42, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxScentaplus, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelActivite)
                            .addComponent(jLabelExamen))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelOption)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jComboBoxExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(37, 37, 37))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonCreer)
                .addGap(18, 18, 18)
                .addComponent(jButtonRechercher)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimer)
                .addGap(18, 18, 18)
                .addComponent(jButtonAnnuler)
                .addGap(18, 18, 18)
                .addComponent(jButtonFermer)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiser)
                .addGap(288, 288, 288))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelExamen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabelActivite, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabelOption, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2))))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxScentaplus, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonVisualiser, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButtonCreer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonRechercher, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonSupprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonAnnuler, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelArrondissement, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                            .addComponent(jComboBoxArrondissement))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jComboBoxSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSouscentreActionPerformed
        //testClicSurSouscentre=true;
    }//GEN-LAST:event_jComboBoxSouscentreActionPerformed

    private void jComboBoxDepartementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementActionPerformed
        remplirArrondissementCombobox();
    }//GEN-LAST:event_jComboBoxDepartementActionPerformed

    private void jComboBoxRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionActionPerformed
        remplirDepartementCombobox();
    }//GEN-LAST:event_jComboBoxRegionActionPerformed

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        videFrame();
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jButtonCreerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        if (!listeActivitesSelected.isEmpty() && !listeOptionsSelected.isEmpty() && !nomSouscentreSelected.equals("---") && !anneeEnString.equals("---") && !reponse.equals("---")) {
            anneeSelected = Integer.parseInt(anneeEnString);
            for (Souscentre s : souscentres) {
                if (s.getNomsouscent().equals(nomSouscentreSelected)) {
                    souscentreSelected = s;
                    break;
                }
            }
            for (Session s : sessions) {
                if (s.getAnnee() == anneeSelected) {
                    sessionSelected = s;
                    break;
                }
            }

            for (Examen e : examens) {
                if (e.getSigle().equals(sigleExamenSelected)) {
                    examenSelected = e;
                    break;
                }
            }
            for (int i = 0; i < listeActivitesSelected.size(); i++) {
                for (Activite a : activites) {
                    if (a.getNomact().equals(listeActivitesSelected.get(i))) {
                        activitesSelected.add(a);
                        break;
                    }
                }
            }
            for (int i = 0; i < listeOptionsSelected.size(); i++) {
                for (Option o : options) {
                    if (o.getSigle().equals(listeOptionsSelected.get(i))) {
                        optionsSelected.add(o);
                        break;
                    }
                }
            }

            try {
                for (Activite a : activitesSelected) {
                    metier.creerNature(new Nature(sessionSelected, examenSelected, a, souscentreSelected));
                }
                for (Option o : optionsSelected) {
                    metier.creerSpecialisation(new Specialisation(examenSelected, o, sessionSelected, souscentreSelected));
                }
                if (reponse.equals("Oui")) {
                    metier.creerScentaplus(new Scentaplus(sessionSelected, examenSelected, souscentreSelected));
                }

                JOptionPane.showMessageDialog(this, " Rattachement créé avec succès !");
                natures2 = metier.findAllPhasesD1SouscentrePour1ExamenEtSession(anneeSelected, sigleExamenSelected, nomSouscentreSelected);
                String naturePourAffichage = "";
                for (String s : natures2) {
                    if (naturePourAffichage.equals("")) {
                        naturePourAffichage += s;
                    } else {
                        naturePourAffichage += ", " + s;
                    }
                }
                lesscentaplus = metier.findAllScentaplusD1RegionA1ExamenEt1Session(anneeSelected, sigleExamenSelected, nomRegionSelected);
                boolean estaplus = false;
                String reponsePourAffichage = "";
                for (Scentaplus s : lesscentaplus) {
                    if (s.getSouscentre().getNomsouscent().equals(nomSouscentreSelected)) {
                        estaplus = true;
                        break;
                    }
                }
                if (estaplus) {
                    reponsePourAffichage = "Oui";
                } else {
                    reponsePourAffichage = "Non";
                }

                specialisations = metier.findAllSpecialisationsD1SouscentrePour1ExamenEtSession(anneeSelected, sigleExamenSelected, nomSouscentreSelected);
                String specialisationPourAffichage = "";
                for (Specialisation s : specialisations) {
                    if (specialisationPourAffichage.equals("")) {
                        specialisationPourAffichage += s.getOption().getSigle();
                    } else {
                        specialisationPourAffichage += ", " + s.getOption().getSigle();
                    }
                }

                if (!naturePourAffichage.equals("") && !specialisationPourAffichage.equals("")) {
                    model.insertRow(model.getRowCount(), new Object[]{souscentreSelected.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), souscentreSelected.getEtablissement().getArrondissement().getDepartement().getNomdepart(), souscentreSelected.getEtablissement().getArrondissement().getNomarr(), souscentreSelected.getNomsouscent(), examenSelected.getSigle(), sessionSelected.getAnnee(), naturePourAffichage, reponsePourAffichage, specialisationPourAffichage});
                }
            } catch (ObcbudgetException ex) {
                JOptionPane.showMessageDialog(this, "Impossible de créer le rattachement souhaitée \n raison:" + ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencer svp. Au moins une donnée n'a pas été sélectionnée !");
        }
        activitesSelected.clear();
        optionsSelected.clear();
    }//GEN-LAST:event_jButtonCreerActionPerformed

    private void jButtonRechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRechercherActionPerformed
        model.setRowCount(0);//vide la jTable
        jListActivite.clearSelection();
        jListOption.clearSelection();
        infoSaisies();
        if (!nomSouscentreSelected.equals("---") && !anneeEnString.equals("---") && !sigleExamenSelected.equals("")) {//on cherche toutes les activités d'un examen pour une session donnée dans un sous-centre
            anneeSelected = Integer.parseInt(anneeEnString);
            try {
                natures2 = metier.findAllPhasesD1SouscentrePour1ExamenEtSession(anneeSelected, sigleExamenSelected, nomSouscentreSelected);
                String naturePourAffichage = "";
                for (String s : natures2) {
                    if (naturePourAffichage.equals("")) {
                        naturePourAffichage += s;
                    } else {
                        naturePourAffichage += ", " + s;
                    }
                }
                lesscentaplus = metier.findAllScentaplusD1RegionA1ExamenEt1Session(anneeSelected, sigleExamenSelected, nomRegionSelected);
                boolean estaplus = false;
                String reponsePourAffichage = "";
                for (Scentaplus s : lesscentaplus) {
                    if (s.getSouscentre().getNomsouscent().equals(nomSouscentreSelected)) {
                        estaplus = true;
                        break;
                    }
                }
                if (estaplus) {
                    reponsePourAffichage = "Oui";
                } else {
                    reponsePourAffichage = "Non";
                }

                specialisations = metier.findAllSpecialisationsD1SouscentrePour1ExamenEtSession(anneeSelected, sigleExamenSelected, nomSouscentreSelected);
                String specialisationPourAffichage = "";
                for (Specialisation s : specialisations) {
                    if (specialisationPourAffichage.equals("")) {
                        specialisationPourAffichage += s.getOption().getSigle();
                    } else {
                        specialisationPourAffichage += ", " + s.getOption().getSigle();
                    }
                }
                for (Souscentre s : souscentres) {
                    if (s.getNomsouscent().equals(nomSouscentreSelected)) {
                        souscentreSelected = s;
                        break;
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                for (Examen e : examens) {
                    if (e.getSigle().equals(sigleExamenSelected)) {
                        examenSelected = e;
                        break;
                    }
                }
                if (!naturePourAffichage.equals("") && !specialisationPourAffichage.equals("")) {
                    model.insertRow(model.getRowCount(), new Object[]{souscentreSelected.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), souscentreSelected.getEtablissement().getArrondissement().getDepartement().getNomdepart(), souscentreSelected.getEtablissement().getArrondissement().getNomarr(), souscentreSelected.getNomsouscent(), examenSelected.getSigle(), sessionSelected.getAnnee(), naturePourAffichage, reponsePourAffichage, specialisationPourAffichage});
                }

            } catch (ObcbudgetException ex) {
                JOptionPane.showMessageDialog(this, "Rattachement souhaité introuvable\n raison:" + ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez sélectionner un examen, une session et sous-centre svp !");
        }
    }//GEN-LAST:event_jButtonRechercherActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer cette activité?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            infoSaisies();
            if (!listeActivitesSelected.isEmpty() && !listeOptionsSelected.isEmpty() && !nomSouscentreSelected.equals("---") && !anneeEnString.equals("---") && !reponse.equals("---")) {
                anneeSelected = Integer.parseInt(anneeEnString);
                try {
                    metier.supprimerLesNaturesD1SouscentrePour1SessionD1Examen(anneeSelected, sigleExamenSelected, nomSouscentreSelected);
                    metier.supprimerLesSpecialisationsD1SouscentrePour1SessionD1Examen(anneeSelected, sigleExamenSelected, nomSouscentreSelected);
                    metier.supprimerUnScentaplus(anneeSelected, sigleExamenSelected, nomSouscentreSelected);
                    JOptionPane.showMessageDialog(this, " Rattachement supprimé avec succès !");
                    model.setRowCount(0);//vide la jTable

                    natures2 = metier.findAllPhasesD1SouscentrePour1ExamenEtSession(anneeSelected, sigleExamenSelected, nomSouscentreSelected);
                    String naturePourAffichage = "";
                    for (String s : natures2) {
                        if (naturePourAffichage.equals("")) {
                            naturePourAffichage += s;
                        } else {
                            naturePourAffichage += ", " + s;
                        }
                    }
                    lesscentaplus = metier.findAllScentaplusD1RegionA1ExamenEt1Session(anneeSelected, sigleExamenSelected, nomRegionSelected);
                    boolean estaplus = false;
                    String reponsePourAffichage = "";
                    for (Scentaplus s : lesscentaplus) {
                        if (s.getSouscentre().getNomsouscent().equals(nomSouscentreSelected)) {
                            estaplus = true;
                            break;
                        }
                    }
                    if (estaplus) {
                        reponsePourAffichage = "Oui";
                    } else {
                        reponsePourAffichage = "Non";
                    }

                    specialisations = metier.findAllSpecialisationsD1SouscentrePour1ExamenEtSession(anneeSelected, sigleExamenSelected, nomSouscentreSelected);
                    String specialisationPourAffichage = "";
                    for (Specialisation s : specialisations) {
                        if (specialisationPourAffichage.equals("")) {
                            specialisationPourAffichage += s.getOption().getSigle();
                        } else {
                            specialisationPourAffichage += ", " + s.getOption().getSigle();
                        }
                    }

                    if (!naturePourAffichage.equals("") && !specialisationPourAffichage.equals("")) {
                        model.insertRow(model.getRowCount(), new Object[]{souscentreSelected.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), souscentreSelected.getEtablissement().getArrondissement().getDepartement().getNomdepart(), souscentreSelected.getEtablissement().getArrondissement().getNomarr(), souscentreSelected.getNomsouscent(), examenSelected.getSigle(), sessionSelected.getAnnee(), naturePourAffichage, reponsePourAffichage, specialisationPourAffichage});
                    }
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer le rattachement cliqué !\n raison:" + ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Impossible de supprimer ce rattachement !");
            }
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //testClicSurSession=true;
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jComboBoxExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxExamenActionPerformed
        remplirOptionJList();
    }//GEN-LAST:event_jComboBoxExamenActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

        int ligne = jTable1.getSelectedRow();
        jComboBoxRegion.setSelectedItem((String) model.getValueAt(ligne, 0));
        jComboBoxDepartement.setSelectedItem((String) model.getValueAt(ligne, 1));
        jComboBoxArrondissement.setSelectedItem((String) model.getValueAt(ligne, 2));
        jComboBoxSouscentre.setSelectedItem((String) model.getValueAt(ligne, 3));
        jComboBoxExamen.setSelectedItem((String) model.getValueAt(ligne, 4));
        jComboBoxSession.setSelectedItem("" + model.getValueAt(ligne, 5));

        remplirOptionJList();

        String act = (String) model.getValueAt(ligne, 6);//chaîne d'activités cliquées
        String separateur = ", ";
        String[] listAct = act.split(separateur);
        List<Integer> indicesActArray = new ArrayList<Integer>();//indices des activités en arraylist

        ListModel myModel1 = jListActivite.getModel();
        ListModel myModel2 = jListOption.getModel();
        int nbAct = myModel1.getSize();//fournit le nombre d'éléments de la jListActivite
        int nbOpt = myModel2.getSize();//fournit le nombre d'éléments de la jListOption

        for (int i = 0; i < nbAct; i++) {
            for (int j = 0; j < listAct.length; j++) {
                if (myModel1.getElementAt(i).equals(listAct[j])) {
                    indicesActArray.add(i);
                }
            }
        }
        int[] indicesAct = new int[indicesActArray.size()];//indices des activités en array
        for (int i = 0; i < indicesAct.length; i++) {
            indicesAct[i] = indicesActArray.get(i);
        }
        jListActivite.setSelectedIndices(indicesAct);

        jComboBoxScentaplus.setSelectedItem((String) model.getValueAt(ligne, 7));

        String opt = (String) model.getValueAt(ligne, 8);//chaîne d'options cliquées
        String[] listOpt = opt.split(separateur);
        List<Integer> indicesOptArray = new ArrayList<Integer>();//indices des options en arraylist

        for (int i = 0; i < nbOpt; i++) {
            for (int j = 0; j < listOpt.length; j++) {
                if (myModel2.getElementAt(i).equals(listOpt[j])) {
                    indicesOptArray.add(i);
                }
            }
        }
        int[] indicesOpt = new int[indicesOptArray.size()];//indices des specialisations en array
        for (int i = 0; i < indicesOpt.length; i++) {
            indicesOpt[i] = indicesOptArray.get(i);
        }
        jListOption.setSelectedIndices(indicesOpt);
    }//GEN-LAST:event_jTable1MouseClicked

    private void jComboBoxArrondissementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementActionPerformed
        remplirSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementActionPerformed

    private void jButtonVisualiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserActionPerformed
        infoSaisies();
        if (!anneeEnString.equals("---") && !sigleExamenSelected.equals("---")) {
            anneeSelected = Integer.parseInt(anneeEnString);
            natures1 = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, sigleExamenSelected);
            Map<Souscentre, ArrayList<Character>> souscentresMap1 = new HashMap<>();//contient les sous-centres accompagnés chacun du tableau des initiales de  ses activités
            Map<Souscentre, ArrayList<String>> souscentresMap2 = new HashMap<>();//contient les sous-centres accompagnés chacun du tableau de ses spécialités
            for (Nature n : natures1) {
                if (souscentresMap1.containsKey(n.getSouscentre())) {//si le présent sous-centre est dans souscentreMap1                
                    ArrayList<Character> list = souscentresMap1.get(n.getSouscentre());
                    boolean trouve = false;
                    for (int i = 0; i < list.size(); i++) {
                        if (list.get(i).equals(n.getActivite().getInitiale())) {
                            trouve = true;//cette activité est déjà prise en compte dans list
                            break;
                        }
                    }
                    if (!trouve) {//cette activité n'est pas prise en compte
                        //on l'ajoute
                        list.add(n.getActivite().getInitiale());
                        souscentresMap1.put(n.getSouscentre(), list);//on met à jour souscentresMap1
                    }
                } else {
                    ArrayList<Character> list = new ArrayList<>();
                    list.add(n.getActivite().getInitiale());
                    souscentresMap1.put(n.getSouscentre(), list);
                }
            }
            specialisations = metier.findAllSpecialisationsD1ExamenEtD1Session(anneeSelected, sigleExamenSelected);
            for (Specialisation s : specialisations) {
                if (souscentresMap2.containsKey(s.getSouscentre())) {//si le présent sous-centre est dans souscentreMap2                
                    ArrayList<String> list = souscentresMap2.get(s.getSouscentre());
                    boolean trouve = false;
                    for (int i = 0; i < list.size(); i++) {
                        if (list.get(i).equals(s.getOption().getSigle())) {
                            trouve = true;//cette activité est déjà prise en compte dans list
                            break;
                        }
                    }
                    if (!trouve) {//cette option n'est pas prise en compte
                        //on l'ajoute à la fin de tab
                        list.add(s.getOption().getSigle());
                        souscentresMap2.put(s.getSouscentre(), list);//on met à jour souscentresMap2
                    }
                } else {
                    ArrayList<String> list = new ArrayList<>();
                    list.add(s.getOption().getSigle());
                    souscentresMap2.put(s.getSouscentre(), list);//on met à jour souscentresMap2
                }
            }
            lesscentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, sigleExamenSelected);
            try {
                List<Map<String, Object>> datasource = new ArrayList<>();
                List<Region> regions = metier.findAllRegions();
                for (Region region : regions) {
                    for (Souscentre souscentre : souscentresMap2.keySet()) {
                        if (region.getNomreg().equals(souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg()) && souscentresMap1.containsKey(souscentre)) {
                            Map<String, Object> row = new HashMap<>();
                            String session = "" + anneeSelected;
                            row.put("session", session);
                            row.put("examen", sigleExamenSelected);
                            row.put("region", souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                            row.put("departement", souscentre.getEtablissement().getArrondissement().getDepartement().getNomdepart());
                            row.put("arrondissement", souscentre.getEtablissement().getArrondissement().getNomarr());
                            row.put("souscentre", souscentre.getNomsouscent());
                            ArrayList<Character> activitesList = souscentresMap1.get(souscentre);
                            String activitesString = "";
                            for (char s : activitesList) {
                                activitesString += s;
                            }
                            boolean estaplus = false;
                            for (Scentaplus s : lesscentaplus) {
                                if (souscentre.getNomsouscent().equals(s.getSouscentre().getNomsouscent())) {
                                    estaplus = true;
                                    break;
                                }
                            }
                            if (estaplus) {
                                activitesString += "+";
                            }
                            row.put("titre", activitesString);
                            ArrayList<String> specialitesList = souscentresMap2.get(souscentre);
                            String specialitesString = "";
                            for (String s : specialitesList) {
                                if (specialitesString.equals("")) {
                                    specialitesString += s;
                                } else {
                                    specialitesString += ", " + s;
                                }
                            }
                            row.put("option", specialitesString);
                            datasource.add(row);
                        }
                    }
                }
                JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\natureReport.jrxml");
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                jasperViewer.setVisible(true);
            } catch (JRException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Les champs session et examen sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonVisualiserActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueNature.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueNature.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueNature.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueNature.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueNature().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonCreer;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonRechercher;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JButton jButtonVisualiser;
    private javax.swing.JComboBox<String> jComboBoxArrondissement;
    private javax.swing.JComboBox<String> jComboBoxDepartement;
    private javax.swing.JComboBox<String> jComboBoxExamen;
    private javax.swing.JComboBox<String> jComboBoxRegion;
    private javax.swing.JComboBox<String> jComboBoxScentaplus;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxSouscentre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelActivite;
    private javax.swing.JLabel jLabelArrondissement;
    private javax.swing.JLabel jLabelDepartement;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelOption;
    private javax.swing.JLabel jLabelRegion;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelSouscentre;
    private javax.swing.JList<String> jListActivite;
    private javax.swing.JList<String> jListOption;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Region> regions = null;
    private String[] regionsCombo = null;
    private String[] scentaplusplusCombo = null;
    private List<Scentaplus> lesscentaplus = null;
    private List<Departement> departements = null;
    private List<Arrondissement> arrondissements = null;
    private List<Activite> activites = null;
    private List<Activite> activitesSelected = new ArrayList<Activite>();
    private List<Option> options = null;
    private List<Option> optionsSelected = new ArrayList<Option>();
    private List<String> listeActivitesSelected = null;
    private List<String> listeOptionsSelected = null;
    private String[] activitesList = null;
    private String[] optionsList = null;
    private String[] departementsCombo = null;
    private String[] arrondissementsCombo = null;
    private String[] souscentresCombo = null;
    private List<Souscentre> souscentres = null;
    private Departement departementSelected = null;
    private Arrondissement arrondissementSelected = null;
    private Souscentre souscentreSelected = null;
    private String nomRegionSelected = "";
    private String nomDepartementSelected = "";
    private String nomArrondissementSelected = "";
    private String nomSouscentreSelected = "";
    //private String[] listeActivites=null;
    private List<Session> sessions = null;
    private Session sessionSelected = null;
    private int anneeSelected = 0;
    private String anneeEnString = "";
    private String[] sessionsCombo = null;
    private List<Examen> examens = null;
    private Examen examenSelected = null;
    private String sigleExamenSelected = "";
    private String[] examensCombo = null;
    private List<Character> natures = null;//ensemble des natures d'un sous-cenre à un examen et session donnés    
    private List<Nature> natures1 = null;//ensemble des natures d'un examen dans une session
    private List<String> natures2 = null;
    private List<Specialisation> specialisations = null;
    private List<Nbepreuveprof> nbeupreuveprofs = null;
    private String reponse = "";

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");

        //on remplit la combobox des Scentaplus
        scentaplusplusCombo = new String[]{"---", "Oui", "Non"};
        jComboBoxScentaplus.setModel(new DefaultComboBoxModel(scentaplusplusCombo));

        activites = metier.findAllActivites();
        options = metier.findAllOptions();

        sessions = metier.findAllSessions();
        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int i = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[i++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        examens = metier.findAllExamens();
        //on remplit la combobox des examens
        examensCombo = new String[examens.size() + 1];
        examensCombo[0] = "---";
        int j = 1;
        for (Examen examen : examens) {
            examensCombo[j++] = examen.getSigle();
        }
        jComboBoxExamen.setModel(new DefaultComboBoxModel(examensCombo));

        //on remplit la jList des activités
        activitesList = new String[activites.size()];
        int l = 0;
        for (Activite activite : activites) {
            activitesList[l++] = activite.getNomact();
        }
        jListActivite.setListData(activitesList);

        regions = metier.findAllRegions();
        //on remplit la combobox des régions
        regionsCombo = new String[regions.size() + 1];
        regionsCombo[0] = "---";
        int m = 1;
        for (Region region : regions) {
            regionsCombo[m++] = region.getNomreg();
        }
        jComboBoxRegion.setModel(new DefaultComboBoxModel(regionsCombo));

        jListActivite.setLayoutOrientation(2);//affiche la jlist sur plusieurs colonnes
        jListOption.setLayoutOrientation(2);

        remplirDepartementCombobox();
        remplirArrondissementCombobox();
        remplirSouscentreCombobox();

    }

    private void infoSaisies() {
        anneeEnString = (String) jComboBoxSession.getSelectedItem();
        sigleExamenSelected = (String) jComboBoxExamen.getSelectedItem();
        listeActivitesSelected = jListActivite.getSelectedValuesList();
        listeOptionsSelected = jListOption.getSelectedValuesList();
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        reponse = (String) jComboBoxScentaplus.getSelectedItem();
    }

    private void videFrame() {
        jComboBoxSession.setSelectedIndex(0);
        jComboBoxExamen.setSelectedIndex(0);
        jListActivite.clearSelection();
        jListOption.clearSelection();
        jComboBoxRegion.setSelectedIndex(0);
        jComboBoxDepartement.setSelectedIndex(0);
        jComboBoxArrondissement.setSelectedIndex(0);
        jComboBoxSouscentre.setSelectedIndex(0);
        jComboBoxScentaplus.setSelectedIndex(0);
        model.setRowCount(0);//vide la jTable
    }

    private void remplirDepartementCombobox() {
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        departements = metier.findAllDepartementsD1Region(nomRegionSelected);
        //on remplit la combobox des départements
        departementsCombo = new String[departements.size() + 1];
        departementsCombo[0] = "---";
        int i = 1;
        for (Departement departement : departements) {
            departementsCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartement.setModel(new DefaultComboBoxModel(departementsCombo));
    }

    private void remplirArrondissementCombobox() {
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        arrondissements = metier.findAllArrondissementsD1Departement(nomDepartementSelected);
        //on remplit la combobox des départements
        arrondissementsCombo = new String[arrondissements.size() + 1];
        arrondissementsCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissements) {
            arrondissementsCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissement.setModel(new DefaultComboBoxModel(arrondissementsCombo));
    }

    private void remplirSouscentreCombobox() {
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        souscentres = metier.findAllSouscentresD1Arrondissement(nomArrondissementSelected);
        //on remplit la combobox des sous-centres
        souscentresCombo = new String[souscentres.size() + 1];
        souscentresCombo[0] = "---";
        int i = 1;
        for (Souscentre souscentre : souscentres) {
            souscentresCombo[i++] = souscentre.getNomsouscent();
        }
        jComboBoxSouscentre.setModel(new DefaultComboBoxModel(souscentresCombo));
    }

    private void remplirOptionJList() {
        sigleExamenSelected = (String) jComboBoxExamen.getSelectedItem();
        nbeupreuveprofs = metier.findAllOptionsD1Examen(sigleExamenSelected);
        //on remplit la jList des options
        optionsList = new String[nbeupreuveprofs.size()];
        int i = 0;
        for (Nbepreuveprof n : nbeupreuveprofs) {
            optionsList[i++] = n.getOption().getSigle();
        }
        jListOption.setListData(optionsList);
    }
}
