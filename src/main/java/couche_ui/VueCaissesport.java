package couche_ui;

import couche_jpa.Arrondissement;
import couche_jpa.Caissesport;
import couche_jpa.Centre;
import couche_jpa.Centrebilletage;
import couche_jpa.Departement;
import couche_jpa.Etablissement;
import couche_jpa.Examen;
import couche_jpa.Groupedexamen;
import couche_jpa.Rattachetab;
import couche_jpa.Rattachscentre;
import couche_jpa.Region;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_jpa.Stataptes;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueCaissesport extends javax.swing.JFrame {

    DefaultTableModel model;

    public VueCaissesport() {
        initComponents();
        model = (DefaultTableModel) jTable1.getModel();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabelSession = new javax.swing.JLabel();
        jLabelRegion = new javax.swing.JLabel();
        jLabelDepartement = new javax.swing.JLabel();
        jLabelMontantPercu = new javax.swing.JLabel();
        jLabelMontantDepense = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jTextFieldReliquat = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jComboBoxRegion = new javax.swing.JComboBox<>();
        jComboBoxDepartement = new javax.swing.JComboBox<>();
        jTextFieldMontantPercu = new javax.swing.JTextField();
        jTextFieldMontantDepense = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonRechercher = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jButtonFermer = new javax.swing.JButton();
        jLabelArrondissement = new javax.swing.JLabel();
        jComboBoxArrondissement = new javax.swing.JComboBox<>();
        jButtonVisualiser = new javax.swing.JButton();
        jLabelSouscentre = new javax.swing.JLabel();
        jComboBoxEtablissement = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jLabelExamen = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("BALANCE DE PAIEMENT DE L'EPS");

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jLabelRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegion.setText("Region :");

        jLabelDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartement.setText("Département :");

        jLabelMontantPercu.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelMontantPercu.setText("Montant octroyé :");

        jLabelMontantDepense.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelMontantDepense.setText("Montant dépensé :");

        jPanel1.setBackground(java.awt.Color.yellow);
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Réliquat", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 0, 204))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(253, 255, 255));
        jPanel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jTextFieldReliquat.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldReliquat.setForeground(new java.awt.Color(255, 0, 0));
        jTextFieldReliquat.setEnabled(false);
        jTextFieldReliquat.setFocusable(false);

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("F CFA");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jTextFieldReliquat, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldReliquat, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jComboBoxRegion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionActionPerformed(evt);
            }
        });

        jComboBoxDepartement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementActionPerformed(evt);
            }
        });

        jTextFieldMontantPercu.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldMontantPercu.setEnabled(false);
        jTextFieldMontantPercu.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextFieldMontantPercuCaretUpdate(evt);
            }
        });

        jTextFieldMontantDepense.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldMontantDepense.setText("0");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("F CFA");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("F CFA");

        jTable1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Session", "Niveau", "Type", "Examen(s)", "Région", "Département", "Arrondissement", "Etablissement/Sous-centre", "Montant perçu", "Montant dépensé", "Réliquat", "Version"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(true);
        jTable1.setShowVerticalLines(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButtonRechercher.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonRechercher.setText("Rechercher");
        jButtonRechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRechercherActionPerformed(evt);
            }
        });

        jButtonModifier.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonModifier.setText("Modifier");
        jButtonModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierActionPerformed(evt);
            }
        });

        jButtonAnnuler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnuler.setText("Annuler");
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jLabelArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissement.setText("Arrondissement :");

        jComboBoxArrondissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementActionPerformed(evt);
            }
        });

        jButtonVisualiser.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiser.setText("Visualiser");
        jButtonVisualiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserActionPerformed(evt);
            }
        });

        jLabelSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSouscentre.setText("Etablissement ou Sous-centre :");

        jComboBoxEtablissement.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxEtablissement.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxEtablissement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEtablissementActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(204, 255, 0));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Groupe d'examens", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelMontantPercu, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelMontantDepense, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelSouscentre, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelArrondissement, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelDepartement, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelRegion, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxEtablissement, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldMontantDepense, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldMontantPercu, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)))
                        .addGap(29, 29, 29)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34))
            .addGroup(layout.createSequentialGroup()
                .addGap(371, 371, 371)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(374, 374, 374)
                .addComponent(jButtonRechercher)
                .addGap(18, 18, 18)
                .addComponent(jButtonModifier)
                .addGap(18, 18, 18)
                .addComponent(jButtonFermer)
                .addGap(18, 18, 18)
                .addComponent(jButtonAnnuler)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiser)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxArrondissement, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxEtablissement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelMontantPercu, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldMontantPercu, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelMontantDepense, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldMontantDepense, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRechercher, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonModifier, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnuler, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVisualiser, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jComboBoxArrondissementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementActionPerformed
        remplirEtablissementCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementActionPerformed

    private void jComboBoxEtablissementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEtablissementActionPerformed
        //
    }//GEN-LAST:event_jComboBoxEtablissementActionPerformed

    private void jComboBoxRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionActionPerformed
        remplirDepartementCombobox();
    }//GEN-LAST:event_jComboBoxRegionActionPerformed

    private void jComboBoxDepartementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementActionPerformed
        remplirArrondissementCombobox();
    }//GEN-LAST:event_jComboBoxDepartementActionPerformed

    private void jTextFieldMontantPercuCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextFieldMontantPercuCaretUpdate
        //
    }//GEN-LAST:event_jTextFieldMontantPercuCaretUpdate

    private void jButtonRechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRechercherActionPerformed
        model.setRowCount(0);//vide la jTable
        infoSaisies();
        if (anneeString.equals("---") || nomEtablissementSelected.equals("---") || groupedexamensEnstring.equals("")) {
            JOptionPane.showMessageDialog(this, "Les données examen(s), session et établissement doivent être fournies ! ");
        } else {
            anneeSelected = Integer.parseInt(anneeString);
            try {
                caissesport = metier.findCaissesportD1EtablissementDans1SessionPour1Groupedexamens(anneeSelected, nomEtablissementSelected, niveauSelected, typeSelected);
                //jTextFieldMontantDepense.setText("0");//on initialise à 0
                int reliquat = 0;
                if (caissesport.getMontantdepense() == 0) {
                    reliquat = caissesport.getMontantpercu();
                } else {
                    reliquat = caissesport.getMontantpercu() - caissesport.getMontantdepense();
                }
                List<Groupedexamen> groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(caissesport.getGroupe().getNiveau(), caissesport.getGroupe().getType());
                String chaineGroupedexamens = "";
                int i = 0;
                for (Groupedexamen g : groupedexamens) {
                    if (groupedexamens.size() == 1) {
                        chaineGroupedexamens += g.getExamen().getSigle();
                    } else {
                        if (i++ == 0) {
                            chaineGroupedexamens += g.getExamen().getSigle();
                        } else {
                            chaineGroupedexamens += ", " + g.getExamen().getSigle();
                        }
                    }
                }
                model.insertRow(model.getRowCount(), new Object[]{caissesport.getIdcaissport(), caissesport.getSession().getAnnee(), caissesport.getGroupe().getNiveau(), caissesport.getGroupe().getType(), chaineGroupedexamens, caissesport.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), caissesport.getEtablissement().getArrondissement().getDepartement().getNomdepart(), caissesport.getEtablissement().getArrondissement().getNomarr(), caissesport.getEtablissement().getAbreviation(), caissesport.getMontantpercu(), caissesport.getMontantdepense(), reliquat, caissesport.getVersion()});

            } catch (ObcbudgetException ex) {
                JOptionPane.showMessageDialog(this, "La balance de paiement recherchée n'existe sans doute pas ! ");
            }
        }
    }//GEN-LAST:event_jButtonRechercherActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        //remplit les champs
        int ligne = jTable1.getSelectedRow();
        idCaissesportCliked = (int) model.getValueAt(ligne, 0);
        jComboBoxSession.setSelectedItem("" + model.getValueAt(ligne, 1));
        jComboBoxNiveau.setSelectedItem((String) model.getValueAt(ligne, 2));
        jComboBoxType.setSelectedItem((String) model.getValueAt(ligne, 3));
        jTextArea1.setText((String) model.getValueAt(ligne, 4));
        jComboBoxRegion.setSelectedItem((String) model.getValueAt(ligne, 5));
        jComboBoxDepartement.setSelectedItem((String) model.getValueAt(ligne, 6));
        jComboBoxArrondissement.setSelectedItem((String) model.getValueAt(ligne, 7));
        jComboBoxEtablissement.setSelectedItem((String) model.getValueAt(ligne, 8));
        jTextFieldMontantPercu.setText("" + model.getValueAt(ligne, 9));
        jTextFieldMontantDepense.setText("" + model.getValueAt(ligne, 10));
        jTextFieldReliquat.setText("" + model.getValueAt(ligne, 11));
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        videFrame();
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jButtonModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierActionPerformed
        model.setRowCount(0);//vide la jTable
        validerMontantPercu();
        validerMontantDepense();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier cette balance de paiement?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (continuerP && continuerD) {
                if (montantPercu <= 0 || montantDepense < 0) {
                    JOptionPane.showMessageDialog(this, "Les montants perçu et dépensé doivent être des entiers strictement positifs !");
                } else {
                    infoSaisies();
                    if (!anneeString.equals("---") && !nomEtablissementSelected.equals("---") && !groupedexamensEnstring.equals("")) {
                        anneeSelected = Integer.parseInt(anneeString);
                        caissesportCliked = metier.findCaissesportById(idCaissesportCliked);

                        caissesportCliked.setMontantdepense(montantDepense);
                        try {
                            metier.modifierCaissesport(caissesportCliked);
                            JOptionPane.showMessageDialog(this, "Balance de paiement modifiée avec succès !");
                            //jTextFieldMontantDepense.setText("0");//on initialise à 0
                            caissesport = metier.findCaissesportD1EtablissementDans1SessionPour1Groupedexamens(anneeSelected, nomEtablissementSelected, niveauSelected, typeSelected);
                            int reliquat = 0;
                            if (caissesport.getMontantdepense() == 0) {
                                reliquat = caissesport.getMontantpercu();
                            } else {
                                reliquat = caissesport.getMontantpercu() - caissesport.getMontantdepense();
                            }
                            List<Groupedexamen> groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(caissesport.getGroupe().getNiveau(), caissesport.getGroupe().getType());
                            String chaineGroupedexamens = "";
                            int i = 0;
                            for (Groupedexamen g : groupedexamens) {
                                if (groupedexamens.size() == 1) {
                                    chaineGroupedexamens += g.getExamen().getSigle();
                                } else {
                                    if (i++ == 0) {
                                        chaineGroupedexamens += g.getExamen().getSigle();
                                    } else {
                                        chaineGroupedexamens += ", " + g.getExamen().getSigle();
                                    }
                                }
                            }
                            model.insertRow(model.getRowCount(), new Object[]{caissesport.getIdcaissport(), caissesport.getSession().getAnnee(), caissesport.getGroupe().getNiveau(), caissesport.getGroupe().getType(), chaineGroupedexamens, caissesport.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg(), caissesport.getEtablissement().getArrondissement().getDepartement().getNomdepart(), caissesport.getEtablissement().getArrondissement().getNomarr(), caissesport.getEtablissement().getAbreviation(), caissesport.getMontantpercu(), caissesport.getMontantdepense(), reliquat, caissesport.getVersion()});
                        } catch (ObcbudgetException ex) {
                            JOptionPane.showMessageDialog(this, "Impossible de modifier la balance de paiement souhaitée \n raison:" + ex.getMessage());
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Veuillez recommencer. Au moins une donnée est incorrecte !");
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonModifierActionPerformed

    private void jButtonVisualiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserActionPerformed
        anneeString = (String) jComboBoxSession.getSelectedItem();
        Map<Centrebilletage, ArrayList<Etablissement>> centrebilletageEtablissementsMap = new HashMap<>();//contient chaque centre de billetage avec la liste de ses établissementsde couverture
        ArrayList<String> typesBruts = new ArrayList<>();
        ArrayList<String> typesAconsiderer = new ArrayList<>();
        ArrayList<String> niveauxAconsiderer = new ArrayList<>();
        Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
        groupedexamensEnstring = jTextArea1.getText();
        if (!anneeString.equals("---") && !groupedexamensEnstring.equals("")) {
            anneeSelected = Integer.parseInt(anneeString);
            caissesports = metier.findAllCaissesportD1Session(anneeSelected);
            String separateur = ", ";
            examensList = groupedexamensEnstring.split(separateur);
            for (int i = 0; i < examensList.length; i++) {
                for (Examen e : examens) {
                    if (e.getSigle().equals(examensList[i])) {
                        examensSelected.add(e);
                        break;
                    }
                }
            }
            for (Session s : sessions) {
                if (s.getAnnee() == anneeSelected) {
                    sessionSelected = s;
                    break;
                }
            }
            //recherche des types des examens à utiliser
            for (Examen examen : examensSelected) {
                System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                    typesBruts.add("ESG");
                }
                if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                    typesBruts.add("ESTP");
                }
            }
            if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                typesAconsiderer.add("ESG");
                typesAconsiderer.add("TOUT");
            }
            if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                typesAconsiderer.add("ESTP");
                typesAconsiderer.add("TOUT");
            }
            if (typesBruts.size() == 2) {
                typesAconsiderer.add("ESG");
                typesAconsiderer.add("ESTP");
                typesAconsiderer.add("TOUT");
            }
            //recherche des niveaux des examens à utiliser
            if (!niveauSelected.equals("TOUT")) {
                niveauxAconsiderer.add(niveauSelected);
                niveauxAconsiderer.add("TOUT");
            }
            if (niveauSelected.equals("TOUT")) {
                niveauxAconsiderer.add("PROB");
                niveauxAconsiderer.add("BACC");
                niveauxAconsiderer.add("TOUT");
            }
            //recherche des centres de billetage
            for (String niveau : niveauxAconsiderer) {
                for (String type : typesAconsiderer) {
                    List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                    for (Centrebilletage centrebilletage : desCentrebilletages) {
                        ArrayList<Souscentre> souscentresList = new ArrayList<>();
                        if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                            List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                            for (Secteurcouv sect : secteurs) {
                                if (!souscentresList.contains(sect.getSouscentre())) {
                                    souscentresList.add(sect.getSouscentre());
                                }
                            }
                            centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                        }
                    }
                }
            }
            //on cherche la liste des établissements de chaque centre de billetage
            for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                ArrayList<Etablissement> etablissementsList = new ArrayList<>();
                for (Souscentre souscentre : centrebilletageSouscentresMap.get(centrebilletage)) {
                    List<Rattachetab> rattachetabList = metier.findAllRattachetabD1Souscentre(souscentre.getNomsouscent());
                    for (Rattachetab rattachetab : rattachetabList) {
                        if (!etablissementsList.contains(rattachetab.getEtablissement())) {
                            etablissementsList.add(rattachetab.getEtablissement());
                        }                      
                    }
                }
                centrebilletageEtablissementsMap.put(centrebilletage, etablissementsList);
            }
            try {
                List<Map<String, Object>> datasource = new ArrayList<>();
                for(Region region:regions){
                    for (Centrebilletage centrebilletage : centrebilletageEtablissementsMap.keySet()) {
                        if(region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())){
                            int num=1;
                            ArrayList<Etablissement> etablissementsList = centrebilletageEtablissementsMap.get(centrebilletage);
                            for (int i = 0; i < etablissementsList.size(); i++) {
                                Etablissement etablissement = etablissementsList.get(i);
                                boolean trouver=false;
                                Caissesport caissesportEncours=null;
                                for(Caissesport caissesport:caissesports){
                                    if(caissesport.getEtablissement().getAbreviation().equals(etablissement.getAbreviation())){
                                        trouver=true;
                                        caissesportEncours=caissesport;
                                        break;
                                    }
                                }
                                if(trouver) {
                                    Map<String, Object> row = new HashMap<>();
                                    row.put("num", num++);
                                    row.put("session", caissesportEncours.getSession().getAnnee());
                                    row.put("region", caissesportEncours.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                    row.put("departement", caissesportEncours.getEtablissement().getArrondissement().getDepartement().getNomdepart());
                                    row.put("arrondissement", caissesportEncours.getEtablissement().getArrondissement().getNomarr());
                                    row.put("etablissement", caissesportEncours.getEtablissement().getAbreviation());
                                    row.put("centrebilletage",centrebilletage.getEtablissement().getAbreviation());
                                    List<Groupedexamen> groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(caissesportEncours.getGroupe().getNiveau(), caissesportEncours.getGroupe().getType());
                                    String chaineGroupedexamens = "";
                                    int j = 0;
                                    for (Groupedexamen g : groupedexamens) {
                                        if (groupedexamens.size() == 1) {
                                            chaineGroupedexamens += g.getExamen().getSigle();
                                        } else {
                                            if (j++ == 0) {
                                                chaineGroupedexamens += g.getExamen().getSigle();
                                            } else {
                                                chaineGroupedexamens += ", " + g.getExamen().getSigle();
                                            }
                                        }
                                    }
                                    row.put("examen", chaineGroupedexamens);
                                    row.put("rubriquetat", caissesportEncours.getRubetat().getDesignation());
                                    row.put("montantpercu", caissesportEncours.getMontantpercu());
                                    row.put("montantdepense", caissesportEncours.getMontantdepense());
                                    row.put("reliquat", caissesportEncours.getMontantpercu() - caissesportEncours.getMontantdepense());
                                    datasource.add(row);
                                }
                            }
                        }
                    }
                }
                JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\caissesportReport.jrxml");
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                jasperViewer.setVisible(true);
            } catch (JRException e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez sélectionner un groupe d'examens et une session svp !");
        }
    }//GEN-LAST:event_jButtonVisualiserActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueCaissesport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueCaissesport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueCaissesport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueCaissesport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueCaissesport().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonRechercher;
    private javax.swing.JButton jButtonVisualiser;
    private javax.swing.JComboBox<String> jComboBoxArrondissement;
    private javax.swing.JComboBox<String> jComboBoxDepartement;
    private javax.swing.JComboBox<String> jComboBoxEtablissement;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxRegion;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelArrondissement;
    private javax.swing.JLabel jLabelDepartement;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelMontantDepense;
    private javax.swing.JLabel jLabelMontantPercu;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelRegion;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelSouscentre;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldMontantDepense;
    private javax.swing.JTextField jTextFieldMontantPercu;
    private javax.swing.JTextField jTextFieldReliquat;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Region> regions = null;
    private String[] regionsCombo = null;
    private List<Departement> departements = null;
    private List<Arrondissement> arrondissements = null;
    private List<Etablissement> etablissements = null;
    private List<Session> sessions = null;
    private List<Examen> examens = null;
    private String[] departementsCombo = null;
    private String[] arrondissementsCombo = null;
    private String[] etablissementsCombo = null;
    private String[] sessionsCombo = null;
    private Departement departementSelected = null;
    private Arrondissement arrondissementSelected = null;
    private Etablissement etablissementSelected = null;
    private String nomRegionSelected = "";
    private String nomDepartementSelected = "";
    private String nomArrondissementSelected = "";
    private String nomEtablissementSelected = "";
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private String montantPercuSaisi = "";
    private String montantDepenseSaisi = "";
    private int montantPercu = 0;
    private int montantDepense = 0;
    private int idCaissesportCliked = 0;
    private Caissesport caissesportCliked = null;
    private List<Caissesport> caissesports = null;
    private Caissesport caissesport = null;
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    boolean continuerP = false;
    boolean continuerD = false;
    private String groupedexamensEnstring = "";
    private NumberFormat nf = NumberFormat.getInstance();
    //private String imputationAffiche = "";
    private List<Groupedexamen> groupedexamens = null;
    private String[] examensList = null;
    private List<Examen> examensSelected = new ArrayList<Examen>();

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        examens = metier.findAllExamens();
        regions = metier.findAllRegions();

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int i = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[i++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "GEN", "IND", "IND PROF", "STT", "STT PROF", "TOUT", "TOUT ESTI", "TOUT STT", "TOUT ESTP"};//TOUT=tous les types; TOUT ESTI=INDUSTRIEL+INDUSTRIEL PROFESSIONNEL; TOUT STT=STT+STT PROFESSIONNEL; TOUTN ESTP=TOUT SAUF ESG
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC", "TOUT"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        //on remplit la combobox des régions
        regionsCombo = new String[regions.size() + 1];
        regionsCombo[0] = "---";
        int j = 1;
        for (Region region : regions) {
            regionsCombo[j++] = region.getNomreg();
        }
        jComboBoxRegion.setModel(new DefaultComboBoxModel(regionsCombo));

        jTextFieldMontantDepense.setText("0");//on initialise à 0

        remplirDepartementCombobox();
        remplirArrondissementCombobox();
        remplirEtablissementCombobox();
    }

    private void infoSaisies() {
        anneeString = (String) jComboBoxSession.getSelectedItem();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        nomEtablissementSelected = (String) jComboBoxEtablissement.getSelectedItem();//il s'agit du nom de l'établissement qui fait l'EPS 
        //imputationAffiche = jTextFieldImputation.getText();
    }

    private void videFrame() {
        jTextFieldMontantPercu.setText("");
        jTextFieldMontantDepense.setText("0");//on initialise à 0
        jComboBoxSession.setSelectedIndex(0);
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        jTextFieldReliquat.setText("");
        jComboBoxRegion.setSelectedIndex(0);
        jComboBoxDepartement.setSelectedIndex(0);
        jComboBoxArrondissement.setSelectedIndex(0);
        jComboBoxEtablissement.setSelectedIndex(0);
        model.setRowCount(0);//vide la jTable
    }

    private void remplirDepartementCombobox() {
        nomRegionSelected = (String) jComboBoxRegion.getSelectedItem();
        departements = metier.findAllDepartementsD1Region(nomRegionSelected);
        //on remplit la combobox des départements
        departementsCombo = new String[departements.size() + 1];
        departementsCombo[0] = "---";
        int i = 1;
        for (Departement departement : departements) {
            departementsCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartement.setModel(new DefaultComboBoxModel(departementsCombo));
    }

    private void remplirArrondissementCombobox() {
        nomDepartementSelected = (String) jComboBoxDepartement.getSelectedItem();
        arrondissements = metier.findAllArrondissementsD1Departement(nomDepartementSelected);
        //on remplit la combobox des arrondissements
        arrondissementsCombo = new String[arrondissements.size() + 1];
        arrondissementsCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissements) {
            arrondissementsCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissement.setModel(new DefaultComboBoxModel(arrondissementsCombo));
    }

    private void remplirEtablissementCombobox() {
        nomArrondissementSelected = (String) jComboBoxArrondissement.getSelectedItem();
        etablissements = metier.findAllEtablissementsCentreDEpsD1Arrondissement(nomArrondissementSelected);
        //on remplit la combobox des établissements centres d'EPS
        etablissementsCombo = new String[etablissements.size() + 1];
        etablissementsCombo[0] = "---";
        int i = 1;
        for (Etablissement etablissement : etablissements) {
            etablissementsCombo[i++] = etablissement.getAbreviation();
        }
        jComboBoxEtablissement.setModel(new DefaultComboBoxModel(etablissementsCombo));
    }

    private void validerMontantPercu() {
        String chaine = jTextFieldMontantPercu.getText();
        try {
            int nombre = Integer.parseInt(chaine);
            montantPercu = nombre;
            continuerP = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, " Le montant perçu doit être fourni et contenir uniquement des chiffres entiers!");
            continuerP = false;
        }
    }

    private void validerMontantDepense() {
        String chaine = (String) jTextFieldMontantDepense.getText();
        try {
            int nombre = Integer.parseInt(chaine);
            montantDepense = nombre;
            continuerD = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, " Le montant depensé doit être fourni et contenir uniquement des chiffres entiers!");
            continuerD = false;
        }
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }
}
