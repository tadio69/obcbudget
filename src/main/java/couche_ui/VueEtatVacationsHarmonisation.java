package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Activite;
import couche_jpa.Arrondissement;
import couche_jpa.Caisse;
import couche_jpa.Centrebilletage;
import couche_jpa.Departement;
import couche_jpa.Eltharmo;
import couche_jpa.Examen;
import couche_jpa.Fonction;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Intervenant;
import couche_jpa.Matiere;
import couche_jpa.Personnel;
import couche_jpa.Qualite;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueEtatVacationsHarmonisation extends javax.swing.JFrame {

    public VueEtatVacationsHarmonisation() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButtonFermer = new javax.swing.JButton();
        jPanelExaminateurs = new javax.swing.JPanel();
        jComboBoxDepartementListe = new javax.swing.JComboBox<>();
        jLabelDepartementListe = new javax.swing.JLabel();
        jLabelResponsable = new javax.swing.JLabel();
        jComboBoxArrondissementListe = new javax.swing.JComboBox<>();
        jComboBoxNomsEtPrenoms = new javax.swing.JComboBox<>();
        jLabelArrondissementListe = new javax.swing.JLabel();
        jComboBoxRegionListe = new javax.swing.JComboBox<>();
        jLabelRegionListe = new javax.swing.JLabel();
        jButtonSupprimerPersonnel = new javax.swing.JButton();
        jButtonAnnulerPersonnel = new javax.swing.JButton();
        jButtonCreerPersonnel = new javax.swing.JButton();
        jButtonListerPersonnels = new javax.swing.JButton();
        jButtonImporter = new javax.swing.JButton();
        jLabelNbep1 = new javax.swing.JLabel();
        jTextFieldNbep1 = new javax.swing.JTextField();
        jLabelNbep2 = new javax.swing.JLabel();
        jTextFieldNbep2 = new javax.swing.JTextField();
        jLabelNbep3 = new javax.swing.JLabel();
        jTextFieldNbep3 = new javax.swing.JTextField();
        jLabelNbep4 = new javax.swing.JLabel();
        jTextFieldNbep4 = new javax.swing.JTextField();
        jLabelNbep5 = new javax.swing.JLabel();
        jTextFieldNbep5 = new javax.swing.JTextField();
        jLabelNbep6 = new javax.swing.JLabel();
        jTextFieldNbep6 = new javax.swing.JTextField();
        jPanelDiscipline = new javax.swing.JPanel();
        jLabelFamille = new javax.swing.JLabel();
        jComboBoxFamille = new javax.swing.JComboBox<>();
        jLabelDiscipline = new javax.swing.JLabel();
        jComboBoxDiscipline = new javax.swing.JComboBox<>();
        jCheckBoxDeplace = new javax.swing.JCheckBox();
        jPanelChoixExamen = new javax.swing.JPanel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixExamen = new javax.swing.JButton();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelExamen = new javax.swing.JLabel();
        jPanelGestionEtat = new javax.swing.JPanel();
        jButtonCreerEtats = new javax.swing.JButton();
        jButtonMettreAjourEtats = new javax.swing.JButton();
        jButtonVisualiserEtats = new javax.swing.JButton();
        jButtonSupprimerEtats = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT DES VACATIONS D'HARMONISATION DES CORRIGES NATIONAUX");

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jPanelExaminateurs.setBackground(new java.awt.Color(255, 204, 0));
        jPanelExaminateurs.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer la liste des membres des jurys d'harmonisation et leurs nombres d'épreuves", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jComboBoxDepartementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartementListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementListeActionPerformed(evt);
            }
        });

        jLabelDepartementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartementListe.setText("Département :");

        jLabelResponsable.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelResponsable.setText("Noms et prénoms :");

        jComboBoxArrondissementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissementListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementListeActionPerformed(evt);
            }
        });

        jComboBoxNomsEtPrenoms.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxNomsEtPrenoms.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxNomsEtPrenoms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNomsEtPrenomsActionPerformed(evt);
            }
        });

        jLabelArrondissementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissementListe.setText("Arrondissement :");

        jComboBoxRegionListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegionListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionListeActionPerformed(evt);
            }
        });

        jLabelRegionListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegionListe.setText("Région :");

        jButtonSupprimerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerPersonnel.setText("Supprimer");
        jButtonSupprimerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerPersonnelActionPerformed(evt);
            }
        });

        jButtonAnnulerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerPersonnel.setText("Annuler");
        jButtonAnnulerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerPersonnelActionPerformed(evt);
            }
        });

        jButtonCreerPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerPersonnel.setText("Créer");
        jButtonCreerPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerPersonnelActionPerformed(evt);
            }
        });

        jButtonListerPersonnels.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonListerPersonnels.setText("Lister");
        jButtonListerPersonnels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerPersonnelsActionPerformed(evt);
            }
        });

        jButtonImporter.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonImporter.setText("Importer");
        jButtonImporter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImporterActionPerformed(evt);
            }
        });

        jLabelNbep1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbep1.setText("Nbre d'épreuves PROB :");

        jTextFieldNbep1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelNbep2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbep2.setText("Nbre d'épreuves BAC :");

        jTextFieldNbep2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextFieldNbep2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNbep2ActionPerformed(evt);
            }
        });

        jLabelNbep3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbep3.setText("Nbre d'épreuves PROB BT :");

        jTextFieldNbep3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelNbep4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbep4.setText("Nbre d'épreuves BEP :");

        jTextFieldNbep4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelNbep5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbep5.setText("Nbre d'épreuves BT :");

        jTextFieldNbep5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelNbep6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNbep6.setText("Nbre d'épreuves BP :");

        jTextFieldNbep6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jPanelDiscipline.setBackground(new java.awt.Color(204, 255, 51));
        jPanelDiscipline.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir une discipline", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 51, 204))); // NOI18N
        jPanelDiscipline.setEnabled(false);

        jLabelFamille.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelFamille.setText("Famille :");

        jComboBoxFamille.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxFamille.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFamilleActionPerformed(evt);
            }
        });

        jLabelDiscipline.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDiscipline.setText("Discipline :");

        jComboBoxDiscipline.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDiscipline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDisciplineActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelDisciplineLayout = new javax.swing.GroupLayout(jPanelDiscipline);
        jPanelDiscipline.setLayout(jPanelDisciplineLayout);
        jPanelDisciplineLayout.setHorizontalGroup(
            jPanelDisciplineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDisciplineLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanelDisciplineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelFamille)
                    .addComponent(jLabelDiscipline))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDisciplineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxFamille, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxDiscipline, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelDisciplineLayout.setVerticalGroup(
            jPanelDisciplineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDisciplineLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDisciplineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxFamille, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelFamille, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(jPanelDisciplineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxDiscipline, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDiscipline, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        jCheckBoxDeplace.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jCheckBoxDeplace.setForeground(new java.awt.Color(0, 0, 204));
        jCheckBoxDeplace.setText("Déplacé");

        javax.swing.GroupLayout jPanelExaminateursLayout = new javax.swing.GroupLayout(jPanelExaminateurs);
        jPanelExaminateurs.setLayout(jPanelExaminateursLayout);
        jPanelExaminateursLayout.setHorizontalGroup(
            jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                        .addGap(1090, 1090, 1090)
                        .addComponent(jPanelDiscipline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                        .addGap(530, 530, 530)
                        .addComponent(jButtonCreerPersonnel)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSupprimerPersonnel)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnulerPersonnel)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonListerPersonnels)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonImporter))
                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                                .addComponent(jLabelNbep1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldNbep1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(jLabelNbep2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldNbep2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(jLabelNbep3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldNbep3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(jLabelNbep4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldNbep4, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(jLabelNbep5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldNbep5, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(jLabelNbep6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldNbep6, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                                        .addComponent(jLabelRegionListe)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBoxRegionListe, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                                        .addComponent(jLabelDepartementListe)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBoxDepartementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelResponsable, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelArrondissementListe, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBoxArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jCheckBoxDeplace))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelExaminateursLayout.createSequentialGroup()
                                        .addGap(4, 4, 4)
                                        .addComponent(jComboBoxNomsEtPrenoms, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap())
        );
        jPanelExaminateursLayout.setVerticalGroup(
            jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelExaminateursLayout.createSequentialGroup()
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelDiscipline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jComboBoxArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jCheckBoxDeplace, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jComboBoxRegionListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelRegionListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jComboBoxDepartementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelDepartementListe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelResponsable, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxNomsEtPrenoms, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNbep1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNbep1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNbep2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNbep2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNbep3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNbep3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNbep4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNbep4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNbep5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNbep5, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNbep6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNbep6, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonAnnulerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonSupprimerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonListerPersonnels, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonImporter, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonCreerPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(127, 127, 127))
        );

        jPanelChoixExamen.setBackground(new java.awt.Color(102, 255, 153));
        jPanelChoixExamen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un groupe d'examens et une session", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixExamen.setText("Annuler");
        jButtonAnnulerChoixExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixExamenActionPerformed(evt);
            }
        });

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        javax.swing.GroupLayout jPanelChoixExamenLayout = new javax.swing.GroupLayout(jPanelChoixExamen);
        jPanelChoixExamen.setLayout(jPanelChoixExamenLayout);
        jPanelChoixExamenLayout.setHorizontalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jLabelNiveauExamen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(jLabelType)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(jLabelExamen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2)
                .addGap(18, 18, 18)
                .addComponent(jLabelSession)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );
        jPanelChoixExamenLayout.setVerticalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanelGestionEtat.setBackground(new java.awt.Color(0, 255, 255));
        jPanelGestionEtat.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer l'état", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 102, 255))); // NOI18N

        jButtonCreerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEtats.setText("Créer");
        jButtonCreerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEtatsActionPerformed(evt);
            }
        });

        jButtonMettreAjourEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjourEtats.setText("Mettre à jour");
        jButtonMettreAjourEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourEtatsActionPerformed(evt);
            }
        });

        jButtonVisualiserEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserEtats.setText("Visualiser");
        jButtonVisualiserEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserEtatsActionPerformed(evt);
            }
        });

        jButtonSupprimerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEtats.setText("Supprimer");
        jButtonSupprimerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEtatsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelGestionEtatLayout = new javax.swing.GroupLayout(jPanelGestionEtat);
        jPanelGestionEtat.setLayout(jPanelGestionEtatLayout);
        jPanelGestionEtatLayout.setHorizontalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jButtonCreerEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonMettreAjourEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiserEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerEtats)
                .addContainerGap(43, Short.MAX_VALUE))
        );
        jPanelGestionEtatLayout.setVerticalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonMettreAjourEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCreerEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonSupprimerEtats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVisualiserEtats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(516, 516, 516)
                        .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jButtonFermer))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(jLabel1)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelExaminateurs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1)
                .addGap(25, 25, 25)
                .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jPanelExaminateurs, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVisualiserEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserEtatsActionPerformed
        infoSaisies();
        Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
        ArrayList<String> typesBruts = new ArrayList<>();
        ArrayList<String> typesAconsiderer = new ArrayList<>();
        ArrayList<String> niveauxAconsiderer = new ArrayList<>();
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION D'HARMINISATION DES CORRIGES NATIONAUX");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
            boolean continuer = false;
            for (Caisse c : caisses) {
                if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                    continuer = true;
                    break;
                }
            }
            if (!continuer) {
                JOptionPane.showMessageDialog(this, "Erreur, les états d'harmonisation n'ont pas encore été créés pour ce groupe d'examens !");
            } else {
                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                //recherche des types des examens à utiliser
                for (Examen examen : examensSelected) {
                    if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                        typesBruts.add("ESG");
                    }
                    if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                        typesBruts.add("ESTP");
                    }
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 2) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                //recherche des niveaux des examens à utiliser
                if (!niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add(niveauSelected);
                    niveauxAconsiderer.add("TOUT");
                }
                if (niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add("PROB");
                    niveauxAconsiderer.add("BACC");
                    niveauxAconsiderer.add("TOUT");
                }
                //recherche des centres de billetage
                for (String niveau : niveauxAconsiderer) {
                    for (String type : typesAconsiderer) {
                        List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                        for (Centrebilletage centrebilletage : desCentrebilletages) {
                            ArrayList<Souscentre> souscentresList = new ArrayList<>();
                            if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                for (Secteurcouv sect : secteurs) {
                                    if (!souscentresList.contains(sect.getSouscentre())) {
                                        souscentresList.add(sect.getSouscentre());
                                    }
                                }
                                centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                            }
                        }
                    }
                }

                intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "MEMBRE DU JURY D'HARMONISATION DES CORRIGES NATIONAUX");
                tousEltharmo = metier.findAllEltharmoD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                if (!intervenants.isEmpty()) {
                    if (typeSelected.equals("GEN")) {
                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                int totalMontant = 0;
                                //l'unique souscentre ici c'est OBC
                                for (Souscentre souscentre : souscentres) {
                                    if (souscentre.getNomsouscent().equals("OFFICE DU BACCALAURÉAT DU CAMEROUN")) {
                                        souscentreSelected = souscentre;
                                        break;
                                    }
                                }
                                int num = 1;
                                if (centrebilletageSouscentresMap.get(centrebilletage).contains(souscentreSelected)) {
                                    for (Eltharmo eltharmo : tousEltharmo) {
                                        determinerCoutD1Eltharmo(eltharmo);

                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", anneeSelected);
                                        row.put("examen", groupedexamensEnstring);
                                        row.put("reference", "obcbudget-v.3");
                                        row.put("num", num++);
                                        row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                        row.put("pers", eltharmo.getIntervenant().getPersonnel().getNompers() + " " + eltharmo.getIntervenant().getPersonnel().getPrenom());
                                        row.put("provenance", eltharmo.getIntervenant().getPersonnel().getStructure());
                                        row.put("fonction", eltharmo.getIntervenant().getPersonnel().getFonction().getTitre());
                                        row.put("matiere", eltharmo.getMatiere().getNom());
                                        row.put("nbep1", eltharmo.getNbep1());
                                        row.put("nbep2", eltharmo.getNbep2());
                                        row.put("nbexam", nbexam);
                                        row.put("nbtotalep", nbtotalep);
                                        row.put("vacation", vacation);
                                        row.put("deplacement", deplacement);
                                        row.put("baspage", "OBC/AR/"+centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                        row.put("total", total);
                                        totalMontant += total;//jasperreport prendra la dernière valeur de total
                                        row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                        datasource.add(row);
                                    }
                                }
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatVacationHarmonisationESGReport.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    } else {//cas ESTI ou STT
                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                                int totalMontant = 0;
                                //l'unique souscentre ici c'est OBC
                                for (Souscentre souscentre : souscentres) {
                                    if (souscentre.getNomsouscent().equals("OFFICE DU BACCALAURÉAT DU CAMEROUN")) {
                                        souscentreSelected = souscentre;
                                        break;
                                    }
                                }
                                int num = 1;
                                if (centrebilletageSouscentresMap.get(centrebilletage).contains(souscentreSelected)) {
                                    for (Eltharmo eltharmo : tousEltharmo) {
                                        determinerCoutD1Eltharmo(eltharmo);

                                        Map<String, Object> row = new HashMap<>();
                                        row.put("session", anneeSelected);
                                        row.put("examen", groupedexamensEnstring);                                   
                                        row.put("num", num++);
                                        row.put("reference", "obcbudget-v.3");
                                        row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                        row.put("pers", eltharmo.getIntervenant().getPersonnel().getNompers() + " " + eltharmo.getIntervenant().getPersonnel().getPrenom());
                                        row.put("provenance", eltharmo.getIntervenant().getPersonnel().getStructure());
                                        row.put("fonction", eltharmo.getIntervenant().getPersonnel().getFonction().getTitre());
                                        row.put("matiere", eltharmo.getMatiere().getNom());
                                        row.put("nbep1", eltharmo.getNbep1());
                                        row.put("nbep2", eltharmo.getNbep2());
                                        row.put("nbep3", eltharmo.getNbep3());
                                        row.put("nbep4", eltharmo.getNbep4());
                                        row.put("nbep5", eltharmo.getNbep5());
                                        row.put("nbep6", eltharmo.getNbep6());
                                        row.put("nbexam", nbexam);
                                        row.put("nbtotalep", nbtotalep);
                                        row.put("vacation", vacation);
                                        row.put("deplacement", deplacement);
                                        row.put("baspage", "OBC/AR/"+centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                        row.put("total", total);
                                        totalMontant += total;//jasperreport prendra la dernière valeur de total
                                        row.put("totalMontantEnLettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                        datasource.add(row);
                                    }
                                }
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatVacationHarmonisationESTPReport.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Aucun membre du jury d'harmonisation trouvé dans la base des données pour ce groupe d'examens !");
                }
            }//fin else continuer
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonVisualiserEtatsActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonCreerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEtatsActionPerformed
        infoSaisies();
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION D'HARMINISATION DES CORRIGES NATIONAUX");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
            if (!caisses.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Erreur, les états d'harmonisation existent déjà pour ce groupe d'examens !");
            } else {
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "MEMBRE DU JURY D'HARMONISATION DES CORRIGES NATIONAUX");
                tousEltharmo = metier.findAllEltharmoD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                if (!intervenants.isEmpty()) {
                    boolean testSicreer = false;
                    try {
                        //l'unique souscentre ici c'est OBC
                        for (Souscentre souscentre : souscentres) {
                            if (souscentre.getNomsouscent().equals("OFFICE DU BACCALAURÉAT DU CAMEROUN")) {
                                souscentreSelected = souscentre;
                                break;
                            }
                        }
                        int net = 0;
                        for (Eltharmo eltharmo : tousEltharmo) {
                            determinerCoutD1Eltharmo(eltharmo);
                            net += total;
                        }
                        metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentreSelected, false));
                        testSicreer = true;
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testSicreer) {
                        JOptionPane.showMessageDialog(this, "Etats de vacation d'harmonisation créés avec succès pour ce groupe d'examens !");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Aucun membre du jury d'harmonisation trouvé dans la base des données pour ce groupe d'examens !");
                }
            }//fin else caisses
        }//fin if groupedexamen
        else {
            JOptionPane.showMessageDialog(this, "Tous les champs sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonCreerEtatsActionPerformed

    private void jButtonMettreAjourEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourEtatsActionPerformed
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de prise en charge de la commission d'évaluation de la MO pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION D'HARMINISATION DES CORRIGES NATIONAUX");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état d'harmonisation n'existe pour ce groupe d'examens !");
                } else {
                    //on conserve quelques info de ces anciennes caisses
                    Groupe groupe = caisses.get(0).getGroupe();
                    sessionSelected = caisses.get(0).getSession();
                    //on supprime toutes les anciennes caisses du groupe d'examens ainsi que les intervsec
                    for (Caisse c : caisses) {
                        metier.supprimerCaisse(c);
                    }
                    //on va les recréer                   
                    intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "MEMBRE DU JURY D'HARMONISATION DES CORRIGES NATIONAUX");
                    tousEltharmo = metier.findAllEltharmoD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
                    if (!intervenants.isEmpty()) {
                        boolean testSimodifier = false;

                        try {
                            //l'unique souscentre ici c'est OBC
                            for (Souscentre souscentre : souscentres) {
                                if (souscentre.getNomsouscent().equals("OFFICE DU BACCALAURÉAT DU CAMEROUN")) {
                                    souscentreSelected = souscentre;
                                    break;
                                }
                            }
                            int net = 0;
                            for (Eltharmo eltharmo : tousEltharmo) {
                                determinerCoutD1Eltharmo(eltharmo);
                                net += total;
                            }
                            metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentreSelected, false));
                            testSimodifier = true;

                        } catch (ObcbudgetException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                        if (testSimodifier) {
                            JOptionPane.showMessageDialog(this, "Etats d'harmonisation mis à jour avec succès pour ce groupe d'examens !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Aucun membre du jury d'harmonisation trouvé dans la base des données pour ce groupe d'examens !");
                    }
                }//fin else caisses
            }//fin if groupedexamen
            else {
                JOptionPane.showMessageDialog(this, "Les champs groupe d'examens et session sont obligatoires !");
            }
        }//fin if result
    }//GEN-LAST:event_jButtonMettreAjourEtatsActionPerformed

    private void jButtonSupprimerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEtatsActionPerformed
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états d'harmonisation pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("VACATION D'HARMINISATION DES CORRIGES NATIONAUX");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état d'harmonisation n'existe pour ce groupe d'examens !");
                } else {
                    try {
                        for (Caisse caisse : caisses) {
                            metier.supprimerCaisse(caisse);
                        }
                        JOptionPane.showMessageDialog(this, "Etats d'harmonisation supprimés avec succès pour ce groupe d'examens !");
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }//fin else caisses
            }//fin if groupedexamen
        }//fin if result
    }//GEN-LAST:event_jButtonSupprimerEtatsActionPerformed

    private void jComboBoxDepartementListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementListeActionPerformed
        remplirArrondissementListeCombobox();
        remplirPersonnelsDuDepartementCombobox();
    }//GEN-LAST:event_jComboBoxDepartementListeActionPerformed

    private void jComboBoxArrondissementListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementListeActionPerformed
        remplirPersonnelsDelArrondissementCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementListeActionPerformed

    private void jComboBoxNomsEtPrenomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNomsEtPrenomsActionPerformed
        nomsEtPrenomsSelected = (String) jComboBoxNomsEtPrenoms.getSelectedItem();
        if (!nomsEtPrenomsSelected.equals("---")) {
            for (Personnel p : personnels) {
                if ((p.getNompers() + " " + p.getPrenom()).equals(nomsEtPrenomsSelected)) {
                    personnelSelected = p;
                    break;
                }
            }
        }
    }//GEN-LAST:event_jComboBoxNomsEtPrenomsActionPerformed

    private void jComboBoxRegionListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionListeActionPerformed
        remplirDepartementListeCombobox();
    }//GEN-LAST:event_jComboBoxRegionListeActionPerformed

    private void jButtonSupprimerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerPersonnelActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomsEtPrenomsSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session et un personnel !");
        } else {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer ce membre du jury d'harmonisation", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                anneeSelected = Integer.parseInt(anneeString);
                tousEltharmo = metier.findAllEltharmoD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);

                try {
                    //le souscentre ici c'est OBC

                    for (Souscentre souscentre : souscentres) {
                        if (souscentre.getNomsouscent().equals("OFFICE DU BACCALAURÉAT DU CAMEROUN")) {
                            souscentreSelected = souscentre;
                            break;
                        }
                    }
                    Intervenant intervenant = metier.findIntervenantByNomEtPrenomD1GroupeDexamensD1SessionD1SouscentreD1ActiviteEt1Qualite(personnelSelected.getNompers(), personnelSelected.getPrenom(), anneeSelected, souscentreSelected.getNomsouscent(), niveauSelected, typeSelected, phase, "MEMBRE DU JURY D'HARMONISATION DES CORRIGES NATIONAUX");
                    Eltharmo sonEltharmo = new Eltharmo();
                    for (Eltharmo eltharmo : tousEltharmo) {
                        if (eltharmo.getIntervenant().getPersonnel().getNompers().equals(intervenant.getPersonnel().getNompers()) && eltharmo.getIntervenant().getPersonnel().getPrenom().equals(intervenant.getPersonnel().getPrenom())) {
                            sonEltharmo = eltharmo;
                        }
                    }
                    metier.supprimerEltharmo(sonEltharmo);
                    metier.supprimerIntervenant(intervenant);
                    JOptionPane.showMessageDialog(this, "Membre du jury d'harmonisation supprimé avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer ce membre du jury d'harmonisation\n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerPersonnelActionPerformed

    private void jButtonAnnulerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerPersonnelActionPerformed
        jComboBoxRegionListe.setSelectedIndex(0);
        jComboBoxDepartementListe.setSelectedIndex(0);
        jComboBoxArrondissementListe.setSelectedIndex(0);
        jComboBoxNomsEtPrenoms.setSelectedIndex(0);
        jComboBoxFamille.setSelectedIndex(0);
        jComboBoxDiscipline.setSelectedIndex(0);
        jTextFieldNbep1.setText("");
        jTextFieldNbep2.setText("");
        jTextFieldNbep3.setText("");
        jTextFieldNbep4.setText("");
        jTextFieldNbep5.setText("");
        jTextFieldNbep6.setText("");
    }//GEN-LAST:event_jButtonAnnulerPersonnelActionPerformed

    private void jButtonCreerPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerPersonnelActionPerformed
        infoSaisies();
        if (typeSelected.equals("GEN")) {
            nbep3String = "0";
            nbep4String = "0";
            nbep5String = "0";
            nbep6String = "0";
        }
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomsEtPrenomsSelected.equals("---") || nomDisciplineSelected.equals("---") || nbep1String.equals("") || nbep2String.equals("") || nbep3String.equals("") || nbep4String.equals("") || nbep5String.equals("") || nbep6String.equals("")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un personnel et les nombres d'épreuves !");
        } else {
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            anneeSelected = Integer.parseInt(anneeString);
            Intervenant intervenantCreated = null;
            for (Session s : sessions) {
                if (s.getAnnee() == anneeSelected) {
                    sessionSelected = s;
                    break;
                }
            }
            //le souscentre ici c'est OBC
            for (Souscentre souscentre : souscentres) {
                if (souscentre.getNomsouscent().equals("OFFICE DU BACCALAURÉAT DU CAMEROUN")) {
                    souscentreSelected = souscentre;
                    break;
                }
            }

            for (Matiere matiere : disciplines) {
                if (matiere.getNom().equals(nomDisciplineSelected)) {
                    disciplineSelected = matiere;
                    break;
                }
            }

            validerNbep1(nbep1String);
            validerNbep2(nbep2String);
            validerNbep3(nbep3String);
            validerNbep4(nbep4String);
            validerNbep5(nbep5String);
            validerNbep6(nbep6String);
            boolean testSicreerIntervenant = false;
            boolean testSicreerEltharmo = false;
            try {
                //personnelSelected est déterminé au moment du clic sur la jcombox
                Activite activite = metier.findActiviteByNom(phase);
                Qualite qualite = metier.findQualiteByTitre("MEMBRE DU JURY D'HARMONISATION DES CORRIGES NATIONAUX");
                boolean resident = false;
                intervenantCreated = new Intervenant(groupe, sessionSelected, personnelSelected, souscentreSelected, activite, qualite, resident);
                metier.creerIntervenant(intervenantCreated);
                testSicreerIntervenant = true;
            } catch (ObcbudgetException ex) {
                testSicreerIntervenant = false;
                JOptionPane.showMessageDialog(this, "Impossible de créer ce membre de jury d'harmonisation\n raison:" + ex.getMessage());
            }
            if (testSicreerIntervenant) {
                boolean deplace = false;
                if (jCheckBoxDeplace.isSelected()) {
                    deplace = true;
                }
                metier.creerEltharmo(new Eltharmo(intervenantCreated, groupe, disciplineSelected, sessionSelected, deplace, nbep1Saisi, nbep2Saisi, nbep3Saisi, nbep4Saisi, nbep5Saisi, nbep6Saisi));
                testSicreerEltharmo = true;
            }
            if (testSicreerEltharmo) {
                JOptionPane.showMessageDialog(this, "Membre du jury d'harminisation et ses paramètres créés avec succès !");
            }
        }
    }//GEN-LAST:event_jButtonCreerPersonnelActionPerformed

    private void jButtonListerPersonnelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerPersonnelsActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens et une session !");
        } else {
            anneeSelected = Integer.parseInt(anneeString);
            intervenants = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "MEMBRE DU JURY D'HARMONISATION DES CORRIGES NATIONAUX");
            tousEltharmo = metier.findAllEltharmoD1GroupedexamensD1Session(anneeSelected, niveauSelected, typeSelected);
            if (!intervenants.isEmpty()) {
                try {
                    List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                    int i = 1;
                    for (Eltharmo eltharmo : tousEltharmo) {
                        Map<String, Object> row = new HashMap<>();
                        row.put("session", anneeSelected);
                        row.put("examen", groupedexamensEnstring);
                        row.put("num", i++);
                        row.put("pers", eltharmo.getIntervenant().getPersonnel().getNompers() + " " + eltharmo.getIntervenant().getPersonnel().getPrenom());
                        row.put("matiere", eltharmo.getMatiere().getNom());
                        row.put("deplace", eltharmo.getDeplace());
                        row.put("nbep1", eltharmo.getNbep1());
                        row.put("nbep2", eltharmo.getNbep2());
                        row.put("nbep3", eltharmo.getNbep3());
                        row.put("nbep4", eltharmo.getNbep4());
                        row.put("nbep5", eltharmo.getNbep5());
                        row.put("nbep6", eltharmo.getNbep6());                       
                        datasource.add(row);
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeParametresEltharmoReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }
        }
        intervenants.clear();
        tousEltharmo.clear();
    }//GEN-LAST:event_jButtonListerPersonnelsActionPerformed

    private void jButtonAnnulerChoixExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixExamenActionPerformed
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        jComboBoxSession.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixExamenActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
        if (!typeSelected.equals("---")) {
            remplirFamilleCombo();
            if (typeSelected.equals("GEN")) {
                jTextFieldNbep1.setEnabled(true);
                jTextFieldNbep2.setEnabled(true);
                jTextFieldNbep3.setEnabled(false);
                jTextFieldNbep4.setEnabled(false);
                jTextFieldNbep5.setEnabled(false);
                jTextFieldNbep6.setEnabled(false);
            } else {
                jTextFieldNbep1.setEnabled(true);
                jTextFieldNbep2.setEnabled(true);
                jTextFieldNbep3.setEnabled(true);
                jTextFieldNbep4.setEnabled(true);
                jTextFieldNbep5.setEnabled(true);
                jTextFieldNbep6.setEnabled(true);
            }
        } else {
            jTextFieldNbep1.setEnabled(false);
            jTextFieldNbep2.setEnabled(false);
            jTextFieldNbep3.setEnabled(false);
            jTextFieldNbep4.setEnabled(false);
            jTextFieldNbep5.setEnabled(false);
            jTextFieldNbep6.setEnabled(false);
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jButtonImporterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImporterActionPerformed
        anneeString = (String) jComboBoxSession.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        if (typeSelected.equals("GEN")) {
            if (!anneeString.equals("---") && !groupedexamensEnstring.equals("")) {
                class donneesNonSave {//classe interne devant contenir un personnel et ses paramètres non sauvegardés dans la BD

                    String nom;
                    String prenom;
                    String fonction;
                    String structure;
                    String arrondissement;
                    String matiere;
                    String testDeplace;
                    int nbep1;
                    int nbep2;

                    public donneesNonSave(String nom, String prenom, String fonction, String structure, String arrondissement, String matiere, String testDeplace, int nbep1, int nbep2) {
                        this.nom = nom;
                        this.prenom = prenom;
                        this.fonction = fonction;
                        this.structure = structure;
                        this.arrondissement = arrondissement;
                        this.matiere = matiere;
                        this.testDeplace = testDeplace;
                        this.nbep1 = nbep1;
                        this.nbep2 = nbep2;
                    }

                }
                ArrayList<donneesNonSave> donneesNonSaveList = new ArrayList<>();//liste de tous les personnels et leurs paramètres non sauvegardés dans la BD
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                Qualite qualite = metier.findQualiteByTitre("MEMBRE DU JURY D'HARMONISATION DES CORRIGES NATIONAUX");
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                JFileChooser choix = new JFileChooser();
                int retour = choix.showOpenDialog(this);
                if (retour == JFileChooser.APPROVE_OPTION) {
                    // un fichier a été choisi (sortie par OK)
                    // nom du fichier  choisi 
                    //String nomFichier = choix.getSelectedFile().getName();
                    // chemin absolu du fichier choisi
                    String cheminFichier = choix.getSelectedFile().getAbsolutePath();
                    //JOptionPane.showMessageDialog(this, "Nom du fichier choisi:" + nomFichier+" \n Chemin du fichier:"+cheminFichier);

                    try {
                        //long start = System.currentTimeMillis();

                        FileInputStream inputStream = new FileInputStream(cheminFichier);

                        XSSFWorkbook workbook = new XSSFWorkbook(inputStream);//XSSFWorkbook pour windows 2007 d'extension xlsx; HSSFWorkbook pour excel 97 et 2003 d'extension xls

                        Sheet firstSheet = workbook.getSheetAt(0);
                        Iterator<Row> rowIterator = firstSheet.iterator();

                        rowIterator.next(); // skip the header row

                        while (rowIterator.hasNext()) {
                            boolean continuerFonction = true;
                            boolean continuerArrond = true;
                            boolean continuerMatiere = true;
                            Row nextRow = rowIterator.next();
                            Iterator<Cell> cellIterator = nextRow.cellIterator();
                            Fonction fonct = new Fonction();
                            Arrondissement arrond = new Arrondissement();                            
                            Matiere mat = new Matiere();
                            Personnel pers = new Personnel();
                            Intervenant intervenantCreated = null;
                            String nompers = "";
                            String prenompers = "";
                            String nomstruct = "";
                            String nomfonct = "";
                            String nomarrond = "";
                            String nomMat = "";
                            String valdeplace = "";
                            int nbep1 = 0;
                            int nbep2 = 0;
                            while (cellIterator.hasNext()) {
                                Cell nextCell = cellIterator.next();
                                int columnIndex = nextCell.getColumnIndex();

                                switch (columnIndex) {
                                    case 0:
                                        nompers = nextCell.getStringCellValue();
                                        break;
                                    case 1:
                                        prenompers = nextCell.getStringCellValue();
                                        break;
                                    case 2:
                                        nomfonct = nextCell.getStringCellValue();
                                        try {
                                            fonct = metier.findFonctionByTitre(nomfonct);
                                        } catch (Exception e) {
                                            continuerFonction = false;
                                        }
                                        break;
                                    case 3:
                                        nomstruct = nextCell.getStringCellValue();
                                        break;
                                    case 4:
                                        nomarrond = nextCell.getStringCellValue();
                                        try {
                                            arrond = metier.findArrondissementByName(nomarrond);
                                        } catch (Exception e) {
                                            continuerArrond = false;
                                        }
                                        break;
                                    case 5:
                                        nomMat = nextCell.getStringCellValue();
                                        try {
                                            mat = metier.findMatiereByName(nomMat);
                                        } catch (Exception e) {
                                            continuerMatiere = false;
                                        }
                                        break;
                                    case 6:
                                        valdeplace = nextCell.getStringCellValue();
                                        break;
                                    case 7:
                                        nbep1 = (int) nextCell.getNumericCellValue();
                                        break;
                                    case 8:
                                        nbep2 = (int) nextCell.getNumericCellValue();
                                        break;
                                }
                            }

                            Activite activite = metier.findActiviteByNom("CORRECTION");
                            
                            if (continuerMatiere && continuerFonction && continuerArrond) {
                                pers = metier.creerPersonnel(new Personnel(nompers.toUpperCase(), prenompers.toUpperCase(), nomstruct.toUpperCase(), fonct, arrond));
                                boolean resident = false;
                                //le souscentre ici c'est OBC
                                for (Souscentre souscentre : souscentres) {
                                    if (souscentre.getNomsouscent().equals("OFFICE DU BACCALAURÉAT DU CAMEROUN")) {
                                        souscentreSelected = souscentre;
                                        break;
                                    }
                                }
                                intervenantCreated =metier.creerIntervenant(new Intervenant(groupe, sessionSelected, pers, souscentreSelected, activite, qualite, resident));
                                boolean deplace = true;
                                if (valdeplace.equals("NON")) {
                                    deplace = false;
                                }
                                metier.creerEltharmo(new Eltharmo(intervenantCreated, groupe, mat, sessionSelected, deplace, nbep1, nbep2, 0, 0, 0, 0));
                            } else {
                                donneesNonSaveList.add(new donneesNonSave(nompers, prenompers, nomfonct, nomstruct, nomarrond, nomMat, valdeplace, nbep1, nbep2));//impossible de sauvegarder personnel et intervenant et Eltharmo
                            }
                        }

                        workbook.close();

                    } catch (IOException ex1) {
                        System.out.println("Error reading file");
                        ex1.printStackTrace();
                    }

                    if (donneesNonSaveList.size() > 0) {
                        JOptionPane.showMessageDialog(this, "Attention ! Attention ! Plusieurs données n'ont pas été importées dans la base des données !");
                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            int i = 1;
                            for (donneesNonSave donnee : donneesNonSaveList) {
                                Map<String, Object> row = new HashMap<>();
                                row.put("examen", groupedexamensEnstring);
                                row.put("session", sessionSelected.getAnnee());
                                row.put("num", i++);
                                row.put("nom", donnee.nom);
                                row.put("prenom", donnee.prenom);
                                row.put("nomfonct", donnee.fonction);
                                row.put("nomstruct", donnee.structure);
                                row.put("nomarrond", donnee.arrondissement);
                                row.put("matiere", donnee.matiere);
                                row.put("deplace", donnee.testDeplace);
                                row.put("nbep1", donnee.nbep1);
                                row.put("nbep2", donnee.nbep2);                               
                                datasource.add(row);
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\mbresJuryHarmoNonSauvegardesESGReport.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Importation effectuée avec succès !");
                    }
                } else {
                    //... ;// pas de fichier choisi
                    JOptionPane.showMessageDialog(this, "Aucun choix effectué !");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez recommencer svp. Vous devez choisir un groupe d'examens et une session !");
            }
        } else {//cas ESTI ou STT
            if (!anneeString.equals("---") && !groupedexamensEnstring.equals("")) {
                class donneesNonSave {//classe interne devant contenir un personnel et ses paramètres non sauvegardés dans la BD

                    String nom;
                    String prenom;
                    String fonction;
                    String structure;
                    String arrondissement;
                    String matiere;
                    String testDeplace;
                    int nbep1;
                    int nbep2;
                    int nbep3;
                    int nbep4;
                    int nbep5;
                    int nbep6;
                    
                    public donneesNonSave(String nom, String prenom, String fonction, String structure, String arrondissement, String matiere, String testDeplace, int nbep1, int nbep2, int nbep3, int nbep4, int nbep5, int nbep6) {
                        this.nom = nom;
                        this.prenom = prenom;
                        this.fonction = fonction;
                        this.structure = structure;
                        this.arrondissement = arrondissement;
                        this.matiere = matiere;
                        this.testDeplace = testDeplace;
                        this.nbep1 = nbep1;
                        this.nbep2 = nbep2;
                        this.nbep3 = nbep3;
                        this.nbep4 = nbep4;
                        this.nbep5 = nbep5;
                        this.nbep6 = nbep6;                       
                    }

                }
                ArrayList<donneesNonSave> donneesNonSaveList = new ArrayList<>();//liste de tous les personnels et leurs paramètres non sauvegardés dans la BD
                Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
                anneeSelected = Integer.parseInt(anneeString);
                Qualite qualite = metier.findQualiteByTitre("MEMBRE DU JURY D'HARMONISATION DES CORRIGES NATIONAUX");
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                JFileChooser choix = new JFileChooser();
                int retour = choix.showOpenDialog(this);
                if (retour == JFileChooser.APPROVE_OPTION) {
                    // un fichier a été choisi (sortie par OK)
                    // nom du fichier  choisi 
                    //String nomFichier = choix.getSelectedFile().getName();
                    // chemin absolu du fichier choisi
                    String cheminFichier = choix.getSelectedFile().getAbsolutePath();
                    //JOptionPane.showMessageDialog(this, "Nom du fichier choisi:" + nomFichier+" \n Chemin du fichier:"+cheminFichier);

                    try {
                        //long start = System.currentTimeMillis();

                        FileInputStream inputStream = new FileInputStream(cheminFichier);

                        XSSFWorkbook workbook = new XSSFWorkbook(inputStream);//XSSFWorkbook pour windows 2007 d'extension xlsx; HSSFWorkbook pour excel 97 et 2003 d'extension xls

                        Sheet firstSheet = workbook.getSheetAt(0);
                        Iterator<Row> rowIterator = firstSheet.iterator();

                        rowIterator.next(); // skip the header row

                        while (rowIterator.hasNext()) {
                            boolean continuerFonction = true;
                            boolean continuerArrond = true;
                            boolean continuerMatiere = true;
                            Row nextRow = rowIterator.next();
                            Iterator<Cell> cellIterator = nextRow.cellIterator();
                            Fonction fonct = new Fonction();
                            Arrondissement arrond = new Arrondissement();
                            Matiere mat = new Matiere();
                            Personnel pers = new Personnel();
                            Intervenant intervenantCreated = null;
                            String nompers = "";
                            String prenompers = "";
                            String nomstruct = "";
                            String nomfonct = "";
                            String nomarrond = "";
                            String nomMat = "";
                            String valDeplace = "";
                            int nbep1 = 0;
                            int nbep2 = 0;
                            int nbep3 = 0;
                            int nbep4 = 0;
                            int nbep5 = 0;
                            int nbep6 = 0;                            
                            while (cellIterator.hasNext()) {
                                Cell nextCell = cellIterator.next();
                                int columnIndex = nextCell.getColumnIndex();

                                switch (columnIndex) {
                                    case 0:
                                        nompers = nextCell.getStringCellValue();
                                        break;
                                    case 1:
                                        prenompers = nextCell.getStringCellValue();
                                        break;
                                    case 2:
                                        nomfonct = nextCell.getStringCellValue();
                                        try {
                                            fonct = metier.findFonctionByTitre(nomfonct);
                                        } catch (Exception e) {
                                            continuerFonction = false;
                                        }
                                        break;
                                    case 3:
                                        nomstruct = nextCell.getStringCellValue();
                                        break;
                                    case 4:
                                        nomarrond = nextCell.getStringCellValue();
                                        try {
                                            arrond = metier.findArrondissementByName(nomarrond);
                                        } catch (Exception e) {
                                            continuerArrond = false;
                                        }
                                        break;
                                    case 5:
                                        nomMat = nextCell.getStringCellValue();
                                        try {
                                            mat = metier.findMatiereByName(nomMat);
                                        } catch (Exception e) {
                                            continuerMatiere = false;
                                        }
                                        break;
                                    case 6:
                                        valDeplace = nextCell.getStringCellValue();
                                        break;
                                    case 7:
                                        nbep1 = (int) nextCell.getNumericCellValue();
                                        break;
                                    case 8:
                                        nbep2 = (int) nextCell.getNumericCellValue();
                                        break;
                                    case 9:
                                        nbep3 = (int) nextCell.getNumericCellValue();
                                        break;
                                    case 10:
                                        nbep4 = (int) nextCell.getNumericCellValue();
                                        break;
                                    case 11:
                                        nbep5 = (int) nextCell.getNumericCellValue();
                                        break;
                                    case 12:
                                        nbep6 = (int) nextCell.getNumericCellValue();
                                        break;                                    
                                }
                            }

                            Activite activite = metier.findActiviteByNom("CORRECTION");

                            if (continuerMatiere && continuerFonction && continuerArrond) {
                                pers = metier.creerPersonnel(new Personnel(nompers.toUpperCase(), prenompers.toUpperCase(), nomstruct.toUpperCase(), fonct, arrond));
                                boolean resident = false;
                                //le souscentre ici c'est OBC
                                for (Souscentre souscentre : souscentres) {
                                    if (souscentre.getNomsouscent().equals("OFFICE DU BACCALAURÉAT DU CAMEROUN")) {
                                        souscentreSelected = souscentre;
                                        break;
                                    }
                                }
                                intervenantCreated=metier.creerIntervenant(new Intervenant(groupe, sessionSelected, pers, souscentreSelected, activite, qualite, resident));
                                boolean deplace = true;
                                if (valDeplace.equals("NON")) {
                                    deplace = false;
                                }
                                metier.creerEltharmo(new Eltharmo(intervenantCreated, groupe, mat, sessionSelected, deplace, nbep1, nbep2, nbep3, nbep4, nbep5, nbep6));
                            } else {
                                donneesNonSaveList.add(new donneesNonSave(nompers, prenompers, nomfonct, nomstruct, nomarrond, nomMat, valDeplace, nbep1, nbep2, nbep3, nbep4, nbep5, nbep6));//impossible de sauvegarder personnel et intervenant et Eltharmo
                            }
                        }

                        workbook.close();

                    } catch (IOException ex1) {
                        System.out.println("Error reading file");
                        ex1.printStackTrace();
                    }

                    if (donneesNonSaveList.size() > 0) {
                        JOptionPane.showMessageDialog(this, "Attention ! Attention ! Plusieurs données n'ont pas été importées dans la base des données !");
                        try {
                            List<Map<String, Object>> datasource = new ArrayList<>();
                            int i = 1;
                            for (donneesNonSave donnee : donneesNonSaveList) {
                                Map<String, Object> row = new HashMap<>();
                                row.put("examen", groupedexamensEnstring);
                                row.put("session", sessionSelected.getAnnee());
                                row.put("num", i++);
                                row.put("nom", donnee.nom);
                                row.put("prenom", donnee.prenom);
                                row.put("nomfonct", donnee.fonction);
                                row.put("nomstruct", donnee.structure);
                                row.put("nomarrond", donnee.arrondissement);
                                row.put("matiere", donnee.matiere);
                                row.put("deplace", donnee.testDeplace);
                                row.put("nbep1", donnee.nbep1);
                                row.put("nbep2", donnee.nbep2);
                                row.put("nbep3", donnee.nbep3);
                                row.put("nbep4", donnee.nbep4);
                                row.put("nbep5", donnee.nbep5);
                                row.put("nbep6", donnee.nbep6);                                
                                datasource.add(row);
                            }
                            JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                            JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\mbresJuryHarmoNonSauvegardesESTPReport.jrxml");
                            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                            jasperViewer.setVisible(true);
                        } catch (JRException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage());
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Importation effectuée avec succès !");
                    }
                } else {
                    //... ;// pas de fichier choisi
                    JOptionPane.showMessageDialog(this, "Aucun choix effectué !");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Veuillez recommencer svp. Vous devez choisir un groupe d'examens et une session !");
            }
        }
    }//GEN-LAST:event_jButtonImporterActionPerformed

    private void jTextFieldNbep2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNbep2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNbep2ActionPerformed

    private void jComboBoxFamilleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFamilleActionPerformed
        titreFamilleSelected = (String) jComboBoxFamille.getSelectedItem();
        if (!titreFamilleSelected.equals("---")) {
            disciplines = metier.findAllMatieresD1Famille(titreFamilleSelected);
            //on remplit la combobox des disciplines
            disciplinesCombo = new String[disciplines.size() + 1];
            disciplinesCombo[0] = "---";
            int j = 1;
            for (Matiere matiere : disciplines) {
                disciplinesCombo[j++] = matiere.getNom();
            }
            jComboBoxDiscipline.setModel(new DefaultComboBoxModel(disciplinesCombo));
        } else
            JOptionPane.showMessageDialog(this, "Veuillez sélectionner une famille svp !");
    }//GEN-LAST:event_jComboBoxFamilleActionPerformed

    private void jComboBoxDisciplineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDisciplineActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxDisciplineActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatVacationsHarmonisation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatVacationsHarmonisation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatVacationsHarmonisation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatVacationsHarmonisation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatVacationsHarmonisation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonAnnulerChoixExamen;
    private javax.swing.JButton jButtonAnnulerPersonnel;
    private javax.swing.JButton jButtonCreerEtats;
    private javax.swing.JButton jButtonCreerPersonnel;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonImporter;
    private javax.swing.JButton jButtonListerPersonnels;
    private javax.swing.JButton jButtonMettreAjourEtats;
    private javax.swing.JButton jButtonSupprimerEtats;
    private javax.swing.JButton jButtonSupprimerPersonnel;
    private javax.swing.JButton jButtonVisualiserEtats;
    private javax.swing.JCheckBox jCheckBoxDeplace;
    private javax.swing.JComboBox<String> jComboBoxArrondissementListe;
    private javax.swing.JComboBox<String> jComboBoxDepartementListe;
    private javax.swing.JComboBox<String> jComboBoxDiscipline;
    private javax.swing.JComboBox<String> jComboBoxFamille;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxNomsEtPrenoms;
    private javax.swing.JComboBox<String> jComboBoxRegionListe;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelArrondissementListe;
    private javax.swing.JLabel jLabelDepartementListe;
    private javax.swing.JLabel jLabelDiscipline;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelFamille;
    private javax.swing.JLabel jLabelNbep1;
    private javax.swing.JLabel jLabelNbep2;
    private javax.swing.JLabel jLabelNbep3;
    private javax.swing.JLabel jLabelNbep4;
    private javax.swing.JLabel jLabelNbep5;
    private javax.swing.JLabel jLabelNbep6;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelRegionListe;
    private javax.swing.JLabel jLabelResponsable;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanelChoixExamen;
    private javax.swing.JPanel jPanelDiscipline;
    private javax.swing.JPanel jPanelExaminateurs;
    private javax.swing.JPanel jPanelGestionEtat;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldNbep1;
    private javax.swing.JTextField jTextFieldNbep2;
    private javax.swing.JTextField jTextFieldNbep3;
    private javax.swing.JTextField jTextFieldNbep4;
    private javax.swing.JTextField jTextFieldNbep5;
    private javax.swing.JTextField jTextFieldNbep6;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Region> regions = null;
    private List<Examen> examens = null;
    private Examen examenSelected = null;
    private String[] examensList = null;
    private List<Examen> examensSelected = new ArrayList<>();
    private List<Departement> departementsSouscentre = null;
    private List<Arrondissement> arrondissementsSouscentre = null;
    private List<Departement> departementsListe = null;
    private List<Arrondissement> arrondissementsListe = null;
    private List<Souscentre> souscentres = null;
    private Souscentre souscentreSelected = null;
    private String[] sessionsCombo = null;
    private String[] imputationsCombo = null;
    private String[] regionsListeCombo = null;
    private String[] departementsListeCombo = null;
    private String[] arrondissementsListeCombo = null;
    private String nomRegionListeSelected = "";
    private String nomDepartementListeSelected = "";
    private String nomArrondissementListeSelected = "";
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private String phase = "CORRECTION";
    private List<Caisse> caisses = null;
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private int total = 0, vacation = 0, deplacement = 0, nbtotalep = 0, nbexam = 0, nbep1 = 0, nbep2 = 0, nbep3 = 0, nbep4 = 0, nbep5 = 0, nbep6 = 0, nbvac = 0, txvac = 0;//ep1=PROB, ep2=BAC, ep3=PROB BT, ep4=BEP, ep5=BT, ep6=BP
    private String nomsEtPrenomsSelected = "";
    private Personnel personnelSelected = null;
    private List<Personnel> personnels = null;
    private String[] personnelsCombo = null;
    private String[] famillesCombo = null;
    private List<Intervenant> intervenants = null;
    private boolean annule = false;
    private String nomDisciplineSelected = "";
    private String nbep1String = "";
    private int nbep1Saisi = 0;
    private boolean continuerNbep1 = false;
    private String nbep2String = "";
    private int nbep2Saisi = 0;
    private boolean continuerNbep2 = false;
    private String nbep3String = "";
    private int nbep3Saisi = 0;
    private boolean continuerNbep3 = false;
    private String nbep4String = "";
    private int nbep4Saisi = 0;
    private boolean continuerNbep4 = false;
    private String nbep5String = "";
    private int nbep5Saisi = 0;
    private boolean continuerNbep5 = false;
    private String nbep6String = "";
    private int nbep6Saisi = 0;
    private boolean continuerNbep6 = false;
    private String titreFamilleSelected = "";
    private List<Matiere> disciplines = null;
    private String[] disciplinesCombo = null;
    private List<Eltharmo> tousEltharmo = null;
    private Matiere disciplineSelected = null;

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        regions = metier.findAllRegions();
        souscentres = metier.findAllSouscentres();
        examens = metier.findAllExamens();
        disciplines = metier.findAllMatieres();

        //on remplit la combobox des régions des examinateurs
        regionsListeCombo = new String[regions.size() + 1];
        regionsListeCombo[0] = "---";
        int j = 1;
        for (Region region : regions) {
            regionsListeCombo[j++] = region.getNomreg();
        }
        jComboBoxRegionListe.setModel(new DefaultComboBoxModel(regionsListeCombo));

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int k = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[k++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "GEN", "TOUT ESTI", "TOUT STT"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "TOUT"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        remplirDepartementListeCombobox();
        remplirArrondissementListeCombobox();
        remplirPersonnelsDelArrondissementCombobox();
        remplirPersonnelsDuDepartementCombobox();
        jTextFieldNbep1.setEnabled(false);
        jTextFieldNbep2.setEnabled(false);
        jTextFieldNbep3.setEnabled(false);
        jTextFieldNbep4.setEnabled(false);
        jTextFieldNbep5.setEnabled(false);
        jTextFieldNbep6.setEnabled(false);
    }

    private void infoSaisies() {
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        nomsEtPrenomsSelected = (String) jComboBoxNomsEtPrenoms.getSelectedItem();
        nomDisciplineSelected = (String) jComboBoxDiscipline.getSelectedItem();
        nbep1String = jTextFieldNbep1.getText();
        nbep2String = jTextFieldNbep2.getText();
        nbep3String = jTextFieldNbep3.getText();
        nbep4String = jTextFieldNbep4.getText();
        nbep5String = jTextFieldNbep5.getText();
        nbep6String = jTextFieldNbep6.getText();
    }

    private void remplirDepartementListeCombobox() {
        nomRegionListeSelected = (String) jComboBoxRegionListe.getSelectedItem();
        departementsListe = metier.findAllDepartementsD1Region(nomRegionListeSelected);
        //on remplit la combobox des départements des examinateurs
        departementsListeCombo = new String[departementsListe.size() + 1];
        departementsListeCombo[0] = "---";
        int i = 1;
        for (Departement departement : departementsListe) {
            departementsListeCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartementListe.setModel(new DefaultComboBoxModel(departementsListeCombo));
    }

    private void remplirArrondissementListeCombobox() {
        nomDepartementListeSelected = (String) jComboBoxDepartementListe.getSelectedItem();
        arrondissementsListe = metier.findAllArrondissementsD1Departement(nomDepartementListeSelected);
        //on remplit la combobox des arrondissements des examinateurs
        arrondissementsListeCombo = new String[arrondissementsListe.size() + 1];
        arrondissementsListeCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissementsListe) {
            arrondissementsListeCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissementListe.setModel(new DefaultComboBoxModel(arrondissementsListeCombo));
    }

    private void remplirPersonnelsDelArrondissementCombobox() {
        nomArrondissementListeSelected = (String) jComboBoxArrondissementListe.getSelectedItem();
        personnels = metier.findAllPersonnelsD1Arrondissement(nomArrondissementListeSelected);
        //on remplit les combobox des responsables et des membres
        personnelsCombo = new String[personnels.size() + 1];
        personnelsCombo[0] = "---";
        int i = 1;
        for (Personnel personnel : personnels) {
            personnelsCombo[i] = personnel.getNompers() + " " + personnel.getPrenom();
            i++;
        }
        jComboBoxNomsEtPrenoms.setModel(new DefaultComboBoxModel(personnelsCombo));
    }

    private void remplirPersonnelsDuDepartementCombobox() {
        nomDepartementListeSelected = (String) jComboBoxDepartementListe.getSelectedItem();
        personnels = metier.findAllPersonnelsD1Departement(nomDepartementListeSelected);
        //on remplit les combobox des personnels       
        personnelsCombo = new String[personnels.size() + 1];
        personnelsCombo[0] = "---";
        int i = 1;
        for (Personnel personnel : personnels) {
            personnelsCombo[i] = personnel.getNompers() + " " + personnel.getPrenom();
            i++;
        }
        jComboBoxNomsEtPrenoms.setModel(new DefaultComboBoxModel(personnelsCombo));
    }

    private void determinerCoutD1Eltharmo(Eltharmo eltharmo) {
        total = 0;
        nbtotalep = 0;
        nbexam = 0;
        nbep1 = 0;
        nbep2 = 0;
        nbep3 = 0;
        nbep4 = 0;
        nbep5 = 0;
        nbep6 = 0;
        nbvac = 0;
        txvac = 0;
        vacation = 0;
        deplacement = 0;

        nbep1 = eltharmo.getNbep1();
        nbep2 = eltharmo.getNbep2();
        nbep3 = eltharmo.getNbep3();
        nbep4 = eltharmo.getNbep4();
        nbep5 = eltharmo.getNbep5();
        nbep6 = eltharmo.getNbep6();
        nbtotalep = nbep1 + nbep2 + nbep3 + nbep4 + nbep5 + nbep6;
        if (nbep1 > 0) {
            nbexam += 1;
        }
        if (nbep2 > 0) {
            nbexam += 1;
        }
        if (nbep3 > 0) {
            nbexam += 1;
        }
        if (nbep4 > 0) {
            nbexam += 1;
        }
        if (nbep5 > 0) {
            nbexam += 1;
        }
        if (nbep6 > 0) {
            nbexam += 1;
        }

        if (testIPNouProfessionnel(eltharmo.getIntervenant().getPersonnel())) {
            txvac = 10000;
        } else {
            txvac = 8000;
        }

        if (nbexam == 1) {
            if (nbtotalep > 0 && nbtotalep <= 2) {
                nbvac = 1;
            }
            if (nbtotalep == 3) {
                nbvac = 2;
            }
            if (nbtotalep > 3 && nbtotalep <= 5) {
                nbvac = 3;
            }
            if (nbtotalep > 5 && nbtotalep <= 7) {
                nbvac = 4;
            }
            if (nbtotalep > 7 && nbtotalep <= 10) {
                nbvac = 5;
            }
            if (nbtotalep > 10) {
                nbvac = 6;
            }
        }

        if (nbexam == 2) {
            if (nbtotalep > 1 && nbtotalep <= 3) {
                nbvac = 2;
            }
            if (nbtotalep == 4) {
                nbvac = 3;
            }
            if (nbtotalep > 4 && nbtotalep <= 7) {
                nbvac = 4;
            }
            if (nbtotalep > 7 && nbtotalep <= 10) {
                nbvac = 5;
            }
            if (nbtotalep > 10) {
                nbvac = 6;
            }
        }

        if (nbexam >= 3) {
            if (nbtotalep == 3) {
                nbvac = 2;
            }
            if (nbtotalep == 4) {
                nbvac = 3;
            }
            if (nbtotalep > 4 && nbtotalep <= 6) {
                nbvac = 4;
            }
            if (nbtotalep > 6 && nbtotalep <= 8) {
                nbvac = 5;
            }
            if (nbtotalep > 8 && nbtotalep <= 10) {
                nbvac = 6;
            }
            if (nbtotalep > 10) {
                nbvac = 7;
            }
        }
        if (typeSelected.equals("TOUT ESTI") && eltharmo.getDeplace()) {
            if (testIPNouProfessionnel(eltharmo.getIntervenant().getPersonnel())) {
                deplacement = 100000;
            } else {
                if (nbtotalep >= 5) {
                    deplacement = 100000;
                } else {
                    deplacement = 75000;
                }
            }
        }
        if (typeSelected.equals("TOUT STT") && eltharmo.getDeplace()) {
            if (testIPNouProfessionnel(eltharmo.getIntervenant().getPersonnel())) {
                deplacement = 100000;
            } else {
                if (nbtotalep >= 2) {
                    deplacement = 100000;
                } else {
                    deplacement = 75000;
                }
            }
        }
        vacation = txvac * nbvac;
        total = vacation + deplacement;
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    private void validerNbep1(String nbreString) {
        try {
            nbep1Saisi = Integer.parseInt(nbreString);
            continuerNbep1 = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre d'épreuves de Probatoire doit être fournis et contenir uniquement des chiffres entiers!");
            continuerNbep1 = false;
        }
    }

    private void validerNbep2(String nbreString) {
        try {
            nbep2Saisi = Integer.parseInt(nbreString);
            continuerNbep2 = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre d'épreuves de Baccalauréat doit être fournis et contenir uniquement des chiffres entiers!");
            continuerNbep2 = false;
        }
    }

    private void validerNbep3(String nbreString) {
        try {
            nbep3Saisi = Integer.parseInt(nbreString);
            continuerNbep3 = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre d'épreuves de Probatoire de BT doit être fournis et contenir uniquement des chiffres entiers!");
            continuerNbep3 = false;
        }
    }

    private void validerNbep4(String nbreString) {
        try {
            nbep4Saisi = Integer.parseInt(nbreString);
            continuerNbep4 = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre d'épreuves de BEP doit être fournis et contenir uniquement des chiffres entiers!");
            continuerNbep4 = false;
        }
    }

    private void validerNbep5(String nbreString) {
        try {
            nbep5Saisi = Integer.parseInt(nbreString);
            continuerNbep5 = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre d'épreuves de BT doit être fournis et contenir uniquement des chiffres entiers!");
            continuerNbep5 = false;
        }
    }

    private void validerNbep6(String nbreString) {
        try {
            nbep6Saisi = Integer.parseInt(nbreString);
            continuerNbep6 = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le nombre d'épreuves de BP doit être fournis et contenir uniquement des chiffres entiers!");
            continuerNbep6 = false;
        }
    }

    private void remplirDisciplineCombo() {

    }

    private void remplirFamilleCombo() {
        if (typeSelected.equals("GEN")) {
            //on remplit la combobox des familles
            famillesCombo = new String[]{"---", "LITTÉRAIRE", "RAS", "SCIENTIFIQUE"};
            jComboBoxFamille.setModel(new DefaultComboBoxModel(famillesCombo));
        }
        if (typeSelected.equals("TOUT ESTI")) {
            //on remplit la combobox des familles
            famillesCombo = new String[]{"---", "RAS", "TECHNIQUE INDUSTRIEL"};
            jComboBoxFamille.setModel(new DefaultComboBoxModel(famillesCombo));
        }
        if (typeSelected.equals("TOUT STT")) {
            //on remplit la combobox des familles
            famillesCombo = new String[]{"---", "RAS", "TECHNIQUE COMMERCIAL"};
            jComboBoxFamille.setModel(new DefaultComboBoxModel(famillesCombo));
        }
    }

    private boolean testIPNouProfessionnel(Personnel pers) {
        boolean resultTest = false;
        if (pers.getFonction().getTitre().equals("IPN") || pers.getFonction().getTitre().equals("PROF")) {
            resultTest = true;
        }
        return resultTest;
    }
}
