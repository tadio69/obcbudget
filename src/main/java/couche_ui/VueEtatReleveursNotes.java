package couche_ui;

import com.github.royken.converter.FrenchNumberToWords;
import couche_jpa.Activite;
import couche_jpa.Arrondissement;
import couche_jpa.Caisse;
import couche_jpa.Centrebilletage;
import couche_jpa.Departement;
import couche_jpa.Examen;
import couche_jpa.Fonction;
import couche_jpa.Groupe;
import couche_jpa.Groupedexamen;
import couche_jpa.Intervenant;
import couche_jpa.Nature;
import couche_jpa.Nbepreuveprof;
import couche_jpa.Personnel;
import couche_jpa.Qualite;
import couche_jpa.Region;
import couche_jpa.Rubriquetat;
import couche_jpa.Scentaplus;
import couche_jpa.Secteurcouv;
import couche_jpa.Session;
import couche_jpa.Souscentre;
import couche_jpa.Statistique;
import couche_metier.IMetier;
import exception.ObcbudgetException;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class VueEtatReleveursNotes extends javax.swing.JFrame {

    public VueEtatReleveursNotes() {
        initComponents();
        doMyInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButtonFermer = new javax.swing.JButton();
        jPanelExaminateurs = new javax.swing.JPanel();
        jComboBoxDepartementListe = new javax.swing.JComboBox<>();
        jLabelDepartementListe = new javax.swing.JLabel();
        jLabelPersonnel = new javax.swing.JLabel();
        jComboBoxArrondissementListe = new javax.swing.JComboBox<>();
        jComboBoxNomsEtPrenoms = new javax.swing.JComboBox<>();
        jLabelArrondissementListe = new javax.swing.JLabel();
        jComboBoxRegionListe = new javax.swing.JComboBox<>();
        jLabelRegionListe = new javax.swing.JLabel();
        jButtonSupprimerExaminateurs = new javax.swing.JButton();
        jButtonAnnulerExaminateurs = new javax.swing.JButton();
        jButtonCreerExaminateurs = new javax.swing.JButton();
        jButtonListerExaminateurs = new javax.swing.JButton();
        jButtonImporter = new javax.swing.JButton();
        jPanelChoixExamen = new javax.swing.JPanel();
        jLabelSession = new javax.swing.JLabel();
        jComboBoxSession = new javax.swing.JComboBox<>();
        jButtonAnnulerChoixExamen = new javax.swing.JButton();
        jLabelNiveauExamen = new javax.swing.JLabel();
        jComboBoxNiveau = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelExamen = new javax.swing.JLabel();
        jPanelChoixSouscentre = new javax.swing.JPanel();
        jComboBoxDepartementSouscentre = new javax.swing.JComboBox<>();
        jLabelDepartementSouscentre = new javax.swing.JLabel();
        jLabelSouscentre = new javax.swing.JLabel();
        jComboBoxArrondissementSouscentre = new javax.swing.JComboBox<>();
        jComboBoxSouscentre = new javax.swing.JComboBox<>();
        jLabelArrondissementSouscentre = new javax.swing.JLabel();
        jComboBoxRegionSouscentre = new javax.swing.JComboBox<>();
        jLabelRegionSouscentre = new javax.swing.JLabel();
        jButtonAnnulerChoixSouscentre = new javax.swing.JButton();
        jPanelGestionEtat = new javax.swing.JPanel();
        jButtonCreerEtats = new javax.swing.JButton();
        jButtonMettreAjourEtats = new javax.swing.JButton();
        jButtonVisualiserEtats = new javax.swing.JButton();
        jButtonSupprimerEtats = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("ETAT DE PRISE EN CHARGE DES RELEVEURS DE NOTES");

        jButtonFermer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonFermer.setText("Fermer");
        jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFermerActionPerformed(evt);
            }
        });

        jPanelExaminateurs.setBackground(new java.awt.Color(255, 204, 0));
        jPanelExaminateurs.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer la liste des anonymisateurs et engistreurs des notes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jComboBoxDepartementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartementListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementListeActionPerformed(evt);
            }
        });

        jLabelDepartementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartementListe.setText("Département :");

        jLabelPersonnel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelPersonnel.setText("Noms et prénoms :");

        jComboBoxArrondissementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissementListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementListeActionPerformed(evt);
            }
        });

        jComboBoxNomsEtPrenoms.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxNomsEtPrenoms.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxNomsEtPrenoms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNomsEtPrenomsActionPerformed(evt);
            }
        });

        jLabelArrondissementListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissementListe.setText("Arrondissement :");

        jComboBoxRegionListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegionListe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionListeActionPerformed(evt);
            }
        });

        jLabelRegionListe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegionListe.setText("Région :");

        jButtonSupprimerExaminateurs.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerExaminateurs.setText("Supprimer");
        jButtonSupprimerExaminateurs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerExaminateursActionPerformed(evt);
            }
        });

        jButtonAnnulerExaminateurs.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerExaminateurs.setText("Annuler");
        jButtonAnnulerExaminateurs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerExaminateursActionPerformed(evt);
            }
        });

        jButtonCreerExaminateurs.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerExaminateurs.setText("Créer");
        jButtonCreerExaminateurs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerExaminateursActionPerformed(evt);
            }
        });

        jButtonListerExaminateurs.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonListerExaminateurs.setText("Lister");
        jButtonListerExaminateurs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListerExaminateursActionPerformed(evt);
            }
        });

        jButtonImporter.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonImporter.setText("Importer");
        jButtonImporter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImporterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelExaminateursLayout = new javax.swing.GroupLayout(jPanelExaminateurs);
        jPanelExaminateurs.setLayout(jPanelExaminateursLayout);
        jPanelExaminateursLayout.setHorizontalGroup(
            jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelExaminateursLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelExaminateursLayout.createSequentialGroup()
                        .addComponent(jButtonCreerExaminateurs)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelExaminateursLayout.createSequentialGroup()
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelDepartementListe)
                            .addComponent(jLabelRegionListe))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxDepartementListe, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxRegionListe, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)))
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                        .addComponent(jLabelPersonnel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxNomsEtPrenoms, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                        .addComponent(jButtonSupprimerExaminateurs)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnnulerExaminateurs)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonListerExaminateurs)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonImporter))
                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabelArrondissementListe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(19, 19, 19))
        );
        jPanelExaminateursLayout.setVerticalGroup(
            jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelArrondissementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxNomsEtPrenoms, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelExaminateursLayout.createSequentialGroup()
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxRegionListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelRegionListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxDepartementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDepartementListe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(20, 20, 20)
                .addGroup(jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelExaminateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonAnnulerExaminateurs, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonSupprimerExaminateurs, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonListerExaminateurs, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonImporter, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonCreerExaminateurs, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(141, 141, 141))
        );

        jPanelChoixExamen.setBackground(new java.awt.Color(102, 255, 153));
        jPanelChoixExamen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un groupe d'examens et une session", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabelSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSession.setText("Session :");

        jComboBoxSession.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSessionActionPerformed(evt);
            }
        });

        jButtonAnnulerChoixExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixExamen.setText("Annuler");
        jButtonAnnulerChoixExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixExamenActionPerformed(evt);
            }
        });

        jLabelNiveauExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNiveauExamen.setText("Niveau :");

        jComboBoxNiveau.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabelType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelType.setText("Type :");

        jComboBoxType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        jLabelExamen.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelExamen.setText("Examen(s) :");

        javax.swing.GroupLayout jPanelChoixExamenLayout = new javax.swing.GroupLayout(jPanelChoixExamen);
        jPanelChoixExamen.setLayout(jPanelChoixExamenLayout);
        jPanelChoixExamenLayout.setHorizontalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(0, 10, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelExamen)
                    .addComponent(jLabelNiveauExamen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                        .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabelSession)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelChoixExamenLayout.setVerticalGroup(
            jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixExamenLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNiveauExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(jPanelChoixExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSession, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAnnulerChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );

        jPanelChoixSouscentre.setBackground(new java.awt.Color(204, 255, 0));
        jPanelChoixSouscentre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choisir un sous-centre d'examen", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(51, 0, 255))); // NOI18N

        jComboBoxDepartementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxDepartementSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepartementSouscentreActionPerformed(evt);
            }
        });

        jLabelDepartementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelDepartementSouscentre.setText("Département :");

        jLabelSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelSouscentre.setText("Sous-centre :");

        jComboBoxArrondissementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxArrondissementSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxArrondissementSouscentreActionPerformed(evt);
            }
        });

        jComboBoxSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxSouscentre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        jComboBoxSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSouscentreActionPerformed(evt);
            }
        });

        jLabelArrondissementSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelArrondissementSouscentre.setText("Arrondissement :");

        jComboBoxRegionSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBoxRegionSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegionSouscentreActionPerformed(evt);
            }
        });

        jLabelRegionSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelRegionSouscentre.setText("Région :");

        jButtonAnnulerChoixSouscentre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonAnnulerChoixSouscentre.setText("Annuler");
        jButtonAnnulerChoixSouscentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerChoixSouscentreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelChoixSouscentreLayout = new javax.swing.GroupLayout(jPanelChoixSouscentre);
        jPanelChoixSouscentre.setLayout(jPanelChoixSouscentreLayout);
        jPanelChoixSouscentreLayout.setHorizontalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelDepartementSouscentre)
                    .addComponent(jLabelArrondissementSouscentre)
                    .addComponent(jLabelSouscentre)
                    .addComponent(jLabelRegionSouscentre))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                        .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxDepartementSouscentre, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxRegionSouscentre, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(60, 60, 60)
                        .addComponent(jButtonAnnulerChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        jPanelChoixSouscentreLayout.setVerticalGroup(
            jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChoixSouscentreLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxRegionSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRegionSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxDepartementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonAnnulerChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelDepartementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxArrondissementSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelChoixSouscentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanelGestionEtat.setBackground(new java.awt.Color(0, 255, 255));
        jPanelGestionEtat.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gérer l'état", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 102, 255))); // NOI18N

        jButtonCreerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonCreerEtats.setText("Créer");
        jButtonCreerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerEtatsActionPerformed(evt);
            }
        });

        jButtonMettreAjourEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonMettreAjourEtats.setText("Mettre à jour");
        jButtonMettreAjourEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMettreAjourEtatsActionPerformed(evt);
            }
        });

        jButtonVisualiserEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonVisualiserEtats.setText("Visualiser");
        jButtonVisualiserEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiserEtatsActionPerformed(evt);
            }
        });

        jButtonSupprimerEtats.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonSupprimerEtats.setText("Supprimer");
        jButtonSupprimerEtats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerEtatsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelGestionEtatLayout = new javax.swing.GroupLayout(jPanelGestionEtat);
        jPanelGestionEtat.setLayout(jPanelGestionEtatLayout);
        jPanelGestionEtatLayout.setHorizontalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jButtonCreerEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonMettreAjourEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualiserEtats)
                .addGap(18, 18, 18)
                .addComponent(jButtonSupprimerEtats)
                .addContainerGap(57, Short.MAX_VALUE))
        );
        jPanelGestionEtatLayout.setVerticalGroup(
            jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionEtatLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelGestionEtatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonMettreAjourEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCreerEtats, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonSupprimerEtats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVisualiserEtats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(337, 337, 337)
                        .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75)
                        .addComponent(jButtonFermer))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelExaminateurs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(134, 134, 134))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelChoixSouscentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanelChoixExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanelExaminateurs, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanelGestionEtat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonFermer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVisualiserEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiserEtatsActionPerformed
        infoSaisies();
        Map<Centrebilletage, ArrayList<Souscentre>> centrebilletageSouscentresMap = new HashMap<>();//contient chaque centre de billetage avec la liste des sous-centres situés dans ses secteurs de couverture
        List<Souscentre> souscentreAvecEnregistreursList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des Enregistreurs      
        Map<Souscentre, ArrayList<Intervenant>> souscentreEnregistreursMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses Enregistreurs
        Map<Souscentre, Integer> souscentreNbMaxEpreuveMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre maximal d'épreuves professionnelles pratiques contraignantes
        List<Souscentre> tousLesScentaplus = new ArrayList<>();//liste de tous les sous-centres à plus organisant les examens sélectionnés
        Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau des initiales de ses activités
        List<Souscentre> souscentresRattachesList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session       
        List<Souscentre> souscentresNosoList = new ArrayList<>();//contient l'ensemble des sous-centres du NOSO plus L.KOZA, L.MAKARI, L.BLANGOUA,L.OUZAL,L.MORA 
        List<Souscentre> souscentresArisquesExtNordList = new ArrayList<>();//contient l'ensemble des sous-centres du NOSO plus L.KOZA, L.MAKARI, L.BLANGOUA,L.OUZAL,L.MORA 
        ArrayList<String> typesBruts = new ArrayList<>();
        ArrayList<String> typesAconsiderer = new ArrayList<>();
        ArrayList<String> niveauxAconsiderer = new ArrayList<>();
        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES RELEVEURS DE NOTES");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
            boolean continuer = false;
            for (Caisse c : caisses) {
                if (c.getGroupe().getNiveau().equals(niveauSelected) && c.getGroupe().getType().equals(typeSelected)) {
                    continuer = true;
                    break;
                }
            }
            if (!continuer) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de prise en charge des releveurs des notes n'ont pas encore été créés pour ce groupe d'examens !");
            } else {
                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }

                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                //recherche des types des examens à utiliser
                for (Examen examen : examensSelected) {
                    System.out.println("Examen=" + examen.getSigle() + " Type=" + examen.getType());
                    if (examen.getType().equals("GEN") && !typesBruts.contains("ESG")) {
                        typesBruts.add("ESG");
                    }
                    if (!typesBruts.contains("ESTP") && (examen.getType().equals("IND") || examen.getType().equals("IND PROF") || examen.getType().equals("STT") || examen.getType().equals("STT PROF"))) {
                        typesBruts.add("ESTP");
                    }
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESG")) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 1 && typesBruts.contains("ESTP")) {
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                if (typesBruts.size() == 2) {
                    typesAconsiderer.add("ESG");
                    typesAconsiderer.add("ESTP");
                    typesAconsiderer.add("TOUT");
                }
                //recherche des niveaux des examens à utiliser
                if (!niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add(niveauSelected);
                    niveauxAconsiderer.add("TOUT");
                }
                if (niveauSelected.equals("TOUT")) {
                    niveauxAconsiderer.add("PROB");
                    niveauxAconsiderer.add("BACC");
                    niveauxAconsiderer.add("TOUT");
                }

                //on cherche la liste des sous-centres de chaque centre de billetage
                for (String niveau : niveauxAconsiderer) {
                    for (String type : typesAconsiderer) {
                        List<Centrebilletage> desCentrebilletages = metier.findAllCentrebilletagesD1NiveauD1Type(niveau, type);
                        for (Centrebilletage centrebilletage : desCentrebilletages) {
                            ArrayList<Souscentre> souscentresList = new ArrayList<>();
                            if (!centrebilletageSouscentresMap.containsKey(centrebilletage)) {
                                List<Secteurcouv> secteurs = metier.findAllSecteurscouvD1Centrebilletage(centrebilletage.getEtablissement().getAbreviation());
                                for (Secteurcouv sect : secteurs) {
                                    if (!souscentresList.contains(sect.getSouscentre())) {
                                        souscentresList.add(sect.getSouscentre());
                                    }
                                }
                                centrebilletageSouscentresMap.put(centrebilletage, souscentresList);
                            }
                        }
                    }
                }

                for (Examen e : examensSelected) {
                    List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                    for (Statistique s : lesStats) {
                        Nbepreuveprof nbepreuveprof = metier.findAllNbepreuveprofsD1ExamenEtD1Option(e.getSigle(), s.getOption().getSigle());//s'il existe, il est unique
                        if (souscentreNbMaxEpreuveMap.containsKey(s.getSouscentre())) {
                            int nb = souscentreNbMaxEpreuveMap.get(s.getSouscentre());
                            souscentreNbMaxEpreuveMap.put(s.getSouscentre(), max(nb, nbepreuveprof.getNbprofpratique1()));
                        } else {
                            souscentreNbMaxEpreuveMap.put(s.getSouscentre(), nbepreuveprof.getNbprofpratique1());
                        }
                    }
                    List<Scentaplus> scentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, e.getSigle());
                    for (Scentaplus s : scentaplus) {
                        if (!tousLesScentaplus.contains(s.getSouscentre())) {
                            tousLesScentaplus.add(s.getSouscentre());
                        }
                    }
                    List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                    for (Nature n : lesNats) {
                        Souscentre unSouscentre = n.getSouscentre();
                        if (!souscentresRattachesList.contains(unSouscentre)) {
                            souscentresRattachesList.add(unSouscentre);
                        }
                    }
                    for (int j = 0; j < souscentresRattachesList.size(); j++) {
                        ArrayList<Character> phasesList = new ArrayList<>();
                        Souscentre s = souscentresRattachesList.get(j);
                        for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                            if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                if (!phasesList.contains(n.getActivite().getInitiale())) {
                                    phasesList.add(n.getActivite().getInitiale());
                                }
                                //pas de break ici car on doit parcourir tous lesNats
                            }
                        }
                        if (!souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {
                            souscentrePhasesMap.put(s, phasesList);
                        }
                        if (souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante

                            ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                            for (int k = 0; k < phasesList.size(); k++) {
                                if (!phasesList1.contains(phasesList.get(k))) {
                                    phasesList1.add(phasesList.get(k));
                                }
                            }
                            Collections.sort(phasesList1);
                            souscentrePhasesMap.put(s, phasesList1);
                        }
                    }
                }
                //remplissage de souscentresArisquesList
                souscentresNosoList = metier.findAllSouscentresNoso();//de l'ESG

                souscentresArisquesExtNordList = metier.findAllSouscentresArisquesExtNord();

                List<Intervenant> enregistreurs = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "RELEVEUR DE NOTES");

                //sous-centres ayant des Enregistreurs
                for (Intervenant intervenant : enregistreurs) {
                    if (!souscentreAvecEnregistreursList.contains(intervenant.getSouscentre())) {
                        souscentreAvecEnregistreursList.add(intervenant.getSouscentre());
                    }
                }

                //remplissage de souscentreEnregistreursMap
                for (Souscentre scentre : souscentreAvecEnregistreursList) {
                    ArrayList<Intervenant> enregistreursList = new ArrayList<>();
                    for (Intervenant enregistreur : enregistreurs) {
                        if (enregistreur.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                            enregistreursList.add(enregistreur);
                        }
                    }
                    souscentreEnregistreursMap.put(scentre, enregistreursList);
                }

                try {
                    List<Map<String, Object>> datasource = new ArrayList<>();
                    List<Region> regions = metier.findAllRegions();
                    for (Region region : regions) {
                        for (Centrebilletage centrebilletage : centrebilletageSouscentresMap.keySet()) {
                            if (region.getNomreg().equals(centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg())) {
                                int num = 1;
                                int totalMontant = 0;
                                ArrayList<Souscentre> souscentresList = centrebilletageSouscentresMap.get(centrebilletage);
                                for (int i = 0; i < souscentresList.size(); i++) {
                                    Souscentre souscentre = souscentresList.get(i);
                                    int net = 0;
                                    if (souscentreAvecEnregistreursList.contains(souscentre)) {
                                        if (souscentresRattachesList.contains(souscentre)) {
                                            int nbtours = souscentreEnregistreursMap.get(souscentre).size();
                                            String intervenantAffiche = "";
                                            for (int k = 0; k < nbtours; k++) {
                                                int montantArrondi = 0;
                                                intervenantAffiche = souscentreEnregistreursMap.get(souscentre).get(k).getPersonnel().getNompers() + " " + souscentreEnregistreursMap.get(souscentre).get(k).getPersonnel().getPrenom();
                                                Intervenant enregistreurCourant = souscentreEnregistreursMap.get(souscentre).get(k);
                                                determinerCout(enregistreurCourant.getQualite(), souscentre, souscentreNbMaxEpreuveMap, tousLesScentaplus, souscentrePhasesMap, souscentresNosoList, souscentresArisquesExtNordList);
                                                montantArrondi = (int) Math.ceil((double) montant / (double) 1000) * 1000;

                                                Map<String, Object> row = new HashMap<>();
                                                row.put("examen", groupedexamensEnstring);
                                                row.put("session", anneeSelected);
                                                row.put("region", region.getNomreg());
                                                row.put("reference", "");
                                                row.put("centrebilletage", centrebilletage.getEtablissement().getAbreviation());
                                                row.put("num", num++);
                                                row.put("souscentre", souscentre.getNomsouscent());
                                                row.put("nature", phasesPourAffichage);
                                                row.put("coutvac", coutvac);
                                                row.put("intervenant", intervenantAffiche);
                                                row.put("primeconfid", primeconfid);
                                                row.put("nbjour", nbjour);
                                                row.put("entretien", entretien);
                                                row.put("transport", transport);
                                                row.put("baspage", "OBC/AR/" + centrebilletage.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg());
                                                row.put("total", montantArrondi);
                                                totalMontant += montantArrondi;//jasperreport prendra la dernière valeur de cout
                                                row.put("totalNetEnlettres", FrenchNumberToWords.convert(totalMontant).toUpperCase());
                                                datasource.add(row);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatReleveursReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                
                souscentreEnregistreursMap.clear();
                centrebilletageSouscentresMap.clear();               
                typesBruts.clear();
                typesAconsiderer.clear();
                niveauxAconsiderer.clear();               
                souscentreAvecEnregistreursList.clear();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
        }
    }//GEN-LAST:event_jButtonVisualiserEtatsActionPerformed

    private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFermerActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFermerActionPerformed

    private void jComboBoxSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSessionActionPerformed
        //remplirImputationCombobox();
    }//GEN-LAST:event_jComboBoxSessionActionPerformed

    private void jButtonCreerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerEtatsActionPerformed
        infoSaisies();        
        List<Souscentre> souscentreAvecEnregistreursList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des Enregistreurs              
        Map<Souscentre, ArrayList<Intervenant>> souscentreEnregistreursMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses Enregistreurs       

        Map<Souscentre, Integer> souscentreNbMaxEpreuveMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre maximal d'épreuves professionnelles pratiques contraignantes
        List<Souscentre> tousLesScentaplus = new ArrayList<>();//liste de tous les sous-centres à plus organisant les examens sélectionnés
        Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau des initiales de ses activités
        List<Souscentre> souscentresRattachesList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session       
        List<Souscentre> souscentresNosoList = new ArrayList<>();//contient l'ensemble des sous-centres du NOSO plus L.KOZA, L.MAKARI, L.BLANGOUA,L.OUZAL,L.MORA 
        List<Souscentre> souscentresArisquesExtNordList = new ArrayList<>();//contient l'ensemble des sous-centres du NOSO plus L.KOZA, L.MAKARI, L.BLANGOUA,L.OUZAL,L.MORA 

        if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            anneeSelected = Integer.parseInt(anneeString);
            Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES RELEVEURS DE NOTES");
            caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
            if (!caisses.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Erreur, les états de prise en charge des releveurs des notes existent déjà pour ce groupe d'examens !");
            } else {
                String separateur = ", ";
                examensList = groupedexamensEnstring.split(separateur);
                for (int i = 0; i < examensList.length; i++) {
                    for (Examen e : examens) {
                        if (e.getSigle().equals(examensList[i])) {
                            examensSelected.add(e);
                            break;
                        }
                    }
                }
                for (Session s : sessions) {
                    if (s.getAnnee() == anneeSelected) {
                        sessionSelected = s;
                        break;
                    }
                }

                for (Examen e : examensSelected) {
                    List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                    for (Statistique s : lesStats) {
                        Nbepreuveprof nbepreuveprof = metier.findAllNbepreuveprofsD1ExamenEtD1Option(e.getSigle(), s.getOption().getSigle());//s'il existe, il est unique
                        if (souscentreNbMaxEpreuveMap.containsKey(s.getSouscentre())) {
                            int nb = souscentreNbMaxEpreuveMap.get(s.getSouscentre());
                            souscentreNbMaxEpreuveMap.put(s.getSouscentre(), max(nb, nbepreuveprof.getNbprofpratique1()));
                        } else {
                            souscentreNbMaxEpreuveMap.put(s.getSouscentre(), nbepreuveprof.getNbprofpratique1());
                        }
                    }
                    List<Scentaplus> scentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, e.getSigle());
                    for (Scentaplus s : scentaplus) {
                        if (!tousLesScentaplus.contains(s.getSouscentre())) {
                            tousLesScentaplus.add(s.getSouscentre());
                        }
                    }
                    List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                    for (Nature n : lesNats) {
                        Souscentre unSouscentre = n.getSouscentre();
                        if (!souscentresRattachesList.contains(unSouscentre)) {
                            souscentresRattachesList.add(unSouscentre);
                        }
                    }
                    for (int j = 0; j < souscentresRattachesList.size(); j++) {
                        ArrayList<Character> phasesList = new ArrayList<>();
                        Souscentre s = souscentresRattachesList.get(j);
                        for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                            if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                if (!phasesList.contains(n.getActivite().getInitiale())) {
                                    phasesList.add(n.getActivite().getInitiale());
                                }
                                //pas de break ici car on doit parcourir tous lesNats
                            }
                        }
                        if (!souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {
                            souscentrePhasesMap.put(s, phasesList);
                        }
                        if (souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante

                            ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                            for (int k = 0; k < phasesList.size(); k++) {
                                if (!phasesList1.contains(phasesList.get(k))) {
                                    phasesList1.add(phasesList.get(k));
                                }
                            }
                            Collections.sort(phasesList1);
                            souscentrePhasesMap.put(s, phasesList1);
                        }
                    }
                }
                //remplissage de souscentresArisquesList
                souscentresNosoList = metier.findAllSouscentresNoso();//de l'ESG

                souscentresArisquesExtNordList = metier.findAllSouscentresArisquesExtNord();
               
                List<Intervenant> enregistreurs = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "RELEVEUR DE NOTES");               

                //sous-centres ayant des Enregistreurs
                for (Intervenant intervenant : enregistreurs) {
                    if (!souscentreAvecEnregistreursList.contains(intervenant.getSouscentre())) {
                        souscentreAvecEnregistreursList.add(intervenant.getSouscentre());
                    }
                }                            

                //remplissage de souscentreEnregistreursMap
                for (Souscentre scentre : souscentreAvecEnregistreursList) {
                    ArrayList<Intervenant> enregistreursList = new ArrayList<>();
                    for (Intervenant enregistreur : enregistreurs) {
                        if (enregistreur.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                            enregistreursList.add(enregistreur);
                        }
                    }
                    souscentreEnregistreursMap.put(scentre, enregistreursList);
                }

                boolean testsicreer = false;
                try {
                    for (Souscentre souscentre : souscentreAvecEnregistreursList) {
                        if (souscentresRattachesList.contains(souscentre)) {
                            int net = 0;                           
                            if (souscentreEnregistreursMap.containsKey(souscentre)) {
                                for (int i = 0; i < souscentreEnregistreursMap.get(souscentre).size(); i++) {
                                    Intervenant enregistreurCourant = souscentreEnregistreursMap.get(souscentre).get(i);
                                    determinerCout(enregistreurCourant.getQualite(), souscentre, souscentreNbMaxEpreuveMap, tousLesScentaplus, souscentrePhasesMap, souscentresNosoList, souscentresArisquesExtNordList);
                                    int montantArrondi = (int) Math.ceil((double) (montant) / (double) 1000) * 1000;
                                    net += montantArrondi;
                                }
                            }
                            metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                            testsicreer = true;
                        }
                    }
                } catch (ObcbudgetException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                if (testsicreer) {
                    JOptionPane.showMessageDialog(this, "Etats de prise en charge des releveurs des notes créés avec succès pour ce groupe d'examens !");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencez svp. Les champs examen(s) et session sont obligatoires !");
        }    
        souscentreEnregistreursMap.clear();       
        souscentreAvecEnregistreursList.clear();
    }//GEN-LAST:event_jButtonCreerEtatsActionPerformed

    private void jButtonMettreAjourEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMettreAjourEtatsActionPerformed
        infoSaisies();        
        List<Souscentre> souscentreAvecEnregistreursList = new ArrayList<>();//contient l'ensemble des sous-centres ayant des Enregistreurs               
        Map<Souscentre, ArrayList<Intervenant>> souscentreEnregistreursMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses Enregistreurs

        Map<Souscentre, Integer> souscentreNbMaxEpreuveMap = new HashMap<>();//contient l'ensemble des sous-centres avec leur nombre maximal d'épreuves professionnelles pratiques contraignantes
        List<Souscentre> tousLesScentaplus = new ArrayList<>();//liste de tous les sous-centres à plus organisant les examens sélectionnés
        Map<Souscentre, ArrayList<Character>> souscentrePhasesMap = new HashMap<>();//contient les sous-centres chacun avec le tableau des initiales de ses activités
        List<Souscentre> souscentresRattachesList = new ArrayList<>();//contient l'ensemble des sous-centres issus des rattachements de la session       
        List<Souscentre> souscentresNosoList = new ArrayList<>();//contient l'ensemble des sous-centres du NOSO plus L.KOZA, L.MAKARI, L.BLANGOUA,L.OUZAL,L.MORA 
        List<Souscentre> souscentresArisquesExtNordList = new ArrayList<>();//contient l'ensemble des sous-centres du NOSO plus L.KOZA, L.MAKARI, L.BLANGOUA,L.OUZAL,L.MORA 
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier les états de prise en charge des releveurs des notes pour ce groupe d'examens ?", "confirmation de modification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES RELEVEURS DE NOTES");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de prise en charge des releveurs des notes n'existe pour ce groupe d'examens !");
                } else {
                    //on conserve quelques info de ces anciennes caisses
                    Groupe groupe = caisses.get(0).getGroupe();
                    sessionSelected = caisses.get(0).getSession();
                    //on supprime toutes les anciennes caisses du groupe d'examens
                    for (Caisse c : caisses) {
                        metier.supprimerCaisse(c);
                    }
                    String separateur = ", ";
                    examensList = groupedexamensEnstring.split(separateur);
                    for (int i = 0; i < examensList.length; i++) {
                        for (Examen e : examens) {
                            if (e.getSigle().equals(examensList[i])) {
                                examensSelected.add(e);
                                break;
                            }
                        }
                    }

                    for (Examen e : examensSelected) {
                        List<Statistique> lesStats = metier.findAllStatistiquesD1ExamenDans1Session(e.getSigle(), anneeSelected);
                        for (Statistique s : lesStats) {
                            Nbepreuveprof nbepreuveprof = metier.findAllNbepreuveprofsD1ExamenEtD1Option(e.getSigle(), s.getOption().getSigle());//s'il existe, il est unique
                            if (souscentreNbMaxEpreuveMap.containsKey(s.getSouscentre())) {
                                int nb = souscentreNbMaxEpreuveMap.get(s.getSouscentre());
                                souscentreNbMaxEpreuveMap.put(s.getSouscentre(), max(nb, nbepreuveprof.getNbprofpratique1()));
                            } else {
                                souscentreNbMaxEpreuveMap.put(s.getSouscentre(), nbepreuveprof.getNbprofpratique1());
                            }
                        }
                        List<Scentaplus> scentaplus = metier.findAllScentaplusD1ExamenEt1Session(anneeSelected, e.getSigle());
                        for (Scentaplus s : scentaplus) {
                            if (!tousLesScentaplus.contains(s.getSouscentre())) {
                                tousLesScentaplus.add(s.getSouscentre());
                            }
                        }
                        List<Nature> lesNats = metier.findAllNaturesD1ExamenDans1Session(anneeSelected, e.getSigle());//toutes les natures de l'examen e
                        for (Nature n : lesNats) {
                            Souscentre unSouscentre = n.getSouscentre();
                            if (!souscentresRattachesList.contains(unSouscentre)) {
                                souscentresRattachesList.add(unSouscentre);
                            }
                        }
                        for (int j = 0; j < souscentresRattachesList.size(); j++) {
                            ArrayList<Character> phasesList = new ArrayList<>();
                            Souscentre s = souscentresRattachesList.get(j);
                            for (Nature n : lesNats) {//on recherche toutes les activités du présent sous-centre
                                if (n.getSouscentre().getNomsouscent().equals(s.getNomsouscent())) {
                                    if (!phasesList.contains(n.getActivite().getInitiale())) {
                                        phasesList.add(n.getActivite().getInitiale());
                                    }
                                    //pas de break ici car on doit parcourir tous lesNats
                                }
                            }
                            if (!souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {
                                souscentrePhasesMap.put(s, phasesList);
                            }
                            if (souscentrePhasesMap.containsKey(s) && !phasesList.isEmpty()) {//ce sous-centre organise plus d'un examen. On doit comparer ses activités déjà dans souscentrePhasesMap et celles liées au présent examen puis y insérer l'activité manquante

                                ArrayList<Character> phasesList1 = souscentrePhasesMap.get(s);
                                for (int k = 0; k < phasesList.size(); k++) {
                                    if (!phasesList1.contains(phasesList.get(k))) {
                                        phasesList1.add(phasesList.get(k));
                                    }
                                }
                                Collections.sort(phasesList1);
                                souscentrePhasesMap.put(s, phasesList1);
                            }
                        }
                    }
                    //remplissage de souscentresArisquesList
                    souscentresNosoList = metier.findAllSouscentresNoso();//de l'ESG

                    souscentresArisquesExtNordList = metier.findAllSouscentresArisquesExtNord();
                   
                    List<Intervenant> enregistreurs = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "RELEVEUR DE NOTES");                   

                    //sous-centres ayant des Enregistreurs
                    for (Intervenant intervenant : enregistreurs) {
                        if (!souscentreAvecEnregistreursList.contains(intervenant.getSouscentre())) {
                            souscentreAvecEnregistreursList.add(intervenant.getSouscentre());
                        }
                    }                                    

                    //remplissage de souscentreEnregistreursMap
                    for (Souscentre scentre : souscentreAvecEnregistreursList) {
                        ArrayList<Intervenant> enregistreursList = new ArrayList<>();
                        for (Intervenant enregistreur : enregistreurs) {
                            if (enregistreur.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                                enregistreursList.add(enregistreur);
                            }
                        }
                        souscentreEnregistreursMap.put(scentre, enregistreursList);
                    }

                    boolean testsimodifier = false;
                    try {
                        for (Souscentre souscentre : souscentreAvecEnregistreursList) {
                            if (souscentresRattachesList.contains(souscentre)) {
                                int net = 0;                                
                                if (souscentreEnregistreursMap.containsKey(souscentre)) {
                                    for (int i = 0; i < souscentreEnregistreursMap.get(souscentre).size(); i++) {
                                        Intervenant enregistreurCourant = souscentreEnregistreursMap.get(souscentre).get(i);
                                        determinerCout(enregistreurCourant.getQualite(), souscentre, souscentreNbMaxEpreuveMap, tousLesScentaplus, souscentrePhasesMap, souscentresNosoList, souscentresArisquesExtNordList);
                                        int montantArrondi = (int) Math.ceil((double) (montant) / (double) 1000) * 1000;
                                        net += montantArrondi;
                                    }
                                }
                                metier.creerCaisse(new Caisse(net, 0, 0, 0, groupe, rubetat, sessionSelected, souscentre, false));
                                testsimodifier = true;
                            }
                        }
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testsimodifier) {
                        JOptionPane.showMessageDialog(this, "Etats de prise en charge des releveurs des notes mis à jour avec succès pour ce groupe d'examens !");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Les champs examens et session sont obligatoires !");
            }          
            souscentreEnregistreursMap.clear();           
            souscentreAvecEnregistreursList.clear();
        }
    }//GEN-LAST:event_jButtonMettreAjourEtatsActionPerformed

    private void jButtonSupprimerEtatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerEtatsActionPerformed
        infoSaisies();
        int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer les états de prise en charge des relveurs des notes pour ce groupe d'examens ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            if (!groupedexamensEnstring.equals("") && !anneeString.equals("---")) {
                anneeSelected = Integer.parseInt(anneeString);
                Rubriquetat rubetat = metier.findRubriquetatByDesignation("PRISE EN CHARGE DES RELEVEURS DE NOTES");
                caisses = metier.findAllCaissesD1GroupedexamensDans1RubriquetatEt1Session(rubetat.getDesignation(), anneeSelected, niveauSelected, typeSelected);
                if (caisses.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Erreur, aucun état de prise en charge des releveurs des notes n'existe pour ce groupe d'examens !");
                } else {
                    boolean testsisupprimer = false;
                    try {
                        for (Caisse caisse : caisses) {
                            metier.supprimerCaisse(caisse);
                            testsisupprimer = true;
                        }
                    } catch (ObcbudgetException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                    if (testsisupprimer) {
                        JOptionPane.showMessageDialog(this, "Etats de prise en charge des releveurs des notes supprimés avec succès pour ce groupe d'examens !");
                    }
                }
            }
        }

    }//GEN-LAST:event_jButtonSupprimerEtatsActionPerformed

    private void jComboBoxDepartementSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementSouscentreActionPerformed
        remplirArrondissementSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxDepartementSouscentreActionPerformed

    private void jComboBoxArrondissementSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementSouscentreActionPerformed
        remplirSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementSouscentreActionPerformed

    private void jComboBoxSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSouscentreActionPerformed
        //jTextField1.setText();
    }//GEN-LAST:event_jComboBoxSouscentreActionPerformed

    private void jComboBoxRegionSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionSouscentreActionPerformed
        remplirDepartementSouscentreCombobox();
    }//GEN-LAST:event_jComboBoxRegionSouscentreActionPerformed

    private void jComboBoxDepartementListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepartementListeActionPerformed
        remplirArrondissementListeCombobox();
        remplirPersonnelsDuDepartementCombobox();
    }//GEN-LAST:event_jComboBoxDepartementListeActionPerformed

    private void jComboBoxArrondissementListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArrondissementListeActionPerformed
        remplirPersonnelsDelArrondissementCombobox();
    }//GEN-LAST:event_jComboBoxArrondissementListeActionPerformed

    private void jComboBoxNomsEtPrenomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNomsEtPrenomsActionPerformed
        nomsEtPrenomsSelected = (String) jComboBoxNomsEtPrenoms.getSelectedItem();
        if (!nomsEtPrenomsSelected.equals("---")) {
            for (Personnel p : personnels) {
                if ((p.getNompers() + " " + p.getPrenom()).equals(nomsEtPrenomsSelected)) {
                    personnelSelected = p;
                    break;
                }
            }
        }
    }//GEN-LAST:event_jComboBoxNomsEtPrenomsActionPerformed

    private void jComboBoxRegionListeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegionListeActionPerformed
        remplirDepartementListeCombobox();
    }//GEN-LAST:event_jComboBoxRegionListeActionPerformed

    private void jButtonSupprimerExaminateursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerExaminateursActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nomsEtPrenomsSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre et un releveur !");
        } else {
            int result = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer ce releveur du sous-centre [" + nomSouscentreSelected + "] ?", "confirmation de suppression", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                anneeSelected = Integer.parseInt(anneeString);
                String qualite = "";
                try {
                    qualite = "RELEVEUR DE NOTES";
                    Intervenant intervenant = metier.findIntervenantByNomEtPrenomD1GroupeDexamensD1SessionD1SouscentreD1ActiviteEt1Qualite(personnelSelected.getNompers(), personnelSelected.getPrenom(), anneeSelected, nomSouscentreSelected, niveauSelected, typeSelected, phase, qualite);
                    metier.supprimerIntervenant(intervenant);
                    JOptionPane.showMessageDialog(this, qualite + " supprimé avec succès !");
                } catch (ObcbudgetException ex) {
                    JOptionPane.showMessageDialog(this, "Impossible de supprimer ce releveur du sous-centre [" + nomSouscentreSelected + "] \n raison:" + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonSupprimerExaminateursActionPerformed

    private void jButtonAnnulerExaminateursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerExaminateursActionPerformed
        jComboBoxRegionListe.setSelectedIndex(0);
        jComboBoxDepartementListe.setSelectedIndex(0);
        jComboBoxArrondissementListe.setSelectedIndex(0);
        jComboBoxNomsEtPrenoms.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerExaminateursActionPerformed

    private void jButtonCreerExaminateursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerExaminateursActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---") || nomSouscentreSelected.equals("---") || nomsEtPrenomsSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens, une session, un sous-centre et un releveur !");
        } else {
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            anneeSelected = Integer.parseInt(anneeString);
            Intervenant intervenantCreated = null;
            boolean testSiCreerIntervenant = false;
            for (Session s : sessions) {
                if (s.getAnnee() == anneeSelected) {
                    sessionSelected = s;
                    break;
                }
            }
            for (Souscentre souscentre : souscentres) {
                if (souscentre.getNomsouscent().equals(nomSouscentreSelected)) {
                    souscentreSelected = souscentre;
                    break;
                }
            }
            Qualite qualite = new Qualite();
            try {
                //personnelSelected est déterminé au moment du clic sur leur jcombox
                Activite activite = metier.findActiviteByNom(phase);

                qualite = metier.findQualiteByTitre("RELEVEUR DE NOTES");

                boolean resident = false;
                intervenantCreated = new Intervenant(groupe, sessionSelected, personnelSelected, souscentreSelected, activite, qualite, resident);
                metier.creerIntervenant(intervenantCreated);
                testSiCreerIntervenant = true;
            } catch (ObcbudgetException ex) {
                testSiCreerIntervenant = false;
            }
            if (!testSiCreerIntervenant) {
                JOptionPane.showMessageDialog(this, "Impossible de créer l'" + qualite.getTitre() + " pour le sous-centre [" + nomSouscentreSelected + "]");
            } else {
                JOptionPane.showMessageDialog(this, qualite.getTitre() + " créé avec succès !");
            }
        }
    }//GEN-LAST:event_jButtonCreerExaminateursActionPerformed

    private void jButtonListerExaminateursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListerExaminateursActionPerformed
        infoSaisies();
        if (groupedexamensEnstring.equals("") || anneeString.equals("---")) {
            JOptionPane.showMessageDialog(this, "Recommencez svp. Vous devez choisir un groupe d'examens et une session !");
        } else {
            anneeSelected = Integer.parseInt(anneeString);
            Map<Souscentre, ArrayList<Intervenant>> souscentreEnregistreursMap = new HashMap<>();//contient les sous-centres chacun avec le tableau de ses Enregistreurs           
            List<Intervenant> enregistreurs = metier.findAllIntervenantsD1GroupeDexamensD1SessionD1ActiviteEt1Qualite(anneeSelected, niveauSelected, typeSelected, phase, "RELEVEUR DE NOTES");

            //déterminer les sous-centres
            ArrayList<Souscentre> souscentresList = new ArrayList<>();
            if (!enregistreurs.isEmpty()) {
                for (int i = 0; i < enregistreurs.size(); i++) {
                    if (!souscentresList.contains(enregistreurs.get(i).getSouscentre())) {
                        souscentresList.add(enregistreurs.get(i).getSouscentre());
                    }
                }
            }

            //remplissage de souscentreEnregistreursMap
            for (Souscentre scentre : souscentresList) {
                ArrayList<Intervenant> enregistreursList = new ArrayList<>();
                for (Intervenant enregistreur : enregistreurs) {
                    if (enregistreur.getSouscentre().getNomsouscent().equals(scentre.getNomsouscent())) {
                        enregistreursList.add(enregistreur);
                    }
                }
                souscentreEnregistreursMap.put(scentre, enregistreursList);
            }

            if (!souscentresList.isEmpty()) {
                try {
                    List<Map<String, Object>> datasource = new ArrayList<Map<String, Object>>();
                    for (Region region : regions) {
                        int i = 1;
                        for (Souscentre souscentre : souscentresList) {
                            if (souscentre.getEtablissement().getArrondissement().getDepartement().getRegion().getNomreg().equals(region.getNomreg())) {
                                ArrayList<Intervenant> sesEnregistreurs = souscentreEnregistreursMap.get(souscentre);
                                int nbEnreg = sesEnregistreurs.size();
                                int nbtours = nbEnreg;
                                String person = "";
                                String qual = "";

                                for (int k = 0; k < nbtours; k++) {
                                    person = sesEnregistreurs.get(k).getPersonnel().getNompers() + " " + sesEnregistreurs.get(k).getPersonnel().getPrenom();
                                    qual = "Releveur";

                                    Map<String, Object> row = new HashMap<>();
                                    row.put("session", anneeSelected);
                                    row.put("examen", groupedexamensEnstring);
                                    row.put("region", region.getNomreg());
                                    row.put("num", i++);
                                    row.put("souscentre", souscentre.getNomsouscent());
                                    row.put("person", person);
                                    row.put("qualite", qual);
                                    datasource.add(row);
                                }
                            }
                        }
                    }
                    JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                    JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\etatListeReleveursReport.jrxml");
                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                    jasperViewer.setVisible(true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButtonListerExaminateursActionPerformed

    private void jButtonAnnulerChoixExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixExamenActionPerformed
        jComboBoxNiveau.setSelectedIndex(0);
        jComboBoxType.setSelectedIndex(0);
        jTextArea1.setText("");
        jComboBoxSession.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixExamenActionPerformed

    private void jButtonAnnulerChoixSouscentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerChoixSouscentreActionPerformed
        jComboBoxRegionSouscentre.setSelectedIndex(0);
        jComboBoxDepartementSouscentre.setSelectedIndex(0);
        jComboBoxArrondissementSouscentre.setSelectedIndex(0);
        jComboBoxSouscentre.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonAnnulerChoixSouscentreActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        if (!niveauSelected.equals("---")) {
            remplirExamensTextArea();
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jButtonImporterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImporterActionPerformed
        anneeString = (String) jComboBoxSession.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        if (!anneeString.equals("---") && !groupedexamensEnstring.equals("")) {
            class personnelNonSave {//classe interne devant contenir un personnel non sauvegardé dans la BD

                String nom;
                String prenom;
                String fonction;
                String structure;
                String arrondissement;
                String nomScentre;
                String qualite;

                public personnelNonSave(String nom, String prenom, String fonction, String structure, String arrondissement, String nomScentre, String qualite) {
                    this.nom = nom;
                    this.prenom = prenom;
                    this.fonction = fonction;
                    this.structure = structure;
                    this.arrondissement = arrondissement;
                    this.nomScentre = nomScentre;
                    this.qualite = qualite;
                }

            }
            ArrayList<personnelNonSave> personnelNonSaveList = new ArrayList<>();//liste de tous les personnels non sauvegardés dans la BD
            Groupe groupe = metier.findGroupeD1NiveauEtD1Type(niveauSelected, typeSelected);
            anneeSelected = Integer.parseInt(anneeString);
            for (Session s : sessions) {
                if (s.getAnnee() == anneeSelected) {
                    sessionSelected = s;
                    break;
                }
            }

            JFileChooser choix = new JFileChooser();
            int retour = choix.showOpenDialog(this);
            if (retour == JFileChooser.APPROVE_OPTION) {
                // un fichier a été choisi (sortie par OK)
                // nom du fichier  choisi 
                //String nomFichier = choix.getSelectedFile().getName();
                // chemin absolu du fichier choisi
                String cheminFichier = choix.getSelectedFile().getAbsolutePath();
                //JOptionPane.showMessageDialog(this, "Nom du fichier choisi:" + nomFichier+" \n Chemin du fichier:"+cheminFichier);

                try {
                    //long start = System.currentTimeMillis();

                    FileInputStream inputStream = new FileInputStream(cheminFichier);

                    XSSFWorkbook workbook = new XSSFWorkbook(inputStream);//XSSFWorkbook pour windows 2007 d'extension xlsx; HSSFWorkbook pour excel 97 et 2003 d'extension xls

                    Sheet firstSheet = workbook.getSheetAt(0);
                    Iterator<Row> rowIterator = firstSheet.iterator();

                    rowIterator.next(); // skip the header row

                    while (rowIterator.hasNext()) {
                        boolean continuerFonction = true;
                        boolean continuerScentre = true;
                        boolean continuerArrond = true;
                        Row nextRow = rowIterator.next();
                        Iterator<Cell> cellIterator = nextRow.cellIterator();
                        Fonction fonct = new Fonction();
                        Souscentre souscentre = new Souscentre();
                        Arrondissement arrond = new Arrondissement();
                        Personnel pers = new Personnel();
                        Intervenant intervenantCreated = null;
                        String nompers = "";
                        String prenompers = "";
                        String nomstruct = "";
                        String nomfonct = "";
                        String nomarrond = "";
                        String scentre = "";
                        String valqual = "";
                        while (cellIterator.hasNext()) {
                            Cell nextCell = cellIterator.next();
                            int columnIndex = nextCell.getColumnIndex();

                            switch (columnIndex) {
                                case 0:
                                    nompers = nextCell.getStringCellValue();
                                    break;
                                case 1:
                                    prenompers = nextCell.getStringCellValue();
                                    break;
                                case 2:
                                    nomfonct = nextCell.getStringCellValue();
                                    try {
                                        fonct = metier.findFonctionByTitre(nomfonct);
                                    } catch (Exception e) {
                                        continuerFonction = false;
                                    }
                                    break;
                                case 3:
                                    valqual = nextCell.getStringCellValue();
                                    break;
                                case 4:
                                    nomstruct = nextCell.getStringCellValue();
                                    break;
                                case 5:
                                    nomarrond = nextCell.getStringCellValue();
                                    try {
                                        arrond = metier.findArrondissementByName(nomarrond);
                                    } catch (Exception e) {
                                        continuerArrond = false;
                                    }
                                    break;
                                case 6:
                                    scentre = nextCell.getStringCellValue();
                                    try {
                                        souscentre = metier.findSouscentreByName(scentre);
                                    } catch (Exception e) {
                                        continuerScentre = false;
                                    }
                                    break;
                            }
                        }

                        Activite activite = metier.findActiviteByNom("CORRECTION");

                        if (continuerScentre && continuerFonction && continuerArrond) {
                            pers = metier.creerPersonnel(new Personnel(nompers.toUpperCase(), prenompers.toUpperCase(), nomstruct.toUpperCase(), fonct, arrond));
                            boolean resident = false;
                            Qualite qualite = metier.findQualiteByTitre("RELEVEUR DE NOTES");

                            intervenantCreated = metier.creerIntervenant(new Intervenant(groupe, sessionSelected, pers, souscentre, activite, qualite, resident));

                        } else {
                            personnelNonSaveList.add(new personnelNonSave(nompers, prenompers, nomfonct, nomstruct, nomarrond, scentre, valqual));//impossible de sauvegarder personnel et intervenant
                        }
                    }

                    workbook.close();

                } catch (IOException ex1) {
                    System.out.println("Error reading file");
                    ex1.printStackTrace();
                }

                if (personnelNonSaveList.size() > 0) {
                    JOptionPane.showMessageDialog(this, "Attention ! Attention ! Plusieurs données n'ont pas été importées dans la base des données !");
                    try {
                        List<Map<String, Object>> datasource = new ArrayList<>();
                        int i = 1;
                        for (personnelNonSave pers : personnelNonSaveList) {
                            Map<String, Object> row = new HashMap<>();
                            row.put("examen", groupedexamensEnstring);
                            row.put("session", sessionSelected.getAnnee());
                            row.put("num", i++);
                            row.put("nompers", pers.nom + " " + pers.prenom);
                            row.put("qualite", pers.qualite);
                            row.put("nomfonct", pers.fonction);
                            row.put("nomstruct", pers.structure);
                            row.put("nomarrond", pers.arrondissement);
                            row.put("souscentre", pers.nomScentre);
                            datasource.add(row);

                        }
                        JRDataSource jRDataSource = new JRBeanCollectionDataSource(datasource);
                        JasperReport jasperReport = JasperCompileManager.compileReport("src\\main\\java\\reports\\releveursNonSauvegardesReport.jrxml");
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, jRDataSource);
                        JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);//false empêche jasperviewer de fermer l'appli lorsqu'on le ferme
                        jasperViewer.setVisible(true);
                    } catch (JRException e) {
                        JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Importation effectuée avec succès !");
                }
            } else {
                //... ;// pas de fichier choisi
                JOptionPane.showMessageDialog(this, "Aucun choix effectué !");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez recommencer svp. Vous devez choisir un groupe d'examens et une session !");
        }
    }//GEN-LAST:event_jButtonImporterActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VueEtatReleveursNotes.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VueEtatReleveursNotes.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VueEtatReleveursNotes.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VueEtatReleveursNotes.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VueEtatReleveursNotes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonAnnulerChoixExamen;
    private javax.swing.JButton jButtonAnnulerChoixSouscentre;
    private javax.swing.JButton jButtonAnnulerExaminateurs;
    private javax.swing.JButton jButtonCreerEtats;
    private javax.swing.JButton jButtonCreerExaminateurs;
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JButton jButtonImporter;
    private javax.swing.JButton jButtonListerExaminateurs;
    private javax.swing.JButton jButtonMettreAjourEtats;
    private javax.swing.JButton jButtonSupprimerEtats;
    private javax.swing.JButton jButtonSupprimerExaminateurs;
    private javax.swing.JButton jButtonVisualiserEtats;
    private javax.swing.JComboBox<String> jComboBoxArrondissementListe;
    private javax.swing.JComboBox<String> jComboBoxArrondissementSouscentre;
    private javax.swing.JComboBox<String> jComboBoxDepartementListe;
    private javax.swing.JComboBox<String> jComboBoxDepartementSouscentre;
    private javax.swing.JComboBox<String> jComboBoxNiveau;
    private javax.swing.JComboBox<String> jComboBoxNomsEtPrenoms;
    private javax.swing.JComboBox<String> jComboBoxRegionListe;
    private javax.swing.JComboBox<String> jComboBoxRegionSouscentre;
    private javax.swing.JComboBox<String> jComboBoxSession;
    private javax.swing.JComboBox<String> jComboBoxSouscentre;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelArrondissementListe;
    private javax.swing.JLabel jLabelArrondissementSouscentre;
    private javax.swing.JLabel jLabelDepartementListe;
    private javax.swing.JLabel jLabelDepartementSouscentre;
    private javax.swing.JLabel jLabelExamen;
    private javax.swing.JLabel jLabelNiveauExamen;
    private javax.swing.JLabel jLabelPersonnel;
    private javax.swing.JLabel jLabelRegionListe;
    private javax.swing.JLabel jLabelRegionSouscentre;
    private javax.swing.JLabel jLabelSession;
    private javax.swing.JLabel jLabelSouscentre;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JPanel jPanelChoixExamen;
    private javax.swing.JPanel jPanelChoixSouscentre;
    private javax.swing.JPanel jPanelExaminateurs;
    private javax.swing.JPanel jPanelGestionEtat;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    // variables d'instance
    private IMetier metier = null;
    private List<Session> sessions = null;
    private List<Region> regions = null;
    private List<Examen> examens = null;
    private Examen examenSelected = null;
    private String[] examensList = null;
    private List<Examen> examensSelected = new ArrayList<>();
    private List<Departement> departementsSouscentre = null;
    private List<Arrondissement> arrondissementsSouscentre = null;
    private List<Departement> departementsListe = null;
    private List<Arrondissement> arrondissementsListe = null;
    private List<Souscentre> souscentres = null;
    private Souscentre souscentreSelected = null;
    private String[] sessionsCombo = null;
    private String[] regionsSouscentreCombo = null;
    private String[] departementsSouscentreCombo = null;
    private String[] arrondissementsSouscentreCombo = null;
    private String[] souscentresCombo = null;
    private String[] regionsListeCombo = null;
    private String[] departementsListeCombo = null;
    private String[] arrondissementsListeCombo = null;
    private String nomRegionSouscentreSelected = "";
    private String nomDepartementSouscentreSelected = "";
    private String nomArrondissementSouscentreSelected = "";
    private String nomRegionListeSelected = "";
    private String nomDepartementListeSelected = "";
    private String nomArrondissementListeSelected = "";
    private String nomSouscentreSelected = "";
    private int anneeSelected = 0;
    private String anneeString = "";
    private Session sessionSelected = null;
    private String phase = "CORRECTION";
    private List<Caisse> caisses = null;
    private String niveauSelected = "";
    private String typeSelected = "";
    private String[] typesCombo = null;
    private String[] niveauxCombo = null;
    private String groupedexamensEnstring = "";
    private List<Groupedexamen> groupedexamens = null;
    private int coutvac = 0, primeconfid = 0, nbjour = 0, entretien = 0, transport = 0, montant = 0;
    private String nomsEtPrenomsSelected = "";
    private Personnel personnelSelected = null;
    private List<Personnel> personnels = null;
    private String[] nomsEtPrenomsCombo = null;
    private List<Intervenant> intervenants = null;
    private String phasesPourAffichage = "";

    private void doMyInit() {
        // init contexte
        // instanciation couche [metier]
        ApplicationContext ctx = new ClassPathXmlApplicationContext("spring-config-metier.xml");
        metier = (IMetier) ctx.getBean("metier");
        sessions = metier.findAllSessions();
        regions = metier.findAllRegions();
        souscentres = metier.findAllSouscentres();
        examens = metier.findAllExamens();

        //on remplit la combobox des régions du sous-centre
        regionsSouscentreCombo = new String[regions.size() + 1];
        regionsSouscentreCombo[0] = "---";
        int i = 1;
        for (Region region : regions) {
            regionsSouscentreCombo[i++] = region.getNomreg();
        }
        jComboBoxRegionSouscentre.setModel(new DefaultComboBoxModel(regionsSouscentreCombo));

        //on remplit la combobox des régions des examinateurs
        regionsListeCombo = new String[regions.size() + 1];
        regionsListeCombo[0] = "---";
        int j = 1;
        for (Region region : regions) {
            regionsListeCombo[j++] = region.getNomreg();
        }
        jComboBoxRegionListe.setModel(new DefaultComboBoxModel(regionsListeCombo));

        //on remplit la combobox des sessions
        sessionsCombo = new String[sessions.size() + 1];
        sessionsCombo[0] = "---";
        int k = 1;
        for (Session session : sessions) {
            if (!session.isCloturee()) {
                sessionsCombo[k++] = "" + session.getAnnee();
            }
        }
        jComboBoxSession.setModel(new DefaultComboBoxModel(sessionsCombo));

        //on remplit la combobox des types
        typesCombo = new String[]{"---", "GEN", "IND", "IND PROF", "STT", "STT PROF"};
        jComboBoxType.setModel(new DefaultComboBoxModel(typesCombo));

        //on remplit la combobox des niveaux
        niveauxCombo = new String[]{"---", "PROB", "BACC"};
        jComboBoxNiveau.setModel(new DefaultComboBoxModel(niveauxCombo));

        remplirDepartementSouscentreCombobox();
        remplirArrondissementSouscentreCombobox();
        remplirSouscentreCombobox();
        remplirDepartementListeCombobox();
        remplirArrondissementListeCombobox();
        remplirPersonnelsDelArrondissementCombobox();
        remplirPersonnelsDuDepartementCombobox();
    }

    private void infoSaisies() {
        nomSouscentreSelected = (String) jComboBoxSouscentre.getSelectedItem();
        anneeString = (String) jComboBoxSession.getSelectedItem();
        nomsEtPrenomsSelected = (String) jComboBoxNomsEtPrenoms.getSelectedItem();
        niveauSelected = (String) jComboBoxNiveau.getSelectedItem();
        typeSelected = (String) jComboBoxType.getSelectedItem();
        groupedexamensEnstring = jTextArea1.getText();
    }

    private void remplirDepartementSouscentreCombobox() {
        nomRegionSouscentreSelected = (String) jComboBoxRegionSouscentre.getSelectedItem();
        departementsSouscentre = metier.findAllDepartementsD1Region(nomRegionSouscentreSelected);
        //on remplit la combobox des départements du sous-centre
        departementsSouscentreCombo = new String[departementsSouscentre.size() + 1];
        departementsSouscentreCombo[0] = "---";
        int i = 1;
        for (Departement departement : departementsSouscentre) {
            departementsSouscentreCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartementSouscentre.setModel(new DefaultComboBoxModel(departementsSouscentreCombo));
    }

    private void remplirArrondissementSouscentreCombobox() {
        nomDepartementSouscentreSelected = (String) jComboBoxDepartementSouscentre.getSelectedItem();
        arrondissementsSouscentre = metier.findAllArrondissementsD1Departement(nomDepartementSouscentreSelected);
        //on remplit la combobox des arrondissements
        arrondissementsSouscentreCombo = new String[arrondissementsSouscentre.size() + 1];
        arrondissementsSouscentreCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissementsSouscentre) {
            arrondissementsSouscentreCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissementSouscentre.setModel(new DefaultComboBoxModel(arrondissementsSouscentreCombo));
    }

    private void remplirSouscentreCombobox() {
        nomArrondissementSouscentreSelected = (String) jComboBoxArrondissementSouscentre.getSelectedItem();
        souscentres = metier.findAllSouscentresD1Arrondissement(nomArrondissementSouscentreSelected);
        //on remplit la combobox des sous-centres
        souscentresCombo = new String[souscentres.size() + 1];
        souscentresCombo[0] = "---";
        int i = 1;
        for (Souscentre souscentre : souscentres) {
            souscentresCombo[i++] = souscentre.getNomsouscent();
        }
        jComboBoxSouscentre.setModel(new DefaultComboBoxModel(souscentresCombo));
    }

    private void remplirDepartementListeCombobox() {
        nomRegionListeSelected = (String) jComboBoxRegionListe.getSelectedItem();
        departementsListe = metier.findAllDepartementsD1Region(nomRegionListeSelected);
        //on remplit la combobox des départements des examinateurs
        departementsListeCombo = new String[departementsListe.size() + 1];
        departementsListeCombo[0] = "---";
        int i = 1;
        for (Departement departement : departementsListe) {
            departementsListeCombo[i++] = departement.getNomdepart();
        }
        jComboBoxDepartementListe.setModel(new DefaultComboBoxModel(departementsListeCombo));
    }

    private void remplirArrondissementListeCombobox() {
        nomDepartementListeSelected = (String) jComboBoxDepartementListe.getSelectedItem();
        arrondissementsListe = metier.findAllArrondissementsD1Departement(nomDepartementListeSelected);
        //on remplit la combobox des arrondissements des examinateurs
        arrondissementsListeCombo = new String[arrondissementsListe.size() + 1];
        arrondissementsListeCombo[0] = "---";
        int i = 1;
        for (Arrondissement arrondissement : arrondissementsListe) {
            arrondissementsListeCombo[i++] = arrondissement.getNomarr();
        }
        jComboBoxArrondissementListe.setModel(new DefaultComboBoxModel(arrondissementsListeCombo));
    }

    private void remplirPersonnelsDelArrondissementCombobox() {
        nomArrondissementListeSelected = (String) jComboBoxArrondissementListe.getSelectedItem();
        personnels = metier.findAllPersonnelsD1Arrondissement(nomArrondissementListeSelected);
        //on remplit la combobox
        nomsEtPrenomsCombo = new String[personnels.size() + 1];
        nomsEtPrenomsCombo[0] = "---";
        int i = 1;
        for (Personnel personnel : personnels) {
            nomsEtPrenomsCombo[i] = personnel.getNompers() + " " + personnel.getPrenom();
            i++;
        }
        jComboBoxNomsEtPrenoms.setModel(new DefaultComboBoxModel(nomsEtPrenomsCombo));
    }

    private void remplirPersonnelsDuDepartementCombobox() {
        nomDepartementListeSelected = (String) jComboBoxDepartementListe.getSelectedItem();
        personnels = metier.findAllPersonnelsD1Departement(nomDepartementListeSelected);
        //on remplit la combobox
        nomsEtPrenomsCombo = new String[personnels.size() + 1];
        nomsEtPrenomsCombo[0] = "---";
        int i = 1;
        for (Personnel personnel : personnels) {
            nomsEtPrenomsCombo[i] = personnel.getNompers() + " " + personnel.getPrenom();
            i++;
        }
        jComboBoxNomsEtPrenoms.setModel(new DefaultComboBoxModel(nomsEtPrenomsCombo));
    }

    private void determinerCout(Qualite qual, Souscentre souscentre, Map<Souscentre, Integer> souscentreNbMaxEpreuveMap, List<Souscentre> tousLesScentaplus, Map<Souscentre, ArrayList<Character>> souscentrePhasesMap, List<Souscentre> souscentresNosoList, List<Souscentre> souscentresArisquesExtNordList) {
        int vac = 0;

        //la liste des examens contient-il un BP IND ou BP COM?
        boolean test = false;
        for (Examen e : examensSelected) {
            if (e.getSigle().equals("BP IND") || e.getSigle().equals("BP COM")) {
                test = true;
                break;
            }
        }

        ArrayList<Character> phasesList = souscentrePhasesMap.get(souscentre);
        String phasesEnchaine = "";
        if (!phasesList.isEmpty()) {
            for (char c : phasesList) {
                if (c != 'T' && c != 'S') {
                    phasesEnchaine += c;
                }
            }
        }
        if (tousLesScentaplus.contains(souscentre)) {
            phasesPourAffichage = phasesEnchaine + "+";
        } else {
            phasesPourAffichage = phasesEnchaine;
        }

        //on détermine le nombre de vacations: il est fonction du niveau et du type d'examen 
        if (typeSelected.equals("IND") || typeSelected.equals("IND PROF")) {
            if (phasesEnchaine.equals("E")) {
                if (tousLesScentaplus.contains(souscentre)) {
                    vac = 44;
                } else {
                    vac = 32;
                }
            }
            if (phasesEnchaine.equals("EP")) {
                if (tousLesScentaplus.contains(souscentre)) {
                    vac = 44;
                } else {
                    if (test) {
                        vac = 64;
                    } else {
                        vac = 32;
                    }
                }
            }
            if (phasesEnchaine.equals("CDP")) {
                if (tousLesScentaplus.contains(souscentre)) {
                    vac = 66;
                } else {
                    vac = 54;
                }
            }
            if (phasesEnchaine.equals("CDE")) {
                if (tousLesScentaplus.contains(souscentre)) {
                    vac = 86;
                } else {
                    vac = 74;
                }
            }
            if (phasesEnchaine.equals("CDEP")) {
                if (tousLesScentaplus.contains(souscentre)) {
                    if (test) {
                        vac = 66;
                    } else {
                        vac = 86;
                    }
                } else {
                    if (test) {
                        vac = 64;
                    } else {
                        vac = 74;
                    }
                }
            }
            //aux examens industriels la durée du secrétariat est fonction du nombre d'épreuves professionnelles contraignantes
            //on détermine la durée en jour du secrétariat
            //nbjour = 5;
            /*
            if (souscentreNbMaxEpreuveMap.get(souscentre) == 1) {
                nbjour = 9;
            }
            if (souscentreNbMaxEpreuveMap.get(souscentre) > 1) {
                nbjour = 12;
            }
             */
        }
        if (typeSelected.equals("GEN") && niveauSelected.equals("BACC")) {
            if (phasesPourAffichage.equals("E") || phasesPourAffichage.equals("E+") || phasesPourAffichage.equals("EP")) {
                vac = 27;
            }
            if (phasesPourAffichage.equals("CE") || phasesPourAffichage.equals("CE+") || phasesPourAffichage.equals("CEP") || phasesPourAffichage.equals("CEP+")) {
                vac = 44;
            }
            if (phasesPourAffichage.equals("CDE") || phasesPourAffichage.equals("CDE+") || phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                vac = 73;
            }
            //nbjour = 7;//5
        }
        if (typeSelected.equals("GEN") && niveauSelected.equals("PROB")) {
            if (phasesPourAffichage.equals("E") || phasesPourAffichage.equals("E+") || phasesPourAffichage.equals("EP")) {
                vac = 26;
            }
            if (phasesPourAffichage.equals("CE") || phasesPourAffichage.equals("CE+") || phasesPourAffichage.equals("CEP") || phasesPourAffichage.equals("CEP+")) {
                vac = 40;
            }
            if (phasesPourAffichage.equals("CDE") || phasesPourAffichage.equals("CDE+") || phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                vac = 70;
            }
            //nbjour = 6;//5
        }
        if ((typeSelected.equals("STT") || typeSelected.equals("STT PROF")) && niveauSelected.equals("BACC")) {//BP COM à vérifier
            if (phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("EP+")) {
                vac = 48;
            }
            if (phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                vac = 86;//normalement 100 comme au secrétariat. harmonisé au ESTI à 129000 sur instruction de DA ce 21/07/2023 en présence de BILE
            }
            //nbjour = 9;//5
        }
        if ((typeSelected.equals("STT") || typeSelected.equals("STT PROF")) && niveauSelected.equals("PROB")) {//BEP COM à vérifier
            if (phasesPourAffichage.equals("EP") || phasesPourAffichage.equals("EP+")) {
                vac = 44;
            }
            if (phasesPourAffichage.equals("CDEP") || phasesPourAffichage.equals("CDEP+")) {
                vac = 86;//96
            }
            //nbjour = 8;//5
        }

        if (!typeSelected.equals("GEN")) {
            vac -= 30;
        }

        coutvac = vac * 1500;

        if (qual.getTitre().equals("ANONYMISATEUR DE NOTES")) {
            primeconfid = 25000;
        } else {
            //nbjour += 5;
            primeconfid = 30000;
        }
        
        nbjour = 10;
        //on détermine le coût d'entretien
        entretien = nbjour * 500;

        //on détermine le coût du tranport
        transport = nbjour * 1000;

        //montant total
        montant = coutvac + primeconfid + entretien + transport;
    }

    private void remplirExamensTextArea() {
        typeSelected = (String) jComboBoxType.getSelectedItem();
        String examensSelectedEnchaine = "";
        if (typeSelected.equals("---")) {
            JOptionPane.showMessageDialog(this, "Le champ Type est vide !");
        } else {
            groupedexamens = metier.findAllGroupedexamensD1NiveauEtD1Type(niveauSelected, typeSelected);
            int i = 0;
            for (Groupedexamen g : groupedexamens) {
                if (i++ == 0) {
                    examensSelectedEnchaine += g.getExamen().getSigle();
                } else {
                    examensSelectedEnchaine += ", " + g.getExamen().getSigle();
                }
            }
            jTextArea1.setText(examensSelectedEnchaine);
            jTextArea1.setLineWrap(true);//renvoyer automatiquement le texte à la ligne dans le textArea
        }
    }

    public int max(int a, int b) {
        int tampon = a;
        if (b > a) {
            tampon = b;
        }
        return tampon;
    }
}
